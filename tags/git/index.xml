<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>そんなこと覚えてない </title>
    <link>https://blog.eiel.info/tags/git/</link>
    <language>en-us</language>
    <author>Tomohiko Himura</author>
    <rights>(C) 2018</rights>
    <updated>2014-09-04 14:57:00 &#43;0900 &#43;0900</updated>

    
      
        <item>
          <title>Git で現在チェックアウトしているコミットのID</title>
          <link>https://blog.eiel.info/blog/2014/09/04/git-revision/</link>
          <pubDate>Thu, 04 Sep 2014 14:57:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/09/04/git-revision/</guid>
          <description>

&lt;p&gt;稀に今チェックアウトしてるところのコミットIDを知りたいときがある。
ぐぐったら下記のページがあったけど、grep やら awk やらつかっててずるい気がした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tmtk.org/blog/2011/05/164&#34;&gt;gitリポジトリのリビジョン(コミットID)を取得するワンライナー | tomotaka-itoの日記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;git log |grep &#39;^commit&#39; |head -1|awk &#39;{print $2}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;git コマンドだけで完結できる気がするので help を読んだりした。&lt;/p&gt;

&lt;p&gt;以下に落ちついた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git show -s --format=%H
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;git log -n 1 --format=%H
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;関連:f016f6e6325e2e2ee0ad0ea357d50987&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/06/04/git-log-s/&#34;&gt;このコード書いた誰だよ! そんな時の git log -S でもしてみよう - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/05/28/cotains-commit-in-tags/&#34;&gt;Git で特定のコミットがどのタグに含まれているか確認する - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>コミットメッセージの先頭に絵文字いれるのが流行ってんだろうか</title>
          <link>https://blog.eiel.info/blog/2014/07/07/emoji-for-git-commit-message/</link>
          <pubDate>Mon, 07 Jul 2014 16:38:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/07/07/emoji-for-git-commit-message/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://atom.io&#34;&gt;Atom Editor&lt;/a&gt; の Contributringをみてみると、「コミットメッセージの先頭に関係ある絵文字をいれろ」的なことが書いてある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/docs/v0.108.0/contributing#git-commit-messages&#34;&gt;Git Commit Message - contributing - Atom&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;https://a248.e.akamai.net/assets.github.com/images/icons/emoji/lipstick.png&#34; alt=&#34;:lipstick:&#34; /&gt; &lt;code&gt;:lipstick:&lt;/code&gt; when improving the format/structure of the code&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://a248.e.akamai.net/assets.github.com/images/icons/emoji/racehorse.png&#34; alt=&#34;:racehorse:&#34; /&gt; &lt;code&gt;:racehorse:&lt;/code&gt; when improving performance&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://a248.e.akamai.net/assets.github.com/images/icons/emoji/non-potable_water.png&#34; alt=&#34;:non-potable_water:&#34; /&gt; &lt;code&gt;:non-potable_water:&lt;/code&gt; when plugging memory leaks&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://a248.e.akamai.net/assets.github.com/images/icons/emoji/memo.png&#34; alt=&#34;:memo:&#34; /&gt; &lt;code&gt;:memo:&lt;/code&gt; when writing docs&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://a248.e.akamai.net/assets.github.com/images/icons/emoji/penguin.png&#34; alt=&#34;:penguin:&#34; /&gt; &lt;code&gt;:penguin:&lt;/code&gt; when fixing something on Linux&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://a248.e.akamai.net/assets.github.com/images/icons/emoji/apple.png&#34; alt=&#34;:apple:&#34; /&gt; &lt;code&gt;:apple:&lt;/code&gt; when fixing something on Mac OS&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://a248.e.akamai.net/assets.github.com/images/icons/emoji/checkered_flag.png&#34; alt=&#34;:checkered_flag:&#34; /&gt; &lt;code&gt;:checkered_flag:&lt;/code&gt; when fixing something on Windows&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://a248.e.akamai.net/assets.github.com/images/icons/emoji/bug.png&#34; alt=&#34;:bug:&#34; /&gt; &lt;code&gt;:bug:&lt;/code&gt; when fixing a bug&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://a248.e.akamai.net/assets.github.com/images/icons/emoji/fire.png&#34; alt=&#34;:fire:&#34; /&gt; :&lt;code&gt;fire:&lt;/code&gt; when removing code or files&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://a248.e.akamai.net/assets.github.com/images/icons/emoji/green_heart.png&#34; alt=&#34;:green_heart:&#34; /&gt; &lt;code&gt;:green_heart:&lt;/code&gt; when fixing the CI build&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://a248.e.akamai.net/assets.github.com/images/icons/emoji/white_check_mark.png&#34; alt=&#34;:white_check_mark:&#34; /&gt; &lt;code&gt;:white_check_mark:&lt;/code&gt; when adding tests&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://a248.e.akamai.net/assets.github.com/images/icons/emoji/lock.png&#34; alt=&#34;:lock:&#34; /&gt; &lt;code&gt;:lock:&lt;/code&gt; when dealing with security&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;あまり絵文字を使うのは得意ではないけど、タグ的に使うのは他にどんなのがあるんだろうなぁ。&lt;/p&gt;

&lt;p&gt;一応適当に日本語にしとこう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:lipstick:&lt;/code&gt; コードの構造やフォーマットを変更した時&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:racehorse:&lt;/code&gt; パフォーマンスを改善した時&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:non-potable_water:&lt;/code&gt;メモリーリークの直した時&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:memo:&lt;/code&gt; ドキュメントを書いた時&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:penguin:&lt;/code&gt; Linux に関連する修正をした時&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:apple:&lt;/code&gt; Mac に関連する修正をした時&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:checkered_flag:&lt;/code&gt; Windows に関連する修正をした時&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:bug:&lt;/code&gt; バグを修正した時&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:fire:&lt;/code&gt; ファイルやコードを削除した時&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:green_heart:&lt;/code&gt; CIビルドの修正をした時&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:white_check_mark:&lt;/code&gt; テストを追加した時&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:lock:&lt;/code&gt; セキュリティを扱う時&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;いっそ &lt;code&gt;:linux:&lt;/code&gt; とか &lt;code&gt;:mac:&lt;/code&gt; とかの絵文字があるほうがいい感もしなくもないけど、どーなんですかね。&lt;/p&gt;

&lt;h3 id=&#34;参考:5fcd81bd6e7411f5a3617f31bdae1a31&#34;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/docs/v0.108.0/contributing#git-commit-messages&#34;&gt;Git Commit Message - contributing - Atom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.emoji-cheat-sheet.com/&#34;&gt;Emoji Cheet Sheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Git で特定のコミットがどのタグに含まれているか確認する</title>
          <link>https://blog.eiel.info/blog/2014/05/28/cotains-commit-in-tags/</link>
          <pubDate>Wed, 28 May 2014 17:11:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/05/28/cotains-commit-in-tags/</guid>
          <description>&lt;p&gt;バグなどをみつけて原因のコミットをみつけたけど、バグというか自分が依存してるライブラリが古いせいだったりして、いつからじゃないと使えないですよーって伝えたい時に、どのタグに含まれてるコミットなのか調べたかった。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git tag&lt;/code&gt; コマンドの &lt;code&gt;--contaions&lt;/code&gt; オプションが使える。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git tag -l --contains [コミットID]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;フィルターしたい場合は 引数にパターンが渡せる。 v4.0 系をみたいとかであれば&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git tag -l --contians [コミットID] `v4.0.*`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;みたいな感じ。&lt;/p&gt;

&lt;p&gt;クオートしないとシェルに食われる。
パイプで grep してもいいけどね。&lt;/p&gt;

&lt;p&gt;ブランチにも同様のオプションがある。
&lt;code&gt;branch&lt;/code&gt; には似たようなものとして、ブランチにマージされてるかどうか調べる &lt;code&gt;--merged&lt;/code&gt; とか &lt;code&gt;--no-merged&lt;/code&gt; とかある。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Mac で使える git mergetool をいろいろ試してみる - Araxis</title>
          <link>https://blog.eiel.info/blog/2013/07/10/git-mergetool-araxis/</link>
          <pubDate>Wed, 10 Jul 2013 01:54:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/07/10/git-mergetool-araxis/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt; の続きです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.araxis.com/merge_mac/index.html&#34;&gt;Araxis Merge&lt;/a&gt; を紹介します。&lt;/p&gt;

&lt;p&gt;Cocoaアプリで表現も操作性も良いです。
だけど、値段を考えるとすこし残念な感じでした。&lt;/p&gt;

&lt;p&gt;値段は 120ドルと &lt;a href=&#34;https://blog.eiel.info/blog/2013/06/29/git-mergetool-kaleidoscope/&#34;&gt;Kaleidscope&lt;/a&gt;の2倍近い値段です。
ちょっと高い。&lt;/p&gt;

&lt;p&gt;マージモードなのに3カラムではなく、2カラムでどのようにマージされるのかわかりにくかったり、キーボードショートカット が fn + ↓ とかになっていて効かなかったりと、そのあたりが残念でした。&lt;/p&gt;

&lt;p&gt;設定方法ですが、git にあらかじめ設定がもりこまれているため、インストールして、環境変数PATHを設定してやれば利用できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export PATH=/Applications/Araxis\ Merge.app/Contents/Utilities:$PATH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここもまた残念で、compare というコマンドで起動するようですが、 他にもcompareというコマンドがあると、これより先にコマンドがみつかるように PATH を設定する必要があります。&lt;/p&gt;

&lt;p&gt;公式の設定だと &lt;code&gt;PATH=$PATH:/Applications/Araxis\ Merge.app/Contents/Utilities&lt;/code&gt;とかかれていてハマりました。&lt;/p&gt;

&lt;p&gt;あとは&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git mergetool -t araxis
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と、実行すると起動することができます。&lt;/p&gt;

&lt;p&gt;常に Araxis を利用したい場合は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global merge.tool araxis
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としておくと &lt;code&gt;-t  araxis&lt;/code&gt; を省略できます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/araxis.png&#34; alt=&#34;araxis の画面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;画面左が現在のファイル内容で、画面右がマージしようとするブランチのファイルの内容になります。保存して画面を閉じれば左側の内容に決定したことになります。
左側がデフォルトで選択されていて、右側を採用したい場合は選んでいくという使い方になります。&lt;/p&gt;

&lt;p&gt;TimeMachine との連携などもでき多機能で優秀なのですが、&lt;code&gt;git mergetool&lt;/code&gt;として使うにはちょっと悩む感じでした。
有料だけあって、無料ツールよりはずっと使いやすいです。&lt;/p&gt;

&lt;h1 id=&#34;関連:1c998e69ffcc0a3e9f14d9053baa18d3&#34;&gt;関連&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Mac で使える git mergetool をいろいろ試してみる - xxdiff</title>
          <link>https://blog.eiel.info/blog/2013/07/03/git-mergetool-xxdiff/</link>
          <pubDate>Wed, 03 Jul 2013 21:27:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/07/03/git-mergetool-xxdiff/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt; の続きです。&lt;/p&gt;

&lt;p&gt;つづいて &lt;a href=&#34;http://furius.ca/xxdiff/&#34;&gt;xxdiff&lt;/a&gt; を紹介したいと思います。&lt;/p&gt;

&lt;p&gt;Ot で実装されているっぽいです。
マージ結果が常に表示されないため扱いにくいです。
また、Retina に対応していないみたいで、文字が読めませんでした。
あと、日本語が文字化けしました。&lt;/p&gt;

&lt;p&gt;設定は不要で、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git mergetool -t xxdiff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすると起動できます。&lt;/p&gt;

&lt;p&gt;また、常に xxdiff を利用したい場合は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global merge.tool xxdiff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としておけばよいです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/xxdiff.png&#34; alt=&#34;xxdiffの画面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;画面左に現在のブランチのファイル、画面右にマージするブランチのファイルの内容が表示されます。&lt;/p&gt;

&lt;p&gt;キーボードショーットカットは充実しているようですが、マージ結果をみる方法がわかりませんでした。&lt;/p&gt;

&lt;p&gt;日本語はでないし、マージ結果の出し方がわからないということで利用は難しそうでした。&lt;/p&gt;

&lt;h1 id=&#34;関連:1d171718914462b98b256fe2eaffa740&#34;&gt;関連&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Mac で使える git mergetool をいろいろ試してみる - tkdiff</title>
          <link>https://blog.eiel.info/blog/2013/07/03/git-mergetool-tkdiff/</link>
          <pubDate>Wed, 03 Jul 2013 21:07:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/07/03/git-mergetool-tkdiff/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt; の続きです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tkdiff.sourceforge.net/&#34;&gt;tkdiff&lt;/a&gt; を紹介します。
名前のとおりツールキットは tk なのでマルチプラットフォームのアプリケーションです。&lt;/p&gt;

&lt;p&gt;マージ結果が同時に表示されないので非常に使いにくいです。
最近は Mac で tk のアプリケーションの起動速度が早くなってるのに少し残念です。
ツールキットの都合、表示も他に比べると綺麗ではありません。&lt;/p&gt;

&lt;p&gt;設定は不要で、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git mergetool -t tkdiff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすると起動できます。&lt;/p&gt;

&lt;p&gt;また、常に tkdiff を利用したい場合は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global merge.tool tkdiff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としておけばよいです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/tkdiff.png&#34; alt=&#34;tkdiff の画面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;画面左に現在のブランチのファイル、画面右にマージするブランチのファイルの内容が表示されます。&lt;/p&gt;

&lt;p&gt;マージされる内容を表示するには、画面上部の緑の部分をクリックするとみることができます。
左や右やじるしをクリックすることで、変更を選択できます。&lt;/p&gt;

&lt;p&gt;ツールキットの都合、使いにくいです。常用には耐えそうにありまんでした。&lt;/p&gt;

&lt;h1 id=&#34;関連:3f03899ba88bb9c2a531c74a68b1b3db&#34;&gt;関連&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Mac で使える git mergetool をいろいろ試してみる - Vimdiff2</title>
          <link>https://blog.eiel.info/blog/2013/07/03/git-mergetool-vimdiff2/</link>
          <pubDate>Wed, 03 Jul 2013 20:08:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/07/03/git-mergetool-vimdiff2/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt; の続きです。&lt;/p&gt;

&lt;p&gt;Vimdiff2を紹介してみます。
emacs使いですが、
vimさえ入っていれば、設定不要で、「気軽に使えるかなぁ。」という目論見です。
vimdiff2 とかいてみましたか、vim の起動方法が違うだけのような感じでした。
よくわかりません。
vimdiff でも起動できます。&lt;/p&gt;

&lt;p&gt;設定は不要で、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git mergetool -t vimdiff2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすると起動できます。&lt;/p&gt;

&lt;p&gt;また、常に vimdiff2 を利用したい場合は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global --global merge.tool vimdiff2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としておけばよいです。&lt;/p&gt;

&lt;p&gt;ヘルプを見るには vim を起動した状態で&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;
:h vimdiff
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;で help が出せました。
&lt;a href=&#34;http://twitter.com/pecosantoyobe&#34;&gt;pecosantoyobe&lt;/a&gt;に教えてもらいました。
ありがとうございます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/vimdiff2.png&#34; alt=&#34;vimdiff の画面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;画面左が現在のブランチのファイルの内容で、画面右がマージするブランチのファイル内容です。
中央にはコンフリクトしたファイルの内容がでており、修正することができます。&lt;/p&gt;

&lt;p&gt;次のコンフリクト場所に移動するには &lt;code&gt;]c&lt;/code&gt; で移動することができます。
前のコンフリクト場所に移動するには &lt;code&gt;[c&lt;/code&gt; で移動することができます。&lt;/p&gt;

&lt;p&gt;コンフリクト場所に移動して、&lt;code&gt;:diffget L&lt;/code&gt; と入力すると 左の内容を取り込むことができ、&lt;code&gt;:diffget R&lt;/code&gt; と入力すると右の内容を取り込むことができます。&lt;/p&gt;

&lt;p&gt;移動も含めてショートカットを用意すると、とても便利そうです。&lt;/p&gt;

&lt;p&gt;終了の仕方がよくわかりませんでした。
&lt;code&gt;ZZZZZZ&lt;/code&gt; として終了しました。
もっとよい方法があるような気がします。&lt;/p&gt;

&lt;p&gt;終了すると次のファイルが自動的に開きました。
とても便利でした。&lt;/p&gt;

&lt;p&gt;なんとなく emacs に渡せないときに使いたいと思います。&lt;/p&gt;

&lt;h1 id=&#34;関連:770eec7d0b144f9190270d0a703e4a58&#34;&gt;関連&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Mac で使える git mergetool をいろいろ試してみる - DeltaWalker</title>
          <link>https://blog.eiel.info/blog/2013/07/03/git-mergetool-deltawalker/</link>
          <pubDate>Wed, 03 Jul 2013 19:16:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/07/03/git-mergetool-deltawalker/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt; の続きです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.deltopia.com/&#34;&gt;DeltaWalker&lt;/a&gt; を紹介します。&lt;/p&gt;

&lt;p&gt;DeltaWalker 49ドル の有料アプリケーションで、見た感じ Eclipse と同じツールキットのようで、マルチプラットフォームを実現しているようです。
しかし、購入する際はOSを指定するので、OSごとにライセンスがいるのでしょうか。試用ができるので試してみました。&lt;/p&gt;

&lt;p&gt;有料ツールの中では値段が安く、日本語を使用していても問題はおきてないです。&lt;/p&gt;

&lt;p&gt;設定するには &lt;code&gt;/Applications&lt;/code&gt; にインストールした場合は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;git config --global --add mergetool.dw.cmd &#39;&amp;quot;/Applications/DeltaWalker.app/Contents/MacOS/git-merge&amp;quot; &amp;quot;$LOCAL&amp;quot; &amp;quot;$REMOTE&amp;quot; &amp;quot;$BASE&amp;quot; &amp;quot;$MERGED&amp;quot;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で設定できます。&lt;/p&gt;

&lt;p&gt;起動するには&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git mergetool -t dw
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とするとできます。&lt;/p&gt;

&lt;p&gt;デフォルトで起動するツールに設定したい場合は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global merge.tool dw
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、設定することができます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/deltawalker.png&#34; alt=&#34;deltawalker の画面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;画面左にもとのブランチのファイル、画面右にマージするブランチのファイルが表示されます。中央にマージ結果が表示されています。&lt;/p&gt;

&lt;p&gt;マージ方式は emacs の ediffと同じように、先にベースしたいほうを選びます。&lt;/p&gt;

&lt;p&gt;そうすると細かいコンフリクト箇所が表示されるので、どちらを選択するか選ぶことができます
。
左を選ぶか、右を選ぶかを選択するための状態にもっていくのが少し扱いづらかったです。
なぜだかわからないですが、左しか選べない状態になったりしました。マウスクリックですることで直りました。&lt;/p&gt;

&lt;p&gt;コンフリクトの修正後は、ウィンドウ閉じれば次へ勧みます。
他にコンフリクトするファイルがあれば続けて表示されます。&lt;/p&gt;

&lt;p&gt;修正が終了するとコンフリクトしたときのファイルは &lt;code&gt;.orig&lt;/code&gt; が末尾について保存されます。&lt;/p&gt;

&lt;p&gt;気になる点は Java で実行するため、起動が少し遅いです。&lt;/p&gt;

&lt;h1 id=&#34;関連:e2222856aecf02415ae2282b2b3ed87f&#34;&gt;関連&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Mac で使える git mergetool をいろいろ試してみる - kaleidoscope</title>
          <link>https://blog.eiel.info/blog/2013/06/29/git-mergetool-kaleidoscope/</link>
          <pubDate>Sat, 29 Jun 2013 22:58:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/06/29/git-mergetool-kaleidoscope/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt; の続きです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.kaleidoscopeapp.com/&#34;&gt;Kaleidoscope&lt;/a&gt; を紹介します。&lt;/p&gt;

&lt;p&gt;Cocoaアプリということで、万人にに勧めたいという理由で一番注目しております。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://click.linksynergy.com/fs-bin/click?id=TMdpJ425IWk&amp;subid=&amp;offerid=94348.1&amp;type=10&amp;tmpid=3910&amp;RD_PARM1=https%3A%2F%2Fitunes.apple.com%2Fjp%2Fapp%2Fkaleidoscope%2Fid587512244%3Fmt%3D12%2526uo%3D4&#34;&gt;Mac App Store で開く&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;有料アプリで金額は App Store では 6100円 です。&lt;/p&gt;

&lt;p&gt;画面は圧倒的に綺麗でMacとの親和性が非常に高いです。
画像の差分も見れたりするので difftool としても気になります。&lt;/p&gt;

&lt;p&gt;&lt;del&gt;ただし、私の環境のせいなのか、トライアルバージョンで試しているのかわかりませんが&lt;code&gt;git mergetool&lt;/code&gt; から上手く扱えない。
製品版なら上手いこといくのか確認したいのです。&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;追記: 2013-07-10&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;tmux 上で実行していたら発生することがわかりました。
値段的にも、インターフェイス的にも一番デザイナーさんに勧められるツールです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;追記終了&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;設定はとても簡単です。
ダウンロードして、起動後に メニューから integration&amp;hellip; を選択して設定します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/kaleidoscope-config1.png&#34; alt=&#34;Kaleidscope 設定1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/kaleidoscope-config2.png&#34; alt=&#34;Kaleidscope 設定2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;install と configure をクリックすれば完了です。&lt;/p&gt;

&lt;p&gt;ここからが問題なのですが、&lt;code&gt;git mergetool&lt;/code&gt; で起動しても画面が出ません。
起動はするのですが、起動していた状態でないと画面がでませんでした。&lt;/p&gt;

&lt;p&gt;起動をすれば下記のような画面が出ます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/kaleidoscope.png&#34; alt=&#34;Kaleidoscope&#34; /&gt;&lt;/p&gt;

&lt;p&gt;画面も3種類あり自由に切り替えたりすることができます。&lt;/p&gt;

&lt;p&gt;左側がマージ前のファイルのもので、中央がマージ結果で、右がマージに指定したブランチのファイルの内容になります。&lt;/p&gt;

&lt;p&gt;下部の右下のボタンで 競合場所を移動でき、下部中央のボタンでどちらを採用するか選択できます。&lt;/p&gt;

&lt;p&gt;これらはキーボードショートカットで、コマンド + ↓、コマンド + ↑、で、コンフリクト箇所を移動することができ、コマンド + ←、コマンド→ でどちらを採用するか選択できます。
カーソルキーを普段使う人であれば使いやすいと思います。&lt;/p&gt;

&lt;p&gt;&lt;del&gt;修正を終了するには終了すれば、プロンプトが書いてきますが、失敗しているような挙動をしていてちょっと困っております。トライアルだからなるのか、バグなのか。
タブになっているのでコンフリクトしているファイルをまとめて開いて欲しいところです。&lt;del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;使い勝手はよさそうなので、購入してみて、バグレポートするか悩んでいるところです。
一番期待できるだけにちょっと残念です。&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;追記。直せたので再度試しました。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;コンフリクト修正後は保存して、ウィンドウを閉じれば次に進めます。&lt;/p&gt;

&lt;p&gt;見た目、操作性を考えると、さすが有料アプリといったクオリティだと思いました。周りに薦めていけるツールでした。&lt;/p&gt;

&lt;h1 id=&#34;関連:d1278cc32e05e08c83f993aa4a0aca71&#34;&gt;関連&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Mac で使える git mergetool をいろいろ試してみる - ediff</title>
          <link>https://blog.eiel.info/blog/2013/06/29/git-mergetool-ediff/</link>
          <pubDate>Sat, 29 Jun 2013 19:27:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/06/29/git-mergetool-ediff/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt; の続きです。&lt;/p&gt;

&lt;p&gt;ediff は &lt;a href=&#34;http://www.gnu.org/software/emacs/&#34;&gt;Emacs&lt;/a&gt; に添付されているマージツールです。
いつから添付されているのか調べてないですが最近のEmacsであれば標準で使えるはずです。&lt;/p&gt;

&lt;p&gt;個人的には一番使いやすいと感じています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git mergetool&lt;/code&gt; から ediff を起動するのはややめんどくさいです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/magit/magit&#34;&gt;magit&lt;/a&gt;を使用していれば、コンフリクトしているファイルにカーソルを合わせて &lt;code&gt;e&lt;/code&gt; を押すと起動できます。こちらのほうは設定いらずで楽ちんでした。&lt;/p&gt;

&lt;p&gt;どうしても &lt;code&gt;git mergetool&lt;/code&gt; から使いたい場合は &lt;a href=&#34;http://d.akinori.org/2012/07/23/git-mergetool%E3%81%A7emacs%E3%81%AEediff-merge-files-with-ancestor%E3%82%92%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%99/&#34;&gt;git mergetoolでEmacsのediff-merge-files-with-ancestorを呼び出す - 工夫と趣向と分別と。&lt;/a&gt; を参考にするとできました。&lt;/p&gt;

&lt;p&gt;具体的には上記の記事で紹介されてる &lt;a href=&#34;https://github.com/knu/emacsc&#34;&gt;emacsc&lt;/a&gt; をclone してきて設定しました。
個人的な使い方の問題で emacsclient への引数を付加したかったので少しいじりました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/ediff.png&#34; alt=&#34;ediff の画面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ediff を起動するとこのような画面になります。
配色設定を細かくやってないのでみづらいのは気にしないでください。&lt;/p&gt;

&lt;p&gt;左が現在のブランチのファイルで、右がマージしようとするブランチのファイルになります。
下部がマージ結果になります。下部は直接編集することもできます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;a&lt;/code&gt; を入力すると 左側を選択できて、 &lt;code&gt;b&lt;/code&gt; を入力すると右側を選択できて、下部に反映されます。&lt;/p&gt;

&lt;p&gt;差分は2行あるのに、まとまってしまって不便に感じますが、どちらをベースするかという選択だと考えると良いことがわかりました。
その後 &lt;code&gt;!&lt;/code&gt; を入力すると細かく差分が表示され &lt;code&gt;n&lt;/code&gt; や &lt;code&gt;p&lt;/code&gt; で競合箇所を移動して &lt;code&gt;a&lt;/code&gt; や &lt;code&gt;b&lt;/code&gt; で選ぶことができます。&lt;/p&gt;

&lt;p&gt;編集が終了したら &lt;code&gt;q&lt;/code&gt; で終了できます。 magit から起動した場合は ステージングされないので注意してください。
再度 &lt;code&gt;e&lt;/code&gt; を入力するとやりなおすこともできます。&lt;/p&gt;

&lt;p&gt;emacs 上で動くとカスタマイズが気軽にできるところも嬉しいし、なによりキーボードで操作しやすいです。
あえて問題を上げるなら ediff の設定がしてある配色を使わないと見にくいのと、emacs ユーザでない場合は覚えることが多すぎるということでしょう。&lt;/p&gt;

&lt;h1 id=&#34;関連:7a9f455065511ac41f1329f68dde90ab&#34;&gt;関連&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Mac で使える git mergetool をいろいろ試してみる - p4merge</title>
          <link>https://blog.eiel.info/blog/2013/06/29/git-mergetool-p4merge/</link>
          <pubDate>Sat, 29 Jun 2013 18:58:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/06/29/git-mergetool-p4merge/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt; の続きです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.perforce.com/product/components/perforce-visual-merge-and-diff-tools&#34;&gt;p4Merge&lt;/a&gt; を紹介します。&lt;/p&gt;

&lt;p&gt;先に問題点などを書いておくと、日本語が利用されていると表示がずれてしまいます。
Qt が利用されているので Cocoa アプリに比べると動きは悪いですが、インターフェイスは使いやすいです。&lt;/p&gt;

&lt;p&gt;インストールには、サイト下部の Download now をクリック後にOSなどを選択してダウンロードします。
ダウンロード後は&lt;code&gt;/Application&lt;/code&gt; に配置します。&lt;/p&gt;

&lt;p&gt;設定は以下のコマンドでできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global mergetool.p4merge.path /Applications/p4merge.app/Contents/MacOS/p4merge
git config --global mergetool.p4merge.keepTemporaries false
git config --global mergetool.p4merge.trustExitCode false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとはコンフリクトした際に&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git mergetool -t p4merge
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と入力すると利用できます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git mergetool&lt;/code&gt; だけで起動できるようにしたい場合は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global merge.tool p4merge
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としておくとよいです。&lt;/p&gt;

&lt;p&gt;起動すると下記のような画面です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/p4merge.png&#34; alt=&#34;p4merge画面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;画面中部に 左から&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;マージしたいブランチのファイルの内容&lt;/li&gt;
&lt;li&gt;枝わかれした時のファイルの内容&lt;/li&gt;
&lt;li&gt;現在のファイルの内容&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;になってます。他とは左右が逆なので注意が必要です。&lt;/p&gt;

&lt;p&gt;画面下部にはマージ結果の情報が出ています。
下部の右側のボタンを押すことでどちらの変更を使うか選択できます。
両方を選ぶことはできませんでした。
また、選択後に編集することもでき、アンドゥもすることができます。&lt;/p&gt;

&lt;p&gt;ツールバー一番端で最初からやりなおすこともできて、良いと思いました。&lt;/p&gt;

&lt;p&gt;編集後は p4merge を終了することで、次のファイルへ移行として同じ作業を繰返します。&lt;/p&gt;

&lt;p&gt;マージする前のファイルが .ファイル名に &lt;code&gt;.orig&lt;/code&gt; という文字が付加されて残っています。&lt;/p&gt;

&lt;p&gt;日本語を使うと表示がずれてしまうので、日本語さえさえ使わなければ使いやすいツールでした。&lt;/p&gt;

&lt;h1 id=&#34;関連:4619e1504aeccce1e809c001d0b784b8&#34;&gt;関連&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Mac で使える git mergetool をいろいろ試してみる - OpenDiff</title>
          <link>https://blog.eiel.info/blog/2013/06/26/git-mergetool-opendiff/</link>
          <pubDate>Wed, 26 Jun 2013 21:10:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/06/26/git-mergetool-opendiff/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt; の続きです。&lt;/p&gt;

&lt;p&gt;Xcode に標準添付されていた opendiff を紹介します。
&lt;a href=&#34;http://www.sourcetreeapp.com/&#34;&gt;Source Tree&lt;/a&gt; にもついてきていましたが、挙動が微妙に違いました。&lt;/p&gt;

&lt;p&gt;設定は不要で&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git mergetool -t opendiff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と入力すると利用できます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git mergetool&lt;/code&gt; だけで起動できるようにしたい場合は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global merge.tool opendiff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としておくとよいです。&lt;/p&gt;

&lt;p&gt;日本語がまざっていると、  &lt;code&gt;file are not ascii&lt;/code&gt; と メッセージ がでますが、 proceed anyway をクリックすると問題なく動きます。&lt;/p&gt;

&lt;p&gt;opendiff で起動しますが FileMerge というアプリケーションのようです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/opendiff.png&#34; alt=&#34;OpenDiff の画面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;左側に checkout しているブランチのファイル、
右側に merge しようとするブランチのファイルが表示されます。
下側に マージ結果が表示されます。&lt;/p&gt;

&lt;p&gt;デフォルトで 右側のものが選択されていました。&lt;/p&gt;

&lt;p&gt;競合箇所をクリックして、画面右下の actions から選択することで、どちらの変更を使うか、両方を使うかなどが選べます。&lt;/p&gt;

&lt;p&gt;競合箇所は真ん中の矢印がでている部分ではないと機能しないようでした。&lt;/p&gt;

&lt;p&gt;キーボードで移動したい場合は &lt;code&gt;command + d&lt;/code&gt; で次へ進み、 &lt;code&gt;command + shift + d&lt;/code&gt; で前へ戻ります。&lt;/p&gt;

&lt;p&gt;下部の部分は 編集可能で、修正を加えることもできます。&lt;/p&gt;

&lt;p&gt;修正が修正したら、閉じてコマンラインに&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Was the merge successful? [y/n]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と表示されているので、&lt;code&gt;y&lt;/code&gt; を入力して Enter です。なにか間違えた場合は、&lt;code&gt;n&lt;/code&gt;にすることでなかったことにできます。
他にも競合するファイルがあれば、次のファイルがでてきます。&lt;/p&gt;

&lt;p&gt;マージする前のファイルが .ファイル名に &lt;code&gt;.orig&lt;/code&gt; という文字が付加されて残っています。&lt;/p&gt;

&lt;p&gt;日本語が使えているので、設定するのが面倒であればこれでもいいかなと思いますが、Action の選択がめんどくさかったです。&lt;/p&gt;

&lt;h1 id=&#34;関連:20fe10435c754341b7e10155192d5928&#34;&gt;関連&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Mac で使える git mergetool をいろいろ試してみる - 準備編</title>
          <link>https://blog.eiel.info/blog/2013/06/26/git-mergetool/</link>
          <pubDate>Wed, 26 Jun 2013 19:08:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/06/26/git-mergetool/</guid>
          <description>

&lt;p&gt;この記事は &lt;a href=&#34;http://great-h.github.io/events/event-006.html&#34;&gt;すごい広島 #6&lt;/a&gt; での活動の一部です。&lt;/p&gt;

&lt;p&gt;Git で branch をマージしたときにコンフリクトが起きると、これを解消する必要があります。テキストエディタでがんばるのはつらいこともありますよね。&lt;/p&gt;

&lt;p&gt;そんなとき、マージするためのツールを使いたい場合もあります。
Git に &lt;code&gt;git mergetool&lt;/code&gt; というコマンドがあって、設定しておいたツールを起動することができます。
同様に 差分を見るのにGUIツールを使いたい場合などには &lt;code&gt;git difftool&lt;/code&gt;というコマンドもあります。&lt;/p&gt;

&lt;p&gt;基本的には Mac で使えるものを紹介しますが、マルチプラットフォームのもあるので、別の環境でも使えるものもあります。&lt;/p&gt;

&lt;h2 id=&#34;試したツール:865a5e8734814e82ece91a6cda95f1f8&#34;&gt;試したツール&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool-opendiff/&#34;&gt;opendiff - 無料 Xcode に添付されている&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/29/git-mergetool-p4merge/&#34;&gt;p4merge - 無料 Qt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/29/git-mergetool-ediff/&#34;&gt;ediff(emacs) - 無料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/29/git-mergetool-kaleidoscope/&#34;&gt;Kaleidoscope - 有料 - Cocoa アプリ (Mac Only)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/07/03/git-mergetool-deltawalker/&#34;&gt;deltawalker - 有料 マルチプラットフォーム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/07/03/git-mergetool-vimdiff2/&#34;&gt;vimdiff2(vim) - 無料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/07/03/git-mergetool-tkdiff/&#34;&gt;tkdiff - 無料 マルチプラットフォーム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/07/03/git-mergetool-xxdiff/&#34;&gt;xxdiff - 無料 マルチプラットフォーム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/07/10/git-mergetool-araxis/&#34;&gt;Araxis Merge - 有料 (Winあり)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;いろいろ試すために用意したもの:865a5e8734814e82ece91a6cda95f1f8&#34;&gt;いろいろ試すために用意したもの&lt;/h1&gt;

&lt;p&gt;いろいろ試すのになるべく楽をしたいので以下のリポジトリを用意しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eiel/git-merge-sandbox&#34;&gt;Github eiel/git-merge-sandbox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このリポジトリを clone して &lt;code&gt;$ bin/restart&lt;/code&gt; を実行するとそのまま &lt;code&gt;$ git mergetool&lt;/code&gt; 実行できる状態で、すでにコンフリクトした状態になるようにしています。&lt;/p&gt;

&lt;p&gt;試すのに&lt;strong&gt;簡単にやりなおせる&lt;/strong&gt;様にするのは大事だな、と最近感じています。&lt;/p&gt;

&lt;p&gt;コンフリクトするファイルは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sample.txt&lt;/li&gt;
&lt;li&gt;sample2.txt&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;です。&lt;/p&gt;

&lt;p&gt;コンフリクトを解消する練習に利用してみてください。&lt;/p&gt;

&lt;h1 id=&#34;試すツールを探した方法:865a5e8734814e82ece91a6cda95f1f8&#34;&gt;試すツールを探した方法&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;$ git mergetool --tool-help&lt;/code&gt; の実行結果に使えるツールの一覧が出てくるので、片っ端に調べました。&lt;/p&gt;

&lt;p&gt;次に google さんに聞いて、いくつか探しました。&lt;/p&gt;

&lt;p&gt;以下のツールは環境作るがめんどくさいので試しませんでした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;meld&lt;/li&gt;
&lt;li&gt;gvimdiff2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;meld は GTK がいるので試してませんでした。&lt;/p&gt;

&lt;p&gt;gvimdiff2 は 実質 vimdiff2 と同じなので試しませんでした。&lt;/p&gt;

&lt;p&gt;各ツールの詳細に続く&lt;/p&gt;

&lt;h1 id=&#34;まとめ:865a5e8734814e82ece91a6cda95f1f8&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;一通り試した感想を。&lt;/p&gt;

&lt;p&gt;Emacs や Vim を使いなれているのであれば、 ediff,vimdiff2 が第一候補になるでしょう。&lt;/p&gt;

&lt;p&gt;お金があるなら Kaleidscope が表示が綺麗でよさそうです。
デザイナーさんに薦めるならこれが一番だと思います。&lt;/p&gt;

&lt;p&gt;フリーのGUIツールでは p4merge がよさそうでした。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Gitリポジトリを直接動かして変更を検知 - QA@ITで遊んでる</title>
          <link>https://blog.eiel.info/blog/2013/06/05/git-dir/</link>
          <pubDate>Wed, 05 Jun 2013 13:26:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/06/05/git-dir/</guid>
          <description>

&lt;p&gt;朝早く起きることができたら、&lt;a href=&#34;http://qa.atmarkit.co.jp/&#34;&gt;QA@IT&lt;/a&gt;で、遊んでいます。
ざっと未解決の質問を見て、すぐわかりそうなものを試して解答をします。&lt;/p&gt;

&lt;p&gt;今日は 「&lt;a href=&#34;http://qa.atmarkit.co.jp/q/2970&#34;&gt;rails new project -d postgresql を指定した時に変更される部位&lt;/a&gt;」というのがあって、「試せばいいやーん」と思ったので、すぐに手を動かしてみました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rails new project&lt;/code&gt; と &lt;code&gt;rails new project -d postgresql&lt;/code&gt;  の違いについて。&lt;/p&gt;

&lt;p&gt;だいたい以下の操作をすれば違いはわかります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails new project
mv project project_sqlite3

rails new project -d postgresql
diff -ru project_sqlite3 project
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすれば違いは簡単にわかります。&lt;/p&gt;

&lt;p&gt;new の引数は同じ名前にしないと、余計な差分ができてしまうので、作成した後に リネームしています。&lt;/p&gt;

&lt;h3 id=&#34;折角なので-git-を絡めてみた:56381a3c645c8ceabcba188a961cd2ae&#34;&gt;折角なので Git を絡めてみた&lt;/h3&gt;

&lt;p&gt;Git のリポジトリって直接移動してもそのまま使えるんだぜ!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails new project
mv project project_sqlite3

cd project_sqlite3
git init
git add .
git commit -m &#39;initial&#39;
cd ..

rails new project -d postgresql

mv project_sqlite3/.git project
cd project
git diff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という、感じの解答をしてみました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.git&lt;/code&gt; を移動をしてるのが味噌です。&lt;/p&gt;

&lt;p&gt;リポジトリに対する物理的なワークツリーが変わっても簡単に認識してくれます。
このようにGitの理解が深まってくると応用力がついてきて、「subversion より Git 楽しいなぁ」と、個人的にはなります。&lt;/p&gt;

&lt;h3 id=&#34;別解:56381a3c645c8ceabcba188a961cd2ae&#34;&gt;別解&lt;/h3&gt;

&lt;p&gt;git には リポジトリを指定するオプション &lt;code&gt;--git-dir&lt;/code&gt; があります。
なので以下のような方法もあります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails new project
mv project project_sqlite3

cd project_sqlite3
git init
git add .
git commit -m &#39;initial&#39;
cd ..

rails new project -d postgresql

cd project
git --git-dir=../project_sqlite3/.git diff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、ワークツリーを指定するオプション &lt;code&gt;--work--tree&lt;/code&gt;もあります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails new project
mv project project_sqlite3

cd project_sqlite3
git init
git add .
git commit -m &#39;initial&#39;
cd ..

rails new project -d postgresql

cd project_sqlite3
git --work-tree=../project diff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Git 楽しいですねー。&lt;/p&gt;

&lt;h2 id=&#34;戯言:56381a3c645c8ceabcba188a961cd2ae&#34;&gt;戯言&lt;/h2&gt;

&lt;p&gt;QA@ITのサイト内ランクが100位切りました。ユーザすくないですな…。&lt;/p&gt;

&lt;h2 id=&#34;関連:56381a3c645c8ceabcba188a961cd2ae&#34;&gt;関連&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/04/git-log-s/&#34;&gt;このコード書いた誰だよ! そんな時の Git Log -S でもしてみよう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2012/11/20/git-hooks-triger/&#34;&gt;Git Push 時に発生する Update Hookを起動するワンナイナー&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>このコード書いた誰だよ! そんな時の git log -S でもしてみよう</title>
          <link>https://blog.eiel.info/blog/2013/06/04/git-log-s/</link>
          <pubDate>Tue, 04 Jun 2013 20:30:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/06/04/git-log-s/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://local.aguuu.com/events/15354&#34;&gt;広島Git勉強会&lt;/a&gt; で &lt;a href=&#34;https://twitter.com/pecosantoyobe&#34;&gt;@pecosantoyobe&lt;/a&gt; が &lt;a href=&#34;https://github.com/furu/hiroshimadotgit&#34;&gt;git log の使えるオプションについて語る&lt;/a&gt;というナイスなセッションがありました。&lt;/p&gt;

&lt;p&gt;その中で &lt;code&gt;git log -S&lt;/code&gt; の紹介がありましたが、説明が難しそうなので、さらっと流れてしました。
折角なので実例を紹介します。&lt;/p&gt;

&lt;p&gt;複数人でプログラムを書いてると、&lt;strong&gt;「このコード書いたの誰だよwww」&lt;/strong&gt; 的なことが稀にあります。&lt;/p&gt;

&lt;p&gt;例えばこんなコードがあるとします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Sample
  def hoge
    hogehoge_gorogoro.to_sym.to_s
  end

  def hogehoge_gorogoro
    &amp;quot;hogehoge_gorogoro&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;「&lt;code&gt;hogehoge_gorogoro.to_sym.to_s&lt;/code&gt; ってなんだよ!! 意味あるのかよ!」&lt;/strong&gt; みたいなことがあると思います。&lt;/p&gt;

&lt;p&gt;そんな時はすかさず git blame を利用します。&lt;/p&gt;

&lt;p&gt;みやすさの都合上、emacs の magit-blame を利用します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/git-log-S-magit.png&#34; alt=&#34;magitt&#34; /&gt;&lt;/p&gt;

&lt;p&gt;e92db224 で変更されていることがわかります。&lt;/p&gt;

&lt;p&gt;ちょっとこの時のコミットを見てみましょう。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git show e92db224&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/git-log-S.png&#34; alt=&#34;git show e92db224&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;インデントの修正されているだけ&lt;/strong&gt;で、大した情報が得られません。
こんなときに &lt;code&gt;git log -S&lt;/code&gt; を使います。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git log -S &#39;hogehoge_gorogoro&#39; --patch&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;変更内容が見たいので、 &lt;code&gt;--patch&lt;/code&gt; をつけました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/git-log-S-log-S.png&#34; alt=&#34;git log -S&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「なんだよ。initial commit ではじめからそーなのかよ!!」&lt;/strong&gt; なんて展開でした。
ちょっと例が凝れてなくて便利さが伝わりにくいかもしれません。&lt;/p&gt;

&lt;p&gt;diff の内容から更に git log -S で追ってみたりできます。
もし良いコミットログがあれば、コードの意図がわかったり チケットID などが記載されていれば、そちらを参照することになります。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「なんだよ。書いたのオレじゃねーか!! orz」&lt;/strong&gt; なんてこともよくあります。が、気を落とさず綺麗なコードを書いていきたいですね。&lt;/p&gt;

&lt;p&gt;お試しあれ。&lt;/p&gt;

&lt;h3 id=&#34;関連:9aec39af9f1640535333d9d3c0ba1d47&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2012/05/30/magit-blame-mode/&#34;&gt;magit-brame-modeの表示がみやすかった件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>広島Git勉強会 - 番外編 Github Flow してみる</title>
          <link>https://blog.eiel.info/blog/2013/06/02/hiroshima-git-extend/</link>
          <pubDate>Sun, 02 Jun 2013 21:14:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/06/02/hiroshima-git-extend/</guid>
          <description>

&lt;p&gt;書きわすれたことがあった。
ひとつ前のエントリはそれはそれで完結してるので、追記せず、別にしてみる。
そういえば、ひとつ前のエントリーうっかり Ruby勉強会って書いてました。見なかったことにしてください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://local.aguuu.com/events/15354&#34;&gt;広島Git勉強会&lt;/a&gt; の終了後に懇親会の代わりに、別の教室で &lt;a href=&#34;https://gist.github.com/Gab-km/3705015&#34;&gt;Github Flow&lt;/a&gt;体験をしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/eiel/5689554&#34;&gt;やることの手順ははGistにかいてます&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://great-h.github.io/events/event-002-5.html&#34;&gt;そしてその成果物がこの辺です&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;もし、やってみたい方がいれば気軽に挑戦してみてください。&lt;a href=&#34;https://github.com/great-h/great-h.github.io/issues?milestone=3&amp;amp;state=open&#34;&gt;Issue&lt;/a&gt;にそれっぽいことを書いてもらえたら大丈夫です。
先に空のブログ記事をつくって pull request して、あとからブログに感想を書くなどでも大丈夫です。もっと面白いことが思いついたらそれでもOKです。&lt;/p&gt;

&lt;p&gt;やってみて思ったことですが、Git普段使ってない人であれば、これだけでも結構難しいようでした。
次回やるときはもっと準備しておこうと思います。&lt;/p&gt;

&lt;h2 id=&#34;関連リンク:2fc06b69357900c52e9e4a6fce20c316&#34;&gt;関連リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/06/02/hiroshima-git-extend/&#34;&gt;広島Git勉強会 - 番外編 Github Flow してみる
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/02/17/github-pages/&#34;&gt;Github Pages について整理しておきます&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/02/18/jekyll-on-github/&#34;&gt;Github で Jekyll を使う時に調べたこと&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/02/06/how-to-use-github/&#34;&gt;Git がわからなくても Github を利用しよう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/05/13/how-to-enjoy-github/&#34;&gt;Github の楽しみ方&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>広島Git勉強会 201306 - やりなおせるGit入門</title>
          <link>https://blog.eiel.info/blog/2013/06/02/hiroshima-git/</link>
          <pubDate>Sun, 02 Jun 2013 20:47:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/06/02/hiroshima-git/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://local.aguuu.com/events/15354&#34;&gt;広島Git勉強会&lt;/a&gt; に参加しました。&lt;/p&gt;

&lt;p&gt;1セッション喋りました。&lt;/p&gt;

&lt;p&gt;はじめから&lt;code&gt;git reset&lt;/code&gt; と &lt;code&gt;git checkout&lt;/code&gt;あたりを説明しようと思ってたのですが、「元に戻せること」を主眼においていろいろ考えました。
結果として、「危険」「少し危険」なコマンドを定義して、よくわからない時どうすればいいのか伝えられるか試みてみました。&lt;/p&gt;

&lt;p&gt;「危険」なコマンドはワークツリーにした変更が消えてしまう恐れがあるもの。&lt;/p&gt;

&lt;p&gt;「少し危険」なコマンドは&lt;code&gt;git reflog&lt;/code&gt;などを利用しないと追えなくなるコミットができてしまうもの。&lt;/p&gt;

&lt;p&gt;と定義して、そこを強調しながら説明してみました。&lt;/p&gt;

&lt;p&gt;スライドはこちらに。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;http://www.slideshare.net/slideshow/embed_code/22237343&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&#34; allowfullscreen webkitallowfullscreen mozallowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;http://www.slideshare.net/TomohikoHimura/git-22237343&#34; title=&#34;やりなおせる Git 入門&#34; target=&#34;_blank&#34;&gt;やりなおせる Git 入門&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/TomohikoHimura&#34; target=&#34;_blank&#34;&gt;Tomohiko Himura&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;結局、難しかったのか簡単だったのか、周りの空気を読む余裕が僕にはまだまだ足りなくて、「経験値を積まないといけないなぁ」と、思うのでした。&lt;/p&gt;

&lt;h2 id=&#34;追記-ブクマのコメントなどなどに返信:aba3a29cdc6be5a15e7d4c5e3be2c4b2&#34;&gt;追記 ブクマのコメントなどなどに返信&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;「git commit の -m はそろそろ卒業しましょう」というのはどういうことなのかな？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;-m&lt;/code&gt; って解説のために、そう書いてることが多いじゃないかと思う。スライド上でも &lt;code&gt;-m&lt;/code&gt;を利用していますが、こ の場合はコミットログをタイトルしか書かない場合が予想できる。なので、「概要も書きましょう。」という話をするために書いています。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;良いまとめ。だけど rm -rf .git ってそんなにカジュアルでいいのかなw&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;すごく危険な操作なので、カジュアルにやるのはよくないですが、初回のコミットまでなら。という感じで口頭では伝えております。スライドにも入れればよかった。&lt;/p&gt;

&lt;h2 id=&#34;関連リンク:aba3a29cdc6be5a15e7d4c5e3be2c4b2&#34;&gt;関連リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/06/02/hiroshima-git-extend/&#34;&gt;広島Git勉強会 - 番外編 Github Flow してみる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/02/23/okagit-20130223/&#34;&gt;岡山Git勉強会 - 20130223 - Git 仕組み入門 という話をしてきた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/02/06/how-to-use-github/&#34;&gt;Git がわからなくても Github を利用しよう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/05/13/how-to-enjoy-github/&#34;&gt;Github の楽しみ方&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>岡山Git勉強会 - 20130223 - Git 仕組み入門 という話をしてきた</title>
          <link>https://blog.eiel.info/blog/2013/02/23/okagit-20130223/</link>
          <pubDate>Sat, 23 Feb 2013 21:24:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/02/23/okagit-20130223/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://local.aguuu.com/events/11120&#34;&gt;岡山Git勉強会 20130223&lt;/a&gt; で &lt;code&gt;Git 仕組み 入門&lt;/code&gt;という話をしてきました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://togetter.com/li/460974&#34;&gt;トゥギャッター&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sekico.co/zaseki/95&#34;&gt;セキココ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;もっと簡単な内容にできるかな？っと思ってやってみたのですが、やっぱり難しめだったみたいです。
スライドだけでもある程度理解できるように細かめにつくってみました。
やりすぎた感が漂います。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;http://www.slideshare.net/slideshow/embed_code/16716062&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&#34; allowfullscreen webkitallowfullscreen mozallowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;http://www.slideshare.net/TomohikoHimura/git-16716062&#34; title=&#34;Git 仕組み 入門&#34; target=&#34;_blank&#34;&gt;Git 仕組み 入門&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/TomohikoHimura&#34; target=&#34;_blank&#34;&gt;Tomohiko Himura&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/okagit-object&#34;&gt;スライドをつくる際のメモなどもupしています。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この辺りの話を聞いたことがない方は手を動かしてみてはどうでしょうか。&lt;/p&gt;

&lt;h3 id=&#34;話し忘れたこと:43d1df66e254d4a4856c488e0588fa1e&#34;&gt;話し忘れたこと&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;日頃使うツールはしっかり理解したほうがいいと思う&lt;/li&gt;
&lt;li&gt;tree  オブジェクトに登場した mode は 666 とかよくパーミッションがどうこう言われるアレです。&lt;/li&gt;
&lt;li&gt;このあたりの仕組みが入門書に出てくるあたりも Git の魅力なだと思います。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;内容にあまり関係ないこと:43d1df66e254d4a4856c488e0588fa1e&#34;&gt;内容にあまり関係ないこと&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;keynote の機能をいろいろためした&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;もっとはやく勉強しておけばよかった。マスタースライドでスライドのテンプレートをつくっていじると、スライドのデザインをまとめていじれる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;背景色をうっすら変えてみた。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;お洒落感が出るのか試してみたかった。結果はよくわからない。
ディスプレイでみるとわかる違いはプロジェクターでわかるかどうか怪しい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;keynote で アウトラインからスライドを作ると効率よさげ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前述のマスタースライドの機能がわかっていれば、わりといけます。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:43d1df66e254d4a4856c488e0588fa1e&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;話をするのは苦手で、相変わらず、反省点の多いセッションですが、話を聞いていただいてありがとうございました。良い経験になりました。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Gitのソースコードでも読もうかな。準備編 - デバッガ</title>
          <link>https://blog.eiel.info/blog/2012/12/22/ready-to-read-source-git/</link>
          <pubDate>Sat, 22 Dec 2012 11:06:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/12/22/ready-to-read-source-git/</guid>
          <description>&lt;p&gt;ソースコードよみたいなー。よみたいなーってことで、環境を整えていきたいと思います。&lt;a href=&#34;http://hira-consulting.com/wiki/index.php?2005_6_23%A5%AB%A1%BC%A5%CD%A5%EB%BA%C2%C3%CC%B2%F1%AD%A1&#34;&gt;ひらメソッド&lt;/a&gt;にも挑戦したい。&lt;/p&gt;

&lt;p&gt;静的によむのも良いのですが、答え合わせができないと遠まわりです。デバッガを使って答え合わせできると効率がよいです。なので、ソースコードをDLして、動作確認するところまで試してみましょう。&lt;/p&gt;

&lt;p&gt;Gitのソースコードは &lt;a href=&#34;https://github.com/git/git&#34;&gt;https://github.com/git/git&lt;/a&gt; とかにあります。&lt;/p&gt;

&lt;p&gt;cloneしてみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone git://github.com/gitster/git.git
$ cd git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;別にどのバージョンにしてもいいのですが、自分が使っているバージョンでコードリーディングしていきたいと思います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git --version
git version 1.8.0.2
$ git checkout v1.8.0.2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで v1.8.0.2 のソースコードになっています。デバッグ情報をもった状態でビルドしてみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make -d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-d&lt;/code&gt; をつけることでOKです。&lt;/p&gt;

&lt;p&gt;しばらく待つとバイナリが生成されますので、&lt;code&gt;gdb&lt;/code&gt; をつかってみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ gdb git
(gdb)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで &lt;code&gt;gdb&lt;/code&gt; が起動できます。プロンプトに (gdb)と表示されます。
この状態で &lt;code&gt;r&lt;/code&gt; を入力すると実行ができます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(gdb) r
usage: git [--version] [--exec-path[=&amp;lt;path&amp;gt;]] [--html-path] [--man-path] [--info-path]
           [-p|--paginate|--no-pager] [--no-replace-objects] [--bare]
           [--git-dir=&amp;lt;path&amp;gt;] [--work-tree=&amp;lt;path&amp;gt;] [--namespace=&amp;lt;name&amp;gt;]
           [-c name=value] [--help]
           &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;]

The most commonly used git commands are:
   add        Add file contents to the index
   bisect     Find by binary search the change that introduced a bug
   branch     List, create, or delete branches
   checkout   Checkout a branch or paths to the working tree
   clone      Clone a repository into a new directory
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   fetch      Download objects and refs from another repository
   grep       Print lines matching a pattern
   init       Create an empty git repository or reinitialize an existing one
   log        Show commit logs
   merge      Join two or more development histories together
   mv         Move or rename a file, a directory, or a symlink
   pull       Fetch from and merge with another repository or a local branch
   push       Update remote refs along with associated objects
   rebase     Forward-port local commits to the updated upstream head
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index
   show       Show various types of objects
   status     Show the working tree status
   tag        Create, list, delete or verify a tag object signed with GPG

See &#39;git help &amp;lt;command&amp;gt;&#39; for more information on a specific command.

Program exited with code 01.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ブレークポイントを利用して停止させてみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(gdb) b main
(gdb) r
Breakpoint 1, main (argc=1, argv=0x7fff5fbff1a8) at git.c:535
535             startup_info = &amp;amp;git_startup_info;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;main 関数で止まるようにしてみました。
そのあと実行すると &lt;code&gt;git.c&lt;/code&gt; の 535行目で停止していることがわかります。&lt;/p&gt;

&lt;p&gt;一行づつ実行していくには &lt;code&gt;n&lt;/code&gt; を使います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(gdb) n
537             cmd = git_extract_argv0_path(argv[0]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ひたすら &lt;code&gt;n&lt;/code&gt; を入力していくとプログラムが1行づつ動作していくことがわかります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;p&lt;/code&gt; を使うと 変数の中身が見れます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(gdb) p argv[0]
$1 = 0x7fff5fbff390 &amp;quot;/Users/eiel/src/git/git&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とっても簡単ですね。上手いこと利用してソースコードを読んでいきましょう。&lt;/p&gt;

&lt;p&gt;終了するには &lt;code&gt;q&lt;/code&gt; を使います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(gdb) q
The program is running.  Exit anyway? (y or n) y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;gdbのもっと詳しい使い方はぐぐってみましょう。
&lt;code&gt;emacs&lt;/code&gt; などと連携して使うともっと便利になると思います。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>git push 時に発生する update hookを起動するワンナイナー</title>
          <link>https://blog.eiel.info/blog/2012/11/20/git-hooks-triger/</link>
          <pubDate>Tue, 20 Nov 2012 15:41:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/11/20/git-hooks-triger/</guid>
          <description>&lt;p&gt;git の hooks の update hook の動作確認するのに使ってたワンナイナー。
update というのは リモートリポジトリに push したときに リモートで起動するスクリプト。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git commit --amend --no-edit; git push --force
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;git commit --amend&lt;/code&gt; を使用してコミットの日付を変更しておけば新しい commit として認識してくれるので、&amp;ndash;force オプションで無理矢理 push してやる。
コミットが新しくなるので hook が起動してくれます。
&lt;code&gt;git push&lt;/code&gt; の部分は適宜好みに合わせて。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>gitx --all</title>
          <link>https://blog.eiel.info/blog/2012/06/13/gitx-all/</link>
          <pubDate>Wed, 13 Jun 2012 18:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/06/13/gitx-all/</guid>
          <description>

&lt;p&gt;skypeでgitの説明していたときに &lt;code&gt;gitxa&lt;/code&gt; って何？と問われた。単なる&lt;code&gt;gitx --all&lt;/code&gt; のエイリアスです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alias gitxa=&amp;quot;gitx -all&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;gitx:c32972e1436eedac8aff6c4ae59310c2&#34;&gt;Gitx&lt;/h1&gt;

&lt;p&gt;Mac用のgitクライアントツールに&lt;a href=&#34;http://gitx.frim.nl/&#34;&gt;Gitx&lt;/a&gt;というものがあるのですが、コミットの機能なども備えていますが、私は&lt;code&gt;gitk&lt;/code&gt;コマンドの代替として利用しています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://media.tumblr.com/tumblr_m5jh47eL8d1qk2e7q.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ただし、Gitxをインストールしただけでは &lt;code&gt;gitx&lt;/code&gt; コマンドは使用できません。Gitxのメニュー内のEnabble Terminal Usaeg&amp;hellip; をクリックすることで利用できるようになります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://media.tumblr.com/tumblr_m5jhgcOZxD1qk2e7q.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gitx&lt;/code&gt;を引数になにもなしで、呼びだした場合、checkout している branchを表示します。&lt;code&gt;--all&lt;/code&gt;を使用すると&lt;code&gt;all branches&lt;/code&gt;を選択した状態になります。
他にもときどき便利なのは &lt;code&gt;gitx ブランチ名&lt;/code&gt; や &lt;code&gt;gitx -- ファイル名&lt;/code&gt; などがあります。gitkを使う場合はさらにいろいろできます。詳細は &lt;code&gt;man gitk&lt;/code&gt; にて。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>magit-brame-modeの表示がみやすかった件</title>
          <link>https://blog.eiel.info/blog/2012/05/30/magit-blame-mode/</link>
          <pubDate>Wed, 30 May 2012 17:55:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/05/30/magit-blame-mode/</guid>
          <description>&lt;p&gt;共同作業ないし、自分が書いたコードでも&lt;strong&gt;ここ変更したのいつだっけ&lt;/strong&gt;ってことあると&lt;code&gt;git blame&lt;/code&gt;を利用するんですが、emacs の magit についてる magit-brame-mode がみやすくて感動しました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git blame&lt;/code&gt;がどのようなことをしてくれるのかは github でも特定のファイルを選択したときにもみることができます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://media.tumblr.com/tumblr_m4th98QljM1qk2e7q.jpg&#34; alt=&#34;github blame&#34; /&gt;&lt;/p&gt;

&lt;p&gt;押すとこんな感じ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://media.tumblr.com/tumblr_m4thgjx4eq1qk2e7q.jpg&#34; alt=&#34;github de blame&#34; /&gt;&lt;/p&gt;

&lt;p&gt;すっきりみやすい。&lt;/p&gt;

&lt;p&gt;端末で &lt;code&gt;$ git blame conf/50-ruby.el&lt;/code&gt; するとこんな感じ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://media.tumblr.com/tumblr_m4thlzshOW1qk2e7q.jpg&#34; alt=&#34;端末&#34; /&gt;&lt;/p&gt;

&lt;p&gt;文字ばっかり。&lt;/p&gt;

&lt;p&gt;git-emacsの &lt;code&gt;M-x git-blame-mode&lt;/code&gt; だとこんな感じ&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://media.tumblr.com/tumblr_m4throQoHf1qk2e7q.jpg&#34; alt=&#34;git-emacs&#34; /&gt;&lt;/p&gt;

&lt;p&gt;カラフル。細かい情報はミニバファにでます。そのまま編集できるのはナイスなのかもしれない。(重いですけど&lt;/p&gt;

&lt;p&gt;magitの &lt;code&gt;M-x magit-blame-mode&lt;/code&gt; だとこんな感じ&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://media.tumblr.com/tumblr_m4thwdwoK61qk2e7q.jpg&#34; alt=&#34;magit&#34; /&gt;&lt;/p&gt;

&lt;p&gt;あれ、なんかみやすさが伝わない…。
80列におさまるのは嬉しいですね。&lt;/p&gt;

&lt;p&gt;ゆっくりみる分には github が一番いんじゃないかということいわれてしまいそうです。&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
