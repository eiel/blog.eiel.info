<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>そんなこと覚えてない </title>
    <link>https://blog.eiel.info/tags/javascript/</link>
    <language>en-us</language>
    <author>Tomohiko Himura</author>
    <rights>(C) 2018</rights>
    <updated>2014-10-30 11:13:00 &#43;0900 &#43;0900</updated>

    
      
        <item>
          <title>nodejsのモジュールをブラウザで使えるようにするbrowserifyでちょっと遊んだ</title>
          <link>https://blog.eiel.info/blog/2014/10/30/browserify/</link>
          <pubDate>Thu, 30 Oct 2014 11:13:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/10/30/browserify/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://browserify.org/&#34;&gt;Browserify&lt;/a&gt;で少し遊んだ。&lt;/p&gt;

&lt;p&gt;npmにあるライブラリをクライアントサイドで使いたいなぁ、という時に便利な子がBrowserifyさんです。
HTML側に複数のscriptタグを書かなくてよくなり、&lt;code&gt;&amp;lt;script src=&amp;quot;bundle.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;のみ記述しておけば良いので管理が楽です。
(当然&lt;code&gt;bundle.js&lt;/code&gt;以外の名前にすることもできます)&lt;/p&gt;

&lt;p&gt;requirejsの代わりに使うこともできるし、gulpやらを組み合わせてminifyなどもできるでしょう。&lt;/p&gt;

&lt;h3 id=&#34;とりあえず試すには:564bac21602d3e06fe43c7d8c37025b3&#34;&gt;とりあえず試すには&lt;/h3&gt;

&lt;p&gt;QUERY_STRINGをクライアントサイドで処理するのを試した。
ライブラリには&lt;a href=&#34;https://www.npmjs.org/package/qs&#34;&gt;qs&lt;/a&gt;を利用。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;nodejsをインストール&lt;/li&gt;
&lt;li&gt;npm install -g browserify&lt;/li&gt;
&lt;li&gt;npm install qs&lt;/li&gt;
&lt;li&gt;qsを使うコードをかく&lt;/li&gt;
&lt;li&gt;browserfyを実行&lt;/li&gt;
&lt;li&gt;生成されたjsを使う&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;nodejsのインストールは省略。&lt;/p&gt;

&lt;p&gt;browserifyコマンドを利用するために&lt;code&gt;npm intsall -g browseriy&lt;/code&gt;する。&lt;/p&gt;

&lt;p&gt;今回はqsを使うので&lt;code&gt;npm install qs&lt;/code&gt; をする。&lt;/p&gt;

&lt;p&gt;以下のコードは&lt;code&gt;main.js&lt;/code&gt;に書いた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var qs = require(&#39;qs&#39;);

console.log(qs.parse(&#39;aaa=bbb&amp;amp;ccc=ddd&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出力は以下のようになった。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{ aaa: &#39;bbb&#39;, ccc: &#39;ddd&#39; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これをブラウザ上でもうごくようにするためにbrowserifyを使う。&lt;/p&gt;

&lt;p&gt;以下のコマンドでbundle.jsを作成する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ browserify main.js -o bundle.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;qsの中身を&lt;code&gt;bundle.js&lt;/code&gt;の中に加えて&lt;code&gt;require&lt;/code&gt;を使える状態にもなってるらしいけど確認してない。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.html&lt;/code&gt;を作成してブラウザで開くとコンソールで開いてみると同じ出力がでている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;script src=&amp;quot;bundle.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;もうちょっとちゃんとquery-stringを解析してみる:564bac21602d3e06fe43c7d8c37025b3&#34;&gt;もうちょっとちゃんとQUERY_STRINGを解析してみる&lt;/h3&gt;

&lt;p&gt;さっきのは固定値だったので、ちゃんとURLから取得する。
&lt;code&gt;location.search&lt;/code&gt;の値を使った。&lt;/p&gt;

&lt;p&gt;main.js を以下のようにして、HTML上にも表示した。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var qs = require(&#39;qs&#39;);

var queryString = location.search || &amp;quot;&amp;quot;;
queryString = queryString.substr(1, queryString.length);
var params = qs.parse(queryString);
var json_text = JSON.stringify(params);
document.getElementsByTagName(&amp;quot;body&amp;quot;)[0].innerText = json_text;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;gulpと連携して変更検知して自動生成する:564bac21602d3e06fe43c7d8c37025b3&#34;&gt;gulpと連携して変更検知して自動生成する。&lt;/h3&gt;

&lt;p&gt;以下に書いてある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gulpjs/gulp/blob/master/docs/recipes/fast-browserify-builds-with-watchify.md&#34;&gt;gulp/fast-browserify-builds-with-watchify&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;bundel.js&lt;/code&gt;に補助の情報としてファイルの場所が表示されていたが絶対パスでリリースには使いづらかったので、&lt;code&gt;watchify.args.fullPaths = false;&lt;/code&gt;にしてみた。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;main.js&lt;/code&gt;をsrcディレクトリ移動して、出力先をdistディレクトリに変更しています。&lt;/p&gt;

&lt;p&gt;gulpfile.jsは以下のとおり。ほとんどそのまま。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var gulp = require(&#39;gulp&#39;);
var gutil = require(&#39;gulp-util&#39;);
var source = require(&#39;vinyl-source-stream&#39;);
var watchify = require(&#39;watchify&#39;);
var browserify = require(&#39;browserify&#39;);

gulp.task(&#39;watch&#39;, function() {
  watchify.args.fullPaths = false;
  var bundler = watchify(browserify(&#39;./src/main.js&#39;, watchify.args));

  // Optionally, you can apply transforms
  // and other configuration options on the
  // bundler just as you would with browserify
  bundler.transform(&#39;brfs&#39;);

  bundler.on(&#39;update&#39;, rebundle);

  function rebundle() {
    return bundler.bundle()
      // log errors if they happen
      .on(&#39;error&#39;, gutil.log.bind(gutil, &#39;Browserify Error&#39;))
      .pipe(source(&#39;bundle.js&#39;))
      .pipe(gulp.dest(&#39;./dist&#39;));
  }

  return rebundle();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/substack/watchify&#34;&gt;watchfy&lt;/a&gt;は&lt;code&gt;browserify&lt;/code&gt;のwatchモードにするためのものらしい。&lt;/p&gt;

&lt;p&gt;gulp で実行できるようにするには、以下のようなことをした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm install -g gulp
$ npm install --save-dev gulp gulp-util vinyl-source-stream watchify browserify brfs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;brfsはまだよくわかってない。&lt;/p&gt;

&lt;p&gt;あとはgulpを起動すればよい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gulp watch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;作成したものはGitHubに投げています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eiel/browserify-sample&#34;&gt;eiel/browserify-sample · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こちらは&lt;code&gt;npm run watch&lt;/code&gt;でうごくようにしてあります。
以下のコマンドを実行すると動作確認ができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm install
$ npm run watch
$  # index.htmlをブラウザでひらく。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt; の scripts を使うと&lt;code&gt;npm install -g gulp&lt;/code&gt;なしでも動かせるらしいので試した。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;  &amp;quot;scripts&amp;quot;: {
    &amp;quot;test&amp;quot;: &amp;quot;echo \&amp;quot;Error: no test specified\&amp;quot; &amp;amp;&amp;amp; exit 1&amp;quot;,
    &amp;quot;watch&amp;quot;: &amp;quot;gulp watch&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Raphaelで遊んでみた。</title>
          <link>https://blog.eiel.info/blog/2013/09/11/raphaeljs/</link>
          <pubDate>Wed, 11 Sep 2013 18:42:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/09/11/raphaeljs/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://great-h.github.io/events/event-17.html&#34;&gt;すごい広島 #17&lt;/a&gt; でやったこと。
&lt;a href=&#34;http://raphaeljs.com/&#34;&gt;Raphael.js&lt;/a&gt; で遊んでみました。
Raphael.js は JavaScript で SVG を作成できるライブラリ。&lt;/p&gt;

&lt;p&gt;今日作成した&lt;a href=&#34;https://github.com/eiel/raphael-sample&#34;&gt;サンプルコードはGitHub&lt;/a&gt;にup してます。stepごとに タグを作成しているので、STEP1 のコードがみたい時は &lt;code&gt;git checkout step-1&lt;/code&gt; としてください。
&lt;code&gt;step-5&lt;/code&gt; まであります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;checkout&lt;/code&gt; したタグで &lt;code&gt;rake server&lt;/code&gt; を実行すると、ローカルサーバが起動します。
&lt;a href=&#34;http://localhost.com:8000&#34;&gt;http://localhost.com:8000&lt;/a&gt; にアクセスしてみてください。&lt;/p&gt;

&lt;h3 id=&#34;step1-とりあえず試す:51116917c9be36d7ead5eccdc6eac9da&#34;&gt;STEP1 とりあえず試す。&lt;/h3&gt;

&lt;p&gt;Raphael オブジェクトを作成すると自動的にSVGオブジェクトが挿入される。
絶対座標で挿入されるので、DOMの構築を待つ必要はなかった。&lt;/p&gt;

&lt;p&gt;まずは円を描いてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var paper = Raphael(10, 50, 320, 200);

// 円を書く at x = 50, y = 40,  半径 10
var circle = paper.circle(50, 40, 10);
// 赤色でぬりつぶす
circle.attr(&amp;quot;fill&amp;quot;, &amp;quot;#e00&amp;quot;);

// 黒で境界線をかく
circle.attr(&amp;quot;stroke&amp;quot;, &amp;quot;#000&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step2-svg-を二つ作成してみる:51116917c9be36d7ead5eccdc6eac9da&#34;&gt;STEP2 SVG を二つ作成してみる。&lt;/h3&gt;

&lt;p&gt;Rahael を二度呼べば構築できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var paper = Raphael(10, 50, 320, 200);

// 円を書く at x = 50, y = 40,  半径 10
var circle = paper.circle(50, 40, 10);
// 赤色でぬりつぶす
circle.attr(&amp;quot;fill&amp;quot;, &amp;quot;#e00&amp;quot;);

// 黒で境界線をかく
circle.attr(&amp;quot;stroke&amp;quot;, &amp;quot;#000&amp;quot;);

paper = Raphael(10, 240, 320, 200);

circle = paper.circle(50, 40, 40);
circle.attr(&amp;quot;fill&amp;quot;, &amp;quot;#00e&amp;quot;);
circle.attr(&amp;quot;stroke&amp;quot;, &amp;quot;#000&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step3-アニメーションしてみる:51116917c9be36d7ead5eccdc6eac9da&#34;&gt;STEP3 アニメーションしてみる&lt;/h3&gt;

&lt;p&gt;2秒かけて移動させてみる&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var paper = Raphael(10, 50, 320, 200);

var circle = paper.circle(50, 40, 10);
circle.attr(&amp;quot;fill&amp;quot;, &amp;quot;#e00&amp;quot;);
circle.attr(&amp;quot;stroke&amp;quot;, &amp;quot;#000&amp;quot;);

// 2000ms かけて x座標 320 まで移動
circle.animate({&#39;cx&#39;: 320}, 2000);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;element に対し animate メソッドでアニメーションできた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://raphaeljs.com/reference.html#Element.animate&#34;&gt;Element.animate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第1引数にはアニメーション後の element の情報を指定する。&lt;/p&gt;

&lt;p&gt;第2引数には アニメーションの実行時間を設定できる。
設定しないと 0 になり、一瞬で移動してしまう。&lt;/p&gt;

&lt;p&gt;第1引数に指定できるパラメータは Element.attr を見ればよさそう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://raphaeljs.com/reference.html#Element.attr&#34;&gt;Element.attr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;step4-クリックイベントでアニメーションしてみる:51116917c9be36d7ead5eccdc6eac9da&#34;&gt;STEP4 クリックイベントでアニメーションしてみる&lt;/h3&gt;

&lt;p&gt;円をクリックでアニメーションしてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var paper = Raphael(10, 50, 320, 200);

var circle = paper.circle(50, 40, 10);
circle.attr(&amp;quot;fill&amp;quot;, &amp;quot;#e00&amp;quot;);
circle.attr(&amp;quot;stroke&amp;quot;, &amp;quot;#000&amp;quot;);

circle.click(function () {
  circle.animate({&#39;cx&#39;: 320}, 2000);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step5-パスでも使ってみる:51116917c9be36d7ead5eccdc6eac9da&#34;&gt;STEP5 パスでも使ってみる。&lt;/h3&gt;

&lt;p&gt;好きな図形を書きたいので、パスをつかってみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var paper = Raphael(10, 50, 320, 200);

// (10, 20) へ移動
// (30, 40) へ線をひく
// (10, 40) へ線をひく
// (10, 20) へ線をひく
var path = paper.path(&amp;quot;M 10 20  L 30 40  L 10 40  L 10 20&amp;quot;);
path.attr(&#39;stroke&#39;,&amp;quot;#000&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Paper.path を利用すると描けた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://raphaeljs.com/reference.html#Paper.path&#34;&gt;Paper.path&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;文字列で指定する。
&lt;a href=&#34;http://www.w3.org/TR/SVG/paths.html#PathData&#34;&gt;SVG path string Format&lt;/a&gt; というルールに従う。&lt;/p&gt;

&lt;h3 id=&#34;感想:51116917c9be36d7ead5eccdc6eac9da&#34;&gt;感想&lt;/h3&gt;

&lt;p&gt;リファレンスだけでもプログラミングが充分できるほどインターフェースがシンプルでした。動的に走査できるので、ちょっと遊べそうです。とても簡単。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Cucumber-js を試した。</title>
          <link>https://blog.eiel.info/blog/2013/09/03/cucumber-js/</link>
          <pubDate>Tue, 03 Sep 2013 15:49:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/09/03/cucumber-js/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://twitter.com/hwebsys&#34;&gt;広島Webシステム開発勉強会&lt;/a&gt; で &lt;a href=&#34;https://github.com/cucumber/cucumber-js&#34;&gt;Cucumber-js&lt;/a&gt; を試してました。&lt;/p&gt;

&lt;p&gt;先に雑感をかきます。&lt;/p&gt;

&lt;p&gt;まだ完成度が高くない感じです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;アサーションが用意されてないので、使いやすくするには自分でなんとかしないといけないような感じでした。&lt;/li&gt;
&lt;li&gt;step_definision が Ruby版より難しそうでした。&lt;/li&gt;
&lt;li&gt;日本語への対応がまだできていませんでした。&lt;/li&gt;
&lt;li&gt;色がまだつきません&lt;/li&gt;
&lt;li&gt;コマンドラインオプションをまちがえるとコールスタックが表示されます。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;インストール:fc7f48da2ead1135f726a192fe868739&#34;&gt;インストール&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;npm install -g cucumber
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;cucumber.js&lt;/code&gt; というコマンドがインストールされます。&lt;/p&gt;

&lt;h3 id=&#34;試してみる:fc7f48da2ead1135f726a192fe868739&#34;&gt;試してみる&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Feature: hogehoge

  Scenario: hogehoge
    Given hoge
    Then goro
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;試しにこんな feature を書いてみました。&lt;/p&gt;

&lt;p&gt;他に作成したのは &lt;code&gt;features/step_defnition/myStepDefinitions.js&lt;/code&gt; と &lt;code&gt;features/support/world.js&lt;/code&gt; です。&lt;/p&gt;

&lt;p&gt;world.js で step で使える DSL を強化できますが今回は特になにもしていません。&lt;/p&gt;

&lt;p&gt;Stepの定義は以下のように書きました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var myStepDefinitionsWrapper = function () {
  this.World = require(&amp;quot;../support/world.js&amp;quot;).World;

  this.Given(/^hoge$/, function(callback) {
  // express the regexp above with the code you wish you had
     callback();
  });
  this.Then(/^goro$/, function(callback) {
  // express the regexp above with the code you wish you had
     callback.fail(&amp;quot;gorogoro&amp;quot;);
     callback();
  });
};

module.exports = myStepDefinitionsWrapper;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ruby版に比べるとthisが目立ちやや不恰好です。
&lt;code&gt;Then goro&lt;/code&gt; はわざと失敗するようにしています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cucumber.js&lt;/code&gt; を実行すると下記のような出力になります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.F

(::) failed steps (::)

gorogoro

Failing scenarios:
/Users/eiel/Programming/cucumber-js/features/myFeature.feature:3 # Scenario: hogehoge

1 scenario (1 failed)
2 steps (1 failed, 1 passed)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;callback が重要で 成功、失敗、ペンディングのどれにするとしても利用します。
if で状態をチェック。問題があれば &lt;code&gt;callback.fail()&lt;/code&gt; 問題がなければ&lt;code&gt;callback()&lt;/code&gt; という流れになります。rsapec の &lt;code&gt;should&lt;/code&gt; のようなものが用意されてません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eiel/cucumber-js-Sample&#34;&gt;作成したサンプルリポジトリはGithubにupしてきました&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;まとめ:fc7f48da2ead1135f726a192fe868739&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;というわけでなかなか扱いづらそうでした。
今度は mocha と chai あたりを試してみようと思います。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Polymer という Web Componets のラッパーを試した</title>
          <link>https://blog.eiel.info/blog/2013/05/31/polymer/</link>
          <pubDate>Fri, 31 May 2013 19:33:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/05/31/polymer/</guid>
          <description>&lt;p&gt;Google I/O で紹介されていた &lt;a href=&#34;http://www.polymer-project.org/&#34;&gt;Polymer&lt;/a&gt; という JavaScript で少し遊びました。&lt;/p&gt;

&lt;p&gt;Web Components という Web の UI を コンポーネント化するための仕組みがあります。
これをラップして 使いやすくしてくれる Polymer です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/polymer_experiment&#34;&gt;遊んだ結果はこの辺&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rake preview&lt;/code&gt; でウェブサーバが起動するので &lt;code&gt;http://localhost:4000&lt;/code&gt; でアクセスできるようにしています。&lt;/p&gt;

&lt;p&gt;ポイントは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;カスタムタグが作れる&lt;/li&gt;
&lt;li&gt;属性でコンポーネントに情報を渡せる&lt;/li&gt;
&lt;li&gt;コンポーネントは独立した HTML ファイル&lt;/li&gt;
&lt;li&gt;linkタグ で読み込む コンポーネントを指定できる&lt;/li&gt;
&lt;li&gt;Web Components に比べて記述良が少ない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といっところでしょうか。&lt;/p&gt;

&lt;p&gt;index.html は下記のようになっています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;script src=&amp;quot;polymer.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;link rel=&amp;quot;import&amp;quot; href=&amp;quot;my-element.html&amp;quot;&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;my-element hoge=&amp;quot;goro&amp;quot;&amp;gt;&amp;lt;/my-element&amp;gt;
    &amp;lt;my-element hoge=&amp;quot;mogu&amp;quot;&amp;gt;&amp;lt;/my-element&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Polymer を読み込んで&lt;/li&gt;
&lt;li&gt;my-element という コンポーネントを読み込んで&lt;/li&gt;
&lt;li&gt;my-element タグ で利用している&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という流れです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hoge属性で my-element コンポーネントのボタンのラベルを変更しています。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;my-element.html は下記のようになっています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;element name=&amp;quot;my-element&amp;quot; attributes=&amp;quot;hoge&amp;quot;&amp;gt;
  &amp;lt;template&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;span&amp;gt;I&#39;m &amp;lt;b&amp;gt;tk-element&amp;lt;/b&amp;gt;. This is my Shadow DOM.&amp;lt;/span&amp;gt;
      &amp;lt;button on-click=&amp;quot;delete&amp;quot;&amp;gt;{{ hoge }}&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/template&amp;gt;
  &amp;lt;script&amp;gt;
    Polymer.register(this,
    {
    &amp;quot;delete&amp;quot;: function () { alert(this.hoge) },
    }
    );
  &amp;lt;/script&amp;gt;
&amp;lt;/element&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いくつか特殊なタグがあります。&lt;/p&gt;

&lt;p&gt;element, template です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;element の name属性に 作成するタグの名前を書く&lt;/li&gt;
&lt;li&gt;element の attributes属性に 外部から受け取る情報を登録する

&lt;ul&gt;
&lt;li&gt;hoge という属性でやりとりすることを書いています&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;template の中にHTMLをかきます。

&lt;ul&gt;
&lt;li&gt;波括弧を使うことで 変数の中身を取り出せます&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ロジック は Polymer.register を利用して登録します&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;非常にモジュラリティが高いので、HTMLが見やすくなりそうです。&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
