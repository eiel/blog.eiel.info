<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>そんなこと覚えてない </title>
    <link>https://blog.eiel.info/post/</link>
    <language>en-us</language>
    <author>Tomohiko Himura</author>
    <rights>(C) 2018</rights>
    <updated>2018-06-13 22:18:48 &#43;0900 &#43;0900</updated>

    
      
        <item>
          <title>FlowとTypeScriptを同時に使う話を大正GeekNight Vol.2でしました</title>
          <link>https://blog.eiel.info/blog/2018/06/13/taisho-geek-vol2/</link>
          <pubDate>Wed, 13 Jun 2018 22:18:48 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2018/06/13/taisho-geek-vol2/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;https://taisho-geek.connpass.com/event/89869/&#34;&gt;大正GeekNight Vol.2&lt;/a&gt;
で「静的型なきJS界を救う英雄たちの話」というタイトルでLTをしました。&lt;/p&gt;

&lt;p&gt;実は会場に行ってなくて、LTしてる動画を録画して送りつけるという参加方式をとりました。
なぜ、会場に行かなかったかというと、私は介護者と共に行動する必要があり、イベントの時間は子供を寝かせる時間帯で、子供も連れてくるという選択肢以外には、録画かリモートで発表する必要がありるためです。
連れて行くという選択肢はありえないし、寝かせるタイミンで配信なんてできるわけがないのでがんばって録画しました。録画するタイミングもあんまりなくて大変だった。動画は倉庫に封印しています。
中身がないので、公開する予定は今のところないですが、希望があれば検討するかもしれません。(もしくはリベンジ)&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;33f808eb8ebf43509b02b08ead1f6ce4&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;サンプルプロジェクトはこの辺に投げてあります。
&lt;a href=&#34;https://github.com/eiel-sample-code/flow-with-typescript&#34;&gt;https://github.com/eiel-sample-code/flow-with-typescript&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;さて、本題ですが、身近なエンジニアがTypeScriptを始めた的な発言をしていたらFlowもどうですか?と聞いてみる遊びをしていたところ、同時に使ったらどうなるんだろうと気になったので、やってみたらできたというのが発端です。&lt;/p&gt;

&lt;p&gt;といっても、TypeScriptはちょっとしかつかったことがなかったので、どんなことができそうか判断するために、&lt;a href=&#34;https://qiita.com/eielh/items/21168709edf2813acdcc&#34;&gt;FlowのドキュメントにあるコードをひたすらTypeScriptのPlaygroundで試す&lt;/a&gt;という遊びをしてみました。
その結果、ファイル分割していくとimportがつらそうだなとわかったので、importをつかいつつ両方でエラーできないコードと、FlowとTypeScriptでエラーがでるのが違うところになるようなサンプルコードをかいて、簡単に解説するという話になりました。&lt;/p&gt;

&lt;p&gt;紹介した内容は、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Maybeがないので&lt;code&gt;Hoge | null&lt;/code&gt;というnullをくっつけたUnion TypeをつかってMaybeの代用してみた&lt;/li&gt;
&lt;li&gt;Object Typeの挙動の違い&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;になります。&lt;/p&gt;

&lt;p&gt;ところで、このサンプルコード大失敗があって、&lt;code&gt;noImplicitAny&lt;/code&gt;ぐらいしかtrueにしていないというミスがありました。
&lt;a href=&#34;https://github.com/eiel-sample-code/flow-with-typescript/blob/master/tsconfig.json#L4&#34;&gt;https://github.com/eiel-sample-code/flow-with-typescript/blob/master/tsconfig.json#L4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;スライド上にあるFlowだけエラーになるコードはTypeScriptでも&lt;code&gt;strictNullCheck&lt;/code&gt;をつけるとエラーになります。
TypeScriptの評判を落とすような誤解を招く可能性が多いにあり大変申し訳ないです。&lt;/p&gt;

&lt;p&gt;蛇足ですが、個人的にはObject Typeの挙動が結構好きなので、Flowを使うのが楽しいです。&lt;/p&gt;

&lt;p&gt;というわけで、あまり詳しくないものを活用して、思いつきでLTする場合は、有識者のレビューをいれるとより良いものになると思いました。&lt;/p&gt;

&lt;p&gt;その他のFlowとTypeScriptの違いに興味があれば、&lt;a href=&#34;https://qiita.com/eielh/items/21168709edf2813acdcc&#34;&gt;FlowのドキュメントにあるコードをひたすらTypeScriptのPlaygroundで試す&lt;/a&gt;など参考にしてみたりしてください。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Hiroshima.rbから見たRubyKaigi 2017という奇跡</title>
          <link>https://blog.eiel.info/blog/2017/09/11/about-rubykaigi-2017/</link>
          <pubDate>Mon, 11 Sep 2017 14:47:01 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2017/09/11/about-rubykaigi-2017/</guid>
          <description>

&lt;p&gt;こんにちは。&lt;/p&gt;

&lt;p&gt;「俺が&lt;a href=&#34;https://hiroshimarb.connpass.com/&#34;&gt;Hiroshima.rb&lt;/a&gt;だ」といっても過言ではない@eielhです。
そういえば、&lt;a href=&#34;http://rubykaigi.org/2017/presentations/jmettraux.html&#34;&gt;@jmettraux&lt;/a&gt;が引き継いでしまったので、「俺が元Hiroshima.rbだ」が正しいかもしれません。&lt;/p&gt;

&lt;p&gt;最初に書いておきますが、この記事はただのポエムである。&lt;/p&gt;

&lt;p&gt;RubyKaigiが広島で行われたということは、PHPカンファレンス(本体)やPyCon JP(本体)、ScalaMatsuri(本体)などなどその他諸々が広島で行われる可能性だってある。もしかしたら広島以外でも開催されるかもしれない。
そういうことに繋がることを信じて、私の心境とか、心境に至る経緯を書き記しておく。&lt;/p&gt;

&lt;p&gt;先日、我が師でもあり、弟子でもあり、ライバルでもある&lt;a href=&#34;https://twitter.com/NeXTSTEP2OSX&#34;&gt;@NeXTSTEP2OSX&lt;/a&gt;が&lt;a href=&#34;https://nyoho.jp/diary/&#34;&gt;RubyKaigi (本体) が広島に来ることがいかに貴重なことか&lt;/a&gt;を語った。
それを踏まえて、Hiroshima.rbを始めた私にとってRubyKaigi 2017がどんなものであるのかを書きたいと思う。&lt;/p&gt;

&lt;h1 id=&#34;私は何者なのか:0c414f5c5b67240f0c31f31e9f89edee&#34;&gt;私は何者なのか&lt;/h1&gt;

&lt;p&gt;2009年12月にHiroshima.rbを立ち上げ、2010年より広島でRubyに関するイベントを開催してきた人です。&lt;/p&gt;

&lt;p&gt;2017年4月に病気の治療として補助人工心臓というものが植え込まれてしまい、大阪の病院の近くに住まないといけない状態になっています。詳細は最後に記載の別記事を参照ください。
「RubyKaigi 2017の開催を広島で」という話が出てきた頃はまだ広島に住んでいて、広島の最初のオーガナイザーとして参加しています。
しかし、3月より4ヶ月入院していたため、ほとんど名前だけのオーガナイザーです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参考1 &lt;a href=&#34;http://rubykaigi.org/2017/team&#34;&gt;RubyKaigi 2017 Team&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考2 &lt;a href=&#34;http://blog.eiel.info/blog/2017/08/02/in-the-hospital-2017/&#34;&gt;4ヶ月ほど入院してプログラマとして感じたこととか&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;せっかくなので集客につながる活動ができればいいなと思いつつこんな記事をかいています。&lt;/p&gt;

&lt;h1 id=&#34;hiroshima-rbのはじまり:0c414f5c5b67240f0c31f31e9f89edee&#34;&gt;Hiroshima.rbのはじまり&lt;/h1&gt;

&lt;p&gt;ところで、さきほどの補助人工心臓を植え込むに至る病気が診断された頃の話をする。
それは2009年の7月でHiroshima.rbが立ち上がる数ヶ月前である。
私は25歳でした。
地方のIT事情に物足りなさを感じており、東京へ行ってみたいと思っていたりした頃です。&lt;/p&gt;

&lt;p&gt;東京には技術的に楽しそうな勉強会がたくさん行われており、地方で生活する人間としてはとても羨ましく思うものです。
実際、多くの地方の優秀なエンジニアはどんどん東京へ行ってしまいました。&lt;/p&gt;

&lt;p&gt;そんな頃に健康診断で心臓の機能が弱っているということを知ることになりました。&lt;/p&gt;

&lt;p&gt;そこまで大げさ状況ではなかったのですが、なんとなくやる気は消失もして、仕事にも行かなくなっていました。
体力的にも独りで東京へ行くのも難しいです。
がんばる意味なんてあるだろうか。
その瞬間にはは特になかったのは間違いないです。
(最終的には一人で東京に遊びにいくぐらいには病気にはなれてしまうのですが)&lt;/p&gt;

&lt;p&gt;そうは言っても生きていかなければいけない。
どうせ生きていくならもっと楽しく生きていきたいと考えました。
私は少しづつ、少しづつさまざまな活動をはじめていきました。
その活動目的は「&lt;strong&gt;自分にとって楽しい場所&lt;/strong&gt;」を作ることでした。&lt;/p&gt;

&lt;p&gt;東京まで行かずとしても、自分にとって楽しい勉強会がもっとあれば良いと思ったわけです。
そこで、自分の興味があることで、最も人が集まりやすいだろうと思う「Ruby」をメインとした勉強会をするためにはじめたのがHiroshima.rbだったのです。&lt;/p&gt;

&lt;h1 id=&#34;rubykaigi-2017が広島で開催されるという奇跡:0c414f5c5b67240f0c31f31e9f89edee&#34;&gt;RubyKaigi 2017が広島で開催されるという奇跡&lt;/h1&gt;

&lt;p&gt;そんなわけでHiroshima.rbはちょっと変わっていて有名なRubyistと繋がりがあるわけでなくスタートしました。
Rubyコミュニティとしては完全に孤立していたのです。
あれから9年。そんなRuby的に孤立した広島で、今回RubyKaigiが行われるわけです。&lt;/p&gt;

&lt;p&gt;私からすると奇跡にしか思えない出来事です。&lt;/p&gt;

&lt;p&gt;それもそうで、&lt;a href=&#34;https://esa-pages.io/p/sharing/68/posts/520/42e3fe922f94a328bf52.html&#34;&gt;広島開催に至る理由は&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;広島国際会議場に、たまたま僕らの希望の日程で空きがあったから&lt;/li&gt;
&lt;li&gt;日本中探しても、そこ以外に僕らが探している条件にマッチした会場が見つからなかったから&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;と記されています。&lt;/p&gt;

&lt;p&gt;Hiroshima.rbの活動による影響は微塵もありません。
しかし、Hiroshima.rbが目的としたことが大きく達成できてしまいます。&lt;/p&gt;

&lt;p&gt;オーガナイザー広島チームにすらRubyKaigi体験者はいません。
たくさんのrubyistとオフラインの繋がりもできるでしょう。
会ってみたい人もたくさんいます。
新たな出会いもあるでしょう。&lt;/p&gt;

&lt;p&gt;そんな私の中から出てくる言葉は「うん、わけがわからない」でした。
こんな奇跡はなかなかない。&lt;/p&gt;

&lt;p&gt;しかし、私は当日参加することはできそうにありません。なんてこった。&lt;/p&gt;

&lt;h1 id=&#34;この奇跡をもっと活かそうぜ:0c414f5c5b67240f0c31f31e9f89edee&#34;&gt;この奇跡をもっと活かそうぜ&lt;/h1&gt;

&lt;p&gt;RubyKaigiを広島で成功させることは、今後RubyKaigiのようなテクニカルなイベントが広島で行われる可能性が高くなります。
これは広島がたいへん楽しい場所になります。
私にとってはたいへんお得です。&lt;/p&gt;

&lt;p&gt;もし、同じようにたいへんお得だと思うのであれば、さりげなく宣伝してみたり、参加してみて国際会議の空気感を掴んでみたり、運営のノウハウを盗んだりしてみると良いと思います。
東京に行くことに比べるとたいへん低いコストで参加することができます。
素晴らしい経験になると思います。&lt;/p&gt;

&lt;p&gt;また、本物が広島だけでなく全国各地の各地方で開催されるのだって楽しみです。
広島でうまくいかなきゃそれより小さな地方は難しくなってしまうはずだ。
この奇跡をどう活かすかは考えてみて欲しい。&lt;/p&gt;

&lt;h1 id=&#34;結び:0c414f5c5b67240f0c31f31e9f89edee&#34;&gt;結び&lt;/h1&gt;

&lt;p&gt;私が手に入らなくて、欲したものがひょんなことから広島にやってきてしまいました。
大変な驚きです。嬉しいです。ラッキーです。広島すごいです。&lt;/p&gt;

&lt;p&gt;しかし、私は参加できそうにありません。&lt;/p&gt;

&lt;p&gt;できれば、たくさんの人に私の代わりにこの奇跡を堪能してきて欲しいところです。
そして、それをあなたにとっての奇跡へとつなげて欲しいです。
そのためにも、中国地方のエンジニア、情報系学生はまずはRubyKaigiに参加してみてはどうでしょうか。&lt;/p&gt;

&lt;p&gt;そうすれば、3,4年後に広島がRubyKaigiと同程度のイベントが行われているはずなので、私はとても楽しみです。
(4年後には広島に戻ってるはずなんや)&lt;/p&gt;

&lt;h1 id=&#34;戯言1:0c414f5c5b67240f0c31f31e9f89edee&#34;&gt;戯言1&lt;/h1&gt;

&lt;p&gt;「自分にとって楽しい場所をつくる」ってキーワードは根拠は示さず、何度か発表の中にいれたことがあったけど、そーいうわけです。&lt;/p&gt;

&lt;h1 id=&#34;戯言2:0c414f5c5b67240f0c31f31e9f89edee&#34;&gt;戯言2&lt;/h1&gt;

&lt;p&gt;なんというか、絶妙なタイミングでいろんなことが起きている。
まるで、私の運命に私が立ち向かえるように成長させるため、試練が与えられるように思えてしまう。
実際にそんなわけはないけれど、さまざまな出来事は私を成長させてくれるし、人生とは何が起きるかわからず本当に面白いものである。
これから先どんな成長ができるのか、どんなものが残せるのか大変楽しみである。
しかし、これ以上のハードモードは本当にお断りしたいものである。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>広島人によるRubyKaigi 2017のためのグルメ情報</title>
          <link>https://blog.eiel.info/blog/2017/09/07/groumet-rubykaigi-2017/</link>
          <pubDate>Thu, 07 Sep 2017 09:14:17 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2017/09/07/groumet-rubykaigi-2017/</guid>
          <description>

&lt;p&gt;広島が誇るスーパーエンジニア&lt;a href=&#34;https://twitter.com/soudai1025&#34;&gt;そーだい(@soudai1025)&lt;/a&gt;がRubyKaigiのための昼飯情報を提供している。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://soudai.hatenablog.com/entry/2017/09/05/223253&#34;&gt;Rubyistが今すぐ知るべき大切なこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;それに対抗するわけではないが、私が県外のイベントに参加したときに困った経験を参考に記事をかいてみることにする。&lt;/p&gt;

&lt;p&gt;中立的に書きつつも、個人の主観を大量にいれているのでご注意ください。
また、個人で出てくるネタにも限界があるので、後に続く人がでてくると嬉しい。&lt;/p&gt;

&lt;p&gt;RubyKaigiは1000人規模のイベントであり、1000人が一斉に昼ごはんに向かう事を考えるとおすすめの店を紹介するだけでは、役に立たない。
だから、会場の国際会議場周辺の事情中心に最初は書いていく。
どの方向にいけばどんなものがあり、キャパがどのくらいあると想像できるかも記していく。
つまり、近辺は広島グルメかどうか問わずかいていく。
また、遠くになるとさまざまな飲食店があるのでおすすめのみに留める。&lt;/p&gt;

&lt;h1 id=&#34;広島グルメの復習:d73756869460c7fda1a00286c3e20134&#34;&gt;広島グルメの復習&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;お好み焼き - 定番。派生もので府中地方の府中焼きもちらほら。地元の人は肉玉そば・肉玉うどんをたべるが観光客向けに牡蠣をトッピングしたものなどがある。量を食べたい場合は、麺ダブルというトッピングが定番。麺が増加すると焼き加減がいまいちな店がまれにあるので注意。&lt;/li&gt;
&lt;li&gt;広島つけ麺 - 唐辛子のたくさんのったつけ汁でいただくつけ麺。野菜がたくさんのってることがおおい。お店にもよるが辛めを挑戦することをおすすめします。&lt;/li&gt;
&lt;li&gt;広島ラーメン - 豚骨醤油の中華そば。&lt;/li&gt;
&lt;li&gt;汁なし担々麺 - 現在広島B級グルメの王者。辛いものが苦手ならやめておくほうが良い。つけ麺よりリーズナブルですが、野菜などはあまりついていません。&lt;/li&gt;
&lt;li&gt;あなごめし - A級グルメになってしまうのでお高い。広島市内ではそんなにお店はない。宮島口のうえのが有名。市内では弁当が購入できる。弁当もとてもおいしい。&lt;/li&gt;
&lt;li&gt;牡蠣 - 定番。当たっても自己責任の世界。生ガキを食べたいなら、最終日や帰る前にどうぞ。&lt;/li&gt;
&lt;li&gt;タコ - 居酒屋にいくと三原のタコがおいてあることがある。&lt;/li&gt;
&lt;li&gt;ウニホーレン - 居酒屋にいくとあるけど、グルメとして名物なだけでウニがとれるわけではない。&lt;/li&gt;
&lt;li&gt;小イワシ - 居酒屋で食せることがおおい。&lt;/li&gt;
&lt;li&gt;ホルモン天ぷら - あまり知らない。誰かフォローたのむ。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;番外:d73756869460c7fda1a00286c3e20134&#34;&gt;番外&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;呉冷麺 - 食べれるところは少ないが広島市でもたべれる。ゴマダレの冷やし中華に近い。(あんまり詳しくない)&lt;/li&gt;
&lt;li&gt;尾道ラーメン - 食べれるところはあるが、とりたてておすすめを知らない。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;周辺状況:d73756869460c7fda1a00286c3e20134&#34;&gt;周辺状況&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/92595/30526549-113e4c78-9c57-11e7-820a-fc6bbecb5005.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;RubyKaigiは広島国際会議場で行われる。国際会議場は平和公園の南側に位置する。
周辺は公園なので、そこそこ移動しなければ、飲食店はない。
適当にぶらつきたいなら、大手町(南側)や紙屋町がおすすめ。&lt;/p&gt;

&lt;p&gt;北方面はしばらく平和公園でやがて川にぶつかってしまうので、平和公園を散策したい、原爆ドームが見たい場合はかまわない。その場合、結局紙屋町方面にすすむのと同じになる。広島市民球場跡地でイベントをやってることがある。今回にかぎるとオクトーバフェストをやってる。&lt;/p&gt;

&lt;p&gt;西方面は僕はあまり詳しくないが、いくつか飲食店がある。なんとなくいってみるのは有りです。
国際会議場は西方面が近いので、試しにいってみるのもよいでしょう。&lt;/p&gt;

&lt;p&gt;南方面はお好み焼き屋、つけ麺屋、セブンイレブン、寿司屋などがあるがほとんど店舗はない。目的がない限りはおすすめしません。
間違いなく100席分も飲食店はありません。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/92595/30140516-350e1caa-93b0-11e7-9269-dec5f472064f.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/92595/30140591-a1de07d2-93b0-11e7-9cb3-70816164c6ee.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;(グーグルマップから引用したが、コピーライトがきれてしまっています)&lt;/p&gt;

&lt;h1 id=&#34;東方向の南側-大手町-南:d73756869460c7fda1a00286c3e20134&#34;&gt;東方向の南側 大手町(南)&lt;/h1&gt;

&lt;p&gt;東方向にすすんで、橋をわたって右手に位置する。
汁なし担々麺のお店が多く存在するので、辛いものが苦手なければ、第１候補となる区域。
更に東にすすむと小町区域。南に進むと鷹野橋というところへ行ける。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/92595/30141048-9c61348e-93b3-11e7-9283-63c0f0860d85.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;汁なし担々麺のお店が本当に多く、はずれはない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;キング軒 &lt;a href=&#34;https://goo.gl/maps/43s46SnkFM82&#34;&gt;マップ&lt;/a&gt; 万人におすすめ。&lt;/li&gt;
&lt;li&gt;花山椒 &lt;a href=&#34;https://goo.gl/maps/qKJ2ynQTLi52&#34;&gt;マップ&lt;/a&gt; 本物を追求したい人へ。&lt;/li&gt;
&lt;li&gt;くにまつ &lt;a href=&#34;https://goo.gl/maps/DhEgNtA7hJ62&#34;&gt;マップ&lt;/a&gt; 本物志向を万人に。&lt;/li&gt;
&lt;li&gt;デルカセロリ &lt;a href=&#34;https://goo.gl/maps/41RfonQ6NnK2&#34;&gt;マップ&lt;/a&gt;　カレー汁なし担々麺最高。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;その他にもいろんな店舗がある。抜粋する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;おっくん堂 &lt;a href=&#34;https://goo.gl/maps/ZYtjqQtjW1p&#34;&gt;マップ&lt;/a&gt; 広島まぜ麺,汁なし担々麺に似て非なるもの,多くのエンジニアが通っている。お酒を飲みに行くのにもよい。&lt;/li&gt;
&lt;li&gt;へんくつ屋 &lt;a href=&#34;https://goo.gl/maps/yHeN1ZC5ugL2&#34;&gt;マップ&lt;/a&gt; お好み焼き,広島中心部いろんなところにある人気のあるお好み焼き屋&lt;/li&gt;
&lt;li&gt;陽気 &lt;a href=&#34;https://goo.gl/maps/zDoRvKeDD7k&#34;&gt;マップ&lt;/a&gt; 広島ラーメン,有名なお店。ただし、本店ではない。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;札幌ラーメンやなか卯とかもある。&lt;/p&gt;

&lt;h1 id=&#34;東方向の北側-大手町北:d73756869460c7fda1a00286c3e20134&#34;&gt;東方向の北側 大手町北&lt;/h1&gt;

&lt;p&gt;繁華街へと続く道のため、いろんな飲食店があります。
Agilewareさんのドリンクアップはこの辺りで行われます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/92595/30145230-f3c3f484-93ca-11e7-922a-85cc17f6f661.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;このへんであまり食べないのであまり詳しくないが、そこそこいろんなお店があります。&lt;/p&gt;

&lt;p&gt;さらに東に進むと袋町。
北に進むと紙屋町。
どちらもお店はそこそこあります。&lt;/p&gt;

&lt;h1 id=&#34;北東方面-紙屋町:d73756869460c7fda1a00286c3e20134&#34;&gt;北東方面 紙屋町&lt;/h1&gt;

&lt;p&gt;住所的には大手町だけど、紙屋町店とされることが多い場所。&lt;/p&gt;

&lt;p&gt;原爆ドームのほうからやってくるとわかりやすくお店がみつけられます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;藤原ラーメン &lt;a href=&#34;https://goo.gl/maps/PQPm2twNAow&#34;&gt;マップ&lt;/a&gt; (広島ラーメン,広島つけ麺(ばくだん屋が提供するもの)&lt;/li&gt;
&lt;li&gt;月あかり &lt;a href=&#34;https://goo.gl/maps/nrNfGaxQ88m&#34;&gt;マップ&lt;/a&gt; あなごめし&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;紙屋町中心部には以下のお店があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;若貴 &lt;a href=&#34;https://goo.gl/maps/EmtgJcWqw6S2&#34;&gt;マップ&lt;/a&gt; お好み焼き OSC広島の前夜祭でよく行く&lt;/li&gt;
&lt;li&gt;讃岐屋 &lt;a href=&#34;https://goo.gl/maps/h6PjQCJeqtC2&#34;&gt;マップ&lt;/a&gt; さぬきうどん 広島にしかないうどん屋。スタミナラーメンといううどんを推してる。にんにくが大量にはいってるので注意。小町店のほうが国際会議場からは近い&lt;/li&gt;
&lt;li&gt;蓬莱 &lt;a href=&#34;https://goo.gl/maps/udDzRK653i82&#34;&gt;マップ&lt;/a&gt; そーだいがおすすめしてた天津飯 (サンモール地下)&lt;/li&gt;
&lt;li&gt;アンデルセン &lt;a href=&#34;https://goo.gl/maps/eEJett2jRop&#34;&gt;マップ&lt;/a&gt; パン屋 広島定番のアンデルセン。おしゃれなランチも楽しめます&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;サンモールの地下は食事何処があり、ザ・どんやラー油そばなどがあります。
スーパーもあります。
その周辺は、松屋、松のやなどあります。&lt;/p&gt;

&lt;p&gt;紙屋町北部に向かうとそごう、Aqua、そごう新館などに食事何処があります。
After Partyが行われるのはそごう屋上です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;呉麺屋 &lt;a href=&#34;https://goo.gl/maps/dPyiXoLp1sz&#34;&gt;マップ&lt;/a&gt; 呉冷麺 (Aquaグルメタウン) 食べたことない&lt;/li&gt;
&lt;li&gt;五右衛門 &lt;a href=&#34;https://goo.gl/maps/dPyiXoLp1sz&#34;&gt;マップ&lt;/a&gt;  お好み焼き (Aquaグルメタウン) ホルモンの入ったこってりなお好み焼きがたべれる&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;西方面-土橋-十日市-本川町:d73756869460c7fda1a00286c3e20134&#34;&gt;西方面 土橋・十日市・本川町&lt;/h1&gt;

&lt;p&gt;会場から西の橋を渡ると土橋です。
北へのぼると十日市。
私はあまり詳しくない。
充分にお店はあるので、選択肢としては充分あり。&lt;/p&gt;

&lt;p&gt;オーガナイザーの&lt;a href=&#34;https://twitter.com/takatayoshitake&#34;&gt;@takatayoshitake&lt;/a&gt;が詳しいはず。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/92595/30145685-1861d1e6-93ce-11e7-9a8c-509d3265ad00.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;有名どこはこの辺りかな。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;府中焼き としのや &lt;a href=&#34;https://goo.gl/maps/2g396YcNtXr&#34;&gt;マップ&lt;/a&gt; お好み焼き/おすすめ&lt;/li&gt;
&lt;li&gt;むさし土橋店 &lt;a href=&#34;https://goo.gl/maps/bSyRFBES8f62&#34;&gt;マップ&lt;/a&gt; うどん・弁当/広島定番 幅広い年齢層に支持されてる。お弁当も有名。&lt;/li&gt;
&lt;li&gt;ばくだん屋土橋店 &lt;a href=&#34;https://goo.gl/maps/GMD3WzSMaWB2&#34;&gt;マップ&lt;/a&gt; 広島つけ麺&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;お好み焼き屋はいくらでもあります。
&lt;a href=&#34;https://www.facebook.com/Hachidorisha/&#34;&gt;ソーシャルブックカフェ ハチドリ舎&lt;/a&gt;ってのがある。通称平和カフェ。原爆や平和に関心があれば訪ねてみると良いです。&lt;/p&gt;

&lt;p&gt;広島料理ってわけじゃないけど&lt;a href=&#34;https://goo.gl/maps/CvGfrW4QqbJ2&#34;&gt;さち&lt;/a&gt;というとんかつ屋は個人的にきになっている。&lt;/p&gt;

&lt;p&gt;大きく離れてしまうけど、北へいくと&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;辛部 &lt;a href=&#34;https://goo.gl/maps/8vUMTktcz962&#34;&gt;マップ&lt;/a&gt; 広島つけ麺 会場から南にいったところのほうが近い&lt;/li&gt;
&lt;li&gt;ヲルガン座 &lt;a href=&#34;https://goo.gl/maps/UtM148DiaAM2&#34;&gt;マップ&lt;/a&gt; 音楽喫茶 別に広島料理はたべれないけど面白いお店です。フォーが食べれる。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などがあります。
さらに道路をはさみますが、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;寿楽亭 &lt;a href=&#34;https://goo.gl/maps/LtEyWwLWv4U2&#34;&gt;マップ&lt;/a&gt; 広島ラーメン&lt;/li&gt;
&lt;li&gt;麺屋弐番館 &lt;a href=&#34;https://goo.gl/maps/Fy6mt8PAZAL2&#34;&gt;マップ&lt;/a&gt; ラーメン&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あたりもおすすめです。&lt;/p&gt;

&lt;h1 id=&#34;南西方面-舟入:d73756869460c7fda1a00286c3e20134&#34;&gt;南西方面 舟入&lt;/h1&gt;

&lt;p&gt;ぜんぜんしらない。&lt;/p&gt;

&lt;p&gt;全然周辺ではないが、舟入本町のほうまで南下すればそこそこいろいろ。
路面電車を利用すればいけなくもないけど現実的ではないかも。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/92595/30145799-d8ba4194-93ce-11e7-90d7-fb96da024fa9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;元就 &lt;a href=&#34;https://goo.gl/maps/1vLtgB1wCcm&#34;&gt;マップ&lt;/a&gt; 広島ラーメン/結構よくいく&lt;/li&gt;
&lt;li&gt;ぶち &lt;a href=&#34;https://goo.gl/maps/yDsWknxEnqQ2&#34;&gt;マップ&lt;/a&gt; 焼肉/ホルモン&lt;/li&gt;
&lt;li&gt;きさく &lt;a href=&#34;https://goo.gl/maps/2JgDByWV8g12&#34;&gt;マップ&lt;/a&gt; 汁なし担々麺 本物の汁なし担々麺を堪能したいかたおすすめ。辛いもの苦手な人ダメゼッタイ。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;全然広島グルメではないけど、スシローやジョイフルがある。&lt;/p&gt;

&lt;h1 id=&#34;南方面-中島-吉島:d73756869460c7fda1a00286c3e20134&#34;&gt;南方面 中島・吉島&lt;/h1&gt;

&lt;p&gt;「辛部にいきたい」とかならともかく飲食店があまりないです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/92595/30145915-c24adac6-93cf-11e7-9af0-5f65aab90ca6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;辛部 &lt;a href=&#34;https://goo.gl/maps/k8zPa4MQCns&#34;&gt;マップ&lt;/a&gt; 広島つけ麺/おすすめ&lt;/li&gt;
&lt;li&gt;壱 お好み焼き&lt;/li&gt;
&lt;li&gt;ミカヅキ お好み焼き&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;寿司屋ができてるのをみたけどいってない。
たぶん、最寄りになるセブンイレブンがある。
文化交流会館というところの中にも飲食店はあるはず。&lt;/p&gt;

&lt;h1 id=&#34;袋町-中町:d73756869460c7fda1a00286c3e20134&#34;&gt;袋町・中町&lt;/h1&gt;

&lt;p&gt;大手町(北)から東へきたところ。もしかすると最寄りセブンイレブンがある。
お好み焼き屋もあるし、瀬戸内料理もあるし、わりといろいろある。なぜかうどん屋の紹介に偏ってる&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;みやまえ &lt;a href=&#34;https://goo.gl/maps/jG5KqSzYG6M2&#34;&gt;マップ&lt;/a&gt; 瀬戸内料理 生牡蠣が食せるはず。いったことはない。&lt;/li&gt;
&lt;li&gt;うろん &lt;a href=&#34;https://goo.gl/maps/7eTbwFamvtH2&#34;&gt;マップ&lt;/a&gt; うどん 広島とホノルルにしかない。我馬を展開するアースフードがはじめたうどん屋。google mapに閉鎖ってかいてあって閉鎖したのか気になってる。&lt;/li&gt;
&lt;li&gt;讃岐屋 &lt;a href=&#34;https://goo.gl/maps/G792DMc5adv&#34;&gt;マップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;太閤うどん &lt;a href=&#34;https://goo.gl/maps/WH4fDB2EEsB2&#34;&gt;マップ&lt;/a&gt; うどん。ちょっとおしゃれ。お高めの値段設定だけど、それだけこだわりも感じる。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;やよい軒とかもある。&lt;/p&gt;

&lt;h1 id=&#34;立町-紙屋町-真:d73756869460c7fda1a00286c3e20134&#34;&gt;立町・紙屋町(真)&lt;/h1&gt;

&lt;p&gt;このへんは飲食店はたくさんあるので、絞ってかく。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;我馬 &lt;a href=&#34;https://goo.gl/maps/hzSZHdaNAL22&#34;&gt;マップ&lt;/a&gt; 博多ラーメン 広島にしかないラーメン屋。基本博多ラーメンだけど、黒醤油ラーメンもやっている。一風堂に似ているけど全く別の進化をしたお店。季節のラーメンもおすすめ。僕がよく県外で発表するときさりげなく宣伝する店。&lt;/li&gt;
&lt;li&gt;永斗麺 &lt;a href=&#34;https://goo.gl/maps/YU1jTWWESeL2&#34;&gt;マップ&lt;/a&gt; サンマラーメン 広島で有名なふじもとのラーメンの一部が派生したものとおもう。おすすめ。&lt;/li&gt;
&lt;li&gt;やまね &lt;a href=&#34;https://goo.gl/maps/FQXQMAs1unR2&#34;&gt;マップ&lt;/a&gt; 汁なし担々麺 普通におすすめ&lt;/li&gt;
&lt;li&gt;酔心 &lt;a href=&#34;https://goo.gl/maps/2gbuM7vbPtL2&#34;&gt;マップ&lt;/a&gt; 釜飯・広島料理 広島で二番目にやすうてうまい店として有名。広島料理が食べられる。格式高めなときにも利用される。&lt;/li&gt;
&lt;li&gt;芸州 &lt;a href=&#34;https://goo.gl/maps/afsQwmDXPM92&#34;&gt;マップ&lt;/a&gt; 瀬戸内料理 広島料理がたべられる。上記酔心と似たような感じ。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;小町-地蔵通り:d73756869460c7fda1a00286c3e20134&#34;&gt;小町・地蔵通り&lt;/h1&gt;

&lt;p&gt;うどん屋・カレー屋・お好み焼き屋・餃子いろいろある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;讃岐屋 &lt;a href=&#34;https://goo.gl/maps/RR3eLV24Mcv&#34;&gt;マップ&lt;/a&gt; 何度もでてくるスタミナうどん&lt;/li&gt;
&lt;li&gt;蔵屋 &lt;a href=&#34;https://goo.gl/maps/EFhxZjUScQC2&#34;&gt;マップ&lt;/a&gt; &amp;lt;- 位置がずれてる。&lt;a href=&#34;https://goo.gl/maps/V2AKFNC3MgE2&#34;&gt;場所はここ&lt;/a&gt; お好み焼き&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ちょっと離れるけど、もっと東にいくと地蔵通り。&lt;/p&gt;

&lt;p&gt;Rubyってお店があったけど検索にかからない。なくなってしまったのか…
いったことないけど。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;武蔵坊 &lt;a href=&#34;https://goo.gl/maps/VS2FkAjnhWu&#34;&gt;マップ&lt;/a&gt; 汁なし担々麺/おすすめ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;お好み焼き屋はたくさんある&lt;/p&gt;

&lt;h1 id=&#34;大手町南端-鷹野橋:d73756869460c7fda1a00286c3e20134&#34;&gt;大手町南端 鷹野橋&lt;/h1&gt;

&lt;p&gt;大手町の南橋。さらに南にいくと鷹野橋商店街。
海鮮丼の定番の丼丸がある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;わかば亭 &lt;a href=&#34;https://goo.gl/maps/QKMi7MEe4nu&#34;&gt;マップ&lt;/a&gt; 広島つけ麺&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;鷹野橋商店街から東方面にいくと、大人気の電光石火、つけ麺 周月など。
電光石火は東京駅にあるほど今人気店。周月は四国発祥の魚介つけ麺。
コワーキングスペース いいオフィス近く。(いったことないのでよくしらない)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;周月 &lt;a href=&#34;https://goo.gl/maps/LjsCbHS2w972&#34;&gt;マップ&lt;/a&gt; つけ麺&lt;/li&gt;
&lt;li&gt;電光石火 &lt;a href=&#34;https://goo.gl/maps/hniXqH62Gsn&#34;&gt;マップ&lt;/a&gt; お好み焼き&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;八丁堀-新天地-流川:d73756869460c7fda1a00286c3e20134&#34;&gt;八丁堀・新天地・流川&lt;/h1&gt;

&lt;p&gt;新天地にいくと。お好み村とか。流川は夜の繁華街。
お好み焼きの有名店も多いけど、好きなところがないので今回は言及しない。
まあなんでもある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://goo.gl/maps/7T1ZyJnYAHG2&#34;&gt;唐々亭&lt;/a&gt; 広島つけ麺&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;おまけ-広島駅周辺:d73756869460c7fda1a00286c3e20134&#34;&gt;おまけ 広島駅周辺&lt;/h1&gt;

&lt;p&gt;11時ぐらいになると行ける店がなくなる。
ざっくり抜粋&lt;/p&gt;

&lt;p&gt;南口&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;電光石火 (お好み焼き/大人気)&lt;/li&gt;
&lt;li&gt;SOZO (お好み焼き/大根おろしがのってる)&lt;/li&gt;
&lt;li&gt;お好み焼き屋いろいろ&lt;/li&gt;
&lt;li&gt;酔心&lt;/li&gt;
&lt;li&gt;かなわ (かき)&lt;/li&gt;
&lt;li&gt;かき名庵 (かき/@t_wadaさんといった)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;北口&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;我馬&lt;/li&gt;
&lt;li&gt;お好み焼き屋いろいろ&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;お好み焼きについて:d73756869460c7fda1a00286c3e20134&#34;&gt;お好み焼きについて&lt;/h1&gt;

&lt;p&gt;お好み焼きの基礎知識をかいとく。&lt;/p&gt;

&lt;p&gt;たいてい大きくハズレる店はないですが、美味しい店は美味しいです。
場所がよければ歩いていればいくらでもみつけることができます。&lt;/p&gt;

&lt;p&gt;スーパーやコンビニでも買えますが、そこは一回りクオリティは落ちますが、安いです。&lt;/p&gt;

&lt;h2 id=&#34;時間がかかる:d73756869460c7fda1a00286c3e20134&#34;&gt;時間がかかる&lt;/h2&gt;

&lt;p&gt;昼ごはんにたべる場合は、次のセッションを捨てる覚悟で臨んでください。
昼休憩1時間半のイベントでなんとかって感じだった。
今回は会場から少し離れているため、ご注意ください。&lt;/p&gt;

&lt;h2 id=&#34;麺の話:d73756869460c7fda1a00286c3e20134&#34;&gt;麺の話&lt;/h2&gt;

&lt;p&gt;麺を増量することができる店が多い。そばダブルやうどんダブルといえばだしてくれる。
ちゃんぽんでといえば、そばとうどんのミックスもでてくる。
辛子麺を扱うお店もある。辛いものがすきならおすすめ。&lt;/p&gt;

&lt;p&gt;若い人はそばばっかりだけど、年配の人はうどん好きも多い。うどんは邪道ではない。&lt;/p&gt;

&lt;p&gt;派生で、肉ダブル、卵タブル、野菜ダブル、麺なしなどがあります。&lt;/p&gt;

&lt;h2 id=&#34;箸の話:d73756869460c7fda1a00286c3e20134&#34;&gt;箸の話&lt;/h2&gt;

&lt;p&gt;ヘラだけわたされて、箸がわたされない店もある。
慣れている人はヘラだけで巧みに食べるけど、初心者にはおすすめしません。&lt;/p&gt;

&lt;h2 id=&#34;皿の話:d73756869460c7fda1a00286c3e20134&#34;&gt;皿の話&lt;/h2&gt;

&lt;p&gt;鉄板でたべるか選択できる店もある。
鉄板でたべるのが醍醐味という人もいるけど、皿ほうがやっぱりたべやすい。この場合は、箸でたべる。&lt;/p&gt;

&lt;h2 id=&#34;お好み焼きのソース:d73756869460c7fda1a00286c3e20134&#34;&gt;お好み焼きのソース&lt;/h2&gt;

&lt;p&gt;有名なのはオタフク。お店では以下の三種類が使われる&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;オタフク - 観光客狙いの店で使われる。ちょっとお高い店がおおい。うまい。&lt;/li&gt;
&lt;li&gt;カープ - ちょい辛め。オタフクが使えない店がつかってるように思えるかもしれない。うまい。&lt;/li&gt;
&lt;li&gt;ミツワ - ソースの暖簾がでてない。安めの店で使われている。コスパ最強。そしてうまい。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;オリジナルソースの店もある。
マイナーものだと、「わしらの結晶ソース」が好きだけど、使ってる店舗を把握できていない。駅前広場のSOZOというお店がメインで開発した模様。&lt;/p&gt;

&lt;h1 id=&#34;あなご:d73756869460c7fda1a00286c3e20134&#34;&gt;あなご&lt;/h1&gt;

&lt;p&gt;あなご自体扱う店はそれほど多くありません。
あなごめしに限っていえば、宮島口のうえのが圧倒的地位を築いています。
宮島口は宮島へのフェリー乗り場があるところで、フェリーで渡ってしまうとどこのあなごめしが美味しいかあまり情報をもっていません。店舗はたくさんありますが、ハズレも多いので、うえので食べておくのがおすすめです。&lt;/p&gt;

&lt;p&gt;うえのは大変混雑します。人が多い時間を避けましょう。
11時や15時あたりにいくように予定をたてることをおすすめします。
前述していますが、弁当も質が高いので、店舗で弁当を買っていくという方法もあります。&lt;/p&gt;

&lt;p&gt;宮島口は会場から片道1時間弱かかりますので注意してください。&lt;/p&gt;

&lt;h1 id=&#34;牡蠣:d73756869460c7fda1a00286c3e20134&#34;&gt;牡蠣&lt;/h1&gt;

&lt;p&gt;カキフライはいろんなお店で食べることができますが、生牡蠣はたべられるお店が限られます。
鉄板焼きへ行けば、かきバターなどもあります。&lt;/p&gt;

&lt;h1 id=&#34;結び:d73756869460c7fda1a00286c3e20134&#34;&gt;結び&lt;/h1&gt;

&lt;p&gt;広島なかなかおいしいものたくさんある。広島のIT企業がもりあがって、面白いエンジニアが増えて欲しい。(そして遊びにいかせてくれ)&lt;/p&gt;

&lt;p&gt;再三書いているが私はRubyKaigi 2017には参加できない。つらい。
代わりに是非ともみなさんには広島を楽しんで盛り上げて欲しい。&lt;/p&gt;

&lt;h2 id=&#34;関連:d73756869460c7fda1a00286c3e20134&#34;&gt;関連&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2017/08/02/in-the-hospital-2017/&#34;&gt;4ヶ月ほど入院してプログラマとして感じたことと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>4ヶ月ほど入院してプログラマとして感じたこととか</title>
          <link>https://blog.eiel.info/blog/2017/08/02/in-the-hospital-2017/</link>
          <pubDate>Wed, 02 Aug 2017 17:03:24 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2017/08/02/in-the-hospital-2017/</guid>
          <description>

&lt;p&gt;毎月スライドが公開されてたブログが突然と更新されなくなって驚かれたかもしれませんが、3月20日から4ヶ月ほど病院に入院していました。
せっかくなので、入院している中で感じたことを書き下しておきたいと思います。
(しかし、この記事は書き始めて１ヶ月後に公開されたため、ある程度日常生活をした上で書かれている)&lt;/p&gt;

&lt;p&gt;本記事を結論を述べておくと「プログラマはこんな体でも世の中に貢献できる可能性がある」と感じた。
座っていて作業できて、リモートワークできる。努力しだいでは、世界で活躍するのも可能だ。
(世界で活躍はできていないけど)&lt;/p&gt;

&lt;p&gt;ざっくり目次&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;一体なにがあったのか&lt;/li&gt;
&lt;li&gt;入院中に感じたこと&lt;/li&gt;
&lt;li&gt;入院生活で改善したいこと&lt;/li&gt;
&lt;li&gt;今後のこと&lt;/li&gt;
&lt;li&gt;まとめ&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;一体何があったか:609a530b24fe22ca1b97ce79f1bd5253&#34;&gt;一体何があったか&lt;/h1&gt;

&lt;p&gt;心臓の血液を全身に流すチカラが弱くなってしまった。
もともと弱くなっていることはわかっていたが、これが悪化してしまい日常生活ができなくなりました。
そこで、補助人工心臓装置を体に植え込み、装置とうまく付き合うことで日常生活が送れるようになりました。&lt;/p&gt;

&lt;p&gt;「安静にしとけ」って言われた同じような病気がある人は本当に無理をしないことをおすすめしたい。
無理をすることは自らに大きな制約を課すのと同等だ。&lt;/p&gt;

&lt;p&gt;(そうは言われてもどこからが無理のある範囲なのかわからへんのや)&lt;/p&gt;

&lt;h2 id=&#34;より詳しいこと:609a530b24fe22ca1b97ce79f1bd5253&#34;&gt;より詳しいこと&lt;/h2&gt;

&lt;p&gt;広島の病院に入院していましたが、状況が改善しないため、より高度な治療が可能な大阪の病院に転院した。
治療法としては心臓移植をしかないが、現在の移植待機中の人達が大勢いるため、移植ができるのは３年以上先の見込みである。
移植する心臓は全く足りていないようだ。&lt;/p&gt;

&lt;p&gt;代わりに、植え込み式の補助人工心臓装置を装着することで、退院可能な状態になる。
私は4月末に人工心臓装着し、7月末にさまざまな訓練を終えて退院した。
補助人工心臓を扱える病院は広島にはないため、現在は大阪の病院の近くに住んでいます。&lt;/p&gt;

&lt;p&gt;大阪に移動するときヘリだったんだけど、ずっと寝たままで怖かった。
ヘリで移動後は、3週間ぐらい電波禁止の病室にいて、インターネットがつかえなくてさまざまな人と連絡とれなくてつらかった。&lt;/p&gt;

&lt;p&gt;そういえば、脳梗塞とかもおきて、片目が動かなくなった。
さすがに仕事ができなるかとおもったけど、なおった。よかった。&lt;/p&gt;

&lt;p&gt;人工心臓装置装着後のリハビリはたいへんって脅されたけど、中学生がやっているような炎天下の部活に比べたら大したことはなかった。パソコンが使えないため、退院するためにも、リハビリに対するモチベーションはかなり高かった。
結果、リハビリでは、補助人工心臓装置装着者の中では、最速の歩行速度という称号を得ることができた。&lt;/p&gt;

&lt;h1 id=&#34;現在の状況:609a530b24fe22ca1b97ce79f1bd5253&#34;&gt;現在の状況&lt;/h1&gt;

&lt;p&gt;いくつか制限があったり、面倒なこともありますが、ほぼ普通に生活しています。
プログラミングもしたり、でかけることもできます。
最近は4時間ぐらい継続して作業することもできるようになってきました。&lt;/p&gt;

&lt;h2 id=&#34;より詳しいこと-1:609a530b24fe22ca1b97ce79f1bd5253&#34;&gt;より詳しいこと&lt;/h2&gt;

&lt;p&gt;イベントの準備を手伝ったり、&lt;a href=&#34;https://flow.org/&#34;&gt;Flow&lt;/a&gt;で遊んだり、&lt;a href=&#34;https://www.rust-lang.org/ja-JP/&#34;&gt;Rust&lt;/a&gt;で遊んだり、Swiftで遊んだり、Scalaで遊んだりしています。
ETAとElixir、Kotlinあたりも遊びたいですが、作るものが浮かびません。&lt;/p&gt;

&lt;p&gt;話がそれましたが、二人暮らしで妻が妊婦なため、買い物は重いものを持つ必要があったりするのが、他の装着者には無さそうな苦労です。(車ももってないし、この辺は坂が多い)&lt;/p&gt;

&lt;p&gt;補助人工心臓は胃の上あたりに植え込まれていて、電力供給するためのケーブルがお腹から出ています。
また、お腹から出ているケーブルには、コントローラとバッテリーが接続されていて、このコントローラとバッテリーを入れた2.5kgの鞄を常に持ち歩いています。
コントローラとバッテリーの予備も常に持つ必要があり、出かける場合は5kgほど追加で持つ必要があります。
他の装着者は介護者が持つと思いますが、なるべく自分で持つようにしたいと思っていますし、そこそこ持っています。&lt;/p&gt;

&lt;p&gt;ケーブルが出ている部分にチカラがかからないように活動する必要があるため、しゃがんだりすることが禁止されていたり、行動が制限されています。
また、週2回ほど消毒作業をしていて1時間弱かかっています。&lt;/p&gt;

&lt;p&gt;お風呂は入ることができず、シャワーになります。
お腹まわりをラップのようなもので保護をして、コントローラとバッテリーは保護用のカバンに入れ替えて、カバンを持ち込んでシャワーを浴びることになります。&lt;/p&gt;

&lt;p&gt;あとは補助人工装置を扱える介護者がアラームの聞こえる範囲に必要があります。
どちらかが外に用事がある場合は、二人で必ず出かける必要があります。
お腹から鞄までのケーブルがむき出しなので、出かける際は引っ掛けないように気を付けないといけません。
人の多い場所はたいへん危険です。&lt;/p&gt;

&lt;p&gt;残りはほとんど普通の日常かと思います。&lt;/p&gt;

&lt;h1 id=&#34;入院中に感じたこと:609a530b24fe22ca1b97ce79f1bd5253&#34;&gt;入院中に感じたこと&lt;/h1&gt;

&lt;h2 id=&#34;看護師プロ意識:609a530b24fe22ca1b97ce79f1bd5253&#34;&gt;看護師プロ意識&lt;/h2&gt;

&lt;p&gt;患者の命を預かってるという意識をもって仕事しているのを日々感じた。
僕らはシステム利用者のビジネスを背負って仕事できていただろうか。
気がつくと目の前のものを完成させるのに精一杯になってしまってないだろうか。&lt;/p&gt;

&lt;p&gt;その前に大半の人が補修が少なすぎるという話はあるかもしれないけれども、そもそも独学で始めたような人達も多いし、作ることしか考えれていない場面はよくみかける。
プロ意識みたいなのは欠けていないかときどき自問自答したい。&lt;/p&gt;

&lt;h2 id=&#34;医学すごい:609a530b24fe22ca1b97ce79f1bd5253&#34;&gt;医学すごい&lt;/h2&gt;

&lt;p&gt;医者は数値としては曖昧な反応をみて対処をしていく。
プログラムは書いたとおりにうごくので、ずっと扱いやすく発展しやすいけど、こんな曖昧な数値しかとれないものが発展しているのは本当にすごい。&lt;/p&gt;

&lt;p&gt;曖昧ではなく、成否のはっきりするコンピュータを扱っているので、もっとうまく扱っていきたいと感じました。&lt;/p&gt;

&lt;h1 id=&#34;入院生活で改善したいこと-改善して欲しいこと:609a530b24fe22ca1b97ce79f1bd5253&#34;&gt;入院生活で改善したいこと、改善して欲しいこと&lt;/h1&gt;

&lt;h2 id=&#34;テレビカードいらないからインターネットカードが欲しい:609a530b24fe22ca1b97ce79f1bd5253&#34;&gt;テレビカードいらないからインターネットカードが欲しい&lt;/h2&gt;

&lt;p&gt;テレビとかいらないんで、インターネットさせてください。
暇なのでセミナーの動画とか見たかったです。&lt;/p&gt;

&lt;h2 id=&#34;パソコン使わせてください:609a530b24fe22ca1b97ce79f1bd5253&#34;&gt;パソコン使わせてください&lt;/h2&gt;

&lt;p&gt;パソコン使えれば、開発できるのに。
暇すぎて&lt;a href=&#34;http://www.jp.square-enix.com/saga_sg/&#34;&gt;サガスカ&lt;/a&gt;を全キャラクリアしてしまった。&lt;/p&gt;

&lt;h2 id=&#34;もっと座って過ごせばよかった:609a530b24fe22ca1b97ce79f1bd5253&#34;&gt;もっと座って過ごせばよかった&lt;/h2&gt;

&lt;p&gt;多くの時間を寝て過ごしてましたが、座って過ごせば良かったと思ってます。
長時間座っていられるようになるまで、退院してから時間がかかりました。
退院直後は作業時間があまりとれませんでした。&lt;/p&gt;

&lt;p&gt;長くは生きられないならそんなこと言ってられないことばかり書いてすみません。
しかし、入院していてもどこかにプルリクエストを出していたい気がする。&lt;/p&gt;

&lt;h1 id=&#34;今後のこと:609a530b24fe22ca1b97ce79f1bd5253&#34;&gt;今後のこと&lt;/h1&gt;

&lt;p&gt;少しづつ仕事に復帰できるように仕事するつもりで家で作業してみるつもりです。&lt;/p&gt;

&lt;p&gt;正直な話、色々な保障はあるので、仕事せずともしばらくは生活はできるけれども毎月赤字になりそうな気配である。努力を怠ることはできない。&lt;/p&gt;

&lt;p&gt;特殊な状況下にいることを理解して、自分の立場でしか見れない視点も活かせていきながら、プログラミングは継続していこうとおもう。&lt;/p&gt;

&lt;p&gt;そういえば、&lt;a href=&#34;http://amzn.to/2vGPQgt&#34;&gt;インクルーシブデザイン&lt;/a&gt;とか流行ってきてますし、補助人工心臓を装着しているシステムにも精通した人の意見が欲しいことがもしあれば気軽にお誘いください。
負担のない範囲でお手伝いいたします。&lt;/p&gt;

&lt;h1 id=&#34;まとめ:609a530b24fe22ca1b97ce79f1bd5253&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;入院はたいへんだ。&lt;/p&gt;

&lt;p&gt;みんな無理はするべきではない。&lt;/p&gt;

&lt;p&gt;しかし、プログラマはこんな体でも未来のことを考えることができる。
肉体労働はとてもじゃないけどできそうにない。&lt;/p&gt;

&lt;p&gt;なんとなくエゴサーチしてみれば、過去の記事が誰かの役に立っていたりするのをみることができる。
できることは減ってしまったけれども、できることは本当にたくさんある。&lt;/p&gt;

&lt;h1 id=&#34;おまけ:609a530b24fe22ca1b97ce79f1bd5253&#34;&gt;おまけ&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/92595/30042890-2bcce4d2-922f-11e7-8854-ce709a12fb4e.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://rubykaigi.org/2017&#34;&gt;RubyKaigi 2017&lt;/a&gt;には参加できそうにないので、代わりにたくさんの広島の人に参加して欲しいです。国際的で、この規模のイベントが広島で行われるのはなかなかない機会だと思います。
そして、広島のコミュニティの運営に役立ててくださるとさらに嬉しいです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://summit.scala-kansai.org/&#34;&gt;Scala関西Summit 2017&lt;/a&gt;にも参加が厳しそうなのなどえ、代わりに協賛しておきました。こちらはもしかすると顔ぐらいは出せるかもしれません。
行けたとしてもすぐ帰ると思いますので、偶然会えることを楽しみにしています。&lt;/p&gt;

&lt;p&gt;そういえば、&lt;a href=&#34;https://cssnite-hiroshima.com/vol10/&#34;&gt;CSS Nite in HIROSHIMA, Vol.10 「ウェブ制作の今と、これから」&lt;/a&gt;ではインクルーシブデザインとかも扱うそうです。興味があるプログラマは何も言わなくても参加されるので、今回はちょっとピンとこないかなと言うデザイナーこそ参加すると面白い気がします。&lt;/p&gt;

&lt;p&gt;関西で、参加できそうなものがあればきっと遊びにいくのでしばらくの間よろしくおねがいします。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>広島フロントエンド勉強会で、カスタムエレメントの話をして、divタグの代わりにはつかえるんじゃないか?というLTをした</title>
          <link>https://blog.eiel.info/blog/2017/03/06/frontend-vol7/</link>
          <pubDate>Mon, 06 Mar 2017 00:28:36 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2017/03/06/frontend-vol7/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://hfe.connpass.com/event/50535/&#34;&gt;広島フロントエンド勉強会 Vol.7&lt;/a&gt;でライトニングトークをした。案の定早すぎると言われた。いつものことである。(結構削ったんだけどな)&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;e671bec0e21b43848359549693500de4&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;「&lt;a href=&#34;http://great-h.github.io/&#34;&gt;すごい広島&lt;/a&gt;」で&lt;a href=&#34;https://aframe.io/&#34;&gt;A-FRAME&lt;/a&gt;触ってる人がいて、A-FRAMEをみていたらカスタムエレメントをつかってるみたいだったので、調べたついでに思ったことを述べた。&lt;/p&gt;

&lt;p&gt;「カスタムエレメントは独自のタグが使える」ぐらいの理解で充分かなっとおもってます。
Angular2にしても、Reactにしても、Riotにしても、Vueにしても独自タグのようなものがでてくるので、独自タグを定義できるという感覚は慣れておいて損はないと思い話を考えました。&lt;/p&gt;

&lt;p&gt;本題ですが、カスタムエレメントは要素が定義するまでは未解決の要素となり、正当なエレメントになるらしい。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;要素は定義の通りにアップグレードされるまでの間、 未解決の要素 と呼ばれます。これらの HTML 要素は正当な Custom Element 名を持ちますが、まだ登録されていないものです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.html5rocks.com/ja/tutorials/webcomponents/customelements/&#34;&gt;https://www.html5rocks.com/ja/tutorials/webcomponents/customelements/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ということは、エレメントを登録しなくてもつかえそうだし、特に中身を実装しなくても、使うことで可読性の高いマークアップができるような気がしました。&lt;/p&gt;

&lt;p&gt;というわけで、特に何も実装してないカスタムエレメントでマークアップをすることは、カスタムエレメントの入門としてありなのではないかと思ったわけです。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;div だらけでモダンと言えるでしょうか？そして現状では、これが我々のウェブアプリの作り方なのです。悲しいですね。 我々はウェブプラットフォームからの恩恵をもっと受けるべきだとは思いませんか？
&lt;a href=&#34;https://www.html5rocks.com/ja/tutorials/webcomponents/customelements/&#34;&gt;https://www.html5rocks.com/ja/tutorials/webcomponents/customelements/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;カスタムエレメントの誕生の意義からも全く外れていません。&lt;/p&gt;

&lt;p&gt;独自タグの要素にCSSも問題なく使えます。定義しておかなくてもバッチリスタイルもあたります。&lt;/p&gt;

&lt;p&gt;カスタムエレメントのAPIはv0とv1があるようです。
v1のほうが対応ブラウザが多いですが、v0はPolyFillもありますし、class構文が必要ないので、v0 APIのほうが実質対応ブラウザが多い気がします。class構文無しでもv1 APIは使えるみたいですが、結局未対応ブラウザはAPIが足りなくてつかえなさそうでした。(調べたメモがどっかいったのでソースは省略)&lt;/p&gt;

&lt;p&gt;あとカスタムエレメントに対して知っておきたいことは、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;独自タグの名前にはハイフンを含む必要がある&lt;/li&gt;
&lt;li&gt;カスタムエレメントを定義する前に利用しても良い&lt;/li&gt;
&lt;li&gt;まだAPIが変わる可能性がある&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;かなとおもいました。&lt;/p&gt;

&lt;p&gt;「独自タグの名前にはハイフンを含む必要がある」というルールをみてA-FRAMEはいい名前をとってるなと感じました。&lt;code&gt;a-&lt;/code&gt;で始まるタグはA-FRAMEのタグになるので、完全に一等地ですね。
Z-FRAMEはどんなライブラリがとるのかとても見ものです。&lt;/p&gt;

&lt;p&gt;カスタムエレメントをマスターしたら次のステップはShadow DOMなんですかなー。&lt;/p&gt;

&lt;h3 id=&#34;ためしにかいたコード:8582c1a916eb71f69d5de5b8f741443e&#34;&gt;ためしにかいたコード&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;my-app&amp;gt;
  &amp;lt;my-contact&amp;gt;
    &amp;lt;my-header&amp;gt;連絡帳&amp;lt;/my-header&amp;gt;
    &amp;lt;my-user&amp;gt;hoge@example.com&amp;lt;/my-user&amp;gt;
  &amp;lt;/my-contact&amp;gt;
  &amp;lt;my-inbox&amp;gt;
    &amp;lt;my-header&amp;gt;受信箱&amp;lt;/my-header&amp;gt;
    &amp;lt;my-mail&amp;gt;2016-01-02 hogehoge&amp;lt;/my-mail&amp;gt;
    &amp;lt;my-mail&amp;gt;2016-01-03 hogehoge&amp;lt;/my-mail&amp;gt;
  &amp;lt;/my-inbox&amp;gt;
&amp;lt;/my-app&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;body {
  display: flex;
  justify-content: center;
  align-items: center;
}

my-app {
  display: block;
  background-color: #eee;
  width: 300px;
}

my-contact {
  display: block;
  margin: 10px 10px 0 10px;
  background-color: white;
}

my-contact &amp;gt; my-user {
  padding: 4px;
  font-size: 10px;
}

my-contact &amp;gt; my-header {
  font-size: 10px;
}

my-inbox {
  display: block;
  margin: 10px;
  background-color: white;
}

my-header {
  display: block;
  padding: 0.2 0.5em;
  background-color: #823;
  color: white;
}

my-mail {
  display: block;
  padding: 4px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://playcode.io/6719&#34;&gt;https://playcode.io/6719&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;参考文献:8582c1a916eb71f69d5de5b8f741443e&#34;&gt;参考文献&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://webkit.org/blog/7027/introducing-custom-elements/&#34;&gt;https://webkit.org/blog/7027/introducing-custom-elements/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PolyFill &lt;a href=&#34;https://github.com/WebReflection/document-register-element&#34;&gt;WebReflection/document-register-element&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://html.spec.whatwg.org/multipage/scripting.html#custom-elements&#34;&gt;whatwg Custom Elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Custom_Elements&#34;&gt;Custom Elements | MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.html5rocks.com/ja/tutorials/webcomponents/customelements/&#34;&gt;Custom Element | HTML5Rocks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>オープンセミナー2017@広島の申し込みが少ないので、興味を持つ人が増えるように内容について個人の見解を述べる</title>
          <link>https://blog.eiel.info/blog/2017/02/15/2017-osh/</link>
          <pubDate>Wed, 15 Feb 2017 13:56:19 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2017/02/15/2017-osh/</guid>
          <description>

&lt;p&gt;2017年2月25日(土)に&lt;a href=&#34;http://osh-web.github.io/2017/&#34;&gt;オープンセミナー2017@広島&lt;/a&gt;があります。
いまいち申し込みが少ないので、テコ入れにすらなるかどうかわからないですが、スタッフの個人の意見を述べることで、オープンセミナー2017@広島がどんなイベントが理解してもらい、参加者を増やすのが目的です。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;この記事にかいてあること&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;広島のITエンジニアが集まって交流するイベントが一つはほしい&lt;/li&gt;
&lt;li&gt;今回のオープンセミナー広島の内容の個人的な推測&lt;/li&gt;
&lt;li&gt;テーマはいままで参加してくれていない人たちへのアプローチするのが主な目的&lt;/li&gt;
&lt;li&gt;懇親会の申込みは20日(月)まで

&lt;ul&gt;
&lt;li&gt;懇親会LTはありません&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;広島のitエンジニアが集まって交流するイベントが一つは欲しい:f5753a4d70d45a4ae9b5bbda71930f3b&#34;&gt;広島のITエンジニアが集まって交流するイベントが一つは欲しい&lt;/h1&gt;

&lt;p&gt;私は、地域ごとに毎年ジャンル問わない大きなITエンジニア向けのイベントがあると良いと思ってます。
その地域にいく機会が欲しいからです。&lt;/p&gt;

&lt;p&gt;自分が追っている特定の技術を扱うイベントは県外でもいくことはありますが、地方ではなかなか難しいです。
自分の住む地域より人の少ないところへ行くことは少なく、より人の多い 都会へ出かけていく事が多いと思います。(例外はある)&lt;/p&gt;

&lt;p&gt;そんな、県外に住むエンジニアが「広島に行ってみよう」と考えたときにちょうどいいイベントがあると嬉しいかなと思うわけです。
こちらも誘いやすいです。&lt;/p&gt;

&lt;p&gt;私も山陰や四国に行く機会があれば行きたいとおもいますが、どうせ行くならその地方にいる優秀なエンジニアが集まっているイベントが良いかなっておもいます。
個人的にも、お誘いはそこそこお待ちしています。&lt;/p&gt;

&lt;p&gt;正直な話、広島に行くのにちょうどいいイベントがオープンセミナー広島である必要もないわけです。
比較的そういう位置に育てやすいのがオープンセミナー広島という感じです。
ぶっちゃけ、OSC広島は昨年は学生もたくさんいて、むしろOSCのほうがいい線をいってるかもしれません。&lt;/p&gt;

&lt;p&gt;私はオープンセミナーのお手伝いを2013年ぐらいからしています。
特定の企業が運営しておらず現場で働くITエンジニアがボランティアで運営するイベントの中では広島で一番大きいと思います。
しかも、突然運営に参加した人がこれまで培ってきた下地を掌握しやすいです。
特に、広島で起業するエンジニアがうまく活用して欲しいと思っています。&lt;/p&gt;

&lt;h1 id=&#34;今回のテーマについて:f5753a4d70d45a4ae9b5bbda71930f3b&#34;&gt;今回のテーマについて&lt;/h1&gt;

&lt;p&gt;テーマは「エンジニアがより良い社会を作れる!!」です。&lt;/p&gt;

&lt;p&gt;テーマはキャッチーですが、個人的にはセッション内容がピンとこない印象です。
エンジニアが参加して何が得られるのでしょうか?&lt;/p&gt;

&lt;p&gt;背景としては、今回の実行委員長である石崎さんが&lt;a href=&#34;http://code4japan.org/&#34;&gt;Code for Japan&lt;/a&gt;が行っている鯖江市でのコーポレートフェローシップの経験を活かした構成になっています。
「SIとして働いてきたエンジニアがすこし違う世界にいってみたら、目の前に困っている人を助けられる経験ができて&lt;strong&gt;日々が楽しく変化したいから共有したい&lt;/strong&gt;」と、推測しています。(推測です)&lt;/p&gt;

&lt;p&gt;参考 &lt;a href=&#34;http://code4japan.org/post/134384421578/%E9%AF%96%E6%B1%9F%E5%B8%82%E3%81%A7%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%9D%E3%83%AC%E3%83%BC%E3%83%88%E3%83%95%E3%82%A7%E3%83%AD%E3%83%BC%E3%82%B7%E3%83%83%E3%83%97%E3%81%8C%E5%A7%8B%E3%81%BE%E3%82%8A%E3%81%BE%E3%81%97%E3%81%9F-codeforjapan&#34;&gt;鯖江市でのコーポレートフェローシップが始まりました #codeforjapan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;そこで、実行委員長の石崎さんが鯖江で出会った&lt;strong&gt;「利用者に最も近いソフトウェアを提供し、より豊かな社会を実現する」&lt;/strong&gt;ために活動する福野さんが講師として登場することになったわけです。&lt;/p&gt;

&lt;p&gt;福野さんの最近の活躍で私が知ってるものは3月に結果が発表される&lt;a href=&#34;https://opendata.resas-portal.go.jp/contest/index.html&#34;&gt;RESASのプログラミングコンテスト&lt;/a&gt;の審査員を務められていますね。(応募締め切りは今週末2月19日なのでまだ間に合いますね)&lt;/p&gt;

&lt;p&gt;まとめると、石崎さんが出会った、外の世界、身近な世界にあった驚きや、発見を得られるのではないかと思います。（推測です)&lt;/p&gt;

&lt;h2 id=&#34;その他の講師について:f5753a4d70d45a4ae9b5bbda71930f3b&#34;&gt;その他の講師について&lt;/h2&gt;

&lt;h3 id=&#34;mythings使ったiotによる地域課題解決-山本-学:f5753a4d70d45a4ae9b5bbda71930f3b&#34;&gt;myThings使ったIoTによる地域課題解決 山本 学&lt;/h3&gt;

&lt;p&gt;今回どんな話をしてくれるのか僕もよくしりません。&lt;/p&gt;

&lt;p&gt;昨年も広島にこられていて、&lt;a href=&#34;https://hmcn.doorkeeper.jp/events/39721&#34;&gt;myThings X HMCN#3&lt;/a&gt;で講師を務められています。
蛇足ですが、HMCNとうまく連携しようという私の目論見もありましたが、まったく交渉していません。&lt;/p&gt;

&lt;p&gt;SIerは企業のシステムを構築することで社会に貢献してきたとおもいます。
近年登場してきた IoTというキーワードは、企業をアシストするのではなくて、エンジニアが直接社会に貢献できるチカラともいえると思っています。
そんなIoTをどのように活用しているのかを聞けるのではないかと思います。&lt;/p&gt;

&lt;h3 id=&#34;engineer-is-hero-マイクロサービスの開発手法や-iot-を採用し感情や表情を解析しより良い社会を作ろう-寺田-佳央:f5753a4d70d45a4ae9b5bbda71930f3b&#34;&gt;Engineer is Hero !! マイクロサービスの開発手法や IoT を採用し感情や表情を解析しより良い社会を作ろう 寺田 佳央&lt;/h3&gt;

&lt;p&gt;もはや語るまでもない &lt;a href=&#34;https://twitter.com/hashtag/%E3%81%A6%E3%82%89%E3%81%A0%E3%82%88%E3%81%97%E3%81%8A%E3%81%8C%E3%82%93%E3%81%B0%E3%82%8C&#34;&gt;#てらだよしおがんばれ&lt;/a&gt; の寺田さんです。
福山市出身らしいです。蛇足ですが、福山市出身の&lt;a href=&#34;https://twitter.com/soudai1025&#34;&gt;そーだいさん&lt;/a&gt;はエンジニア界でもホットですね。ちなみに、そーだいさんは先週末中国地方を旅されてたので、今回は来られないのではないかと思います。(ってかいておいたら来てくれるかもしれない)&lt;/p&gt;

&lt;p&gt;昨年末開催された&lt;a href=&#34;https://hiroshima-jug.connpass.com/event/46539/&#34;&gt;広島Javaユーザグループのイベント&lt;/a&gt;で寺田さんが登壇されましたが、参加者が少なかったので、もっとたくさんの人に効いてもらいたいのと今回のテーマと相性がよさそうということでお招きすることになりました。&lt;/p&gt;

&lt;p&gt;技術的な話もしっかり聞けると思います。&lt;/p&gt;

&lt;h3 id=&#34;子どもプログラミングとドリームマップ-花谷-美香:f5753a4d70d45a4ae9b5bbda71930f3b&#34;&gt;子どもプログラミングとドリームマップ 花谷 美香&lt;/h3&gt;

&lt;p&gt;身近な社会を変化させるという点においては教育はとても重要です。
未来の社会を担うのは子どもたちです。
子どもたちが、プログラミングの価値を理解する機会が増えています。&lt;/p&gt;

&lt;p&gt;プログラミングが得意な人たちは、プログラミングに無限の可能性を感じるはどんな人たちに映るでしょうか?
エンジニアはヒーローのように映ると思います。&lt;/p&gt;

&lt;p&gt;CoderDojoなどで、プログラミング教育に携わるエンジニアも増えています。
福野さんも子どもにフォーカスをあてていますよね。
子どもとの繋がりは強みです。&lt;/p&gt;

&lt;p&gt;私達がどういったプログラミング教育をすすめているのか理解することは、プログラマの未来をハッピーにすると思いませんか?
また、間接的にプログラミング教育をよりよくするためにできることはないでしょうか？&lt;/p&gt;

&lt;p&gt;そんなこと考える機会になったり、これからの私達の活躍場となるヒントが得られる話が聞けるのではないかと思います。(推測)&lt;/p&gt;

&lt;h3 id=&#34;ワクワクエンジニアライフの提案-元木-昭宏:f5753a4d70d45a4ae9b5bbda71930f3b&#34;&gt;ワクワクエンジニアライフの提案 元木 昭宏&lt;/h3&gt;

&lt;p&gt;やっぱりどんな内容になるのか把握していません。&lt;/p&gt;

&lt;p&gt;それはさておき、さきほど、子どもにフォーカスをあてました。&lt;/p&gt;

&lt;p&gt;じゃあ、少し立場をかえて、もっと年齢が上の立場からみて、ITエンジニアの世界はどのようにみえているのでしょうか？
また、どんなことをしたいという考えているのでしょうか?&lt;/p&gt;

&lt;p&gt;アジャイルはお客様に価値を届けることを重要視していたと思います。
ITに積極的に関わろうする人たちとつながることで、私達エンジニアの立場ほ強くなっていきます。&lt;/p&gt;

&lt;p&gt;子どもからお年寄りまで、さまざまな人に必要とされる存在になれる可能性を秘めています。
子どもプログラミングと視点がかわりますが、これもこれからの私達の活躍馬となるヒントが得られるのではないでしょうか。(推測)&lt;/p&gt;

&lt;h3 id=&#34;生活の中のテクノロジーとサービスとuxについて-薬師神-裕樹:f5753a4d70d45a4ae9b5bbda71930f3b&#34;&gt;生活の中のテクノロジーとサービスとUXについて 薬師神 裕樹&lt;/h3&gt;

&lt;p&gt;さまざまな人たちと私達がつながる可能性が見えました。
私達が作成システムと、人間を繋ぐインターフェースにフォーカスしてみましょう。
インターフェースを設計している人たちの間では「UX」というキーワードが流行しているようにおもいます。
そこでUXに携わる人達の話を聞こうという流れになります。&lt;/p&gt;

&lt;p&gt;個人的な意見ですが、UXというのは、アジャイルとよくにたもので、成長してきた過程が違うだけで、本質は同じように感じています。
「お客様に喜んでもらうためにははどのようにどうすればいいか?」というのが根底にある用に感じます。&lt;/p&gt;

&lt;p&gt;そういえば、アジャイルとUXを複合領域に興味を持っている人たちのコミュニティで、&lt;a href=&#34;https://sites.google.com/site/agileucdja/&#34;&gt;アジャイルUCD研究会&lt;/a&gt;というのがあります。&lt;/p&gt;

&lt;p&gt;私達がプロダクトをつくっていく上で、持っておくよい考え方が身につく可能性があります。&lt;/p&gt;

&lt;h3 id=&#34;セッションに関するまとめ:f5753a4d70d45a4ae9b5bbda71930f3b&#34;&gt;セッションに関するまとめ&lt;/h3&gt;

&lt;p&gt;「私達プログラマの活躍する場は広がってますよ！」&lt;/p&gt;

&lt;p&gt;どんなことをすればもっと私達の仕事も楽しくなって、社会にとって良いことができるかどうか考えてみようという点にフォーカスされてると思います。
講師の話を聞いて、懇親会や会社の人と共有するといつか私達エンジニアはみんなのヒーローになれる気がしてきませんか?&lt;/p&gt;

&lt;p&gt;あと、ちょっと技術の話が少ないですが、イベント本編で予定しているLTはなるべく技術的な話が集まるといいなーと進めています。&lt;/p&gt;

&lt;p&gt;ちなみに、懇親会の締め切りは2月20日(月)です。&lt;a href=&#34;https://www.chatwork.com/#!rid63408080&#34;&gt;conpass&lt;/a&gt;からお申込みください。&lt;/p&gt;

&lt;p&gt;今回懇親会でLTができないのは、スタッフのリソースが足りず、LTができそうな会場をみつけることができなかったからです。&lt;/p&gt;

&lt;p&gt;最後に、再三書いていますが、各講師がどんな話をするのか、私は把握していません。&lt;/p&gt;

&lt;h1 id=&#34;テーマはいままで参加してくれていない人たちへのアプローチするのが主な目的:f5753a4d70d45a4ae9b5bbda71930f3b&#34;&gt;テーマはいままで参加してくれていない人たちへのアプローチするのが主な目的&lt;/h1&gt;

&lt;p&gt;オープンセミナー広島に価値を見出せそうでしょうか?&lt;/p&gt;

&lt;p&gt;テーマを設定すること自体はターゲットを絞って、参加者を増やす仕掛けです。
テーマに興味をもってもらって、いままでオープンセミナー広島に参加していない人たちが参加いただいて、コミュニティの輪が広がると良いとおもってます。&lt;/p&gt;

&lt;p&gt;たとえテーマ的に興味がなくても、イベント自体にすでに価値を見出してる人たちはテーマ関係なく参加してくれます。そうやって輪を広げていくわけです。
一般的なエンジニアにとっては、聞きたいセッションがないかもしれません。
少なくとも、一線で活躍する人たちの話に価値がないわけがありません。
そして、県外からも参加者がいます。&lt;/p&gt;

&lt;p&gt;得られるものは何かあるのではないかとおもいます。&lt;/p&gt;

&lt;h1 id=&#34;まとめ:f5753a4d70d45a4ae9b5bbda71930f3b&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;正直な本音をかいておくと、今年は会場を広く借りているので、もったいないことにならないでくれると嬉しいなぁ。
せっかく広くなったのに去年より少ないのはちょっとな。&lt;/p&gt;

&lt;p&gt;去年は82名の参加者がいたらしいです。今年は現在60名です。&lt;/p&gt;

&lt;h1 id=&#34;関連記事:f5753a4d70d45a4ae9b5bbda71930f3b&#34;&gt;関連記事&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/01/04/lets-take-part-in-osh/&#34;&gt;オープンセミナー広島は広島のITエンジニアが集う場所&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2015/02/06/osh-2015/&#34;&gt;再・オープンセミナー広島は広島のITエンジニアが集う場所&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Firebase Hostingの紹介をした - WEB TOUCH MEETING #96</title>
          <link>https://blog.eiel.info/blog/2016/12/23/wtm-96/</link>
          <pubDate>Fri, 23 Dec 2016 18:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2016/12/23/wtm-96/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://wtm.connpass.com/event/45081/&#34;&gt;WEB TOUCH MEETING #96&lt;/a&gt;で&lt;a href=&#34;https://firebase.google.com/&#34;&gt;Firebase&lt;/a&gt;の紹介をしました。対象者としては、「レンタルサーバを借りたことがあって、独自ドメインの設定をしたことがある」ぐらいに設定してお話をしました。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;ca045cba785440c6a83027d2127d9707&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Firebaseを試した時に感じたのは、「Googleが用意したWebアプリケーションを作る手軽な場所」でした。
今まではその役割をGoogle App Engineが持っていたようにおもいます。
しかし、次世代のGoogle App Engineとなる Flexible Environmentは無料では始められないようになっています。
この部分にFirebaseが登場したから役目を終えたのではないかと感じました。&lt;/p&gt;

&lt;p&gt;次に、気になったのはが独自ドメインのTLS/SSLが無料だったことです。
独自ドメインでなければHTTPSがつかえるサービスは確実に増えていて、困ること減っているとおもいます。
また、VPSなどあれば無料で証明書は発行して、HTTPSに対応できるようになってきましたが、ブログサービスなどの活用をしようとした場合、なかなか無料で独自ドメイン使えるものはありませんでした。&lt;/p&gt;

&lt;p&gt;そうしているうちに状況は変化してきて、
2017年1月からGoogle ChormeがHTTPのサイトは警告を出すようになるそうです。&lt;/p&gt;

&lt;p&gt;HTTPSでないサイトではiOSの一部の機能が使えないそうです。&lt;/p&gt;

&lt;p&gt;先日Jimdoが独自ドメインのHTTPSの対応を発表したりなどありました。&lt;/p&gt;

&lt;p&gt;HTTPS everywhereを現実に迎える直前で、良いタイミングだと思ってFirebase Hostingを紹介しました。
アプリケーションに満たないちょっとしたWebサイトを公開する際の一つ&lt;/p&gt;

&lt;p&gt;他の話はおまけ程度のつもりで以下の話もしました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;FTPは使えなくてコマンドを使う必要があるよ&lt;/li&gt;
&lt;li&gt;でも簡単に前の状態に戻せるよ&lt;/li&gt;
&lt;li&gt;Firebase Hostingにドメインを割り当てると、サブドメインを別のFirebaseプロジェクトに割当ができないよ&lt;/li&gt;
&lt;li&gt;Firebaseの他の機能を使うとこんなことができるよ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;FTPでファイルを手動でアップロードしてる人たちの考え方が変わると良いなと少し思いました。&lt;/p&gt;

&lt;h3 id=&#34;デモサイトの話:42c75786b90dd76cf1e96908af714145&#34;&gt;デモサイトの話&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://eiel.info/&#34;&gt;https://eiel.info/&lt;/a&gt;をリニューアルついでにデモとして使いました。&lt;/p&gt;

&lt;p&gt;サインインをすると挨拶ができるという機能が実装されています。
リアルタイムに反映されるのをみていただきました。&lt;/p&gt;

&lt;p&gt;ソースコードは以下に公開しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eiel/eiel.info/tree/wtm96&#34;&gt;eiel/eiel.info Tag wtm96&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;React.js + material-ui を利用もしていますが、その話は一切しませんでした。
最近はウェブサイト作る必要がある際にmaterial-uiを試しています。&lt;/p&gt;

&lt;p&gt;Firebaseに関するコードだけ抜粋します。
JavaScriptですがBabelを利用して、ES2017が使える状態にしてあります。&lt;/p&gt;

&lt;p&gt;firebaseの利用準備&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import firebase from &#39;firebase/app&#39;
import {} from &#39;firebase/auth&#39;
import {} from &#39;firebase/database&#39;

const config = {
    apiKey: &amp;quot;xxxxxxxxxxx&amp;quot;,
    authDomain: &amp;quot;xxxxxxxxxxxxxx&amp;quot;,
    databaseURL: &amp;quot;xxxxxxxxxxxxxx&amp;quot;,
    storageBucket: &amp;quot;xxxxxxxxxxxxxxxx&amp;quot;,
    messagingSenderId: &amp;quot;xxxxxxxxxxxxxxx&amp;quot;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;認証処理は以下の感じで呼び出せばすぐに認証がはじまるのでボタンクリック次のイベントに設定したりするだけでした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 認証にGoogleアカウントを使う
let provider = new firebase.auth.GoogleAuthProvider();

// これを呼び出すと認証が開始する
firebase.auth().signInWithPopup(provider).then(function(result) {
  // 認証が成功した時の処理
  let token = result.credential.accessToken;
  let user = result.user;
}).catch(function(error) {
  // 認証が失敗した時の処理
  let errorCode = error.code;
  let errorMessage = error.message;
  let email = error.email;
  let credential = error.credential;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;userの状態が変化したときの処理も登録できるのでそこでサインインしているユーザのアイコンを表示しています。今回のデモはReactのstateをかえるだけで、あとはReactにおまかせしています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;firebase.auth().onAuthStateChanged((user) =&amp;gt; {
  this.setState({user});
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;リアルタイムデータベースのほうは「挨拶をする」を押下時にデータを作成しています。
押下時にメッセージを用意して、以下の感じでデータを挿入しています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;addMessage(message) {
  const key = firebase.database().ref(&#39;messages&#39;).push().key;
  firebase.database().ref(`messages/${key}`).set({created_at: new Date().getTime(), message: message, photoURL: this.state.user.photoURL})
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;表示のほうは、&lt;code&gt;messages&lt;/code&gt;以下のデータの変更検知して再描画しています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;firebase.database().ref(&#39;messages&#39;).on(&#39;value&#39;, (snapshot) =&amp;gt; {
  // データが変更されたときの処理
  let values = snapshot.val();
  if (values) {
    let keys = Object.keys(values);
    let length = keys.length;

    // 描画用にデータを修正
    let messages = [];
    for (let key of keys){
      let message = values[key];
      messages.unshift(message);
    }
    this.setState({messages});

    // 不要なデータを削除
    let updates = {};
    let deleteKeys = keys.splice(0,length-20);
    for (let key of deleteKeys) {
      updates[key] = null;
    }
    firebase.database().ref(&#39;messages&#39;).update(updates);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;setState&lt;/code&gt;をすることでReactが再描画してくれて、描画に不要データの削除をしています。
ある程度JavaScriptがかけると比較的すぐに使えるんじゃないかとおもいます。&lt;/p&gt;

&lt;h3 id=&#34;スライドに含まれているurl:42c75786b90dd76cf1e96908af714145&#34;&gt;スライドに含まれているURL&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://firebase.google.com/&#34;&gt;Firebase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sakura.ad.jp/function/security/original-ssl.html&#34;&gt;さくらインターネットの独自SSL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.jimdo.com/2016/12/20/ssl-all/&#34;&gt;Jimdoサイト SSL対応&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://azukichi.net/baseball/baseball055.html&#34;&gt;野球場のいらすと&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://letsencrypt.jp/&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;CloudFlare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/06/15/20160614apple-will-require-https-connections-for-ios-apps-by-the-end-of-2016/&#34;&gt;Webに接続するiOSアプリは2017年1月からHTTPSの使用が絶対条件になる、デベロッパーはご注意を&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/09/09/20160908chrome-is-helping-kill-http/&#34;&gt;hromeはHTTPの死を早めている…１月からHTTPSでないページに警告を表示&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>広島から岡山への距離 - 大都会岡山 Advent Calendar 2016</title>
          <link>https://blog.eiel.info/blog/2016/12/04/2016-okayama-ac/</link>
          <pubDate>Sun, 04 Dec 2016 00:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2016/12/04/2016-okayama-ac/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://www.adventar.org/calendars/1580&#34;&gt;大都会岡山 Advent Calendar 2016&lt;/a&gt;の4日目の記事です。
書くことがないのに枠が余ってたので滑り込みました。&lt;/p&gt;

&lt;p&gt;昨日は、&lt;a href=&#34;http://www.adventar.org/users/1572&#34;&gt;razon&lt;/a&gt;さんの&lt;a href=&#34;http://shizone.github.io/2016/12/03/0043/&#34;&gt;大都会が誇る「ゴールデンハンマー」というエナジードリンクについて - SHI-Zone&lt;/a&gt;でした。ゴールデンハンマーとやら味わってみたいものです。&lt;/p&gt;

&lt;p&gt;さて、書くことがないのに筆をとることにしました。
もしかすると中国地方に来たことがない方がいるかもしれないので、広島と岡山の距離感の話でもすればいい気がしてきました。&lt;/p&gt;

&lt;p&gt;私は岡山に年に2,3回行くことがあります。
岡山に行く目的はだいたい交流目的です。&lt;/p&gt;

&lt;p&gt;ITエンジニアとして人生を生きているため、他県のエンジニアと仲良くなることは、自分にない視点からの考えを得ることができとても参考になります。
地方だと都会にくらべて、いろんな考え方が入って来にくいと思います。
のんびりできて良いことでもあります。&lt;/p&gt;

&lt;h1 id=&#34;岡山へ行こう:3d45c67242595d7848c04b32357b4644&#34;&gt;岡山へ行こう&lt;/h1&gt;

&lt;p&gt;僕が広島から岡山へ行く手段は3つあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;電車 - 片道 170分 3020円&lt;/li&gt;
&lt;li&gt;新幹線 - 片道 40分 5500円&lt;/li&gt;
&lt;li&gt;高速バス - 片道 150分 2900円&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大体の場合が新幹線で節約したいときは高速バスで、倉敷に行くときは各駅電車なことが多いです。
ただし、高速バスは予約が必要だったり、本数もすくないので、最近は各駅の電車を選ぶこともあります。
正直、電話してまで予約したいレベルで電話が嫌いです。&lt;/p&gt;

&lt;p&gt;新幹線を使うと3倍上早くつくのに、値段は2倍未満なのでとてもお買い得です。&lt;/p&gt;

&lt;p&gt;旅客鉄道株式会社旅客運賃減額「第1種」が使えるとその優位性は少しおちてしまいます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;電車 - 片道 170分 1510円&lt;/li&gt;
&lt;li&gt;新幹線 - 片道 40分 3990円&lt;/li&gt;
&lt;li&gt;高速バス - 片道 150分 1450円&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;それでもやはり新幹線がお買い得でしょう。&lt;/p&gt;

&lt;h1 id=&#34;広島と岡山の距離:3d45c67242595d7848c04b32357b4644&#34;&gt;広島と岡山の距離&lt;/h1&gt;

&lt;p&gt;広島と岡山の距離はJRで160kmあるそうです。
ちなみに、大阪から京都は40km、横浜から東京は39km程度です。&lt;/p&gt;

&lt;p&gt;広島から大阪の間が340km程度なので、半分よりは近いため、広島に遊びにいくぐらいなら大阪方面にいくほうがよさそうな気がしてしまいます。
見方をかえれば、広島の人が関西の人と交流するのであればとてもちょうどいい場所にあります。&lt;/p&gt;

&lt;p&gt;そういえば、広島と岡山の人が交流する目的で&lt;a href=&#34;https://hirosimaokayamarb.doorkeeper.jp/events/8993&#34;&gt;広島・岡山Ruby交流会01&lt;/a&gt;などが開催されました。&lt;/p&gt;

&lt;p&gt;四国との位置関係も相まって、交流という観点では、人が集まりやすい地域です。&lt;/p&gt;

&lt;h1 id=&#34;岡山で会おう:3d45c67242595d7848c04b32357b4644&#34;&gt;岡山で会おう&lt;/h1&gt;

&lt;p&gt;結局、何が言いたいかというと、&lt;a href=&#34;https://gbdaitokai.connpass.com/event/37730/&#34;&gt;せっかく岡山にいく予定があるので&lt;/a&gt;、関西や四国、山陰の人はぜひ岡山で会いたいなって思ってます。
県外ゲスト枠でセッション申し込んでしまったけど、まだ未定です。
あ、広島の人も岡山であってみたいですね。&lt;/p&gt;

&lt;h1 id=&#34;まとめ:3d45c67242595d7848c04b32357b4644&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;広島は良いところですが、広島まで来いとはいいません。
岡山もいいところです。
他県の人にも来るようにアピールしたので、広島の人も岡山にいってみてはどうでしょうか。&lt;/p&gt;

&lt;p&gt;あんまりまとまらなかった。&lt;/p&gt;

&lt;p&gt;明日は&lt;a href=&#34;http://www.adventar.org/users/879&#34;&gt;arisonjp&lt;/a&gt;さんです。もう、ギガフロート玉野しか書けないらしいです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>とある広島のスタンプラリー - たまに広島Advent Calendar 2016</title>
          <link>https://blog.eiel.info/blog/2016/12/01/2016-advent-calendar/</link>
          <pubDate>Thu, 01 Dec 2016 00:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2016/12/01/2016-advent-calendar/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://www.adventar.org/calendars/1569&#34;&gt;たまに広島 Advent Calendar 2016&lt;/a&gt;の1日目の記事です。
このAdovent Calendarは広島のことを書くようですが、「たまに」書いてあればいいらしいです。
他の人の記事のいずれかに広島のことが書いてあればいいんでしょうか。&lt;/p&gt;

&lt;p&gt;広島の人は赤いものが好きなようで、最近よく赤いものを見かける事が増えました。&lt;/p&gt;

&lt;p&gt;唐辛子をつかったつけ汁でいただくつけ麺。&lt;/p&gt;

&lt;p&gt;唐辛子と山椒をつかったタレでいただく汁なし担々麺。&lt;/p&gt;

&lt;p&gt;調子にのって辛くしすぎてお腹を痛めることもあります。&lt;/p&gt;

&lt;p&gt;お腹を壊してしまうことを考慮すると、広島の食べ物を本格的に極めるためには、広島に住んでおく必要があるでしょう。
だって、旅先でお腹の調子が悪くなるのは嫌ですからね。&lt;/p&gt;

&lt;h1 id=&#34;我馬のスタンプラリーを制覇しました:f6ed39a265edcb10b83655180bcf6808&#34;&gt;我馬のスタンプラリーを制覇しました&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/2016-12-01-gaba.jpg&#34; alt=&#34;スタンプラリー制覇&#34; /&gt;&lt;/p&gt;

&lt;p&gt;広島には&lt;a href=&#34;http://www.gaba-2000.com/&#34;&gt;我馬&lt;/a&gt;というラーメン屋があります。
広島にしかないラーメン屋の一つです。
食べられるのは「博多ラーメン」です。
広島ラーメンではありません。
傍目からみて、広島に観光に来た際に立ち寄るようなところではないように見えます。&lt;/p&gt;

&lt;p&gt;そんな我馬ですが、昨日まで&lt;a href=&#34;http://www.gaba-2000.com/news.php?q=156&#34;&gt;スタンプラリー&lt;/a&gt;が行われていました。
我馬は9店舗あり、2ヶ月間ですべての店舗をまわるとホノルル往復航空券が当たるというイベントです。
1週間に一つの店舗を回らなければならないので、達成するにはなかなかハードルの高いイベントですね。&lt;/p&gt;

&lt;p&gt;そんな、「博多ラーメン」のお店を毎週のようにわざわざ違う店舗に出向く価値があるのでしょうか?&lt;/p&gt;

&lt;h2 id=&#34;限定麺のスタンプラリー:f6ed39a265edcb10b83655180bcf6808&#34;&gt;限定麺のスタンプラリー&lt;/h2&gt;

&lt;p&gt;実は、スタンプラリーの期間中、各店舗でそれぞれ別のラーメンを食べることができます。
限定ラーメンです。&lt;/p&gt;

&lt;p&gt;限定ラーメンは過去に提供されてきたものです。&lt;/p&gt;

&lt;p&gt;我馬では四季のラーメンと称して、年に4回程度、限定ラーメンが提供されてきました。
限定ラーメンでは四季のラーメン以外にもあるので注意してください。&lt;/p&gt;

&lt;p&gt;過去の限定ラーメンの一覧をみてみると38種類もあるようです。 - &lt;a href=&#34;http://www.gaba-2000.com/rekidai.php&#34;&gt;歴代 限定絵ラーメン 我馬&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;私は第10弾の博多ごぼ天 バイ煎つけ麺あたりから存じております。
第11弾 「&lt;a href=&#34;http://www.gaba-2000.com/news.php?q=13&#34;&gt;新派 とろ馬&lt;/a&gt;」は衝撃的で、ラーメンという領域を超えていたと思います。
となりにパンがあることから想像できるでしょうか?&lt;/p&gt;

&lt;p&gt;これらの限定麺はとても完成度が高いです。&lt;/p&gt;

&lt;p&gt;そもそも手札としてある「博多ラーメン」という看板ラーメンで行列を作れているラーメン屋が、既存のアレンジで攻めてくるわけではないというのがポイントが高いです。
本来はポイントが下がりかねないですが、おかげで値段がお高くなっています。&lt;/p&gt;

&lt;p&gt;そう、このスタンプラリーは過去の限定麺が2ヶ月だけ復活するお祭りなのです。&lt;/p&gt;

&lt;h2 id=&#34;スタンプラリーの思い出:f6ed39a265edcb10b83655180bcf6808&#34;&gt;スタンプラリーの思い出&lt;/h2&gt;

&lt;p&gt;得にないです。
おいしかったです。&lt;/p&gt;

&lt;h2 id=&#34;せっかくなので限定麺ふりかえる:f6ed39a265edcb10b83655180bcf6808&#34;&gt;せっかくなので限定麺ふりかえる&lt;/h2&gt;

&lt;p&gt;個人的には冬の限定麺に好きなものが多い気がします。
冬は味噌ベースのラーメンが多いです。&lt;/p&gt;

&lt;p&gt;第20弾 ベジミソ麺や第25弾 みそ菜麺はかなりハマりました。
事前に復活するラーメンのアンケートがありましたが、優勝したのは第31弾 香るウマ辛 芳辛 みそラーメンでした。&lt;/p&gt;

&lt;p&gt;今年の冬が楽しみです。&lt;/p&gt;

&lt;p&gt;夏はつけ麺が登場することが多いです。
カリーつけ麺は私のまわりでは傑作だと評判です。
太めの麺も毎回試行錯誤されているのではないかと思われます。&lt;/p&gt;

&lt;p&gt;そういえば、春系のラーメンはありますが、秋っぽいラーメンってあまりないですね。
いつか松茸ラーメンとかでてくるのでしょうか?
難しそうです。&lt;/p&gt;

&lt;h1 id=&#34;まとめてきなもの:f6ed39a265edcb10b83655180bcf6808&#34;&gt;まとめてきなもの&lt;/h1&gt;

&lt;p&gt;広島には赤い名物が多いです。
我馬は「赤うま」というのが定番ラーメンです。
やっぱり赤かったです。
ぜひ一度お越しください。&lt;/p&gt;

&lt;p&gt;たまに広島 Adevent Calendar 二日目は&lt;a href=&#34;http://www.adventar.org/users/9003&#34;&gt;mu2in&lt;/a&gt;さんです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>広島とPythonということで広島のプログラマがPythonのイベントでプログラミング言語の話をした - PyCon mini Hiroshima 2016</title>
          <link>https://blog.eiel.info/blog/2016/11/12/2016-pycon-mini-hiroshima-2/</link>
          <pubDate>Sat, 12 Nov 2016 20:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2016/11/12/2016-pycon-mini-hiroshima-2/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://pyconjp.connpass.com/event/39164/&#34;&gt;PyCon mini Hiroshima 2016&lt;/a&gt;というイベントに参加した。
参加をしたことには違いはないが、基調講演をするという立場だったようだ。&lt;/p&gt;

&lt;p&gt;本人はあまり自覚をしていなかったわけではないが、本人的には準備不足と感じていたようである。
たぶん、もうひとつ本当の基調講演があると思っていたから油断をしていたに違いない。
実はそんなものはなかった。
（むしろ、イベントの代表である西本さんの発表が基調講演だった感じもする気がしなくもない)&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;53c9d2e2d9cb414aae834b9ead48acdc&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;いろいろ話すネタを求めてPythonのことをいろいろ調べたけど、結局調べたことはあまり使わなかった。
ただ、話す際の礎になっているし、近年のPythonの状況も少しわかったと思う。
勉強会駆動ってやつはまったく本当に勉強になるな。ただし、喋る立場であれば。&lt;/p&gt;

&lt;p&gt;「プログラミングを使い分ける理由」という依頼内容に最終的に沿うような話にしたけど、自分の中にあったものが出し切れていないきがして、個人的には準備不足であると感じているが、作品というのはどこかで妥協すべきなので仕方ない。
あまり一般的なことを話しても調べればわかることなので、自分の色が出せることを意識しつつも、知らない人には知っていて欲しいを散りばめたつもりである。
伝わったかどうかは定かではない。&lt;/p&gt;

&lt;p&gt;技術的な話も個人的にしたかったので、時間があまったときようにもスライドを用意した。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;41729b6de75242f692f455c528f68961&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;正確には、言語の比較ネタとして用意しておいたネタなのだけど、実際につくってみたら、時間がたりないことがわかったので別のスライドにしたというのが本音である。
実際、時間はほとんど余らなかったが、無理矢理ねじこんでしまった。
口頭での説明に頼った部分もあるので、別途、解説記事をちゃんと書くつもりである。&lt;/p&gt;

&lt;p&gt;プログラミングというのはたいていの人にとっては手段である。
言語がどうこうより目的を見失うべきでない。
とはいえ、プログラミング言語はたくさんある。
ゆえにプログラミング言語について何か語ることはできる。&lt;/p&gt;

&lt;p&gt;プログラミング言語にはプログラムする上で楽することができる機能がいくつかあって、便利機能であって必須機能でないものも結構ある。&lt;/p&gt;

&lt;p&gt;アセンブラは大変だけど、がんばれば高級言語で実現できることはできるよね。
プログラム自身が合成可能な性質があるため、小さなプログラムを組み合わせて大きなプログラムを構築することができる。
高級な言語ははじめから大きなプログラムを部品としてもっていると考えることができる。&lt;/p&gt;

&lt;p&gt;すごく強力な機能、たとえば goto とかあるけど乱用するとコードを追いづらくなる。
もっと制約となる代わりになる、用途に特化した機能がループ、continue, breakとみなすことができる。
高級な言語は強すぎるチカラに制約をあたえて、秩序を与えていると考えることができる。&lt;/p&gt;

&lt;p&gt;あとはトレードオフも重要な要素である。あちらを立てればこちらが立たない。
読みやすさを重視すると、実行速度が遅くなることがる。
(とっさに例がでてこない)&lt;/p&gt;

&lt;p&gt;それよりも、どのプログラミング言語を使うかという選択は、プラットフォームによるのが一番の現実かなとおもう。
正直な感想をのべると、プログラミング言語の学習コストより、プラットフォームの学習コストのほうが高い。
Webブラウザ、スマートフォン、Flashというフロントエンドのプラットフォームを考えてもいい。
それぞれの都合がある。
その上でマジョリティである言語がたいていの場合において最良である。&lt;/p&gt;

&lt;h1 id=&#34;駄文-発表することについて:1929727e4260b47077cc5e9e5e2368ca&#34;&gt;駄文 発表することについて&lt;/h1&gt;

&lt;p&gt;とてもありがたいことに、以下のような評をいただいた。本当に感謝である。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;めっちゃ発表慣れされてるなー,テーマが明確で聞きやすい &lt;a href=&#34;https://twitter.com/hashtag/pyconhiro?src=hash&#34;&gt;#pyconhiro&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/iotlt%E5%BA%83%E5%B3%B6?src=hash&#34;&gt;#iotlt広島&lt;/a&gt;&lt;/p&gt;&amp;mdash; Shinichi Nakagawa (@shinyorke) &lt;a href=&#34;https://twitter.com/shinyorke/status/797299233955069952&#34;&gt;2016年11月12日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;基調講演らしい基調講演で面白かった！ &lt;a href=&#34;https://twitter.com/hashtag/pyconhiro?src=hash&#34;&gt;#pyconhiro&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/iotlt%E5%BA%83%E5%B3%B6?src=hash&#34;&gt;#iotlt広島&lt;/a&gt;&lt;/p&gt;&amp;mdash; Shinichi Nakagawa (@shinyorke) &lt;a href=&#34;https://twitter.com/shinyorke/status/797306297746006017&#34;&gt;2016年11月12日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;発表することについては、比較的慣れていることは否定できない。
しかし、私は発表するのは大変苦手である。
苦手な人間でも、回数をこなすとどうにかなるということも伝えたいが、それだけではない。&lt;/p&gt;

&lt;p&gt;話す立場に一度でもなると、話す立場を考えて他の人の話が聞けるようになる。
やったことがないことをたくさんやればやるほど、いろんな立場で物事を考えることができる。
1を聞いて10を聞くことができるようになる。&lt;/p&gt;

&lt;p&gt;プログラミングに限らずすべてのことに言えるが、経験できることは速いうちにたくさんの経験を積んでおくほうがお得なんじゃないと思う。
若者はぜひいろんなことに挑戦して欲しい。&lt;/p&gt;

&lt;p&gt;ああ、どうやら僕はまだ若者のようだ。いろんなことにチャレンジしなければならない。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Akka StreamのDelayで学ぶback-pressure という話をした - #LT駆動</title>
          <link>https://blog.eiel.info/blog/2016/08/08/ltdd-28-akka-stream/</link>
          <pubDate>Mon, 08 Aug 2016 22:18:07 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2016/08/08/ltdd-28-akka-stream/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA28&#34;&gt;LT駆動開発28&lt;/a&gt;でLTをした。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://summit.scala-kansai.org/&#34;&gt;Scala関西Summit 2016&lt;/a&gt;でAkka Stream系の話をしようとおもっていたけど、結局応募に間に合わせることができなくて、ストックされていたネタを開放しはじめました。
とういうことで、ちょいちょいAkkaやPlay Frameworkの話をその辺でするかもしれません。&lt;/p&gt;

&lt;p&gt;本題です。Akka Streamしはじめたときに、Delayでの動作がback-pressureされてることがわかりやすかったので、今回はその話をしました。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;3f590e2cbdc5407896e1d03d874f4a23&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;スライド内にあるコードの詳細はGistにアップしています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/eiel/a8edc165ad316868c75766a447d57237&#34;&gt;https://gist.github.com/eiel/a8edc165ad316868c75766a447d57237&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>各クラウドサービスのIoTソリューションをしらべたことを IoTLT広島 Vol.2ではなした</title>
          <link>https://blog.eiel.info/blog/2016/07/16/iotlt-2/</link>
          <pubDate>Sat, 16 Jul 2016 16:28:53 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2016/07/16/iotlt-2/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;http://iotlt.connpass.com/event/33441/&#34;&gt;IoTLT広島 vol.2&lt;/a&gt;でLTしました。LTすると参加費が無料になるので。(代わりに参加費分の寄付をしました) &amp;lt;- 意味がない&lt;/p&gt;

&lt;p&gt;特にネタができてなかったので、クラウドサービスを比較してみました。
AWSは王者たる風格を感じ、Azureはトータルで支援してAWSに追いつこうという意志を感じました。
IBMはWatson推しで、Googleはマイペースだなともおもいました。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;bbdbecb646ac45a6832cc758310dd53d&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
</description>
        </item>
      
    
      
        <item>
          <title>続・プリエンプティブルVMをずっと起動させてみる - #LT駆動</title>
          <link>https://blog.eiel.info/blog/2016/07/04/ltdd-27-premptible2/</link>
          <pubDate>Mon, 04 Jul 2016 22:08:54 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2016/07/04/ltdd-27-premptible2/</guid>
          <description>

&lt;p&gt;GAE/GoでGCEのAPIたたいて、プリエンプティブルVMをずっと起動させてみました。割りとうまくいきました。
ただ実験中に予約していたIPアドレスでそこそこお金をつかってしまいました。
そういう話を&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA27&#34;&gt;LT駆動開発27&lt;/a&gt;でしました。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;c7815933675946c2ad2e1c2dcddd1570&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;残念ながらコードは整理していません。
ずっと起動することにモチベーションがすでに切れているので公開するのは別の機会になりそう。
いや、大したことはしてないし、必要になってしらべたことはちょいちょい記事化しているはずです。&lt;/p&gt;

&lt;h1 id=&#34;関連リンク:565bb57e9f61c8553ffcce827a2ad8de&#34;&gt;関連リンク&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/eielh/items/5e0697c1cc586feda716&#34;&gt;Go言語でGCEのインスタンス一覧を取得する - Qita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/eielh/items/3e4a6ee4c425cef21df2&#34;&gt;GCEのインスタンス内からインスタンスのzoneを取得。ついでにメタデータの処理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>IO (Maybe a)というタイトルでモナド変換子について学んだことを話した - #LT駆動</title>
          <link>https://blog.eiel.info/blog/2016/07/03/ltdd-27-io-maybe/</link>
          <pubDate>Sun, 03 Jul 2016 21:42:43 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2016/07/03/ltdd-27-io-maybe/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA27&#34;&gt;LT駆動27&lt;/a&gt;に参加しました。&lt;/p&gt;

&lt;p&gt;「IO (Maybe a)」という話をした。
自分なりにモナド変換子について整理した。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;b00867b044924e89afa6c98212ff56fd&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;一度文章にしてからスライドにした。
そっちはざっくりQiitaにアップしておいた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/eielh/items/2f0f774914431990ec37&#34;&gt;IO (Maybe String)を触ってみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/eiel/836ceaad76c594f896a56e3b34c01cb3&#34;&gt;サンプルコード&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;個人的には先入観で誤解していた部分が整理できたので、満足している。
特になにか図にしてみるという行為は面白いとおもっている。&lt;/p&gt;

&lt;p&gt;勉強会で発表するという行為はとても勉強になる。(自戒)
LT駆動開発は毎月開催されているので、みなさまの参加を楽しみにしています。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>「プリエンプティブルVMをずっと起動してみた」という話をした #LT駆動 26</title>
          <link>https://blog.eiel.info/blog/2016/06/05/ltdd-26/</link>
          <pubDate>Sun, 05 Jun 2016 20:59:52 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2016/06/05/ltdd-26/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA26&#34;&gt;LT駆動 26&lt;/a&gt;でLTをしました。&lt;/p&gt;

&lt;p&gt;最近Google Compute EngineのプリエンプティブルVMで節約しつつ使えるリソースを増やしていこうと遊んでいます。そんなに増やしてもやることはまだみつけていないけど。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;5bd879ad1ae443f4bab2c7efd242d7ac&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Google Compute Engineには70%OFFで使えるプリエンプティブルVMというのがあるみたいです。
しかし、24時間しか使えないみたいです。
Google Compute EngineはMetadataのkeyでstartup-scriptにいれておくと起動時に実行してくれるそうです。
shutdown-scriptもあるようです。
また、インスタンスグループは指定した数のインスタンスを維持するようにインスタンスを起動してくれるみたいです。
あとは正常に終了処理ができれば、最低１日１回5分程度落ちていることがあるけど、とても安くつかえそうです。&lt;/p&gt;

&lt;p&gt;というわけで、最近つけっぱなしにして様子をみて遊んでいます。&lt;/p&gt;

&lt;p&gt;１台じゃ回しきれなくなったらクラスタを組んでロードバランサーも使っていくことで、１台落ちても大丈夫な状態はつくれるんじゃないかと思っていたりもします。&lt;/p&gt;

&lt;p&gt;落ちる前提でサーバーを管理するのも結構楽しそうです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Scala福岡2016に遊びにいって「Scalaで関数」というLTをした</title>
          <link>https://blog.eiel.info/blog/2016/05/28/scala-fukuoka-2016/</link>
          <pubDate>Sat, 28 May 2016 21:00:03 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2016/05/28/scala-fukuoka-2016/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;http://scala.connpass.com/event/26674/&#34;&gt;Scala福岡2016&lt;/a&gt;に遊びにいきました。
会場は&lt;a href=&#34;https://nulab-inc.com/ja/&#34;&gt;nulab&lt;/a&gt;さんのオフィスで、&lt;a href=&#34;http://www.backlog.jp/&#34;&gt;Backlog&lt;/a&gt;や&lt;a href=&#34;https://cacoo.com/lang/ja/&#34;&gt;Caccoo&lt;/a&gt;というナイスなサービスを展開されています。
広島にもWebサービスをやってるナイスな会社が増えて欲しいなとおもいました。&lt;/p&gt;

&lt;p&gt;僕はScalaあまり詳しくない初心者なので、最新のネタがズバズバ跳んでるScala Matsuriとはちょっと違って、Scalaやってるなら知っていたほうがよい基礎っぽい話がたくさん聞けて、とてもよかったです。(もちろんScala Matsuriも楽しい)&lt;/p&gt;

&lt;p&gt;せっかく広島からイベントに参加したので、ライトニングトークもしてきました。
特にネタをもってなかったので、Scalaの気になっている部分の&lt;code&gt;tupled&lt;/code&gt;や&lt;code&gt;curried&lt;/code&gt;というメソッドについて整理したので、その発表をしました。&lt;/p&gt;

&lt;p&gt;基本形の関数から、カリー化された関数、タプル化された関数の３種類があることがわかって、カリー化された関数をタプル化された関数に変換するには、一旦基本形にしないといけないことがわかりました。
ショートカットするメソッドがどこかにあってもよさそうな気もしましたが、あったらあったでカオスになりそうな気もします。(&lt;a href=&#34;https://speakerdeck.com/eiel/scaladeguan-shu?slide=34&#34;&gt;スライドの34ページ目に記してます。&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Haskellとの対応を考えると、Haskellには「カリー化された関数」と「タプル化された関数」しかないと考えることもできそうで、いろいろすっきりさせることができました。&lt;/p&gt;

&lt;p&gt;県外のコミュニティのイベントにでかけると知らない人もたくさんいるし、新たな繋がりや新しい文化を仕入れることもできて、とても楽しいです。
ぜひ広島のイベントにも遊びに来て、いろんな風を入れて欲しいと思いました。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;2b91928943a243559c174e931464013a&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
</description>
        </item>
      
    
      
        <item>
          <title>#LT駆動 25で並行プログラミングについて話した</title>
          <link>https://blog.eiel.info/blog/2016/05/08/ltdd-25/</link>
          <pubDate>Sun, 08 May 2016 21:12:25 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2016/05/08/ltdd-25/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA25&#34;&gt;LT駆動 25&lt;/a&gt;に参加しました。&lt;/p&gt;

&lt;p&gt;でGoで書かれた並行処理をHaskellで書いた並行処理を比べてみました。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;a6c9fe84af5d424480aa0075be9bf33d&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;いろいろしらべていく過程で、最近の並行プログラミングはメッセージパッシングという手法をとっていることがわかりました。
書いたコードなどはQiitaにまとめてます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/eielh/items/64ba5f0164b89c6c284e&#34;&gt;Haskellで並行化する方法: 6秒かかる処理を3秒にしよう - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;他には、ナノsimになるようにsimをカットする話や、Cloud9をつかってみた話や、流行りのセキュリティの攻撃方法や、Dockerの話やDeepLearningの話や吹奏楽の話や、資格の話などを聞くことができました。
いろんな人が最近やってることを聞くことでちょっとだけ少ない努力でトレンドを知ることができて楽しかったです。&lt;/p&gt;

&lt;p&gt;LT駆動開発は最近勉強した内容をさくっと発表することで自分が勉強するための勉強会です。
毎月第１土曜日か日曜日に開催されています。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>bluemixで遊ぶならメモリの使用料が少ない言語つかいたいよね、という話をした - #LT駆動 24</title>
          <link>https://blog.eiel.info/blog/2016/04/02/ltdd-24/</link>
          <pubDate>Sat, 02 Apr 2016 15:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2016/04/02/ltdd-24/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA24&#34;&gt;LT駆動開発 24&lt;/a&gt;に参加しました。&lt;/p&gt;

&lt;p&gt;bluemixはメモリ使用量で、課金されるので、メモリ消費の少ない言語が有利なんじゃないかと思いて、さまざまな言語で使用メモリを確認をした話をした。
全部はみていないがbluemixで提供されているものでは、Goが良さそうである。
GoならGAE/Goもあるし、Goは幅広くつかえますね。&lt;/p&gt;

&lt;p&gt;個人的には、haskellやrustが気になるところである。リッチだし、特にRustはローカルで動作させてみたところ使用メモリがすくなかった。デプロイするには&lt;a href=&#34;https://github.com/cloudfoundry/binary-buildpack&#34;&gt;binary-buildpack&lt;/a&gt;を使うのが楽そうだけど動かすところまでやってない。
普通にbuildpackをつかってやるとbuild時間がなかなかつらそうです。(heroku-buildpack-rustは見事に失敗してまった)&lt;/p&gt;

&lt;p&gt;メモリ使用量のところを抜粋しときます。
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;go&lt;/td&gt;&lt;td&gt;7MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;swift&lt;/td&gt;&lt;td&gt;14MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;python&lt;/td&gt;&lt;td&gt;40MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;php&lt;/td&gt;&lt;td&gt;57MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nodejs&lt;/td&gt;&lt;td&gt;74MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ruby&lt;/td&gt;&lt;td&gt;75MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.net&lt;/td&gt;&lt;td&gt;152MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;java&lt;/td&gt;&lt;td&gt;177MB&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;24768e8433e14c479bd6f32a2999caa8&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Hiroshima Ruby Conference 2016でしかもオープンデータデイなのでRDFの話をした</title>
          <link>https://blog.eiel.info/blog/2016/03/05/hiroshima-ruby-conference-2016/</link>
          <pubDate>Sat, 05 Mar 2016 13:26:16 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2016/03/05/hiroshima-ruby-conference-2016/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;http://hiroshimarb.github.io/&#34;&gt;Hiroshima.rb&lt;/a&gt;と&lt;a href=&#34;http://www.ruby.or.jp/ja/&#34;&gt;Ruby Association&lt;/a&gt;の共催で&lt;a href=&#34;http://hiroshima-ruby-conf.me/&#34;&gt;Hiroshima Ruby Conference&lt;/a&gt;が開催されました。&lt;/p&gt;

&lt;p&gt;この日は&lt;a href=&#34;http://okfn.jp/2015/09/16/iodd2016-pre/&#34;&gt;インターナショナルオープンデータデイ&lt;/a&gt;でもありオープンデータに関する話をすることにした。&lt;/p&gt;

&lt;p&gt;ということで、「Hiroshima.rbの情報をRDFでオープンでリンクなデータにしたんよ」という話をした。&lt;/p&gt;

&lt;p&gt;プログラマとしての視点で、RDFについて知りたかったことはQiitaにまとめておきました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/eielh/items/deadb765ac994956f8a2&#34;&gt;RDFに関する雑な説明 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;つづいて、RubyでRDFを作る方法をQiitaにまとめておきました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/eielh/items/1ae9ef9ae822e4256d52#_reference-e5d1f38862d0df2ef167&#34;&gt;RubyでRDFを構築してみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そして、今回は&lt;a href=&#34;http://hiroshimarb.github.io/&#34;&gt;Hiroshima.rb&lt;/a&gt;のサイトにJSON-LDでエンコーディングして、埋め込みしました。
scriptタグを利用して埋め込みをしています。(詳細はHTMLをみてください)
schemaには &lt;a href=&#34;https://schema.org/&#34;&gt;https://schema.org/&lt;/a&gt; を利用してるのでGoogleが認識することができます。
RDFのライブラリを使えばウェブページを読み込みして、データを取り出すことが単にできるとおもいます。&lt;/p&gt;

&lt;p&gt;RDFにするとデータをつなぐことができて分散データベースをつくることができるというわけです。
RDFはとても柔軟なフォーマットでRDFからいろんな形式をデータを生成できます。
ただし、柔軟性をを得たトレードオフとして処理効率が犠牲になります。
RDFのデータはクエリをつかって、表データのようにデータをとりだせるので、うまく使えばネットで情報を収集して、扱いやすい形式に落として別のシステムへ渡したりもできるとおもいます。&lt;/p&gt;

&lt;p&gt;とまあ、今回はRDFについて調べて疑問点だったことを自分が知りたかったことベースにまとめたついでに実践してみたという話でした。
具体例として参考になると幸いです。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;8141be0553cb4fc8960e5e4a30967ce2&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
</description>
        </item>
      
    
      
        <item>
          <title>プログラミングできなくても積極的にITと関わろう的な話をした - Code for DOGO 「CIVIC TECHって?」</title>
          <link>https://blog.eiel.info/blog/2016/02/21/code-for-dogo-what-civic-theck/</link>
          <pubDate>Sun, 21 Feb 2016 21:32:40 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2016/02/21/code-for-dogo-what-civic-theck/</guid>
          <description>&lt;p&gt;Code for DOGOが主催するイベントである「&lt;a href=&#34;https://www.facebook.com/events/439183519625135/&#34;&gt;CIVIC TECHって?&lt;/a&gt;」というイベントにお招き頂いた。&lt;/p&gt;

&lt;p&gt;5374.jpをつくる上での工夫点や考え方を話して欲しいという依頼で60分枠だったが、とてもじゃないけど、６０分もネタがない。聴衆は経済経営系の情報学部で、工学や情報学部ではないという話だったので、少し話を広げてITの意義から考えてみた。&lt;/p&gt;

&lt;p&gt;ざっくりまとめると、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ITは人間の頭脳を拡張する&lt;/li&gt;
&lt;li&gt;ITが疎い人はもちろん・高齢者は積極的利用することで生活を便利にする&lt;/li&gt;
&lt;li&gt;プログラマと一緒につくれば、広がりもできて、コミュニティも形成できて、IT機器の使い方も効率よく学べる&lt;/li&gt;
&lt;li&gt;だから、プログラマと一緒に活動しよう&lt;/li&gt;
&lt;li&gt;ITの効果が増大すればプログラマ一人あたりの価値もあがる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;的な論理の話をした。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.caa.go.jp/seikatsu/shingikai2/kako/spc09/houkoku_a/spc09-houkoku_a-contents.html&#34;&gt;第９次 国民生活審議会 総合政策部会報告 情報社会と国民生活&lt;/a&gt;という資料をかなり参考にさせていただいた。３０年前の資料なのにも関わらず、色褪せない良い資料だと思いました。&lt;/p&gt;

&lt;p&gt;スライド自体にはあまり話をいれていないが&lt;a href=&#34;http://5374.jp/&#34;&gt;5374.jp&lt;/a&gt;あたりなど具体例の話は踏み込んだ話をした。&lt;/p&gt;

&lt;p&gt;実は四国に行ったのは初めてだったので、道後温泉にもいった。
松山という街は、街の中心街から大学は近いし、松山城からの眺めもすごいし、温泉街は近いし、食べ物もおいしかったし、「ことば」がいろんなのところに散らばっていて良い所だった。
中途半端に大きい、広島よりもコンパクトで生活はしやすいかもしれない。
やはり、行ってみてわかることというのはいろいろあると思った。
そういう意味でも、積極的に行動をするというのは重要だと思う。&lt;/p&gt;

&lt;p&gt;広島からは、船で2時間ちょっとなので、リーズナブルに旅行に行くには良い所でした。
勉強会駆動旅行も良いと思います。（準備がしんどいけど)
あえて言うならば、港から伊予電鉄までがバスが走っているが、歩いても１０分なので、駅の場所をもっと港に近づけて欲しいとおもいました。&lt;/p&gt;

&lt;p&gt;最後になりましたが、スライドはこちらになります。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;fe765e328e4f4d4184393efa0041031a&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ユーザーストーリーマッピングのここが面白いという話をした - #LT駆動 23</title>
          <link>https://blog.eiel.info/blog/2016/02/10/user-story-mapping/</link>
          <pubDate>Wed, 10 Feb 2016 19:16:11 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2016/02/10/user-story-mapping/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA23&#34;&gt;LT駆動開発23&lt;/a&gt;に参加した。&lt;/p&gt;

&lt;p&gt;いっぱいいっぱいだったので雑なLTをした。&lt;/p&gt;

&lt;p&gt;ユーザーストーリーマッピングが&lt;a href=&#34;http://osh-web.github.io/2016/&#34;&gt;オープンセミナー2016@広島&lt;/a&gt;のテーマである「みんなでつくろうモダンな開発現場」にぴったりだとおもったので紹介しました。&lt;/p&gt;

&lt;p&gt;あ、LT駆動開発23はオープンセミナー2016@広島の懇親会で行われました。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;f0969477ee3f4e638eae4b1f6ef6cbdd&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;グラフィックレコーディングは記憶に残りやすい記録方法だとおもいますが、ユーザーストーリーマッピングもそういった手法な気がします。&lt;/p&gt;

&lt;p&gt;実際の現場で大切なことは、チームメンバーの共通認識が重要です。この本ではそのことがとかれています。&lt;/p&gt;

&lt;p&gt;ぐるぐるDDDは繰り返しの重要さを説いています。
強い共通認識をつくれます。&lt;/p&gt;

&lt;p&gt;ユーザーストーリーマッピングではアトラシアンの現場の話がでてきます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;アトラシアンの現場の話がでてきます&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;というわけで、今回のオープンセミナーととてもリンクした内容だったとおもいます。&lt;/p&gt;

&lt;p&gt;あと感じたのはUXもアジャイルも同じところにむかってるのを感じました。&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=eiel-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4873117321&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
</description>
        </item>
      
    
      
        <item>
          <title>関数型を現場に持ち込むことはモダンなのか?　- オープンセミナー2016@広島でLTした</title>
          <link>https://blog.eiel.info/blog/2016/02/09/function-model-in-genba/</link>
          <pubDate>Tue, 09 Feb 2016 19:06:49 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2016/02/09/function-model-in-genba/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;http://osh-web.github.io/2016/&#34;&gt;オープンセミナー広島@2016&lt;/a&gt;でLTさせていただきました。&lt;/p&gt;

&lt;p&gt;「関数型を現場に持ち込むことはモダンなのか?」ということについて、現場の状況によるんじゃないですかね。関数型自体はモダンな機能いっぱいもってるけど、すごい特別なものじゃない気がする。
関数型に求めようとしていることは本当は、並行とか分散なんじゃないだろうか?という話をしつつ関数型の関数が値として扱える楽しさについてざっくりと話ました。&lt;/p&gt;

&lt;p&gt;学習コストの高さとか考慮すると純関数型は浪漫だよね。僕はもっと学びたいけど。
ただ確実に大きなチカラであるのは確かではあるとおもっています。&lt;/p&gt;

&lt;p&gt;ただ、しばらくは、それよりはAkkaかerlangといったあたりにリソースを使いたいなあ、と思っています。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;221a0ae39fdd493bbd5936a5dfed8e8d&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ScalaMatsuri 2016にあそびにいった</title>
          <link>https://blog.eiel.info/blog/2016/02/02/scala-matsuri-2016/</link>
          <pubDate>Tue, 02 Feb 2016 18:50:41 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2016/02/02/scala-matsuri-2016/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://scalamatsuri.org/&#34;&gt;ScalaMatsuri2016&lt;/a&gt;に遊びにいきました。
そういえば、スポンサーになりました。忍者スポンサーです。にんにん。&lt;/p&gt;

&lt;p&gt;本イベントの参加チケットは5000円でしたが、5000円分の価値のあるイベントだったとおもいます。
昼ごはんついてるし、朝ご飯ついてるし、翻訳ついてるし。&lt;/p&gt;

&lt;p&gt;イベント自体はリアクティブやマイクロサービスを中心にまわりました。
本当は関数型系にいきたかったですが、今必要な技術はそっちのほうだとおもったのでそちらを優先しました。&lt;/p&gt;

&lt;h3 id=&#34;refactoring-in-scala:b7d8ec89b64c9f0e26db79d94667ea2b&#34;&gt;Refactoring in Scala&lt;/h3&gt;

&lt;p&gt;Isoがなんとくわかりました。Lensもなんとなくわかりそうです。
圏のチカラを感じる&lt;/p&gt;

&lt;h3 id=&#34;なぜリアクティブは重要か:b7d8ec89b64c9f0e26db79d94667ea2b&#34;&gt;なぜリアクティブは重要か&lt;/h3&gt;

&lt;p&gt;リアクティブとはなにかふりかえり、それぞれのリアクティブについて深掘りできました。&lt;/p&gt;

&lt;h3 id=&#34;リアクティブ-マイクロサービス:b7d8ec89b64c9f0e26db79d94667ea2b&#34;&gt;リアクティブ・マイクロサービス&lt;/h3&gt;

&lt;p&gt;Play + Akkaをつかった実際のりアクティブなシステムの話でした。席がとおすぎてコードがあまりみえませんでした。&lt;/p&gt;

&lt;h3 id=&#34;バッチを-akka-streams-で再実装したら100倍速くなった話:b7d8ec89b64c9f0e26db79d94667ea2b&#34;&gt;バッチを Akka Streams で再実装したら100倍速くなった話&lt;/h3&gt;

&lt;p&gt;元の仕組みからすごくはやくなったようですが、Akka Streamsがどれくらいのチカラがあるのか気になります。&lt;/p&gt;

&lt;h3 id=&#34;アジアから-scala-oss-に貢献するということ:b7d8ec89b64c9f0e26db79d94667ea2b&#34;&gt;アジアから Scala OSS に貢献するということ&lt;/h3&gt;

&lt;p&gt;スピーカーの瀬良さんが広島出身だと知りました。
英語よんだりかいたりしないといけないと思いました。&lt;/p&gt;

&lt;h3 id=&#34;みんなの関数型プログラミング:b7d8ec89b64c9f0e26db79d94667ea2b&#34;&gt;みんなの関数型プログラミング&lt;/h3&gt;

&lt;p&gt;入門な内容でした&lt;/p&gt;

&lt;h3 id=&#34;レジリエンスが無ければ-他は無いも同じ:b7d8ec89b64c9f0e26db79d94667ea2b&#34;&gt;レジリエンスが無ければ、他は無いも同じ&lt;/h3&gt;

&lt;p&gt;レジリエンスがなければなにもないんです。
ささります。&lt;/p&gt;

&lt;h3 id=&#34;the-zen-of-akka:b7d8ec89b64c9f0e26db79d94667ea2b&#34;&gt;The Zen of Akka&lt;/h3&gt;

&lt;p&gt;Akkaの大事なことがいっぱいきけました。&lt;/p&gt;

&lt;h3 id=&#34;domain-specific-language-nasa-guardianの話題:b7d8ec89b64c9f0e26db79d94667ea2b&#34;&gt;Domain Specific Language(NASA, Guardianの話題)&lt;/h3&gt;

&lt;p&gt;DSLについて理解を深められました。
かなり細かく説明をきけました。&lt;/p&gt;

&lt;h3 id=&#34;コミュニティltセッション:b7d8ec89b64c9f0e26db79d94667ea2b&#34;&gt;コミュニティLTセッション&lt;/h3&gt;

&lt;p&gt;いろんなコミュニティがいました。「広島でScalaのイベントをやりたい?」という質問には、やりたいと聞いたので企画したいです。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;351c59be8be842f5aa3e565cc11c8609&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;sbt人間:b7d8ec89b64c9f0e26db79d94667ea2b&#34;&gt;SBT人間&lt;/h3&gt;

&lt;p&gt;SBTの歴史的経緯をいろいろきけました。&lt;/p&gt;

&lt;h3 id=&#34;intellij-idea-で-scala-をマスターする:b7d8ec89b64c9f0e26db79d94667ea2b&#34;&gt;IntelliJ IDEA で Scala をマスターする&lt;/h3&gt;

&lt;p&gt;intelliJをつかいこなしたい。動画はやくみたい。&lt;/p&gt;

&lt;h3 id=&#34;ddd-cqrs-eventsourcing実装する会:b7d8ec89b64c9f0e26db79d94667ea2b&#34;&gt;DDD+CQRS+EventSourcing実装する会&lt;/h3&gt;

&lt;p&gt;すごくもりあがっていました。&lt;/p&gt;

&lt;h3 id=&#34;パネルディスカッション-scala社内教育:b7d8ec89b64c9f0e26db79d94667ea2b&#34;&gt;パネルディスカッション：Scala社内教育&lt;/h3&gt;

&lt;p&gt;環境はパクろうとおもっております。
純粋関数型という幻想。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>「強いチームの作り方」を読み直した - そうだOSH2016へ行こう - #LT駆動22</title>
          <link>https://blog.eiel.info/blog/2016/01/09/ltdd-22-team/</link>
          <pubDate>Sat, 09 Jan 2016 14:20:02 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2016/01/09/ltdd-22-team/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA22&#34;&gt;LT駆動開発22&lt;/a&gt;に参加しました&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gihyo.jp/magazine/wdpress/archive/2014/vol83&#34;&gt;WEB+DB Vol.83&lt;/a&gt;の特集のひとつである「強いチームの作り方」について紹介しました。
2014年10月24日の発売したものですが、とても良い印象をもっていてまた読み直したいと思ってました。
今回2016年2月6日(土)に行われる&lt;a href=&#34;http://osh-web.github.io/2016/&#34;&gt;オープンセミナー2016@広島&lt;/a&gt;に著者の一人である原田 騎郎さんがいらっしゃるので自分のなかで咀嚼したことを話しました。&lt;/p&gt;

&lt;p&gt;チームにおいて多様性が重要であることが書かれていて、我が道をゆくことも大切だと感じています。
一人でやるよりもコミュニケーションコストが高くなり、個々の生産性が落ちてしまうチーム開発ですが、代りに多様性というチカラを手にいれられます。この多様性を活用できるかどうかがチームの面白さになるんじゃないだろうかと思います。&lt;/p&gt;

&lt;p&gt;オープンセミナー2016@広島は「みんなでつくろうモダン開発」というテーマですが、まさにチームの活かし方を考える機会になるんじゃないかと思いました。
そんな話を懇親会なんかで講師陣を混じえてしたいと思ってます。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;b17121404ecc4fa0a897825007ecd7e8&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://osh-web.github.io/2016/&#34;&gt;オープンセミナー2016@広島&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>2015年のスライドをふりかえった - LT駆動開発22</title>
          <link>https://blog.eiel.info/blog/2016/01/09/ltdd-22-retrospective/</link>
          <pubDate>Sat, 09 Jan 2016 10:34:30 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2016/01/09/ltdd-22-retrospective/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA22&#34;&gt;LT駆動開発22&lt;/a&gt;に参加しました。&lt;/p&gt;

&lt;p&gt;2015年はたくさんスライドをつくったので、スライドをみなおすだけで結構ふりかえることができました。どうやら28個ぐらいスライドを公開したみたいです。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;a0d55e2766394a838893dcda3c844df4&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/eiel&#34;&gt;eiel - Speaker Deck&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;昨年はよく、「未来を視るために、過去をふりかえる」なんてことをちょいちょい言ってまわりました。&lt;/p&gt;

&lt;p&gt;去年は可視化を目標にしていましたが、あんまり可視化っぽいことして遊べてないので引続きやっていこうかと思ってます。
そんなわけで年末に、&lt;a href=&#34;https://www.amazon.co.jp/dp/4873117461?tag=eiel-22&amp;amp;camp=1027&amp;amp;creative=7407&amp;amp;linkCode=as4&amp;amp;creativeASIN=4873117461&amp;amp;adid=1MQHY7G9866ZE4RQMV7E&amp;amp;&#34;&gt;JavaScriptによるデータビジュアライズ入門&lt;/a&gt;を購入してちまちま読んでいます。&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=eiel-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4873117461&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;関数型を学ぶことが仕事に直結してきているので関数型やスケールできるアプリケーションについて考えていることも多かったと思います。&lt;/p&gt;

&lt;p&gt;そんなわけで2016年はいまさら流行りにのってマイクロサービスとかリアクティブなシステムとか分散環境っぽいものを学んでみたいなぁ、と思っております。
シングルコアでのCPUの性能は伸びなくなってきているので、並行/並列処理にも着目していきたいですが、同様のアプローチが使えている部分もあるみたいなので気になっております。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.reactivemanifesto.org/ja&#34;&gt;リアクティブ宣言&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;昨年読んだ本の中でよかったもの:3fcadd3da10bfc517bd7e6217f944122&#34;&gt;昨年読んだ本の中でよかったもの&lt;/h3&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=eiel-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4873116864&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Web APIをつくっている場合は必読だと思いました。&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=eiel-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=B00UX9VJGW&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;最初のほうは思想的な面が強くよみにくいかもしれませんが、技術的にも役に立ちますし、いろんなことに気がつくことができました。&lt;/p&gt;

&lt;p&gt;それでは2016年もよろしくお願いします。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>アプリケーションの起動ショートカットにBetter Touch ToolからKarabinerで行うようにした</title>
          <link>https://blog.eiel.info/blog/2016/01/08/krabiner-from-bttt/</link>
          <pubDate>Fri, 08 Jan 2016 09:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2016/01/08/krabiner-from-bttt/</guid>
          <description>

&lt;p&gt;Better Touch Toolが有料化の運びになったため、会社PCでは申請しないと使えないだろうし、私にとってMUSTのアプリケーションではない。
しかし、別のツールでもできる機能なのだけど、私にとってMUSTな機能として、ショートカットキーでアプリケーションを起動する機能がある。
これまではQuickSilverやAlfledのpower packなどでやってきたことだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参考 &lt;a href=&#34;https://ideacloud.co.jp/dev/bettertouchtools_2.html&#34;&gt;Macアプリをショートカットキーに登録して、一発起動させるアプリ「BetterTouchTool」 | iDEA CLOUD/dev&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回、これを気に別の方法を模索した結果&lt;a href=&#34;https://pqrs.org/osx/karabiner/index.html.ja&#34;&gt;Karabiner&lt;/a&gt;で同様のことを行うことにした。&lt;/p&gt;

&lt;h3 id=&#34;メリット:ff733072f6c57b97db8abdda5a7885a6&#34;&gt;メリット&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;右Cmdと左Cmdを区別したショートカット設定ができる&lt;/li&gt;
&lt;li&gt;テキストベースでの設定&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;左CmdはOSXのショートカットキーは右Cmdは独自ショートカットとかにできて便利。
テキストベースの設定なのでGit管理ができてよい。&lt;/p&gt;

&lt;h3 id=&#34;デメリット:ff733072f6c57b97db8abdda5a7885a6&#34;&gt;デメリット&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;設定するのがめんどくさい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;xmlを書くことになるのでやっぱり設定は格段にめんどくさい。&lt;/p&gt;

&lt;h3 id=&#34;設定例:ff733072f6c57b97db8abdda5a7885a6&#34;&gt;設定例&lt;/h3&gt;

&lt;p&gt;Cmd+eでemacsを起動する例&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;
&amp;lt;root&amp;gt;
  &amp;lt;vkopenurldef&amp;gt;
    &amp;lt;name&amp;gt;KeyCode::VK_OPEN_URL_APP_Emacs&amp;lt;/name&amp;gt;
    &amp;lt;url type=&amp;quot;file&amp;quot;&amp;gt;/Applications/Emacs.app&amp;lt;/url&amp;gt;
  &amp;lt;/vkopenurldef&amp;gt;

  &amp;lt;item&amp;gt;
    &amp;lt;name&amp;gt;Open Emacs&amp;lt;/name&amp;gt;
    &amp;lt;identifier&amp;gt;private.command_e&amp;lt;/identifier&amp;gt;
    &amp;lt;autogen&amp;gt;
      __KeyToKey__
      KeyCode::E, ModifierFlag::COMMAND_R,
      KeyCode::VK_OPEN_URL_APP_Emacs,
    &amp;lt;/autogen&amp;gt;
  &amp;lt;/item&amp;gt;
&amp;lt;/root&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;詳しくはKarabinerの&lt;a href=&#34;https://pqrs.org/osx/karabiner/xml.html.ja&#34;&gt;private.xml設定方法&lt;/a&gt;を。&lt;/p&gt;

&lt;h3 id=&#34;関連:ff733072f6c57b97db8abdda5a7885a6&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eiel/KarabinerConfig&#34;&gt;eiel/KarabinerConfig - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>swiftで書いたProtocolをObj-Cで使うなら@objcをつけろ</title>
          <link>https://blog.eiel.info/blog/2016/01/01/swift-protocol-on-use-objc/</link>
          <pubDate>Fri, 01 Jan 2016 10:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2016/01/01/swift-protocol-on-use-objc/</guid>
          <description>

&lt;p&gt;Swiftで書いたProtocolをObjective-Cで使う予定があるなら、&lt;code&gt;@objc&lt;/code&gt;をつけなければいけない。
つけなければ、Obj-C側で使えない。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@objc protocol Hoge {
  func get() -&amp;gt; Int
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というHogeプロトコルがあったとき&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class HogeService : NSObject {
  let hoge: Hoge
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としたとき、HogeServiceのhogeをィールド利用しようとするとコンパイルエラーになる。
そもそもヘッダファイルに書き出されない。&lt;/p&gt;

&lt;p&gt;単にちゃんとドキュメントを読んでいなくてハマっただけといえばそれだけである。&lt;/p&gt;

&lt;p&gt;類似したもので、Swiftで書いたクラスはNSObjectを継承していないとObjective-Cで使えないなどある。&lt;/p&gt;

&lt;h3 id=&#34;参考文献:02fa6994ce5ae623c8796cc19c3a5c98&#34;&gt;参考文献&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/edo_m18/items/861d090a5471f4f0eeae&#34;&gt;SwiftとObjective-Cで相互に連携する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>広島ITエンジニア合同忘年会 2015</title>
          <link>https://blog.eiel.info/blog/2015/12/26/2015-party/</link>
          <pubDate>Sat, 26 Dec 2015 21:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/12/26/2015-party/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;http://connpass.com/event/23038/&#34;&gt;広島ITエンジニア合同忘年会 2015&lt;/a&gt;が開催されました。
広島のITコミュニティがあつまって忘年会をしようという企画です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.evernote.com/shard/s162/sh/c93a49e0-2e9d-4b48-82ef-3615692227b0/d6b6719004ff08b8はここにまとまっています。&#34;&gt;参加コミュニティ&lt;/a&gt;(サンクス &lt;a href=&#34;https://twitter.com/csc_kamera25&#34;&gt;@csc_kamera25&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LTができる会場だったので、LTをしておきました。
そんなわえで、広島のすごいエンジニア大賞をしました。
今年広島で活躍したエンジニアを表彰しようという作戦です。&lt;/p&gt;

&lt;p&gt;さまざまな思惑があり、いろいろ悩んだのですが5人の方を表彰することにしました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/2015-12-26/7richi.jpg&#34; style=&#34;width: 200px; height: 200px; display: inline&#34; /&gt;
&lt;img src=&#34;https://blog.eiel.info/images/2015-12-26/akira345.jpg&#34; style=&#34;width: 200px; height: 200px; display: inline&#34; /&gt;
&lt;img src=&#34;https://blog.eiel.info/images/2015-12-26/jou4.jpg&#34; style=&#34;width: 200px; height: 200px; display: inline&#34; /&gt;
&lt;img src=&#34;https://blog.eiel.info/images/2015-12-26/isabashi.jpg&#34; style=&#34;width: 200px; height: 200px; display: inline&#34; /&gt;
&lt;img src=&#34;https://blog.eiel.info/images/2015-12-26/mrtk0.jpg&#34; style=&#34;width: 200px; height: 200px; display: inline&#34; /&gt;&lt;/p&gt;

&lt;p&gt;他にも選びたい人はいたのだけど、予算不足なので断念しました。
個人的には表彰したいので来年もぜひ活躍してください。&lt;/p&gt;

&lt;p&gt;この5人をすごい広島大賞2015の候補として、大賞の行く手は会場におまかせしました。
ただ、決めるのが難しいということを予想して、Haskellでランダムに選出するプログラムを用意しておきました。&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/eiel/e8ffc2ac5b2ddd3b9e69.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;厳正なる審査のうえで、今年の大賞は akira345 さんになりました。
みなさん、広島を盛り上げていただいて、ありがとうございました。&lt;/p&gt;

&lt;p&gt;大賞の方には1500円分のamazonギフト券を進呈しました。
また、候補者の方々にはそれぞれ違うぬいぐるみを進呈いたしました。&lt;/p&gt;

&lt;p&gt;来年も表彰したいし、もっと公正に行いたいので、のんびり協力者を集めたいと思います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/2015-12-26/2015.jpg&#34; /&gt;&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;9cc63b940aa2428997b6810769adddbf&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;95029b4026404520b2f35f348998c3a7&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
</description>
        </item>
      
    
      
        <item>
          <title>アウトプットしていたら結婚できた</title>
          <link>https://blog.eiel.info/blog/2015/12/14/output-1214/</link>
          <pubDate>Mon, 14 Dec 2015 00:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/12/14/output-1214/</guid>
          <description>

&lt;p&gt;この記事は「アウトプットしていたら Advent Calendar 2015」14日目の記事です。前の記事は特にありません。&lt;/p&gt;

&lt;p&gt;というか、&lt;a href=&#34;http://nocono.net/post/2015/freelance/&#34;&gt;アウトプットしていたら仕事がたくさんやってきた！ | nocono&lt;/a&gt;を&lt;del&gt;パクって&lt;/del&gt;リスペクトしています。&lt;/p&gt;

&lt;h1 id=&#34;自己紹介:06f9c3819e6cb8a4cb72e0add76f3ab5&#34;&gt;自己紹介&lt;/h1&gt;

&lt;p&gt;広島でフリーランスエンジニアしてます。フリーランスAdvent Calendarはまだ参加していません。&lt;/p&gt;

&lt;h1 id=&#34;今日のテーマ:06f9c3819e6cb8a4cb72e0add76f3ab5&#34;&gt;今日のテーマ&lt;/h1&gt;

&lt;p&gt;特にネタもないです。タイトルどおりです。&lt;/p&gt;

&lt;p&gt;結果的にみると、「積極的に勉強会を開催・登壇(=アウトプット)するようにしていてよかったな」と思ったのでそのことを書きます。
アウトプットAdvent Calendarだし。&lt;/p&gt;

&lt;h1 id=&#34;今年1年やった仕事:06f9c3819e6cb8a4cb72e0add76f3ab5&#34;&gt;今年1年やった仕事&lt;/h1&gt;

&lt;h2 id=&#34;iosアプリケーションの改修:06f9c3819e6cb8a4cb72e0add76f3ab5&#34;&gt;iOSアプリケーションの改修&lt;/h2&gt;

&lt;p&gt;定期的にとあるiOSアプリケーションのバグ修正や機能追加を行なっています。
こういった仕事の金額は高くはありませんが、継続的なので安定した収入が得られてとても助かっています。&lt;/p&gt;

&lt;p&gt;元々iOSアプリケーションをはじめたのは、iPhoneを購入してしまいLinuxデスクトップでは扱いにくかったためメインマシンをMacに変えたのが起因すると思います。
そんなわけで普段使う道具をよりよく使うためCocoaアプリケーションのちまちま勉強していたところ、勉強会でお会いした人たちに書籍をいただいたり、iOS勉強会に混ぜていただいていたりで、気がついたらiOSアプリケーションを作る仕事がやってくるようになっていました。&lt;/p&gt;

&lt;h2 id=&#34;railsアプリケーションの改修:06f9c3819e6cb8a4cb72e0add76f3ab5&#34;&gt;Railsアプリケーションの改修&lt;/h2&gt;

&lt;p&gt;Ruby on Rails で開発されたウェブアプリケーションのバグ修正やメンテナンスを行う仕事もしています。&lt;/p&gt;

&lt;p&gt;元々Rubyをはじめたのは、前職の仕事を自動化するのにひっそり使っていました。JavaやC++、Perlより扱いやすく、&lt;strong&gt;関数型&lt;/strong&gt;の思想を受け継いでいてとても気に入っていました。
また、Rubyに関しては勉強会を主催したりしていました。
こういった経緯もありWeb APIを作成する仕事や、Railsを扱う仕事させていただく機会がたくさんありました。
こういった仕事は、勉強会を主催したり、登壇したりすることをしていたことから繋りができたのを強く感じています。&lt;/p&gt;

&lt;p&gt;また今年からScalaを扱うようになりしたがRubyで学んだことはとても役に立っています。&lt;/p&gt;

&lt;h2 id=&#34;scalaによる開発案件:06f9c3819e6cb8a4cb72e0add76f3ab5&#34;&gt;Scalaによる開発案件&lt;/h2&gt;

&lt;p&gt;勉強会の繋りから、Scalaによる開発に興味はないかと声をかけられ、特にScalaでも関数型積極的に扱っていくとのことでした。
Haskellを趣味で勉強していたので、&lt;strong&gt;関数型&lt;/strong&gt;に興味がありました。
これもさまざまな勉強会に参加したり、ブログを書いたり、登壇したりしていなければ声をかけていただくこともなかったと思います。&lt;/p&gt;

&lt;p&gt;いままで本格的なチーム開発はしていなく、とても貴重な経験をしています。(継続中)&lt;/p&gt;

&lt;h2 id=&#34;javaの新人研修の講師:06f9c3819e6cb8a4cb72e0add76f3ab5&#34;&gt;Javaの新人研修の講師&lt;/h2&gt;

&lt;p&gt;あまり大きなものでハイレベルなものではありませんが、さまざまなプログラミングを扱っている部分を買われて、「様々な言語とも比較しながらJavaを説明して欲しい」といった依頼もありました。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;関数型&lt;/strong&gt;の話もちらほらしながら講師をしました。&lt;/p&gt;

&lt;h1 id=&#34;まとめ:06f9c3819e6cb8a4cb72e0add76f3ab5&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;アウトプットしていたら自分のスキルが伸びているのをふりかえり実感することもできるし、なにより収入が安定してきました。
また、いろんな人と出会うことができ、普通にエンジニアをしているだけだったころに比べて、毎日がとても楽しくなりました。&lt;/p&gt;

&lt;p&gt;僕の場合は、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Emacsに出会い&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;関数型&lt;/strong&gt;に出会い&lt;/li&gt;
&lt;li&gt;Lisp勉強会などで勉強会をしり&lt;/li&gt;
&lt;li&gt;Lispより一般的なRuby勉強会を主催し&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki&#34;&gt;&lt;strong&gt;関数型&lt;/strong&gt;を勉強して学んだことを発表したり&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cssnite.webtouchmeeting.com&#34;&gt;Webの勉強会&lt;/a&gt;に参加したりすることで出会いがあり&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;関数型&lt;/strong&gt;の仕事ができるようになり&lt;/li&gt;
&lt;li&gt;結婚しても大丈夫な収入を得ることができるように&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;なったと思います。&lt;/p&gt;

&lt;p&gt;Scalaにしろ講師業にしろ、こういった実績のない仕事を頂けると自分のスキル幅が大きく広げることができ、本当にありがたいです。 こいつに任せて大丈夫だろうかという不安がある中、それでも任せていただけて感謝しております。 いい経験ができて本当によかったです。関係者のみなさまありがとうございました。(引用)&lt;/p&gt;

&lt;p&gt;やはり&lt;strong&gt;関数型&lt;/strong&gt;は重要だったのだ。(知らんけど)&lt;/p&gt;

&lt;h1 id=&#34;おまけ:06f9c3819e6cb8a4cb72e0add76f3ab5&#34;&gt;おまけ&lt;/h1&gt;

&lt;p&gt;私は元々はあがり症で、昔は人前で話す時めちゃくちゃ緊張して失敗することも多かったのですが、勉強会で登壇を重ねるうちに緊張することも減りました。トークスキルも上がっているようです。嬉しい。 「登壇なんて自分には無理」と思う人もいるかもしれませんが、何事も経験なので機会があれば手を挙げてやってみるといいと思うよ！(引用)&lt;/p&gt;

&lt;p&gt;(でも正直いまだに人前で話すのは苦手なのであんまりしたくない)&lt;/p&gt;

&lt;h1 id=&#34;質問の回答:06f9c3819e6cb8a4cb72e0add76f3ab5&#34;&gt;質問の回答&lt;/h1&gt;

&lt;p&gt;このアドベントカレンダーには質問が用意されていますので、そのうち何個かに答えてみます。&lt;/p&gt;

&lt;h2 id=&#34;q-机やイスにこだわりありますか:06f9c3819e6cb8a4cb72e0add76f3ab5&#34;&gt;Q. 机やイスにこだわりありますか？&lt;/h2&gt;

&lt;p&gt;特にはないですが、オカモトのシルフィーをつかっています。
バロンが人気ですが、実際にすわってみてシルフィーにしました。&lt;/p&gt;

&lt;p&gt;関連: &lt;a href=&#34;http://blog.eiel.info/blog/2014/06/08/office-chair/&#34;&gt;オフィスチェアを買いました。- LT駆動開発04 | そんなこと覚えてない&lt;/a&gt;&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=eiel-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=B00IP2Y5CY&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;q-これがないと-というお気に入りツール-環境はありますか:06f9c3819e6cb8a4cb72e0add76f3ab5&#34;&gt;Q. これがないと！というお気に入りツール・環境はありますか？&lt;/h2&gt;

&lt;p&gt;お気に入りというわけではないですが、キーボードをカスタマイズしているので、&lt;a href=&#34;https://pqrs.org/osx/karabiner/index.html.ja&#34;&gt;Karabiner&lt;/a&gt;がないと戦えません。&lt;/p&gt;

&lt;h2 id=&#34;q-フリーランスになりたい-と相談されることありますか-また答えは:06f9c3819e6cb8a4cb72e0add76f3ab5&#34;&gt;Q. 「フリーランスになりたい」と相談されることありますか？また答えは？&lt;/h2&gt;

&lt;p&gt;ない。&lt;/p&gt;

&lt;p&gt;会社員が楽だと思う。ただ、能力が偏っている人はうまく就職しないとつらいので、アウトプットをして自分の生活やスキルにあった就職をしたりしたほうがよいと思います。
起業まではいかない、フリーランスの場合は、お客さんの都合にふりまわされないようにしておけば、負担がなく仕事ができると思います。&lt;/p&gt;

&lt;p&gt;経営がしたい。理想の会社をつくりたい。などなど思う方はやってみてもよいと思います。&lt;/p&gt;

&lt;p&gt;要介護がついてしまうような病気があっても戦えます。&lt;/p&gt;

&lt;p&gt;さて、15日目の記事は……きの子さんの&lt;a href=&#34;http://nocono.net/post/2015/freelance/&#34;&gt;【2015年振り返り】アウトプットしていたら仕事がたくさんやってきた！&lt;/a&gt;です。この記事を参考のこの記事を書きました。というか、まるまるコピーしているところもあります。&lt;/p&gt;

&lt;p&gt;(あれ…本題をちゃんと書いてない気がする)&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>HMCN Vol.2 でその他の広島のコミュニティについて話をした。</title>
          <link>https://blog.eiel.info/blog/2015/12/13/hmcn2-etc-community/</link>
          <pubDate>Sun, 13 Dec 2015 19:57:49 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/12/13/hmcn2-etc-community/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;https://hmcn.doorkeeper.jp/events/34823&#34;&gt;HMCN(Hiroshima MotionControl Network)&lt;/a&gt;でライトニングトークをしました。&lt;/p&gt;

&lt;p&gt;タイトルは「「Code for Hiroshima」「HMCN」「その他大勢」というタイトルです。
うたわれるものです。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;36dbed7af79d4f6bb24ea31530670def&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;タイトルのとおり&lt;a href=&#34;http://code4hiroshima.org/&#34;&gt;Code for Hiroshima&lt;/a&gt;を紹介する話とみせかけて、広島のITコミュニティはもっと横連携をしたい、という話をしました。
例に岡山をとっていますが、岡山はとても横の繋りが強いですね。岡山県を飛び越えての集客ができてるのがなによりもすごいところです。&lt;/p&gt;

&lt;p&gt;さて、モーションコントロールのITコミュニティなので、それっぽい話もしなきゃいけないと思って、iPhoneのセンサーをつかって遊びでつくったプロダクトがあったので、これも紹介しておきました。&lt;/p&gt;

&lt;p&gt;まずは、去年つくったデジタル万華鏡です。&lt;/p&gt;

&lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/sMJtJsOGcPg&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/GXqg2EEn-d4&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;これはこれで、進化させてみようかなとちょっとおもってたりもします。&lt;/p&gt;

&lt;p&gt;今年つくったやつもありますが、これはまた別に紹介したいと思います。&lt;/p&gt;

&lt;p&gt;とりあえず、&lt;a href=&#34;https://osh-web.doorkeeper.jp/events/35060&#34;&gt;オープンセミナー広島&lt;/a&gt;と&lt;a href=&#34;http://connpass.com/event/23038/&#34;&gt;広島の合同忘年会&lt;/a&gt;をよろしくお願いします。&lt;/p&gt;

&lt;p&gt;そういえば、スライド内でつかったてきとうな広島のITコミュニティの関連図も別途アップしてみました。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;4ffad3197f584b8cb5b47e4b0b7d494d&#34; data-ratio=&#34;2.52216748768473&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
</description>
        </item>
      
    
      
        <item>
          <title>GAE/GoでChatWorkボットつくって遊んだ話 - #LT駆動 21</title>
          <link>https://blog.eiel.info/blog/2015/12/06/ltdd-21-gae-go-chatwork/</link>
          <pubDate>Sun, 06 Dec 2015 21:58:04 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/12/06/ltdd-21-gae-go-chatwork/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA21&#34;&gt;LT駆動開発21&lt;/a&gt;でLTしてきました。
タイトル「GAE/GoでChatWorkボットつくって遊んだ話」です。&lt;/p&gt;

&lt;p&gt;最近ちょっとしたアプリで頻繁に起動するものはGAE/Goで走らせています。
そうでないものはHaskellやScalaでherokuにおくことが多いです。&lt;/p&gt;

&lt;p&gt;今回は&lt;a href=&#34;https://github.com/griffin-stewie/go-chatwork&#34;&gt;go-chatwork&lt;/a&gt;で遊びました。
正確にはChatWorkで動く、チャットボットをつくって遊びました。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;349b6dcd53784f82b23d86b1d1e2ff25&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;LT駆動はゆるふわに個々が学んだことを発表していてとても楽しいです。気軽に参加してみてください。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>内包表記とPythonと… - #LT駆動 21</title>
          <link>https://blog.eiel.info/blog/2015/12/06/ltdd-21-python-option/</link>
          <pubDate>Sun, 06 Dec 2015 21:50:42 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/12/06/ltdd-21-python-option/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA21&#34;&gt;LT駆動開発21&lt;/a&gt;でLTしてきました。
タイトル「内包表記とPythonと…Option」です。
PyCon Mini Hiroshima用に用意してたネタですが、参加できなかったので放出しました。
Pythonの内包表記でScalaのOptionのようなものをつくってみました。&lt;/p&gt;

&lt;p&gt;Pythonの内包表記はScalaではfor式で表現ができます。
Scalaではリスト以外のものでもfor式が使えます。
代表格として&lt;code&gt;Option&lt;/code&gt;が上げられます。
ということで、PythonにもOptionクラスをつくり内包表記で利用できるようにしてみました。
スライドに登場するように内包表記に対応するために、&lt;code&gt;__iter__&lt;/code&gt;と&lt;code&gt;next&lt;/code&gt;メソッドを実装をしています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Option:
    def __init__(self, value):
        self.value = value
    def __iter__(self):
        return self
    def next(self):
        if self.value == None:
            raise StopIteration
        else:
            ret = self.value
        self.value = None
            return ret
    def __str__(self):
          if self.value == None:
               return &amp;quot;Nothing&amp;quot;
          else:
               return &amp;quot;Some(%d)&amp;quot; % self.value

def add(x, y):
  return [ x_+ y_ 
    for x_ in x 
    for y_ in y
  ]

add(Option(1), Option(2))    # =&amp;gt; [3]
add(Option(1), Option(None))  # =&amp;gt; []
add(Option(None), Option(2))  # =&amp;gt; []
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;LT駆動はゆるふわに個々が学んだことを発表していてとても楽しいです。気軽に参加してみてください。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;c891be7c13ac4b8b8076e321e11b352d&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
</description>
        </item>
      
    
      
        <item>
          <title>普通の右上をゆこう - ふつうの広島 Advent Calendar 2015</title>
          <link>https://blog.eiel.info/blog/2015/12/01/standard-2016/</link>
          <pubDate>Tue, 01 Dec 2015 00:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/12/01/standard-2016/</guid>
          <description>

&lt;p&gt;本記事は&lt;a href=&#34;http://www.adventar.org/calendars/995&#34;&gt;ふつうの広島 Advent Calendar 2015&lt;/a&gt;の1日目の記事です。&lt;/p&gt;

&lt;p&gt;ふつうの広島 Advent Calendarは広島の「ふつう」なところとこを書いたりするらしいです。
自分にとってあたりまえなことは、意外と誰かにとって「すごい」かもしれません。&lt;/p&gt;

&lt;p&gt;この記事では広島はさておいて、そんな、「ふつう」について考えてみます。&lt;/p&gt;

&lt;p&gt;私が言う「ふつう」とは「普通の積み重ね」による当たり前や、習慣から生み出されるチカラと考えています。
「ふつう」はある種の理想や、最強の自分自身かもしれません。もしかすると、当たり前すぎて気づかない空気のようなものかもしれません。&lt;/p&gt;

&lt;p&gt;そんなわけで、「普通の右上をゆくのがふつう」です。ちょっとだけ普通よりすごい「ふつう」になりましょう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;「ふつう」とはなんだろう&lt;/li&gt;
&lt;li&gt;楽しい方向へずれてみよう&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;ふつうとはなんだろう:deebb48eedf3a9dca9eb9dc7cf97b1aa&#34;&gt;ふつうとはなんだろう&lt;/h1&gt;

&lt;p&gt;まず「ふつう」とは、なんなのかを考えてみましょう。&lt;/p&gt;

&lt;p&gt;「ふつう」とは、&lt;a href=&#34;http://www.loveruby.net/ja/&#34;&gt;青木峰郎&lt;/a&gt;の著書のシリーズである「ふつうシリーズ」をリスペクトしたものです。&lt;/p&gt;

&lt;p&gt;「ふつうシリーズ」は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4797328355?tag=eiel-22&amp;amp;camp=1027&amp;amp;creative=7407&amp;amp;linkCode=as4&amp;amp;creativeASIN=4797328355&amp;amp;adid=10VYQSGPFZSTTNHNV8ZM&amp;amp;&#34;&gt;ふつうのLinuxプログラミング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4797373970?tag=eiel-22&amp;amp;camp=1027&amp;amp;creative=7407&amp;amp;linkCode=as4&amp;amp;creativeASIN=4797373970&amp;amp;adid=1ZFBG64ZG0HC7JMPTCQQ&amp;amp;&#34;&gt;ふつうのHaskellプログラミング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4797337958?tag=eiel-22&amp;amp;camp=1027&amp;amp;creative=7407&amp;amp;linkCode=as4&amp;amp;creativeASIN=4797337958&amp;amp;adid=1Y82ZT8H412G5C3J8ZZE&amp;amp;&#34;&gt;ふつうのコンパイラをつくろう&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の3つが刊行されています。&lt;/p&gt;

&lt;p&gt;どれも良書で、ふつうのLinuxプログラミングは駆け出しのプログラマの頃に読んでとても勉強になりました。
ふつうのHaskellプログラミングはHaskellの入門書としては、今はあまりおすすめしませんが、関数型の入門としては出版当時は数少ない良書だったと思います。&lt;/p&gt;

&lt;p&gt;プログラマにしかわからない説明になりますが、ふつうのプログラマはLinuxのプログラミングをするし、Haskellのプログラミングをするし、コンパイルをつくるのです。
普通というにはちょっとすごく思えるはずです。
だから、そんな普通を目指す人を「ふつう」と呼びたいと思います。&lt;/p&gt;

&lt;p&gt;「ふつう ≧ 普通」なのです。ふつうは普通よりちょっとすごいです。&lt;/p&gt;

&lt;p&gt;そんなわけで、僕は&lt;strong&gt;普通よりちょっとだけすごい「ふつうのプログラマ」を目指す旅の途中&lt;/strong&gt;です&lt;/p&gt;

&lt;p&gt;そんな思いを基に2015年5月に行われた&lt;a href=&#34;https://blog.eiel.info/blog/2015/05/16/oso-2015/&#34;&gt;岡山のイベントで&lt;/a&gt;「ふつうのプログラマ」についてお話しました。&lt;/p&gt;

&lt;h1 id=&#34;楽しい方向へずれてみよう:deebb48eedf3a9dca9eb9dc7cf97b1aa&#34;&gt;楽しい方向へずれてみよう&lt;/h1&gt;

&lt;p&gt;さて、「ふつう」を目指すことにしました。なにをすればいいでしょうか。&lt;/p&gt;

&lt;p&gt;なりたい自分を想像して、なりたい自分になれるような習慣をつくりましょう。
2週間など短いタイムボックスを設定して、効果を計測するのがイマドキらしいです。&lt;/p&gt;

&lt;p&gt;良い習慣が思いつかないときは、すごい人たちの習慣を真似することが良いです。
すごい人たちの習慣には、すごい理由が隠されているはずです。
しかし、毎日続けるのは難しいかもしれません。というか、だいたい難しいです。
自分ができるようにアレンジしていきましょう。&lt;/p&gt;

&lt;p&gt;アレンジしていく時に大切なことは、「自分が楽しい方向」であることです。
習慣なので、続けられなければ意味がありません。
続けられるように、目標を誤らないように、変化できてこそのイマドキです。
楽しいなら続けられますよね。&lt;/p&gt;

&lt;p&gt;上を目指すのも疲れるので、すごいを目指すわけでない、「普通」の私達なので右(楽しい方向)にずれるのです。
そのズレがやがて、あなただけの色になることでしょう。(たぶん)&lt;/p&gt;

&lt;p&gt;ちなみに、私は毎日GitHubを更新するという継続や、毎月1回みんなの前で何かをするという継続をしています。
たいしたことではないですが、ふりかえると大きな成果がのこるのを感じています。&lt;/p&gt;

&lt;h1 id=&#34;まとめ:deebb48eedf3a9dca9eb9dc7cf97b1aa&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;「すごい」になるのは大変なので「ふつう」をめざします。
普通なんだけど、ちょっとすごい。&lt;/p&gt;

&lt;p&gt;そんな「ふつう」をめざすときに、毎日が楽しくなるようにアレンジすると毎日が楽しくなります。
楽しく続けることができれば「ふつう」がやがて誰かの「すごい」になると思います。&lt;/p&gt;

&lt;p&gt;ふつうの広島AdventCalendar1日目でした。明日は&lt;a href=&#34;http://twitter.com/tsuchim/&#34;&gt;tsuchim&lt;/a&gt;さんの&lt;a href=&#34;http://eikai.co.jp/2015/12/681/&#34;&gt;ふつうの人生をおくりたい&lt;/a&gt;です。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>WebアプリをつくるならGAEは勉強になる気がするという話をした - #LT駆動 20</title>
          <link>https://blog.eiel.info/blog/2015/11/08/ltdd-20-gae-go/</link>
          <pubDate>Sun, 08 Nov 2015 00:00:25 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/11/08/ltdd-20-gae-go/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA20&#34;&gt;LT駆動開発20&lt;/a&gt;でWebアプリをつくるならGAEは勉強になる気がするという話をした。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;0b5bd19c823846ab963ae44531e35988&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;このスライドはすごく雑につくった。
中身の整理とかほとんどしていない。
ただ、Google App Engineに載せるアプリケーションを無料枠内でという制限を設けて作るのは、スケールアウトできるウェブアプリをつくる上で学べることがたくさんあると感じている。
それをだらだらかいたスライドを使いながら話した。&lt;/p&gt;

&lt;p&gt;GAEにある制限の多くはスケールアウトするための制限なはずで、GAEがもってる様々な機能をうまく使うことで制限内でがんばることができる。
また、早い段階で制限にひっかかるため、学べることも多いと感じた。&lt;/p&gt;

&lt;p&gt;なので、ある程度ウェブアプリの作り方になれたらGAEで遊んでみることをちょっとおすすめしたい。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>HaskellのWebApplicationFrameworkを試してみるという話をした - #LT駆動 20</title>
          <link>https://blog.eiel.info/blog/2015/11/07/ltdd-20-haskell-web-application-framework/</link>
          <pubDate>Sat, 07 Nov 2015 23:27:49 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/11/07/ltdd-20-haskell-web-application-framework/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA20&#34;&gt;LT駆動開発20&lt;/a&gt;で「HaskellのWeb Application Frameworkを試してみる」という話をした。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;88440dd1822743159eed085c25fe1850&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;試したのはいわゆるController的な部分になる。最近Webというのはヘキサゴナルアーキテクチャのアダプタにみえてしまう病にかかっています。&lt;/p&gt;

&lt;p&gt;話しが逸れました。
前々からHaskellでWeb APIをかきたかったのですが、&lt;a href=&#34;https://twitter.com/uadachi&#34;&gt;小噺マスターさん&lt;/a&gt;と小噺をしている際に「Haskellのフレームワークってなんですかねー？」という話が出たのを機会にちょっと調べた。
気軽にデプロイできることもわかったし、これを機会にざくっと試してみたという感じです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/scotty-web/scotty&#34;&gt;scotty&lt;/a&gt;に改良を加えたのが&lt;a href=&#34;https://www.spock.li/&#34;&gt;Spock&lt;/a&gt;って感じの印象をうけました。ふたつとも手軽に使えました。
&lt;a href=&#34;http://www.yesodweb.com/&#34;&gt;Yesod&lt;/a&gt;は別格で難しく感じましたが、機能的にはすごいなーって思いました。
3つともコードはシンプル。&lt;/p&gt;

&lt;p&gt;しばらくは、Spockで遊びつつYesodを勉強しようかと思っております。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eiel/haskell-webframework-sample&#34;&gt;ソースコード&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;関連:707e45d28c7b6700e76d66b6d7c8ecb5&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/eielh/items/09b9f1c21f7d16e09ede&#34;&gt;stackを使ってhaskellで最小のWeb Applicationしてみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/eielh/items/e52aeee1419ba611a84d&#34;&gt;herokuにhaskellのウェブアプリをdocker:releaseをつかってデプロイしてみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Dockerコンテナの中からDockerコンテナを動かす話をした - LT駆動19</title>
          <link>https://blog.eiel.info/blog/2015/10/04/ltdd-19-docker-bind-docker/</link>
          <pubDate>Sun, 04 Oct 2015 11:44:54 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/10/04/ltdd-19-docker-bind-docker/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT駆動開発19&#34;&gt;LT駆動開発19&lt;/a&gt;で「Docker &amp;gt;&amp;gt;= Docker」という話した。
「どっかーばいんどどっかー」と読む。
cronの中でDockerコマンドがつかいたかった。そのcrondはDockerホストでは当然動かしたくない。Dockerコンテナ内におきたい。
Remote APIでたたいてもいいけど、ちょっとしたものならコマンドが楽でよい。&lt;/p&gt;

&lt;p&gt;dockerが使えるイメージはdockerがある。docker run サブコマンドは&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run イメージ コマンド
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なので、イメージを節約して、dockerイメージをつかいまわすと、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run docker docker run docker ls`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という不思議な呪文になった。
実際はDockerfileでRUNで指定したりするので、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run docker docker run hoge
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とかですんだり、そもそも&lt;code&gt;docker run hoge&lt;/code&gt;で済むようにつくることになるだろう。&lt;/p&gt;

&lt;p&gt;ちなみに&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run docker &amp;quot;docker run docker ls&amp;quot;`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;だとうまくうごかない。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run docker bin/sh -c &amp;quot;docker run docker ls&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすると良い。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sh -c&lt;/code&gt; の中でdockerコマンドで複数のプログラムをうごかしてパイプで処理をつないだりもできる。
そういう話をしました。&lt;/p&gt;

&lt;p&gt;あと一番大事なことだけど、Docker Hostが動いているコンピュータ上のdockerコマンドは&lt;code&gt;/var/run/docker.sock&lt;/code&gt;をつかって通信しているようなので、&lt;code&gt;-v /var/run/docker.sock:/var/run/docker.sock&lt;/code&gt;を共有してやると、コンテナ内からHostと簡単に通信できる。
これって安全なのかはよくしらない。&lt;/p&gt;

&lt;p&gt;Dockerの中でDockerを起動すると Docker Docker A になりそうだけど、Docker A になるので、 「Docker &amp;gt;&amp;gt;= Docker」というタイトルにしてみました。いま気づいたけど、型が不一致である。「Docker &amp;gt;&amp;gt;= _ -&amp;gt; Docker」 とすべきだったのでは…。
もうそれなら「Docker &amp;gt;&amp;gt; Docker」じゃん…。&lt;/p&gt;

&lt;p&gt;スライドは即興でつくったので雑です。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;c9b2baf5752447559ac85dd46a1555ef&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
</description>
        </item>
      
    
      
        <item>
          <title>haskellとpython - #LT駆動 開発19</title>
          <link>https://blog.eiel.info/blog/2015/10/03/ltdd-19-haskell-and-python/</link>
          <pubDate>Sat, 03 Oct 2015 13:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/10/03/ltdd-19-haskell-and-python/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT駆動開発19&#34;&gt;LT駆動開発19&lt;/a&gt;で「HaskellとPython」というLTをしました。&lt;/p&gt;

&lt;p&gt;2015年11月22日(日)に&lt;a href=&#34;http://hiroshima.pycon.jp&#34;&gt;Pycon mini Hiroshima&lt;/a&gt;が開催されますが、参加できないのが濃厚なので、お詫びために告知をすることにしました。&lt;/p&gt;

&lt;p&gt;Pycon miniのテーマが「○○とPython」なので、「HaskellとPython」というアプローチにしました。
Pythonが影響を受けた言語の中にHaskellがあり、Haskellを書いてるとPythonとHaskellは結構近いという印象をもっていて、思いついた似てるところを書きだしました。
本当は11月のLT駆動のネタにするつもりだった1ヶ月じっくり考えようとおもっていたのですが、ほどよいネタにしやすい&lt;a href=&#34;https://twitter.com/mrtc0&#34;&gt;@mrtc0&lt;/a&gt;ツイートがあったので、今月にまわしました。&lt;/p&gt;

&lt;p&gt;Haskell自体を学ぶことはいろんなプログラミング言語を使う上で活きると僕は感じているので、興味があれば勉強してみてください。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;cac0a67896ca44bcb1ad447dee832116&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;最近のLT駆動は、僕が関数型系の話をして、@tsuda_ahrさんがMS系の話をして、@nemumupoyoがネットワークノ話をして、@mrtc0氏がネットワーク便利ツールを照会してくれて、@akira345さんがハードウェア系の話をしてくれて、@k2worksさんがソフトウェア開発のノウハウを生活に活かす話をするのが定番になってます。とても楽しいです。&lt;/p&gt;

&lt;p&gt;今月は大学生が二人、初LT駆動で、若いのにナイスなLTをしていました。&lt;/p&gt;

&lt;p&gt;毎月第一土曜日に開催されるので気軽に参加してみてください。&lt;/p&gt;

&lt;h3 id=&#34;関連リンク:2819d196eaaf442f1066e3efa4751243&#34;&gt;関連リンク&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hiroshima.pycon.jp&#34;&gt;PyCon mini Hiroshima&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/Python&#34;&gt;Python - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/2/howto/functional.html&#34;&gt;Functional Programming HOWTO — Python 2.7.10 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/becoming-productive-in-haskell/&#34;&gt;Haskellで生産性を高める-Pythonからの移行 | プログラミング | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/yutaadachi/scala-kansai-summit-2015&#34;&gt;チャットワークScala化プロジェクトの一年 / Scala Kansai Summit 2015 // Speaker Deck&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>OSC2015 HiroshimaでLT駆動のふりかえりの発表をした</title>
          <link>https://blog.eiel.info/blog/2015/09/19/osc-2015/</link>
          <pubDate>Sat, 19 Sep 2015 18:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/09/19/osc-2015/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;http://www.ospn.jp/osc2015-hiroshima/&#34;&gt;OSC2015 Hiroshima&lt;/a&gt;がありました。&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT駆動開発-ベストセッションズ2-–-LIGHTBAKO&#34;&gt;LT駆動開発&lt;/a&gt;のセミナーがあり、そこで合作LTをしました。&lt;/p&gt;

&lt;p&gt;僕がスライドをつくって、&lt;a href=&#34;https://twitter.com/kakenavi&#34;&gt;@kakenavi&lt;/a&gt;さんがスピーカを担当したらしいです。
らしいというのは、僕が風邪で休んだからです。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;d91b2987db744fcf9ec421fec567feb6&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;技術ネタとしては、qコマンドを使いました。CSVをSQLでごにょれます。便利です。
&lt;a href=&#34;https://github.com/harelba/q&#34;&gt;https://github.com/harelba/q&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;勉強会で発表しなきゃいけない…っておいこむと勉強できるので、毎月追い込みをかけるのがLT駆動開発です。(やや誇張あり)&lt;/p&gt;

&lt;p&gt;これまでLT駆動開発は18回行われていてトータルで180個以上のLTが行われています。壮絶です。
一回あたり10回のLTがあるようです。
現在、ユニーク参加者は31名います。1回しか発表者していない人は3人しかいません。90%近くのリピート率です。高いです。&lt;/p&gt;

&lt;p&gt;蛇足ですが、よく調べるとトータルで31回LTしている人がいますね。頭がおかしいですね。&lt;/p&gt;

&lt;p&gt;発表者内容は技術ポエムを除くと開発に関したものが多かったです。
ついで、プログラミング言語、セキュリティの話題でした。
これは開発している人が参加している多いのと、セキュリティに興味のある学生が多いため、この傾向になっています。ポエムは気軽に話せますから必然的に増えます。というかジャンルがうまくわけられなかったものは全部ポエムに分類させてしまっからなのもあります。&lt;/p&gt;

&lt;p&gt;関連するプログラミング言語も調査してみました。
Ruby JavaScript Python Haskell という順序でした。Haskellが広島で高い人気があることがうかがえます。
Rubyが多いのは、LT駆動の前進がRubyの勉強会だった影響です。JavaScriptは今いけいけなので必然的におおくなってきている気がします。&lt;/p&gt;

&lt;p&gt;発表者のスライドも結構ネットで拡散しており、はてなブックマークが800を越えているものがありました。すごいです。(僕のものではありません)&lt;/p&gt;

&lt;p&gt;というわけで、LT駆動したことの世の中の影響は微々たるものですが、あるような気がします。
LTをすると世界の真実に近づけますよ。たぶん。&lt;/p&gt;

&lt;p&gt;あと、ロマシング佐賀はスクウェア、エニックスの著作物です。
&lt;a href=&#34;http://romasaga.jp&#34;&gt;http://romasaga.jp&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>モナドがくれたものという話をした - #LT駆動</title>
          <link>https://blog.eiel.info/blog/2015/09/05/ltdd-18/</link>
          <pubDate>Sat, 05 Sep 2015 23:37:56 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/09/05/ltdd-18/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA18&#34;&gt;LT駆動開発18 - 秋(not 安芸)の宮島&lt;/a&gt;で「モナドがくれたもの」というタイトルでLTしてきました。雑なLTです。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;3a6147ab3edb43948faee24621302505&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;モナドの利点を問われたので、似ているパティーン(パターン)が除去できるんだぜ。みじかくかけるんだぜ。
「裏で毎回同じことやってくれてるんすよ。これはコンピュータの得意なことだよな。だけど、その内容はモナドの種類によって違うんだぜ」&lt;/p&gt;

&lt;p&gt;的な話をしておきました。&lt;/p&gt;

&lt;p&gt;動作確認につかったコードはここに投げておきます。&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/eiel/1c96044764224ed91e32.js&#34;&gt;&lt;/script&gt;
</description>
        </item>
      
    
      
        <item>
          <title>HaskellでGitHub APIライブラリをつかってみた - #LT駆動</title>
          <link>https://blog.eiel.info/blog/2015/08/02/ltdd-17/</link>
          <pubDate>Sun, 02 Aug 2015 13:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/08/02/ltdd-17/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA17&#34;&gt;LT駆動開発17&lt;/a&gt;でHaskellの&lt;a href=&#34;https://hackage.haskell.org/package/github&#34;&gt;github&lt;/a&gt;ライブラリをつかった話をした。
ついでにstackを試したので、その話をした。&lt;/p&gt;

&lt;p&gt;Haskellは簡単な具体例がすくないってことで、ちょっとしたコードもどんどんかいていこう。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;520343609652432e88d69ae2b51e2063&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;正直、雑なLTだった。&lt;/p&gt;

&lt;p&gt;Haskellでコードかくの楽だなぁ。&lt;/p&gt;

&lt;h3 id=&#34;関連:56fe9c74b2d5936aa42a3d83aa746126&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eiel/Spep/blob/master/app/Main.hs&#34;&gt;ソースコード&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2015/08/01/scala-kansai-summit-2015/&#34;&gt;突然Scalaプロジェクトに参加することになったことを話した - #scala_ks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>突然Scalaプロジェクトに参加することになったことを話した - #scala_ks</title>
          <link>https://blog.eiel.info/blog/2015/08/01/scala-kansai-summit-2015/</link>
          <pubDate>Sat, 01 Aug 2015 17:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/08/01/scala-kansai-summit-2015/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;http://summit.scala-kansai.org&#34;&gt;Scala関西Summit 2015&lt;/a&gt;でLTをした。
上からの重圧を感じて申し込みしておいた。
関西のイベントだし、たくさん申し込みがあるだろう。
概要からして期待値が低いから落ちるはずだ。&lt;/p&gt;

&lt;p&gt;そんなことを思っていたら発表することになった。&lt;/p&gt;

&lt;p&gt;最近、Scalaなプロジェクトで仕事をしている。
完全にScala初心者だけど、なんとかやれているし、とても楽しい。
「&lt;strong&gt;Scala初心者だけどScalaな仕事をしたいと思う人の背中を押したい&lt;/strong&gt;」とおもって準備をしたが、Haskellを勉強してるが故のすんなり入れた疑惑があるので説得力が低い。&lt;/p&gt;

&lt;p&gt;Haskellという視点はなるべく捨てて話をしたつもりだ。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;5977d94225a34724aaee80a43fc3d722&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;先にあだちさんにネタバレをかるくされた…つらくはない。&lt;/p&gt;

&lt;p&gt;Scala初心者であることをアピールするためにGitHubにおいてるリポジトリの言語を集計した。
これをScalaで書いてネタにしようとおもったらScalaが難しくて失敗におわった。
しかし、APIを自分で叩いてやれば、なんとかなったとも思うが、Haskellでかいてみたらすんなりかけてしまった。
その話は&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT駆動開発17&#34;&gt;#LT駆動&lt;/a&gt;17で使うことにした。&lt;/p&gt;

&lt;p&gt;プロジェクトのチームメンバーは面白い人たちばかりでテレワークという奴なのに日々楽しく過ごさせていただいている。
とても感謝している。&lt;/p&gt;

&lt;p&gt;Scalaについてだけど、最初はたくさんの焦りを感じたけど4日目ぐらいから、しばらくはやれそうな感じはした。
知識不足はあきらかだけど、なんとなくのコードをかいてプルリクエストをすれば手厚いフォローがいただけて、とても勉強になった。&lt;/p&gt;

&lt;p&gt;「こんなの書ける気がしない」から「書いたらこんなのになった」って感じの数日間だった。&lt;/p&gt;

&lt;p&gt;Scalaのコードになれるのに、&lt;a href=&#34;https://www.amazon.co.jp/dp/4798125415?tag=eiel-22&amp;amp;camp=1027&amp;amp;creative=7407&amp;amp;linkCode=as4&amp;amp;creativeASIN=4798125415&amp;amp;adid=0DRHA1E5K6EHG41CBAY2&amp;amp;&#34;&gt;Scala逆引きレシピ&lt;/a&gt;には大変お世話になった。
通勤時間でプロジェクトに参加するまでに3回流すことができたが、コードは1行も書く時間は確保できなかった。
ちなみにゴールデンウィークは熱を出してそれどころではなかった。
IntelliJ IDEAも実質、プロジェクト参加してから使い方を学ぶことになってしまった。&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=eiel-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4798125415&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Scalaを積極的に採用しようとしている人たちは、技術的に挑戦している人たちが多くて「大変楽しい」と思うことを最後に伝えたいと残しておきます。&lt;/p&gt;

&lt;p&gt;というわけで、HaskellもScalaも楽しいです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>自治体との対話を考えていきたい - ヒロハタ中間発表会を終えて</title>
          <link>https://blog.eiel.info/blog/2015/07/26/intercept-presentanion-in-hirohata/</link>
          <pubDate>Sun, 26 Jul 2015 22:35:51 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/07/26/intercept-presentanion-in-hirohata/</guid>
          <description>

&lt;p&gt;この記事は&lt;a href=&#34;http://www.pref.hiroshima.lg.jp/soshiki/231/hirohataproject.html&#34;&gt;ヒロハタ&lt;/a&gt;というプロジェクトに関わった人がみんなが「参加してよかった」って思えるようになって欲しいから書いている。
そして、広島県に限らず市民が自治体に振り回されないようになって欲しい。&lt;/p&gt;

&lt;p&gt;ひろしま発人材集積促進プロジェクトというプロジェクトが広島県によって実施されている。
現在、「ウェブ分野」と「デザイン分野」が実施されており、ウェブ分野の通称が「ヒロハタ」である。(たぶん)&lt;/p&gt;

&lt;p&gt;脱線するが、デザイン分野はあまりウェブに情報がない。ウェブ分野はウェブ分野だけあって、ウェブにそこそこ情報がある。素晴らしい。&lt;/p&gt;

&lt;p&gt;話を戻す。ヒロハタがスタートして1年経過した。そこで今回、中間発表が行なわれた。
中間発表の肝は中間にも関わらず、現時点で優秀なプランがあれば奨励金として100万円が提供されるそうです。&lt;/p&gt;

&lt;p&gt;その中で感じたのは、ヒロハタの現場と県の審査基準のズレである。&lt;/p&gt;

&lt;p&gt;この記事では、その話と私が発表した内容についての話をする。&lt;/p&gt;

&lt;p&gt;本記事の概要は次の通り。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ヒロハタは「広島の鷹野雅弘」を育てるのが目的ではないのか&lt;/li&gt;
&lt;li&gt;スタートアップに必要なのはウェブデザイナーではなくてエンジニアだよね&lt;/li&gt;
&lt;li&gt;そんなわけで私が話したこと&lt;/li&gt;
&lt;li&gt;ヒロハタはどう進むが良いのだろうか&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;ヒロハタは-広島の鷹野雅弘-を育てるのが目的ではないのか:c711aaada0102d43a8eae906c798c3db&#34;&gt;ヒロハタは「広島の鷹野雅弘」を育てるのが目的ではないのか&lt;/h1&gt;

&lt;p&gt;このウェブ分野は、&lt;strong&gt;「Web等の活用による事業化を目指す！」&lt;/strong&gt;というのがテーマである。
なので、中間発表の審査基準は、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;新規性・独創性&lt;/li&gt;
&lt;li&gt;市場性・成長性&lt;/li&gt;
&lt;li&gt;実現性・収益性&lt;/li&gt;
&lt;li&gt;熱意・表現力&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なるほど。スタートアップを評価する基準としては一般的だ。&lt;/p&gt;

&lt;p&gt;ところで、このヒロハタの指導者をみてみよう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://swwwitch.com/takano/&#34;&gt;鷹野 雅弘（たかの・まさひろ）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;プロフィールをみてみよう。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;株式会社スイッチを1996年から経営（現在、19期目）。コアスキルは、グラフィックデザイン、DTP（プリントメディア）やWebの制作。 デザインだけでなく、ビジネスドキュメントの制作などにも精通。これらに関して講演や教室でのトレーニング業務などを20年以上にわたり行っている。 Web制作者向けのセミナーイベントCSS Niteを主宰。400回を超える関連イベントを通して、参加者はのべ50,000人弱。 都内での開催を中心に、全国23の都道府県、および韓国にて展開。 年間200万ビューのDTPに関するブログ「DTP Transit」を運営。 テクニカルライターとして20冊以上の著書を持つ。1万部を超えるヒット作を連発し、総販売数は14万部超。 そのほか、書籍の企画編集、スクールのカリキュラム開発などを企画する。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;審査基準は良いスタートアップかどうかである。指導者のコアスキルはグラフィックデザイン、ウェブ制作である。
さて、&lt;strong&gt;指導者の指示に従って行動することで、素晴しいビジネスプランできるのだろうか&lt;/strong&gt;。とても疑問である。実際、指導者が進む方向と、審査基準がズレていたと思う。&lt;/p&gt;

&lt;p&gt;その結果、今回の審査結果は、ビジネスプランとしてはどれも弱いため、「優秀なプランはない」という結果になったようだ。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;当たり前だ&lt;/strong&gt;。はじめからわかってたよ!&lt;/p&gt;

&lt;p&gt;ここで知事の記者会見を見てみよう。&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/ADuMQ7aBSAM&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;blockquote&gt;
&lt;p&gt;一定の分野で人を惹きつけるチカラのある人材を核として、磁石にくっつくような形で人材を集積を拡大してくれぇ、というのがいろんなところで見られまして(中略)この人材集積の効果を狙って、人を惹きつけられる人を来てもらって、いろんな活動をすることによって高度人材の定着を狙ってすすめるものであります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;本来の目的を考えると、「&lt;strong&gt;広島の鷹野雅弘&lt;/strong&gt;」を育てるのが目的だと思うのだけど、違うのだろうか。&lt;/p&gt;

&lt;h3 id=&#34;指導者の立場-カタリスト:c711aaada0102d43a8eae906c798c3db&#34;&gt;指導者の立場。カタリスト。&lt;/h3&gt;

&lt;p&gt;指導者として設定された、鷹野さんは事業化を目指すという観点では自身が指導者としては的確でないのは理解されている。
この記事をみればわかる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://swwwitch.com/hirohata/&#34;&gt;ヒロハタ（ひろしま発人材集積促進プロジェクト）について - 鷹野雅弘（スイッチ）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最初にかいてある。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ヒロハタ（ひろしま発人材集積促進プロジェクト）は、創業支援ではありません。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;現実のカタリストと広島県の思う指導者のズレをまず解消して欲しいところである。&lt;/p&gt;

&lt;p&gt;言わば、これはちゃぶ台返しである。&lt;/p&gt;

&lt;h1 id=&#34;スタートアップに必要なのはウェブデザイナーよりもまずエンジニアだよね:c711aaada0102d43a8eae906c798c3db&#34;&gt;スタートアップに必要なのはウェブデザイナーよりもまずエンジニアだよね&lt;/h1&gt;

&lt;p&gt;このヒロハタはリーンスタートアップで進めるという方針が打ち出されている。
さて、みなさんは&lt;a href=&#34;http://www.amazon.co.jp/リーン・スタートアップ-エリック・リース/dp/4822248976&#34;&gt;リーンスタートアップ&lt;/a&gt;や&lt;a href=&#34;http://www.amazon.co.jp/dp/4873115914/ref=pd_lpo_sbs_dp_ss_1?pf_rd_p=187205609&amp;amp;pf_rd_s=lpo-top-stripe&amp;amp;pf_rd_t=201&amp;amp;pf_rd_i=4822248976&amp;amp;pf_rd_m=AN1VRQENFRJN5&amp;amp;pf_rd_r=1DA0MH1KVVS40TJE2468&#34;&gt;Running Lean&lt;/a&gt;を読まれただろうか。
これらを読んでみると、明らかにエンジニア向けの本である。
しかし、ヒロハタが募集したのは、アイディアをもった人である。
Running leanを読めば、エンジニアでなくても取り組めることがあることはわかる。
しかし、アイディアを実現するためにエンジニアをマッチングしてあげるべきなのではないだろうか。&lt;/p&gt;

&lt;p&gt;全く無視である。
カタリスト、アシスタント、自治体の人はまずみんな読んでおくべきなのではないのでしょうか。&lt;/p&gt;

&lt;p&gt;スタートアップができるのはIT技術の発展でITエンジニアがひとりでもサービスが提供できるようになったことや、3Dプリンタでプロトタイプが簡単に作れるようになったからだと最近思ってるんだけど違うんだろうか。&lt;/p&gt;

&lt;p&gt;実際、こういうことがしたいのであればスタートアップウィークエンドやハッカソンをやるべきだろう。
広島県はすでにハッカソンをやっているじゃないか。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pref.hiroshima.lg.jp/site/innovation/hackathon1206.html&#34;&gt;第2回 レッドハッカソンひろしま&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そっちの優秀賞に奨励金を出せばいいと思う。&lt;/p&gt;

&lt;p&gt;これは「広島県商工労働局 産業政策課」という譌がやっていて、ヒロハタは「広島県地域政策局 都市圏魅力づくり推進課」であるため、まったく連携しないようだ。とてももったいない。&lt;/p&gt;

&lt;h1 id=&#34;そんなわけで私が話したこと:c711aaada0102d43a8eae906c798c3db&#34;&gt;そんなわけで私が話したこと&lt;/h1&gt;

&lt;p&gt;そんなわけで私が伝えたかったこと&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;プログラマが魅力的な職業であること&lt;/li&gt;
&lt;li&gt;自治体と市民が協力すべきであること&lt;/li&gt;
&lt;li&gt;ソーシャルのチカラを使うためにみんなが同じ目的をもって進むこと&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;発表スライドはこちらである。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;45ce5a435d34456e9861a3b9ad39b755&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;伝えたいことを伝えるのに、ぎりぎり事業というキーワードを擦り、もっとも適していると思ったのが&lt;a href=&#34;http://code4japan.org&#34;&gt;Code for Japan&lt;/a&gt;のBrigate支援業務である。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://code4japan.org/brigade&#34;&gt;Code for Japan Brigadeとは？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そんなわけで、ヒロハタがソーシャルのチカラを借りるために、僕が放った言葉は以下のとおりである。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;ひとりひとりのチカラは小さいけれど、小さな積み上げが広島をもっと楽しくする！ &lt;a href=&#34;https://twitter.com/hashtag/hirohata?src=hash&#34;&gt;#hirohata&lt;/a&gt;&lt;/p&gt;&amp;mdash; ヒロハタ (@HiroHataP) &lt;a href=&#34;https://twitter.com/HiroHataP/status/624813407586246656&#34;&gt;2015, 7月 25&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;ヒロハタはどう進むが良いのだろうか:c711aaada0102d43a8eae906c798c3db&#34;&gt;ヒロハタはどう進むが良いのだろうか&lt;/h1&gt;

&lt;p&gt;ヒロハタはこれからどうすすむと良いのだろうか。僕が思うに二つある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;「事業化を目指す!」をもっと本格的に&lt;/li&gt;
&lt;li&gt;たくさんの人を巻き込める魅力的な人材を育てる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;事業化というテーマを崩さないのであれば、ちゃんと事業化を目指すために必要な講師を呼ぶべきだと思う。
この場合は鷹野さんが指導者という立場で講師を選定したり、現状のプロジェクトについて講師にフォローをしていくという流れになるのが良い気がする。
しかし、前述したが、それは広島県はハッカソンやってるんだからそっちを活かして欲しい。&lt;/p&gt;

&lt;p&gt;となると、「たくさんの人を巻き込める魅力的な人材を育てる」である。&lt;/p&gt;

&lt;p&gt;これはそこそこはうまくいっている。「&lt;a href=&#34;https://www.facebook.com/h100parson?fref=ts&#34;&gt;楽しい広島100人&lt;/a&gt;」である。これは「&lt;a href=&#34;http://100person.jp&#34;&gt;北海道の楽しい100人&lt;/a&gt;」の広島版である。
これは&lt;a href=&#34;http://hiro-hata.com/kickoff&#34;&gt;ヒロハタのキックオフイベント&lt;/a&gt;のスピーカーとして、「北海道の楽しい100人」の佐藤 みつひろさんが登場し、結果いろいろあって誕生した。&lt;/p&gt;

&lt;p&gt;勝手な想像だが、この広島の楽しい100人はヒロハタの目玉プロジェクトとされ、中間発表会で優秀賞をとり、他の参加ユニットを牽引する立場になるシナリオだったんじゃないかと思う。
しかし、結果は「ビジネスプランとしては弱い」である。&lt;/p&gt;

&lt;p&gt;そんわけで最終的な発表会では、「たくさんの人を巻き込めた」という審査基準が入ると良いのではないだろうか。(知らんけど&lt;/p&gt;

&lt;h1 id=&#34;まとめ:c711aaada0102d43a8eae906c798c3db&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;このプロジェクトの本質からいうと「広島の鷹野雅弘」を育てるべきな気がする。&lt;/p&gt;

&lt;p&gt;実は「広島の鷹野雅弘」もういるんだよ。そうアシスタントの三人である。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hiro-hata.com/post/95882443993&#34;&gt;藤本 勝己&lt;/a&gt; - &lt;a href=&#34;http://www.webtouchmeeting.com/&#34;&gt;WEB TOUCH MEETING&lt;/a&gt; 主催 - &lt;a href=&#34;http://cssnite.webtouchmeeting.com&#34;&gt;CSS Nite in HIROSHIMA&lt;/a&gt; 実行委員長&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hiro-hata.com/post/95415284495&#34;&gt;薬師神 裕樹&lt;/a&gt; - &lt;a href=&#34;https://www.facebook.com/uxhiroshimajp?fref=ts&#34;&gt;UX HIROSHIMA&lt;/a&gt; 代表&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hiro-hata.com/post/98684361745&#34;&gt;神守　由理子&lt;/a&gt; - &lt;a href=&#34;https://www.facebook.com/groups/concrete5hiroshima/?fref=ts&#34;&gt;広島でコンクリ&lt;/a&gt; 代表&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こういった人たちと協力して広島を盛り上げるイベントを用意するのが県の仕事なんじゃないだろうか。&lt;/p&gt;

&lt;p&gt;最後に的確なツイートがあったので紹介しておこう。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;広島県は種を蒔いて育てるんじゃなくて、木を植えようとしてる気がする。 &lt;a href=&#34;https://twitter.com/hashtag/hirohata?src=hash&#34;&gt;#hirohata&lt;/a&gt;&lt;/p&gt;&amp;mdash; takanashi66 (@takanashi66) &lt;a href=&#34;https://twitter.com/takanashi66/status/624849590789894144&#34;&gt;2015, 7月 25&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;さて、どうすれば自治体との良い連携ができるのか。道はまだまだ厳しそうだ。&lt;/p&gt;

&lt;p&gt;僕はどうしたいっかって？広島がエンジニアにとって楽しい街であり、普通の人も住むのにとても便利な街になればいいと思う。そのために、生活に負担のない範囲で活動することである。&lt;/p&gt;

&lt;p&gt;追伸: そういえば、ヒロハタへの参加者はまだ募集しているそうです。審査基準が変わらない場合は、すでに素晴しいビジネスモデルで活動中のスタートアップはとても有利だと思いますので、ぜひ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.pref.hiroshima.lg.jp/soshiki/231/hirohataproject.html&#34;&gt;「ヒロハタ」ひろしま発人材集積促進プロジェクト（ウェブ分野）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>AtlasでPackerが実行できるようになってて感動した</title>
          <link>https://blog.eiel.info/blog/2015/07/16/atlas-packer-vagrant/</link>
          <pubDate>Thu, 16 Jul 2015 23:14:57 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/07/16/atlas-packer-vagrant/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://great-h.github.io/events/event-113.html&#34;&gt;すごい広島113&lt;/a&gt;で遊んでたこと。&lt;/p&gt;

&lt;p&gt;テスト環境を提供しないといけなくて、Dockerつかいたかったけど、今回はVagrantのBoxでベースを提供することにした。
Packerつかうと時間がかかるのでvagrant packageでつくって、Vagrant Cloudにおいたりしてました。&lt;/p&gt;

&lt;p&gt;ちょっと久しぶりにPackerでboxをつくるかーって&lt;a href=&#34;https://atlas.hashicorp.com/&#34;&gt;Atlas&lt;/a&gt;にいってみたら、Web上に表示されたチュートリアルにそってコマンドラインで作業するだけでBoxがつくれるようになってました。
しかも、Packerの実行をAtlasがやってくれます。しかも、VirtualboxとVMwareのイメージ両方つくってくれます。
しかも、勝手にBoxesに登録されます。
素敵です。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Atlasにサインインする&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Build Vagrant Boxes with Packer and Atlas&lt;/code&gt;というメニューがあってクリックする&lt;/li&gt;
&lt;li&gt;packerのバージョンの確認をさせられる。0.8.0より最新かどうか。&lt;/li&gt;
&lt;li&gt;PackeのTemplaterをもってるかきかれます。もってなかったら &lt;a href=&#34;https://github.com/hashicorp/atlas-packer-vagrant-tutorial&#34;&gt;atlas-packer-vagrant-tutorial&lt;/a&gt;が使えると教えてくれます。&lt;/li&gt;
&lt;li&gt;API TOKENが生成されるので、環境変数に登録します&lt;/li&gt;
&lt;li&gt;packer push をつかって template.jsonとscriptをAtlasに送信します&lt;/li&gt;
&lt;li&gt;進行状況をAtlasで閲覧できます。だいたい30分ぐらいかかります。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;そうすると、boxができて、Atlasから取得できるようになります。
ここから配布していると vagrant box update でboxが更新できたりとなかなか嬉しいです。&lt;/p&gt;

&lt;h3 id=&#34;他に遊んだこと:1247e1560615377b9ea7b5177fc320aa&#34;&gt;他に遊んだこと&lt;/h3&gt;

&lt;p&gt;tutorialのものはUbuntu12.04だったので&lt;a href=&#34;https://github.com/eiel/atlas-packer-vagrant-rails/commit/03d5c05b48ec02bae24bbf58d8ebd4f7c380762d&#34;&gt;14.04&lt;/a&gt;にかえたりしました。&lt;/p&gt;

&lt;p&gt;railsが実行できる環境つくって遊びました。
&lt;a href=&#34;https://github.com/eiel/atlas-packer-vagrant-rails/commit/054deb74f7d6ab4a034304f3f78deee1df386bd5&#34;&gt;mysqlとrubyをいれてるだけです&lt;/a&gt;。2.1.6なのは大人の事情です。&lt;/p&gt;

&lt;p&gt;公開するboxは一度公開したバージョンの場合、最終的なPackerの実行が失敗します。
成果物が登録できないからです。
メタデータを修正して、新しいバージョンに変えるようにしてください。&lt;/p&gt;

&lt;p&gt;具体的には&lt;a href=&#34;https://github.com/eiel/atlas-packer-vagrant-rails/commit/683741aa9f6055e70c0822bf2520d4b59ecaca4f&#34;&gt;この辺を参考にしてください&lt;/a&gt;。versionを0.0.4にしています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atlas.hashicorp.com/eiel/boxes/rails-mysql&#34;&gt;実際につくったVagarantのBoxはこちらにあります。&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant init eiel/rails-ymqsl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とかすると使えます。&lt;/p&gt;

&lt;p&gt;Vagrantのboxをつくるのに、Packerをつかうとローカルマシンが占有されてつらかったのですが、Atlas上でビルドできるようになってたいへん幸せです。&lt;/p&gt;

&lt;p&gt;継続的デリバリー感がします。とても楽しいので一度遊んでみてください。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>「Material Designなサイトをつくってみる」という話をした - #LT駆動 16</title>
          <link>https://blog.eiel.info/blog/2015/07/05/ltdd-16-material-design/</link>
          <pubDate>Sun, 05 Jul 2015 00:27:31 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/07/05/ltdd-16-material-design/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA16&#34;&gt;LT駆動開発16&lt;/a&gt;で「Material Designなサイトをつくってみる」をというLTをした。&lt;/p&gt;

&lt;p&gt;ちょっと前に&lt;a href=&#34;https://developers.google.com/web/tools/polymer-starter-kit/&#34;&gt;Polymer Starter Kit&lt;/a&gt;に遊んだので紹介した。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;76fa9dfe42db4d32be3e851225565d6f&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;戯言:cf8a86e923a1d302b50311fa6530d48d&#34;&gt;戯言&lt;/h3&gt;

&lt;p&gt;ライブコーディングでカバー画像の設定とボタンの設置をやった。
エレメントを使うのにimportをしないといけないことに気づかないでハマったのでその話をした。
Starter Kitで使われているエレメントは&lt;code&gt;app/elements/elements.html&lt;/code&gt;でインポートされてる。インポートされてないものはインポートする必要がある。paper-buttonやiron-imageやら。
それだけわかれば結構楽しめるPolymerさん。&lt;/p&gt;

&lt;p&gt;カスタムエレメントのHTMLも眺めてみるとどんなことができるのかも結構想像できるんじゃないかと思う。
あまり情報がないので、どんどんみんな試して欲しい。&lt;/p&gt;

&lt;h3 id=&#34;関連:cf8a86e923a1d302b50311fa6530d48d&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.com/design/icons/&#34;&gt;icon-iconで使えるアイコン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://elements.polymer-project.org/&#34;&gt;Polymer Catalog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>「戻り値の型によって処理を変える」という話をした。 - #LT駆動 16</title>
          <link>https://blog.eiel.info/blog/2015/07/04/ltdd-16-type-class/</link>
          <pubDate>Sat, 04 Jul 2015 23:57:04 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/07/04/ltdd-16-type-class/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA16&#34;&gt;LT駆動開発16&lt;/a&gt;で「戻り値の型によって処理を変える」をというLTをした。&lt;/p&gt;

&lt;p&gt;要するに自分の中で型クラスのことがそこそこすっきりしたので喋ってみた。
完全な準備不足でもっと丁寧につくりたい部分があったけど雑に説明してしまってるところがある。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;9cc235d693da405191f4a5376ad45941&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;戯言:daad3f06627dcec1727dfc3e414ec918&#34;&gt;戯言&lt;/h3&gt;

&lt;p&gt;いまだにアドホックという言葉がよくわかっておらず、つらい。
型クラスを使うとアドホック多相というのが実現できるらしい。&lt;/p&gt;

&lt;p&gt;アドホック多相というのは、分岐処理の自動生成ができる機能とも言えさうだ。
また、クラスがメソッドをグルーピングする機能と見なした場合、型クラスをつかうとより柔軟にグルーピングできる機能とも言えそうだ。&lt;/p&gt;

&lt;p&gt;その辺の話をうまく図示したいけど、考える時間が足りなかったので、また今度考えてみたい。&lt;/p&gt;

&lt;p&gt;型推論や型を指定することで関数の戻り値の型が決定すると実行される関数が決まる。
戻り値だけでなく、引数の型なんかでも決めることができる。
オプジェクト指向では、レシーバで決まったり、オーバロードで呼び出しする処理を変えたりできる。&lt;/p&gt;

&lt;p&gt;オブジェクト指向だとか、関数型だとかではなく、言語がもってる機能の違いなんだよなぁ、と思ったりしなくもないけど真面目に考えてない。&lt;/p&gt;

&lt;p&gt;LT中に登場した言語がHaskell, Ruby, Python, Perl, ScalaだったけどOCamlのことをあまり知らないので、もっと勉強しようと思った。&lt;/p&gt;

&lt;p&gt;スライド中のコードはGistにアップしておきます。(実行例かきわすれてる…)&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/eiel/3674c713e34eaac67cf8.js&#34;&gt;&lt;/script&gt;
</description>
        </item>
      
    
      
        <item>
          <title>プログラマは地域のヒーローになれるんだろうか - Code for Japan Brigadeに関わることについて少し考えた</title>
          <link>https://blog.eiel.info/blog/2015/07/01/code-for-hiroshima/</link>
          <pubDate>Wed, 01 Jul 2015 23:23:35 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/07/01/code-for-hiroshima/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://www.facebook.com/CodeForHiroshima&#34;&gt;Code for Hiroshima&lt;/a&gt;というコミュニティができたらしい。
広島の市民や自治体と連携して、テクノロジーを活用することで地域課題を解決することを目指す団体だ。広島以外にもこのような団体はあって「Code for なにがし」がいろんな地域にある。&lt;/p&gt;

&lt;p&gt;このような活動は普段の生活ににおいて&lt;strong&gt;IT業界にいるプログラマやデザイナの価値を高める&lt;/strong&gt;んじゃないかと思っていたりする。&lt;/p&gt;

&lt;p&gt;少し前までは、コンピュータのチカラを有効に使えるという能力は地域課題の課題解決には役に立たなかったんじゃないかと思う。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;市民の多くの人がテクノロジーを活用できるデジタルデバイスを所有するようになった&lt;/li&gt;
&lt;li&gt;プログラマが活用できるコンピュータ資源が豊富になった&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という背景ができて、身近なまわりの人の問題にプログラマの活躍できるようになったんじゃないかと思う。
IT関係のスタートアップが豊富なのもきっと同じ理由だろう。&lt;/p&gt;

&lt;p&gt;今や僕らプログラマは大きなチカラをもっているのかもしれない。&lt;/p&gt;

&lt;h1 id=&#34;プログラマは地域のヒーローになれるのか:0e9265a47e4cc711e1b03b075314ef6c&#34;&gt;プログラマは地域のヒーローになれるのか&lt;/h1&gt;

&lt;p&gt;プログラマといえば、少し前までは、一部の物好きが使うおもちゃみたいなものだったみたいです。
黒い画面に向かい、指だけを動かしている人たちです。
とても不健康そうです。オタクなんて言われていたりした気がする。&lt;/p&gt;

&lt;p&gt;コンピュータは軍事活用のために研究は進められたかもしれません。
ビジネスの世界では効率化のために活用されていったかもしれません。
しかし、今は誰でも持ち歩けるところまで発展しました。
プログラミングができるというのは、車を運転ができるような生活に役に立つようなものではなかったのですが、誰もが持ちあるくものになることで状況は変わってきているのです。
これまでもパソコンが普及したことで、パソコンで困ったことがあれば、質問されるようなこともありました。
大抵の質問はプログラマとしてのスキルが活かせるようなものはなく、特定のソフトウェアの利用方法に関するものでした。
でも、状況は変わってきたのです。&lt;/p&gt;

&lt;p&gt;地域課題を解決するオープンソースプロジェクトやオープンデータが登場することで、プログラマは地域課題に活躍できる立場になったのです。&lt;/p&gt;

&lt;p&gt;ソースコードが公開されていれば、他の地域の問題を解決するサービスを自分達の地域でも使えるように修正ができるのです。
ソフトウェアの根本的な問題を追うことができるのです。
データがないのであれば、データをつくる場所を提供することができるのです。
さらに、公開されている情報を組み合わせたり、情報を公開する場を提供したりできるのです。&lt;/p&gt;

&lt;p&gt;そして実際に問題を解決していくことで、プログラマはよくわからない不健康そうな人たちから、「もしかしたらなんとかしてくれる」という、子供たちの憧れになっていくのではないかと思うのです。&lt;/p&gt;

&lt;h1 id=&#34;code-for-hiroshimaについてもう少し:0e9265a47e4cc711e1b03b075314ef6c&#34;&gt;Code for Hiroshimaについてもう少し&lt;/h1&gt;

&lt;p&gt;Code for Hiroshimaは&lt;a href=&#34;http://code4japan.org/&#34;&gt;Code for Japan&lt;/a&gt;が提供する支援プログラムに参加するCode for Japan Brigade(ブリゲード)という立場になります。
個々のブリゲードは独立して活動しているようですがCode for Japanを通して関節的に連携することになります。繋りをつかってお互いにサポートしあうことができます。&lt;/p&gt;

&lt;p&gt;コミュニティを構成するメンバーはテクノロジーの提供するプログラマやデザイナだけでなく、地域課題を抱えている市民も対象となります。&lt;/p&gt;

&lt;p&gt;市民のためのコミュニティであるため、非プログラマの市民のメンバーがいることは重要なことです。
活用をするのは市民だからです。活用されないテクノロジーに価値はありません。&lt;/p&gt;

&lt;p&gt;そのため、市民が本当に必要なものを提供するために開発段階から一緒に活動し、問題の共有とテクノロジーの活用する能力を一緒に向上していくことになります。
l
そんなわけでCode for Hiroshimaのオープンなミーティングが7月からはじまるそうです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;7月5日 日曜日 10時 &lt;a href=&#34;https://www.facebook.com/events/1589552057985627/&#34;&gt;Code for Hiroshima 井戸端会議&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Code for Hiroshimaは「&lt;a href=&#34;https://readyfor.jp/projects/peaceweek-hironaga&#34;&gt;被爆70年の広島・長崎での平和イベントを可視化するサービス&lt;/a&gt;」の開発や、&lt;a href=&#34;http://hiroshima.5374.jp/&#34;&gt;いつ、どのゴミが収集されているのか？をわかるサービス&lt;/a&gt;のメンテナンスをしていたり、&lt;a href=&#34;http://parkmap.eiel.info/&#34;&gt;広島の駐車場の料金を調べることのできるサービス&lt;/a&gt;の開発を支援していたりするそうです。&lt;/p&gt;

&lt;p&gt;作成中のサービスに意見をしたかったり、自分の困っている問題をテクノロジーで解決してみたかったりするような人をみかけたら紹介してあげてください。
もちろんテクロノジーを提供する能力をもった人はヒーローになるために参加してみてもいいと思います。&lt;/p&gt;

&lt;h1 id=&#34;まとめ:0e9265a47e4cc711e1b03b075314ef6c&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Code for Hiroshimaができた。&lt;/li&gt;
&lt;li&gt;プログラマはみんなの憧れになれるかもしれない。わからない。&lt;/li&gt;
&lt;li&gt;参加自体はオープンだ。気軽に参加してみよう。&lt;/li&gt;
&lt;li&gt;普通の人の視点が重要だ。みんなを巻き込んでいこう。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;関連リンク:0e9265a47e4cc711e1b03b075314ef6c&#34;&gt;関連リンク&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/04/06/ltdd-02-5374/&#34;&gt;hiroshima.5374.jpをつくった話を LT駆動開発 02 でしてきた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Scalaをはじめる α &amp; β - #LT駆動 15</title>
          <link>https://blog.eiel.info/blog/2015/06/06/ltdd-2015-06-scala/</link>
          <pubDate>Sat, 06 Jun 2015 13:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/06/06/ltdd-2015-06-scala/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA15&#34;&gt;LT駆動開発15&lt;/a&gt;に参加してきました。&lt;/p&gt;

&lt;p&gt;最近、Scalaを触っているので、仕事していると放置しがちな基本的な使い方を調べたりしています。&lt;/p&gt;

&lt;p&gt;今回はα世界線とβ世界線の二本でお送りいたします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;αはsbtを使わずにJARを使う方法を調べました&lt;/li&gt;
&lt;li&gt;βはAppトレイトについて調べました&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なんのJARを使うのか非常に悩んだのですがScalazにしておきました。
Scalazを選ぶまでは早かったのですが、Scalazをつかった良いサンプルがつくれずに苦戦しました。&lt;/p&gt;

&lt;p&gt;Appトレイトのほうは、&lt;a href=&#34;http://summit.scala-kansai.org/&#34;&gt;Scala関西 Summit 2015&lt;/a&gt;のLTに応募しようかと一瞬思ったのですが、まだ2ヶ月あるので止めておきました。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;6c59ed6f79234ddd96c99375a9947125&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;15aa34c211ee43268a0767d0ef29d13d&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;まあ、一番苦戦したのは scala HogeZ -cp &amp;lsquo;*.jar:.&amp;rsquo; とかいて、動かなかったことである。&lt;/p&gt;

&lt;h3 id=&#34;まとめ1:f7e5e48604ab3de1abbeb3a15a99706c&#34;&gt;まとめ1&lt;/h3&gt;

&lt;p&gt;JARを使うときは classpath を指定すればよい。
sbt使うと楽チン。&lt;/p&gt;

&lt;h3 id=&#34;まとめ2:f7e5e48604ab3de1abbeb3a15a99706c&#34;&gt;まとめ2&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;object Hoge {
  //コード
  def hoge() = //コード
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;みたいなのはJavaでいうと&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Hoge {
  static {
   // コード
  }
  public staic void hoge() { /* コード */ }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;みたいな感じになるらしい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/scala/scala/blob/540b18fb68a0210b187e595622c31f20b2c6f581/src/compiler/scala/tools/nsc/transform/Constructors.scala#L474&#34;&gt;https://github.com/scala/scala/blob/540b18fb68a0210b187e595622c31f20b2c6f581/src/compiler/scala/tools/nsc/transform/Constructors.scala#L474&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;こういった特殊なものがあるならもっとしりたい&lt;/p&gt;

&lt;h3 id=&#34;参考文献:f7e5e48604ab3de1abbeb3a15a99706c&#34;&gt;参考文献&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/takahiro/hazimetefalseguan-shu-xing-puroguramingujiao-shi&#34;&gt;はじめての関数型プログラミング教室 // Speaker Deck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/Kazuhira/20130320/1363791795&#34;&gt;sbtで、プロジェクト内のライブラリ依存関係を調べる - CLOVER&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.scala-lang.org/api/current/index.html#scala.App&#34;&gt;App - Scala Standard Library 2.11.6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.scala-lang.org/api/current/index.html#scala.DelayedInit&#34;&gt;DelayedInit - Scala Standard Library 2.11.6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/scala/scala/blob/v2.11.6/src/library/scala/DelayedInit.scala&#34;&gt;scala/DelayedInit.scala at v2.11.6 · scala/scala · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/scala/scala/blob/v2.11.6/src/library/scala/App.scala&#34;&gt;scala/App.scala at v2.11.6 · scala/scala · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;コード:f7e5e48604ab3de1abbeb3a15a99706c&#34;&gt;コード&lt;/h3&gt;

&lt;script src=&#34;https://gist.github.com/eiel/77ffba73998ababb06b7.js&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;関連:f7e5e48604ab3de1abbeb3a15a99706c&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2015/05/13/scala-map/&#34;&gt;ScalaのMapの使い方がよくわからないので遊んだときのメモ | そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/08/17/scala-hello-world/&#34;&gt;Scala 入門しとく | そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://recruit.chatwork.com/ja/developer.html&#34;&gt;エンジニアの採用情報 | チャットワーク（ChatWork）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=gk02WpyN_Qo&#34;&gt;syrup16g - 冷たい掌 (MV) - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>セルフブランディングがテーマのオープンセミナー岡山でセッションをした - とあるふつうの命令書</title>
          <link>https://blog.eiel.info/blog/2015/05/16/oso-2015/</link>
          <pubDate>Sat, 16 May 2015 18:00:01 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/05/16/oso-2015/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://okayama.open-seminar.org/&#34;&gt;オープンセミナー岡山&lt;/a&gt;という大きな技術者向けの無料のイベントで講師参加をした。&lt;/p&gt;

&lt;p&gt;テーマが「IT業界におけるセルフブランディング」だったので、自分はセルフブランディングはしていないけど、セルフブランディングみたいになっているだろうことについて話すことにした。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;85b4524a99ad40f7896d09b1bf4d4ac1&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;とても有名なライトノベル「とある魔術の禁書目録」を文字ったタイトルをつけた。
せかっくなので何かにルビを振りたくなったので、「みんな」というキーワードを「モナド」と読むことにした。&lt;/p&gt;

&lt;p&gt;そういえばちょうど5月にモナドの話をしていて、うまく伏線が貼れている。
偶然というのは恐しい。&lt;/p&gt;

&lt;p&gt;平たくいうと、わたしの目の前でおきた「拡散される仕組み」の話をした気がする。
結果、迫ってくる未来が期待に近いほうへと進んでいるような気がする。&lt;/p&gt;

&lt;p&gt;全体でみると、どこかにもうちょっとしぼった話をしたほうがよかった気もする。&lt;/p&gt;

&lt;p&gt;独りの「ちから」はわずかなので、みんなの力をわずかに借りられるようにしておきたいと思う日々です。&lt;/p&gt;

&lt;p&gt;変えられない未来はない = 自分のちから x みんなのちから&lt;/p&gt;

&lt;p&gt;そうか、モナドか。(ゼノブレイド的な意味で)&lt;/p&gt;

&lt;p&gt;利用したラーメン画像は我馬という&lt;a href=&#34;http://www.gaba-2000.com/&#34;&gt;ラーメン屋&lt;/a&gt;のものです。&lt;/p&gt;

&lt;p&gt;なんかセッションがお互いに相補していた気がしていて、とても良い一日だった。&lt;/p&gt;

&lt;h3 id=&#34;関連:60b03b03c74a35709c36ddd4bc84ef60&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://togetter.com/li/821858&#34;&gt;当日のツイートまとめ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2015/05/02/want-staring-monad-only-ltdd-14/&#34;&gt;モナド則だけ見つめていたい - LT駆動開発14&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nintendo.co.jp/3ds/cafj/&#34;&gt;Newニンテンドー3DS専用 Xenoblade ゼノブレイド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/02/17/github-pages/&#34;&gt;Github Pages について整理しておきます&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ふつうのシリーズの著者である &lt;a href=&#34;http://www.amazon.co.jp/%E9%9D%92%E6%9C%A8-%E5%B3%B0%E9%83%8E/e/B004LT6XC0/ref=dp_byline_cont_book_1&#34;&gt;青木 峰郎:作品一覧、著者略歴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/kazoo04/&#34;&gt;かずー氏さん&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/Grabacr07&#34;&gt;ぐらばくさん&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/941&#34;&gt;⑨④①さん&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.kushii.net/archives/1965162.html&#34;&gt;岡山のオープンセミナーで「行ってきたの裏側」を話してきた #oso2015 - 941::blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hunter-girl.jp/&#34;&gt;狩猟女子&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://t.co/oZKbwZeoW5&#34;&gt;わたしのつくりかた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/opiyo_taku&#34;&gt;オピヨさん&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://soudai1025.blogspot.jp/2015/05/oso2015.html?spref=tw&#34;&gt;そーだいなるらくがき帳: オープンセミナー岡山＠2015に今年も参加してきた #oso2015&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ScalaのMapの使い方がよくわからないので遊んだときのメモ</title>
          <link>https://blog.eiel.info/blog/2015/05/13/scala-map/</link>
          <pubDate>Wed, 13 May 2015 19:44:21 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/05/13/scala-map/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://great-h.github.io/events/event-104.html&#34;&gt;すごい広島 #104&lt;/a&gt;で遊んだときのメモ。&lt;/p&gt;

&lt;p&gt;最近&lt;a href=&#34;http://www.scala-lang.org/&#34;&gt;Scala&lt;/a&gt;勉強している。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.scala-lang.org/api/2.11.5/index.html#scala.collection.Map&#34;&gt;Map&lt;/a&gt;を使いなれていなかったので少し遊んだ。&lt;/p&gt;

&lt;p&gt;参考になりそうなのは下記のサイト&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.scala-lang.org/api/2.11.5/index.html#scala.collection.Map&#34;&gt;Scala Standard Library 2.11.5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ne.jp/asahi/hishidama/home/tech/scala/collection/map.html&#34;&gt;Scala Mapメモ(Hishidama&amp;rsquo;s Scala Map Memo)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;さて遊ぶ:4c320875311fbaf75c8cdfd0efe6300e&#34;&gt;さて遊ぶ&lt;/h3&gt;

&lt;p&gt;Mapを作ってみる。emptyでも作れるけど。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Map(&amp;quot;hoge&amp;quot; -&amp;gt; 1)
// scala.collection.immutable.Map[String,Int] = Map(hoge -&amp;gt; 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;値を取り出してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Map(&amp;quot;hoge&amp;quot; -&amp;gt; 1).get(&amp;quot;hoge&amp;quot;)
// Option[Int] = Some(1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ImmutableなMapに要素をつけたしてみる。新しいMapができる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Map(&amp;quot;hoge&amp;quot; -&amp;gt; 1) + (&amp;quot;mogu&amp;quot; -&amp;gt; 2)
// scala.collection.immutable.Map[String,Int] = Map(hoge -&amp;gt; 1, mogu -&amp;gt; 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;+でくっつけることができた。&lt;code&gt;(&amp;quot;mogu&amp;quot; -&amp;gt; 2)&lt;/code&gt;ってなんだろう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;(&amp;quot;mogu&amp;quot; -&amp;gt; 2)
// (String, Int) = (mogu,2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;どうやらタプルらしい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Map((&amp;quot;hoge&amp;quot;, 1))
// scala.collection.immutable.Map[String,Int] = Map(hoge -&amp;gt; 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;タプルをつかってつくるには括弧がふたついるようだ。なぜなのかよくわからない。
たぶん、&lt;code&gt;&amp;quot;hoge&amp;quot; -&amp;gt; 1&lt;/code&gt;と&lt;code&gt;(&amp;quot;hoge&amp;quot;, 1)&lt;/code&gt;が等価だからだろう。&lt;/p&gt;

&lt;p&gt;とりあえず、&lt;code&gt;(+) :: Map[String,Int] -&amp;gt; (String,Int) -&amp;gt; Map[String,Int]&lt;/code&gt; みたいな感じのようだ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Map(&amp;quot;hoge&amp;quot; -&amp;gt; 1) + ((&amp;quot;mogu&amp;quot;, 2))
// scala.collection.immutable.Map[String,Int] = Map(hoge -&amp;gt; 1, mogu -&amp;gt; 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;うまくいく。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Map(&amp;quot;hoge&amp;quot; -&amp;gt; 1) + (&amp;quot;hoge&amp;quot; -&amp;gt; 2)
// scala.collection.immutable.Map[String,Int] = Map(hoge -&amp;gt; 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;-&amp;gt; は演算子で , は違うようだ。他のタプルの生成方法を今度調べよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;&amp;quot;hoge&amp;quot;.-&amp;gt;(1)
// (String, Int) = (hoge,1)
// &amp;quot;hoge&amp;quot;.,(1) はできなかった
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;foldで処理できそうな程度に理解した気がする。&lt;/p&gt;

&lt;h3 id=&#34;もうちょっと遊ぶ:4c320875311fbaf75c8cdfd0efe6300e&#34;&gt;もうちょっと遊ぶ&lt;/h3&gt;

&lt;p&gt;inheritedにFunction1がいるのでapplyできるようだ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Map(&amp;quot;hoge&amp;quot; -&amp;gt; 1)(&amp;quot;hoge&amp;quot;)
// Int = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;関数合成だってできる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val one = Map(&amp;quot;hoge&amp;quot; -&amp;gt; 1).compose({x:Any =&amp;gt; &amp;quot;hoge&amp;quot;})
// Int = 1
one(1)
// Int = 1
one(2)
// Int = 1
one(&amp;quot;hoge&amp;quot;)
// Int = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とても楽しめた。&lt;/p&gt;

&lt;h3 id=&#34;関連:4c320875311fbaf75c8cdfd0efe6300e&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/chatwork/scala-quiz/blob/master/quiz/01_WordCount.md&#34;&gt;scala-quiz/01_WordCount - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>モナド則だけ見つめていたい - LT駆動開発14</title>
          <link>https://blog.eiel.info/blog/2015/05/02/want-staring-monad-only-ltdd-14/</link>
          <pubDate>Sat, 02 May 2015 13:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/05/02/want-staring-monad-only-ltdd-14/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA14&#34;&gt;LT駆動開発14&lt;/a&gt;に参加した。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://xenobladex.jp/&#34;&gt;ゼノブレイドクロス&lt;/a&gt;発売記念でモナドの話をしといた。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;b016eb833b804fca903db71dc869bae0&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Stateモナドを簡約して、Stateモナドを説明しようとおもったけどうまくいかなくてボツになりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/eielh/items/3612e4233c9c4a2d80a0&#34;&gt;Haskell - Stateモナドを手で簡約してみたりしていた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そんなわけで&lt;a href=&#34;http://ja.wikibooks.org/wiki/Haskell/%E5%9C%8F%E8%AB%96&#34;&gt;Haskell/圏論 - Wikibooks&lt;/a&gt;を元ネタにモナド則を辿ってみました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;a -&amp;gt; M b&lt;/code&gt;って型の関数を並べるにはfmapしてjoinしてを間にはさむことがポイントな気がしたことがあったのでその話です。
&lt;code&gt;a -&amp;gt; M b&lt;/code&gt;な関数を組み合わせると &lt;code&gt;M b -&amp;gt; M (M c)&lt;/code&gt; になって &lt;code&gt;M (M c) -&amp;gt; M (M (M d))&lt;/code&gt; とどんどんMが増えていってしまうのですが、モナドであれば&lt;code&gt;M d&lt;/code&gt;にできるわけです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;a -&amp;gt; M b&lt;/code&gt;ってなんなんだって話になってきますが&lt;code&gt;M a -&amp;gt; M b&lt;/code&gt;でも良いけど、&lt;code&gt;a -&amp;gt; M b&lt;/code&gt; のほうがあつかいやすいよね。だって&lt;code&gt;M&lt;/code&gt;は外せないんだから外れているものが受け取れたら便利じゃないですか。
結果的に残ったものは &lt;strong&gt;何度も同じことをしないといけない部分&lt;/strong&gt;を隠すことができます。
その内容を自由に取り替えできちゃうのがモナドの魅力なのだと思う。&lt;/p&gt;

&lt;p&gt;そしてMに関する操作は裏でひそかに行われて、命令書を構築したり、失敗していたら何もしなかったり、可能性すべてを記録したり、単に設定した値をおけるだけだったり、するだけだと思われます。&lt;/p&gt;

&lt;h3 id=&#34;関連:b742772047f9f19a088e8c7ef8bf510f&#34;&gt;関連&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/eielh/items/3612e4233c9c4a2d80a0&#34;&gt;Haskell - Stateモナドを手で簡約してみたりしていた - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=eiel-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=B00T73HQHQ&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
</description>
        </item>
      
    
      
        <item>
          <title>AppleWatchを1日使ってみての所感</title>
          <link>https://blog.eiel.info/blog/2015/04/26/first-impression-for-apple-watch/</link>
          <pubDate>Sun, 26 Apr 2015 09:44:53 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/04/26/first-impression-for-apple-watch/</guid>
          <description>

&lt;p&gt;AppleWatchを購入した。ちょうどでかける日だったので、1日外で使った感想。&lt;/p&gt;

&lt;p&gt;率直に述べると、便利になるとは思うけど、値段が高いので費用に対する効果はなんとも言えない、と思った。&lt;/p&gt;

&lt;p&gt;購入したのは&lt;a href=&#34;http://store.apple.com/jp/buy-watch/apple-watch?product=MJ322J/A&amp;amp;step=detail#&#34;&gt;38mmステンレススチールケースとミラネーゼループ&lt;/a&gt;。
アプリ開発する際にどんなものか知らないと提案できないので、購入した。&lt;/p&gt;

&lt;p&gt;箱から取り出してちょっとさわった感想&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;思ったより重い&lt;/li&gt;
&lt;li&gt;すぐには使い方がわからなかった&lt;/li&gt;
&lt;li&gt;起動めっちゃ長い&lt;/li&gt;
&lt;li&gt;省電力モードからの戻り方がわからない&lt;/li&gt;
&lt;li&gt;通知ばんばん飛ぶので見せと言われても見せづらい&lt;/li&gt;
&lt;li&gt;磁石強くて付けるの難しい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1日つけてみて感想&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;重さは気にならなかった&lt;/li&gt;
&lt;li&gt;歩いてても通知に気づけて良い&lt;/li&gt;
&lt;li&gt;1日で電池は50%程度なくなった&lt;/li&gt;
&lt;li&gt;つけ心地は良いと思う&lt;/li&gt;
&lt;li&gt;心拍数を測定してくれるの楽しい&lt;/li&gt;
&lt;li&gt;iPhoneの操作が少しできるちょっと嬉しい&lt;/li&gt;
&lt;li&gt;force touch 楽しい&lt;/li&gt;
&lt;li&gt;腕を回すと自動でディスプレイがオンになるの使いこなせないのでオフにした&lt;/li&gt;
&lt;li&gt;付けたままPC作業は難しい&lt;/li&gt;
&lt;li&gt;あんまりかっこよくない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2万以内なら悩まず買うと思う。&lt;/p&gt;

&lt;h3 id=&#34;重量について:00b178ed1cc1d3a5c869e78fd52fc19d&#34;&gt;重量について&lt;/h3&gt;

&lt;p&gt;重量についてはかなり気にしてモデルを選んだ。
とにかくつけてて疲れるのは防ぎたかった。&lt;/p&gt;

&lt;p&gt;スポーツの黒が有力候補だったけど、ミラネーゼループを選んだ。
スポーツバンドは色によって重さが違うので注意。&lt;/p&gt;

&lt;p&gt;実機に触ってないのに選ぶ必要があったので下記の記事はとても参考になった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://itstrike.biz/apple/iwatch/23820/&#34;&gt;Apple Watchのケースとバンドの重さを比較！モデルによって2倍の重量差！ | IT Strike&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;つけ心地:00b178ed1cc1d3a5c869e78fd52fc19d&#34;&gt;つけ心地&lt;/h3&gt;

&lt;p&gt;腕時計は普段していません。つけ心地は良いと思う。毎日つけていられると思います。
PC作業はちょっとしづらいですが。つける位置を調整しています。&lt;/p&gt;

&lt;h3 id=&#34;通知:00b178ed1cc1d3a5c869e78fd52fc19d&#34;&gt;通知&lt;/h3&gt;

&lt;p&gt;iPhoneをズボンのポケットにいれて歩いてると通知にまったく気づかない。
Apple Watchを装備することによって、通知に気づかないことがすごく防げるようになりそう。&lt;/p&gt;

&lt;p&gt;といっても、メールすべて通知しているので、たいへんめんどくさくなることもあります。
そろそろ通知を細かく調整しようと思いました。&lt;/p&gt;

&lt;h3 id=&#34;心拍数:00b178ed1cc1d3a5c869e78fd52fc19d&#34;&gt;心拍数&lt;/h3&gt;

&lt;p&gt;定期的に自動で計ってくれてHealthアプリで確認できる。
とても楽しい。不整脈を検知するのは難しそうである。&lt;/p&gt;

&lt;p&gt;ついでにアクティビティですが、運動時間30分の設定を変えたい。
30分も運動できない人だっているんです。&lt;/p&gt;

&lt;h3 id=&#34;電池:00b178ed1cc1d3a5c869e78fd52fc19d&#34;&gt;電池&lt;/h3&gt;

&lt;p&gt;半分なくなってました。
毎日充電する必要がありそうな気配が漂っています。&lt;/p&gt;

&lt;h3 id=&#34;音楽:00b178ed1cc1d3a5c869e78fd52fc19d&#34;&gt;音楽&lt;/h3&gt;

&lt;p&gt;iPhoneの音楽アプリを制御できるのは地味に嬉しい。
曲名の確認が地味に嬉しい。シャッフルで流してると曲名が覚えられないんだ。&lt;/p&gt;

&lt;h3 id=&#34;force-touch:00b178ed1cc1d3a5c869e78fd52fc19d&#34;&gt;force touch&lt;/h3&gt;

&lt;p&gt;強く押すと、押した感じがする。違和感はあるけど楽しい。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:00b178ed1cc1d3a5c869e78fd52fc19d&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;Apple Watchを持つか、持たないでは、ライフスタイルが変わる可能性は非常に高い。
しかし、金額に見合ったリターンがあるかどうかは保証できない。
iPhoneの拡張パーツなのにiPhoneと同等のお値段…。&lt;/p&gt;

&lt;p&gt;現在すでにお気に入りの腕時計がある人は購入しづらいと思うし、いままで腕時計している人には新しく腕になにかつけるのは抵抗がある気がする。
なかなか誰にでもおすすめはできないけど、おもしろいと思います。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>私の強み - ストレングスファインダをしたのでメモ</title>
          <link>https://blog.eiel.info/blog/2015/04/09/stringthsfinder/</link>
          <pubDate>Thu, 09 Apr 2015 18:47:58 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/04/09/stringthsfinder/</guid>
          <description>

&lt;p&gt;少し前に&lt;a href=&#34;http://sf1.strengthsfinder.com/ja-jp/homepage.aspx&#34;&gt;ストリングスファインダ&lt;/a&gt;ってのをした。&lt;/p&gt;

&lt;p&gt;自分がふりかえりをするためだけにつくった記事である。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;着想&lt;/li&gt;
&lt;li&gt;学習欲&lt;/li&gt;
&lt;li&gt;最上志向&lt;/li&gt;
&lt;li&gt;内省&lt;/li&gt;
&lt;li&gt;収集心&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;参考 &lt;a href=&#34;http://xn--bckg8a9ab8bxc5fpjscf3i.com/&#34;&gt;ストレングスファインダーまとめサイト&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;特徴:c601311661980063785e7c6c04624cae&#34;&gt;特徴&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;【着想】複雑に見える物事の裏側に存在する、的確で簡潔な表現方法を発見すると嬉しくなる&lt;/li&gt;
&lt;li&gt;【着想】見た目には共通点の存在しない現象に、なんらかの共通点を見出すと創造力をかき立てられる&lt;/li&gt;
&lt;li&gt;【着想】多くの人が中々解決出来ない日常的な問題に対し、新たな視点をもたらす人物である&lt;/li&gt;
&lt;li&gt;【着想】世の中の既知の事実をひっくり返すことに無上の喜びを感じる&lt;/li&gt;
&lt;li&gt;【着想】目新しい考えや、逆説的な考え、奇抜な考えを好む傾向にある&lt;/li&gt;
&lt;li&gt;【着想】新しい着想が生まれるたびに、エネルギーが電流のように身体を駆け巡る体験をすることが多い&lt;/li&gt;
&lt;li&gt;【着想】他の人たちからは、「創造的」「独創的」などと評される傾向にある&lt;/li&gt;
&lt;li&gt;【着想】着想のある人生にスリルを感じ、そんな生活を送れていると幸福を感じる&lt;/li&gt;
&lt;li&gt;【学習欲】あなたの才能に突き動かされ、更なる知識を獲得することや新しいスキルを得ることに重きを置く&lt;/li&gt;
&lt;li&gt;【学習欲】「教育」を常に進行中の活動として捉えている&lt;/li&gt;
&lt;li&gt;【学習欲】他人とアイデアや概念、理論について話す過程で、あなたはより容易く知識を獲得することができる&lt;/li&gt;
&lt;li&gt;【学習欲】あなたの思考は、何らかの質問が提示され、それに対する回答の中で生じるものである&lt;/li&gt;
&lt;li&gt;【学習欲】あなたは、考えていることがそのまま口から出たり、知的な人々が彼らの考えを述べるのを聞く時間を素晴らしいと感じる&lt;/li&gt;
&lt;li&gt;【学習欲】あなたは議論した内容の一部を自然と書類化したり記憶したりする&lt;/li&gt;
&lt;li&gt;【学習欲】機会が提示されたときにはいつでも、あなたは洞察や事実に差し戻しをしたいと感じる&lt;/li&gt;
&lt;li&gt;【学習欲】生まれつき、仕事によって発奮させられたいと感じている&lt;/li&gt;
&lt;li&gt;【学習欲】あなたはあなたの仕事や学習から情熱を感じることを必要とする&lt;/li&gt;
&lt;li&gt;【学習欲】あなたは常に知識やスキルを獲得する&lt;/li&gt;
&lt;li&gt;【学習欲】事実を学び、概念について思案し、理論を試し、スキルを磨いているときはいつでもあなたは最も「生きている」と感じる&lt;/li&gt;
&lt;li&gt;【学習欲】あなたはあなたの精神の拡大を妨げる人や状況を避けたいと感じる&lt;/li&gt;
&lt;li&gt;【学習欲】恐らくあなたは継続的に知識やスキルを獲得することに意欲づけられる&lt;/li&gt;
&lt;li&gt;【学習欲】あなたの才能を使うための新たな方法を発見すると、あなたは精力を得る&lt;/li&gt;
&lt;li&gt;【学習欲】「どうやったら上手く出来るのか」をすでに知っていることをやり続けさせるような人々や状況をあなたは避けようとする&lt;/li&gt;
&lt;li&gt;【学習欲】あなたは、知性を「現状維持」することを受け入れがたいと感じる&lt;/li&gt;
&lt;li&gt;【学習欲】本能的に、あなたは一つの事柄に対して長時間集中力を保つことができる&lt;/li&gt;
&lt;li&gt;【学習欲】恐らく、あなたが獲得した知識によって、あなたはなぜ特定の事象が正確に動くのか、もしくは動かないのかを理解することができる&lt;/li&gt;
&lt;li&gt;【最上志向】自身の”強み”を活用した場合の成長と利益の大きさを本能的に理解している。&lt;/li&gt;
&lt;li&gt;【最上志向】あなたの才能を評価してくれる人々を常に探している。&lt;/li&gt;
&lt;li&gt;【最上志向】身体的、精神的なエネルギーを「自分がより上手くやるための方法を知ること」に使う。&lt;/li&gt;
&lt;li&gt;【最上志向】正しい取捨選択が成功の鍵となることが多い。&lt;/li&gt;
&lt;li&gt;【最上志向】明確な労働観をもつことで、目的を達成に近づく。&lt;/li&gt;
&lt;li&gt;【最上志向】他人があなたの強みを認めてくれた場合に、最大の力を発揮する。&lt;/li&gt;
&lt;li&gt;【最上志向】生まれながらの才能や獲得したスキル・知識を人に賞賛されたいと感じる。&lt;/li&gt;
&lt;li&gt;【最上志向】自身の才能をパーソナリティや専門性の更なる向上に使う傾向がある。&lt;/li&gt;
&lt;li&gt;【最上志向】すでに高いレベルに達した事柄を更に向上させることを好む。&lt;/li&gt;
&lt;li&gt;【最上志向】繰り返し「より上手くできないか？これが自身のマックスか？」と自問する傾向がある。&lt;/li&gt;
&lt;li&gt;【最上志向】過去の成果や生まれながらの才能に満足してしまうことを「平凡に流れること」だと感じ、危機感を覚え、そうならないために一生懸命になる。&lt;/li&gt;
&lt;li&gt;【最上志向】モチベーションの在処を見つけることに長け、それを伝えることで他人を鼓舞できる。&lt;/li&gt;
&lt;li&gt;【最上志向】個人個人のユニークさを認め、賞賛する。&lt;/li&gt;
&lt;li&gt;【最上志向】あなたの知識や賛辞は、とりわけ他人に活力を与える。&lt;/li&gt;
&lt;li&gt;【内省】頭脳活動が好きで、考えることを好む。&lt;/li&gt;
&lt;li&gt;【内省】問題を解くにせよ、アイデアを出すにせよ、他人の感情を理解するにせよ、脳を刺激して縦横無尽に働かせる活動をやりたいと感じる。&lt;/li&gt;
&lt;li&gt;【内省】何に思考を集中するかは、あなたの自身の「ほかの強み」によることが多い。&lt;/li&gt;
&lt;li&gt;【内省】一人での時間を大切にし、楽しむ傾向がある。&lt;/li&gt;
&lt;li&gt;【内省】内省という資質により、実際の行動と頭の中で検討したこととのギャップに不満を感じることがあるかもしれない。&lt;/li&gt;
&lt;li&gt;【収集】生来の性質として、あなたは【収集】それ自体に純粋に楽しみを見出す。&lt;/li&gt;
&lt;li&gt;【収集】おそらく、あなたは本や新聞や雑誌等を行列に並んだときのため、一人で食事をするときのため、見知らぬ人の隣に座ったときのために持ち歩いているだろう。&lt;/li&gt;
&lt;li&gt;【収集】多くの場合、活字があなたの精神に対して栄養を与える。その結果、あなたは、他の人にとって独創的だと感じるような特定の種類の計画やプログラムやデザインや活動を生み出しうる。&lt;/li&gt;
&lt;li&gt;【収集】あなたは時折、大きな戦争について学ぶ傾向がある。何人かの人がこのようなトピックに対して退屈さやイライラを感じる一方で、あなたはそれを魅力的に感じることがあるだろう。&lt;/li&gt;
&lt;li&gt;【収集】もしあなたが特定の地球的な争いについて学んだならば、多分あなたはそれについて更なる情報を集めたいという衝動に駆られるだろう。&lt;/li&gt;
&lt;li&gt;【収集】一つの本や記事が、あなたを別の本や記事へといざなうことが多い。&lt;/li&gt;
&lt;li&gt;【収集】あなたは、時々、あなたの目の前の印刷されたページ上で展開される人間の物語を疑似体験することがある。&lt;/li&gt;
&lt;li&gt;【収集】本能的に、あなたはあなたに対して「達成したいこと」を話してくれるような特定のタイプの人々と友達になりやすいと感じるだろう。また、その人たちをより良く知るために、あなたはいくつかの本や、雑誌や、新聞や書状や、インターネットのサイトを彼らの関心ごとに関する知識を広めるために読むかもしれない。&lt;/li&gt;
&lt;li&gt;【収集】人々をゴールに近づくのを補助するような知識を分け与えることができるようになったとき、あなたはお互いをよりよく理解出来るようになるだろう。&lt;/li&gt;
&lt;li&gt;【収集】あなたの強みにより、あなたは示唆に富む刺激的な会話の中心に入り込める。&lt;/li&gt;
&lt;li&gt;【収集】あなたは理論的に話す。それは、あなたがまだ発明や証明、製造や実行の前段階にある事柄について話すことができることを意味する。&lt;/li&gt;
&lt;li&gt;【収集】あなたの語彙は、あなたの思考と同じくらい複雑なものである。このことは、あなたがずらりと並んだ洞察や概念、哲学について詳細に考えられることを説明する。&lt;/li&gt;
&lt;li&gt;【収集】あなたは、即座にあなたの洗練された言葉の意味を把握出来る人と会話をすることを好む。&lt;/li&gt;
&lt;li&gt;【収集】あなたの才能に突き動かされ、あなたは時にグループでの集会で議論されるべきトピックスについて読み、多くの情報を収集する。&lt;/li&gt;
&lt;li&gt;【収集】あなたが、準備的な読書やリサーチなどの宿題を全てやってくれるだろうと頼る人たちが居るだろう。そのお陰で、その人達はそれについて全く心配する必要がない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://xn--bckg8a9ab8bxc5fpjscf3i.com/category32/entry94.html&#34;&gt;【着想】の特徴 | ストレングスファインダー&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xn--bckg8a9ab8bxc5fpjscf3i.com/category3/entry10.html&#34;&gt;【学習欲】の特徴 | ストレングスファインダー&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xn--bckg8a9ab8bxc5fpjscf3i.com/category1/entry1.html&#34;&gt;【最上志向】の特徴 | ストレングスファインダー&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xn--bckg8a9ab8bxc5fpjscf3i.com/category13/entry40.html&#34;&gt;【内省】の特徴 | ストレングスファインダー&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xn--bckg8a9ab8bxc5fpjscf3i.com/category6/entry18.html&#34;&gt;【収集】の特徴 | ストレングスファインダー&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;使われ方:c601311661980063785e7c6c04624cae&#34;&gt;使われ方&lt;/h1&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;【着想】イノベーションを生み出す部署に配置せよ&lt;/li&gt;
&lt;li&gt;【着想】もっとも大切な顧客と共有できるアイデアを生み出すよう促せ&lt;/li&gt;
&lt;li&gt;【着想】一貫性のある説明を心がけよ&lt;/li&gt;
&lt;li&gt;【学習欲】状況の変化に対応する職務を与えよ&lt;/li&gt;
&lt;li&gt;【学習欲】学習環境を与えよ&lt;/li&gt;
&lt;li&gt;【学習欲】専門家を目指させよ&lt;/li&gt;
&lt;li&gt;【学習欲】人に教えさせよ&lt;/li&gt;
&lt;li&gt;【最上志向】強みについて話し合うべし&lt;/li&gt;
&lt;li&gt;【最上志向】強みが活かせるようなキャリアパスを用意すること&lt;/li&gt;
&lt;li&gt;【最上志向】優れた業績を評価させる仕事につかせよ&lt;/li&gt;
&lt;li&gt;【内省】静かにじっくり考えるように勧めよ&lt;/li&gt;
&lt;li&gt;【内省】強みについて深く話し合うこと&lt;/li&gt;
&lt;li&gt;【内省】思考をアウトプットさせよ&lt;/li&gt;
&lt;li&gt;【内省】活発性を強みとする人と一緒に仕事をさせよ&lt;/li&gt;
&lt;li&gt;【収集】調査をさせよ&lt;/li&gt;
&lt;li&gt;【収集】ほかの「強み」にも着目するほかの「強み」にも着目する調査をさせよ&lt;/li&gt;
&lt;li&gt;【収集】集めた情報を蓄積するシステムをつくる&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://xn--bckg8a9ab8bxc5fpjscf3i.com/category32/entry96.html&#34;&gt;【着想】を強みとする人を率いる | ストレングスファインダー＆リーダーシップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xn--bckg8a9ab8bxc5fpjscf3i.com/category3/entry13.html&#34;&gt;【学習欲】を強みとする人を率いる | ストレングスファインダー＆リーダーシップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xn--bckg8a9ab8bxc5fpjscf3i.com/category1/entry4.html&#34;&gt;【最上志向】を強みとする人を率いる | ストレングスファインダー＆リーダーシップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xn--bckg8a9ab8bxc5fpjscf3i.com/category13/entry42.html&#34;&gt;【内省】を強みとする人を率いる | ストレングスファインダー＆リーダーシップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xn--bckg8a9ab8bxc5fpjscf3i.com/category6/entry21.html&#34;&gt;【収集】を強みとする人を率いる | ストレングスファインダー＆リーダーシップ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;人を率いる:c601311661980063785e7c6c04624cae&#34;&gt;人を率いる&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://xn--bckg8a9ab8bxc5fpjscf3i.com/category32/entry95.html&#34;&gt;【着想】で人を率いる | ストレングスファインダー＆リーダーシップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xn--bckg8a9ab8bxc5fpjscf3i.com/category3/entry12.html&#34;&gt;【学習欲】で人を率いる | ストレングスファインダー＆リーダーシップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xn--bckg8a9ab8bxc5fpjscf3i.com/category1/entry3.html&#34;&gt;【最上志向】で人を率いる | ストレングスファインダー＆リーダーシップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xn--bckg8a9ab8bxc5fpjscf3i.com/category13/entry41.html&#34;&gt;【内省】で人を率いる | ストレングスファインダー＆リーダーシップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xn--bckg8a9ab8bxc5fpjscf3i.com/category6/entry20.html&#34;&gt;【収集】で人を率いる | ストレングスファインダー＆リーダーシップ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;気になった強み:c601311661980063785e7c6c04624cae&#34;&gt;気になった強み&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://xn--bckg8a9ab8bxc5fpjscf3i.com/category26/&#34;&gt;慎重さ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xn--bckg8a9ab8bxc5fpjscf3i.com/category21/&#34;&gt;原点思考&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xn--bckg8a9ab8bxc5fpjscf3i.com/category12/&#34;&gt;公平性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xn--bckg8a9ab8bxc5fpjscf3i.com/category27/&#34;&gt;親密性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;関連:c601311661980063785e7c6c04624cae&#34;&gt;関連&lt;/h3&gt;

&lt;p&gt;ストリングスファインダーを試してみたくなったか下記の書籍の新品を買いましょう。&lt;/p&gt;

&lt;p&gt;強みの説明が書かれていてとストリングスファインダを受けるためのコードがついています。&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=eiel-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4532149479&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
</description>
        </item>
      
    
      
        <item>
          <title>リーントーク駆動開発 - LT駆動開発13</title>
          <link>https://blog.eiel.info/blog/2015/04/04/lean-talk-driven-development-lt13/</link>
          <pubDate>Sat, 04 Apr 2015 22:24:18 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/04/04/lean-talk-driven-development-lt13/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA13&#34;&gt;LT駆動開発13&lt;/a&gt;でLTをした。&lt;/p&gt;

&lt;p&gt;ちょっと前にリーンスタートアップ系の本を読んだので、それを元にリーントーク駆動開発ってなんだろうと考えていたので、それを垂れ流した。&lt;/p&gt;

&lt;p&gt;しかし、実際には内容が発散しすぎて収集がつかなかった。&lt;/p&gt;

&lt;p&gt;なんにおいてもバランスは大切だというのが結論。
無駄なものに力を注ぎすぎないように全体を見ながらバランスよく攻める。
そして、効果があるところをみつけるところから始めたほうが良いと思う。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;9254c42d3fd340d2b11b6d7102f483e1&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;このスライドが誰かの役に立てば嬉しいなぁ。&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=eiel-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4873115914&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=eiel-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4822248976&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;h1 id=&#34;関連:6d7d65611e59dbe57b92ec67e5f5368b&#34;&gt;関連&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2015/04/04/jsx-react-dom-lt-13/&#34;&gt;JSXとReactとDOMと。 - LT駆動開発13&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>JSXとReactとDOMと。 - LT駆動開発13</title>
          <link>https://blog.eiel.info/blog/2015/04/04/jsx-react-dom-lt-13/</link>
          <pubDate>Sat, 04 Apr 2015 22:15:49 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/04/04/jsx-react-dom-lt-13/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA13&#34;&gt;LT駆動開発13&lt;/a&gt;でLTをしてきた。&lt;/p&gt;

&lt;p&gt;最近JavaScriptを他の人に教える機会があって、&lt;a href=&#34;https://facebook.github.io/react/&#34;&gt;React&lt;/a&gt;への導入を踏まえながらコードをかいた。
JSXのないReactはDOM地道にJavaScriptで構築するわけだけど、これに比べて生のDOMを構築はすごく大変だなとおもった。&lt;/p&gt;

&lt;p&gt;こうなってくるとReactのVirtualDOMって部分って割と気軽に感じたのでそういった話をした。
あんまり下調べをちゃんとしてないのでてきとうなことを喋ったかもしれない。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;8c6da14d998d4bff96f220542c8537a7&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href=&#34;https://ltdd.doorkeeper.jp&#34;&gt;LT駆動開発&lt;/a&gt;は毎月やってるので喋る人へのフィードバックをする人が増えたら嬉しいので、参加してどんどんまさかりを投げあって欲しいです。&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=eiel-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4873117194&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;関連:85d3c5ce72e1240062c0b1400fb92582&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2015/04/04/lean-talk-driven-development-lt13/&#34;&gt;リーントーク駆動開発 - LT駆動開発13&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>記事のタイトルを大切にするように内容も大切にして欲しい</title>
          <link>https://blog.eiel.info/blog/2015/03/26/blog-title/</link>
          <pubDate>Thu, 26 Mar 2015 10:36:17 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/03/26/blog-title/</guid>
          <description>

&lt;p&gt;みんな記事のタイトルの付け方がうまくなった。
思わずクリックしたくなるタイトルが増えた。
でも、見慣れてしまって、なんだか見る気がしないものが増えた。&lt;/p&gt;

&lt;p&gt;たぶん、タイトルに対して内容が伴わないな記事が増えたんだと思う。
タイトルを付けるのに時間を使うように、内容が「&lt;strong&gt;読者のことを考えて書かれている&lt;/strong&gt;」かを考えたら良いと思う。&lt;/p&gt;

&lt;p&gt;メールにしろ、ブログ記事にしろ忙しい人はタイトルしかみない。
だからこそ、タイトルで目を引くのが大切だ。
そういった目を引くタイトルは本来見るべき人にすばやく届いて、SNSでの拡散力だって高まる。&lt;/p&gt;

&lt;p&gt;でも、内容の良いブログは検索エンジン経由でどちらにしろアクセスがくる。
インターネットで調べものをしているとどうしても見つからない情報がある。
あなたがそれを記事にすれば、たくさんのアクセスがくるだろう。&lt;/p&gt;

&lt;p&gt;思わずクリックしたくなるよりも記事の内容を適切に表現するタイトルをつけよう。&lt;/p&gt;

&lt;p&gt;誰かがWeb上書いているような記事に時間をかけるのはやめよう。
なにか付加価値をつけよう。
対象読者を変えてみるのも付加価値だろう。&lt;/p&gt;

&lt;p&gt;もっと知りたい人のために、参考にした記事へリンクを貼ろう。
あなたのリンクが情報源の価値を高める。
結果、あなたの記事の信頼性も高まり、あなた自身の信頼も高まるだろう。&lt;/p&gt;

&lt;p&gt;「〇〇するときに大切なN個のこと」そんなタイトルの記事の大切なことを合わせるといったい何個あるんだろう。
「あなたが書いた」という価値がその大切さを伝えるようになるときが来るだろう。
そんな時に使って欲しい。&lt;/p&gt;

&lt;p&gt;あなたが記事を書いて本当にしたいことはなんだろう。
アクセスアップだろうか。きっと、それは目の前の目的だと思う。
本当は、世の中を良くしたり、経済を回すことなんじゃないかと思う。&lt;/p&gt;

&lt;p&gt;本当にアクセスアップがしたいのなら何が大切なのか考えてバランスよく時間を使うことだ。
時間を無駄に使ったり、誰かの時間を無駄にさせたりはしたくない。&lt;/p&gt;

&lt;p&gt;もっと読者のことを考えて文章を書けるようになりたい。&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=eiel-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4480095268&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=eiel-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=448009525X&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;関連記事:cd278ee827284361e5485c5bf7ea6614&#34;&gt;関連記事&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/04/16/writing-math-text-basic/&#34;&gt;「数学文章作法 基礎編」 が心に残り過ぎて、しばらく持ち歩きたい。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>リーンキャンバスは仮説検証をすることができる製品</title>
          <link>https://blog.eiel.info/blog/2015/03/17/lean-canvas-is-minimum-product/</link>
          <pubDate>Tue, 17 Mar 2015 17:32:25 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/03/17/lean-canvas-is-minimum-product/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://www.amazon.co.jp/dp/4873115914/ref=as_sl_pc_tf_lc?tag=eiel-22&amp;amp;camp=1027&amp;amp;creative=7407&amp;amp;linkCode=as4&amp;amp;creativeASIN=4873115914&amp;amp;adid=14RJ43QJHGBB6B932WW4&amp;amp;&amp;amp;ref-refURL=http%3A%2F%2Fblog.eiel.info%2Fblog%2F2015%2F03%2F03%2Fafter-get-a-idea%2F&#34;&gt;実践リーンスタートアップ&lt;/a&gt;を読んだ。&lt;/p&gt;

&lt;p&gt;リーンキャンバスは仮説検証をすることができる製品です。
しかも、作りなれていると5分で作成することができます&lt;/p&gt;

&lt;h1 id=&#34;製品:98da796131ab8ac58745b27f076d3001&#34;&gt;製品&lt;/h1&gt;

&lt;p&gt;製品は、顧客に提供することができてフィードバックを得ることができます。&lt;/p&gt;

&lt;p&gt;リーンスタートアップでは、アイディアをなるべくコストをかけずに製品を構築して、顧客に提供して、顧客のことを学習して、本当に必要なものをつくっていきます。&lt;/p&gt;

&lt;p&gt;その最初につくる製品として、候補のひとつとして上がるのがリーンキャンバスになるようです。&lt;/p&gt;

&lt;p&gt;他に製品になりえるものは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;スライド&lt;/li&gt;
&lt;li&gt;ランディングページ&lt;/li&gt;
&lt;li&gt;A4サイズ1枚程度の説明書&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などなどがありそうです。&lt;/p&gt;

&lt;p&gt;ランディングページをつくったりするのは大変です。&lt;/p&gt;

&lt;p&gt;スライドもリーンキャンバスをつくるよりは大変です。&lt;/p&gt;

&lt;p&gt;A4サイズ1枚程度の説明書はスニペットがあれば、比較的簡単につくれそうです。&lt;/p&gt;

&lt;h1 id=&#34;まとめ:98da796131ab8ac58745b27f076d3001&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;ということで、アジャイルサムライで紹介されていた、エレベータビッチみたいなもののようです。
リーンキャンバスは重要なものほど広い面積がとってあるため、重要な場所がわかりやすいということみたいです。&lt;/p&gt;

&lt;p&gt;顧客が欲しいものやビジネスがうまくいきそうなものがわかったら、リーンキャンバスより大きな製品をつくって検証をしていけばよさそうです。&lt;/p&gt;

&lt;h1 id=&#34;次に学べばよさそうなこと:98da796131ab8ac58745b27f076d3001&#34;&gt;次に学べばよさそうなこと&lt;/h1&gt;

&lt;p&gt;製品をつかって顧客から学習する方法&lt;/p&gt;

&lt;h1 id=&#34;関連:98da796131ab8ac58745b27f076d3001&#34;&gt;関連&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2015/03/03/after-get-a-idea/&#34;&gt;アイディアを思いついたらリーンキャンバスを書くと良いらしい | そんなこと覚えてない&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.amazon.co.jp/gp/product/4873115914/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4873115914&amp;linkCode=as2&amp;tag=eiel-22&#34;&gt;Running Lean ―実践リーンスタートアップ (THE LEAN SERIES)&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=eiel-22&amp;l=as2&amp;o=9&amp;a=4873115914&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=eiel-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4822248976&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
</description>
        </item>
      
    
      
        <item>
          <title>もっと地域を活性化したいのでセミナーイベントの後の交流会を盛り上げたい - WEB TOUCH MEETING 76に参加した</title>
          <link>https://blog.eiel.info/blog/2015/03/15/networking-event-after-seminar/</link>
          <pubDate>Sun, 15 Mar 2015 01:20:12 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/03/15/networking-event-after-seminar/</guid>
          <description>

&lt;p&gt;広島のWeb系のハブになるイベントである&lt;a href=&#34;http://www.webtouchmeeting.com/meeting/2015/02/76web-touch-meeting.html&#34;&gt;WEB TOUCH MEETING の76回目&lt;/a&gt;に参加した。&lt;/p&gt;

&lt;p&gt;セミナー内容はとてもおもしろかったですが、割愛します。&lt;/p&gt;

&lt;p&gt;おもしろいかったのですが、イベント後にある「カフェベローチェで井戸端会議（自由参加）」の参加者が固定化されていて、参加者が少なくてもったいないと思った。&lt;/p&gt;

&lt;p&gt;セミナーを聞く目的で参加するのも良いのですが、情報の交換が一番のおいしいところだと思う。
Webというキーワードでいろんな人たちが集まっているから。
人が集り、交流するといろんな楽しいことが起きる。&lt;/p&gt;

&lt;p&gt;だから、もっとイベント後の交流会に参加者を誘導できたら良いのにと思っている。&lt;/p&gt;

&lt;h1 id=&#34;感じたこと:c8d88006b5ffa65c878356be8d85f420&#34;&gt;感じたこと&lt;/h1&gt;

&lt;p&gt;たぶん、はじめましての人がたくさんいた。&lt;/p&gt;

&lt;p&gt;だからこそもっと交流したい。&lt;/p&gt;

&lt;h1 id=&#34;良いとおもったこと:c8d88006b5ffa65c878356be8d85f420&#34;&gt;良いとおもったこと&lt;/h1&gt;

&lt;p&gt;デザイナーよりのセッションが多めだったにも関わらず、
そこそこプログラム系の人がいた。&lt;/p&gt;

&lt;h2 id=&#34;より期待すること:c8d88006b5ffa65c878356be8d85f420&#34;&gt;より期待すること&lt;/h2&gt;

&lt;p&gt;プログラマよりのときはもっとデザイナが来ると良いと思う。&lt;/p&gt;

&lt;p&gt;デザイナよりのときはもっとプログラマが来ると良いと思う。&lt;/p&gt;

&lt;p&gt;WEB TOUCH MEETINGの主旨に立ち返ってみる。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;WEB TOUCH MEETINGとは主に広島県、中国地方の方を対象にウェブ周りの技術や知識に関して自分は知ってる当たり前のことをまずはさわりの部分からでもお互いにしあいましょうという会です。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;さわりの部分を共有したいから、興味がないかなぁって思う時こそ参加すると良いと思う。&lt;/p&gt;

&lt;h1 id=&#34;問題点:c8d88006b5ffa65c878356be8d85f420&#34;&gt;問題点&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;さわりを共有したからこそ、交流したいのに、交流会の参加者が固定化されている&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;なぜ交流会に参加者が少ないのか:c8d88006b5ffa65c878356be8d85f420&#34;&gt;なぜ交流会に参加者が少ないのか&lt;/h2&gt;

&lt;p&gt;仮説を立ててみる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;イベントの時間が遅いため交流会に参加できない&lt;/li&gt;
&lt;li&gt;交流会への誘導に失敗している&lt;/li&gt;
&lt;li&gt;交流会があることを知らない&lt;/li&gt;
&lt;li&gt;交流会にメリットが感じていない&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;イベントの時間が遅いため交流会に参加できない:c8d88006b5ffa65c878356be8d85f420&#34;&gt;イベントの時間が遅いため交流会に参加できない&lt;/h3&gt;

&lt;p&gt;イベントが19時から22時。
土曜日なのでバスの最終が22時50分だったりで充分な時間がないのではないか。&lt;/p&gt;

&lt;p&gt;解決案&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;主催者に終了が22時になりそうなときは21時終了にできないか交渉してみる&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;交流会への誘導に失敗している:c8d88006b5ffa65c878356be8d85f420&#34;&gt;交流会への誘導に失敗している&lt;/h3&gt;

&lt;p&gt;イベントが終了後、運営は片付けているので、いきましょうって引っ張る人がいない。
行くか迷っている人をしっかり引っ張る。&lt;/p&gt;

&lt;p&gt;解決案&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;自分が誘導係をやる&lt;/li&gt;
&lt;li&gt;イベントの終わりに充分な交流時間を入れてもらう&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;交流会があることを知らない:c8d88006b5ffa65c878356be8d85f420&#34;&gt;交流会があることを知らない&lt;/h3&gt;

&lt;p&gt;アピールが足りず、存在に気付いていない。&lt;/p&gt;

&lt;p&gt;解決案&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;自分がピエロになって終了後にしっかりアピールする&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;交流会にメリットが少ない:c8d88006b5ffa65c878356be8d85f420&#34;&gt;交流会にメリットが少ない&lt;/h3&gt;

&lt;p&gt;交流会にメリットを感じていない人が多い可能性。
そもそもイベント自体の参加がはじめてで参加しづらい可能性。&lt;/p&gt;

&lt;p&gt;解決案&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;メリットを強調する&lt;/li&gt;
&lt;li&gt;講師にはなるべく参加してもらう&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;次回挑戦したいこと:c8d88006b5ffa65c878356be8d85f420&#34;&gt;次回挑戦したいこと&lt;/h1&gt;

&lt;p&gt;みんなにもっと参加して欲しいということを伝えるような行動してみる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;名刺交換を積極的にしにいく&lt;/li&gt;
&lt;li&gt;誘導係をする&lt;/li&gt;
&lt;li&gt;交流会の告知係をする&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;まとめ:c8d88006b5ffa65c878356be8d85f420&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;交流会のメリットは固定化メンバーがいることから推測すると、
勉強会のメリットをよく知っている人たちであり、そこそこ忙しくない人のような気がする。
(注: みんな忙しい中で参加していると思います)&lt;/p&gt;

&lt;p&gt;交流が増えると新しいコラボが生まれて、盛り上がるし、講師をする人も増える気がする。&lt;/p&gt;

&lt;p&gt;そういえば最初のころは「興味がなくても参加する」ことを大切にしていた気がする。
一緒に仕事する可能性も高い人たちだし、何より喋るのが苦手だからだ。&lt;/p&gt;

&lt;p&gt;喋ることが苦手なら何度も顔をみせることで話すきかっけをつくればいい。&lt;/p&gt;

&lt;p&gt;そんなことを思い出した。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>「ふりかえり」の仕方をときどき振り返りしたほうが良いと思った - すくすくスクラム広島第10回　スタッフによる「ふりかえり」</title>
          <link>https://blog.eiel.info/blog/2015/03/14/scrum-furikaeri/</link>
          <pubDate>Sat, 14 Mar 2015 23:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/03/14/scrum-furikaeri/</guid>
          <description>

&lt;p&gt;『「ふりかえり」の仕方をちゃんとおさらいしたい』と思う出来事があった。
「ふりかえり」に限らず、よく行うことはときどきやり方の見直しが必要だと思った。&lt;/p&gt;

&lt;h1 id=&#34;いきさつ:5bd9a64b9e7bbf9e1949dcf9a8fbf3ae&#34;&gt;いきさつ&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://sukusuku-scrum-hiroshima.doorkeeper.jp/events/21061&#34;&gt;すくすくスクラム広島第10回　スタッフによる「ふりかえり」&lt;/a&gt;に参加しました。
すくすくスクラム広島では3回に1回「ふりかえり」を行います。前回やりわすれたらしくて、約1年ぶりのふりかえりをしました。&lt;/p&gt;

&lt;h1 id=&#34;どのようなふりかえりをしたか:5bd9a64b9e7bbf9e1949dcf9a8fbf3ae&#34;&gt;どのようなふりかえりをしたか&lt;/h1&gt;

&lt;p&gt;去年のふりかえり時にしたKPTを確認して、Tryに着目して、継続するかどうか検討した。&lt;/p&gt;

&lt;h2 id=&#34;ふりかえり:5bd9a64b9e7bbf9e1949dcf9a8fbf3ae&#34;&gt;ふりかえり&lt;/h2&gt;

&lt;p&gt;スクラムのふりかえりのことで、英語ではsprint retrospective(スプリントレトロスペクティブ)と言うらしい。&lt;/p&gt;

&lt;blockquote&gt;
&lt;h1 id=&#34;振り返り:5bd9a64b9e7bbf9e1949dcf9a8fbf3ae&#34;&gt;振り返り&lt;/h1&gt;

&lt;p&gt;スプリントゴールの達成具合や、スプリントで発生した問題とその改善について話し合う。次回のスプリントゴール目標についての取りまとめも含まれる場合がある&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ja.wikipedia.org/wiki/%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%A0_%28%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA%29#.E6.8C.AF.E3.82.8A.E8.BF.94.E3.82.8A&#34;&gt;スクラム (ソフトウェア開発) - Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;kpt:5bd9a64b9e7bbf9e1949dcf9a8fbf3ae&#34;&gt;KPT&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Keep(続けたいこと)&lt;/li&gt;
&lt;li&gt;Problem(問題点)&lt;/li&gt;
&lt;li&gt;Try(挑戦したいこと)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3つにわけてふりかえります。&lt;/p&gt;

&lt;p&gt;参考: &lt;a href=&#34;http://enterprisezine.jp/iti/detail/788&#34;&gt;今日からできる！全員参加型の建設的フィードバック「ふりかえり」～実践編（KPT・タイムライン） (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;)：テクノロジーでビジネスを加速するための実践Webメディア EnterpriseZine (EZ)&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;起きた問題点:5bd9a64b9e7bbf9e1949dcf9a8fbf3ae&#34;&gt;起きた問題点&lt;/h1&gt;

&lt;p&gt;ふりかえりのやり方はあれでよかったのか&lt;/p&gt;

&lt;h2 id=&#34;どんなことをしたか:5bd9a64b9e7bbf9e1949dcf9a8fbf3ae&#34;&gt;どんなことをしたか&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;前回出たTryができたかどうかを判断した&lt;/li&gt;
&lt;li&gt;続けるべきだどうかを考えた&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;何が問題か:5bd9a64b9e7bbf9e1949dcf9a8fbf3ae&#34;&gt;何が問題か&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;前回のトライにしか着目していない&lt;/li&gt;
&lt;li&gt;新たなトライがあまり登場してない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そもそも正しいKPTはどうするのだろう。
よくよく考えると私はしらない。&lt;/p&gt;

&lt;h1 id=&#34;ふたたびkpt:5bd9a64b9e7bbf9e1949dcf9a8fbf3ae&#34;&gt;ふたたびKPT&lt;/h1&gt;

&lt;p&gt;さきほど参考にはった記事のやり方をみてみる&lt;/p&gt;

&lt;p&gt;参考: &lt;a href=&#34;http://enterprisezine.jp/iti/detail/788&#34;&gt;今日からできる！全員参加型の建設的フィードバック「ふりかえり」～実践編（KPT・タイムライン） (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;)：テクノロジーでビジネスを加速するための実践Webメディア EnterpriseZine (EZ)&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Try実施確認&lt;/li&gt;
&lt;li&gt;Keep/Problem抽出&lt;/li&gt;
&lt;li&gt;Keep/Problem確認&lt;/li&gt;
&lt;li&gt;Problem深掘り&lt;/li&gt;
&lt;li&gt;Try項目抽出&lt;/li&gt;
&lt;li&gt;Who、When決定&lt;/li&gt;
&lt;li&gt;クロージング&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;今回、2の「Keep/Problem抽出」がとても弱く、6の「Who、When決定」は自然とやっていたけど、強制力が弱かった気がする。&lt;/p&gt;

&lt;p&gt;2については&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;今回のKeep/Problemについての項目を書き出します。時間を決めて全員で一斉に書き出します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;と書かれています。
今回のKeepとProblemに着目する時間がとれていなかったと思います。&lt;/p&gt;

&lt;h1 id=&#34;改善案:5bd9a64b9e7bbf9e1949dcf9a8fbf3ae&#34;&gt;改善案&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;ちゃんと各イベントごとふりかえる&lt;/li&gt;
&lt;li&gt;時間ととって付箋で個別にKPTをする時間をとるべきだった&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;やはり付箋をつかったKeepとProblemの抽出をやるべきだと思いました。&lt;/p&gt;

&lt;h1 id=&#34;その他:5bd9a64b9e7bbf9e1949dcf9a8fbf3ae&#34;&gt;その他&lt;/h1&gt;

&lt;p&gt;ふりかえりの手法としてYWTという手法の紹介がありました。&lt;/p&gt;

&lt;p&gt;参考 &lt;a href=&#34;http://kuranuki.sonicgarden.jp/2013/06/ywt.html&#34;&gt;ビジョンを叶えるために。個人でも出来る戦略を考える第１歩 〜 YWTを使った戦略の立てかたとは | Social Change!&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;やったこと(Y)&lt;/li&gt;
&lt;li&gt;わかったこと(W)&lt;/li&gt;
&lt;li&gt;次にやること(T)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の3つでYWTだそうです。&lt;/p&gt;

&lt;p&gt;これは、書きやすそうだと思いました。&lt;/p&gt;

&lt;h1 id=&#34;まとめ:5bd9a64b9e7bbf9e1949dcf9a8fbf3ae&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;ふりかえりに限らないですが、やり方は知らぬうちにオレオレルールになっていないか確認したほうが良いと思いました。
本来のルールに問題があって、改善している場合はもちろん変えてよいと思います。&lt;/p&gt;

&lt;p&gt;スクラムに限らず、毎日のようにするようなことは「ふりかえり」ことが大切だと改めて思いました。&lt;/p&gt;

&lt;h1 id=&#34;関連:5bd9a64b9e7bbf9e1949dcf9a8fbf3ae&#34;&gt;関連&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.facebook.com/Sukusuku.Scrum.Hiroshima&#34;&gt;すくすくスクラム広島 | Facebook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>「GeoJSONをGistに貼る」という話をLT駆動開発12でした</title>
          <link>https://blog.eiel.info/blog/2015/03/07/geojson-in-gist/</link>
          <pubDate>Sat, 07 Mar 2015 13:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/03/07/geojson-in-gist/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA12&#34;&gt;LT駆動開発12&lt;/a&gt;で「GeoJSONをGistに貼る」という話をした。&lt;/p&gt;

&lt;p&gt;遊びでつくってたAPIのJSON形式を&lt;a href=&#34;http://geojson.org/&#34;&gt;GeoJSON&lt;/a&gt;にしたので、GeoJSONの話をした。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;fd6714bb624e415bb8861c008dfd1d6c&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href=&#34;http://s.kitazaki.name/docs/geojson-spec-ja.html&#34;&gt;仕様の日本語訳もある&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;位置情報系は疎いので、積極的にアウトプットして、情報を集めていきたい所存。
&lt;a href=&#34;https://openstreetmap.jp/&#34;&gt;オープンストリートマップ&lt;/a&gt;のことももうちょっと調べておくべきな気がしつつ全く調べてない。&lt;/p&gt;

&lt;p&gt;D3.jsもだけど。
他にも最近地理系はなにかあった気がする。&lt;/p&gt;

&lt;p&gt;LT駆動を1年やった結果いろいろな資産(スライド)が蓄積された。
はてぶもされた。&lt;/p&gt;

&lt;p&gt;2年目も毎月LTできるだろうか。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>OctopressからHugoに移行した マルチコアをもっと使いTai - LT駆動開発12</title>
          <link>https://blog.eiel.info/blog/2015/03/07/octopress-to-hugo/</link>
          <pubDate>Sat, 07 Mar 2015 12:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/03/07/octopress-to-hugo/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA12&#34;&gt;LT駆動開発12&lt;/a&gt;の発表者資料です。テーマ 「祝一周年&amp;amp;ハーレム」です。&lt;/p&gt;

&lt;p&gt;ブログをOctopressからHugoに移行したのでその再に感じたことを発表しました。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;37a5d766667749f8861476cae2daf0cf&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Goはバランスがとれているなぁ、と最近感じていたりはします。&lt;/p&gt;

&lt;p&gt;どちらにしろ、最近CPUは速くなってはいるだろうけど体感できないのは感じていたりしてました。
バッテリーの持ちはよくなってるけど。&lt;/p&gt;

&lt;p&gt;前置きはさておき、普段ローカルで実行してるようなプログラムがマルチコアは生かせてないというのは非常に体感する出来事でした。
とはいえ、ウェブサービスをつくっていたりすると並列化なんてする必要はないだろうし、スマホアプリなら複雑な処理はAPIサーバにやらせればいいだろうし、
並列化が必要な場面は特定分野にはなるんだろうとは思います。&lt;/p&gt;

&lt;h3 id=&#34;hugo移行の歳にしたこと:b5f717dad1677b7508f5552a316e1cc7&#34;&gt;Hugo移行の歳にしたこと&lt;/h3&gt;

&lt;p&gt;移行の際にしたことを記録しておきます。&lt;/p&gt;

&lt;p&gt;日付のフォーマットの修正。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;find . -type f -exec sed -i &amp;quot;&amp;quot; -e &#39;s/date: \([0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}\) \([0-9]\{2\}:[0-9]\{2\}\).*$/date: \1T\2:00+09:00/g&#39; {} \;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;layoutパラメータは指定しないので削除。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;find . -type f -exec sed -i &amp;quot;&amp;quot; -e &#39;s/layout: .*//g&#39; {} \;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;カテゴリではなくてタグに変更&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;find . -type f -exec sed -i &amp;quot;&amp;quot; -e &#39;s/categories/tags/g&#39; {} \;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとは、パーマリンクがずれないようにパーマリンクを指定しています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;permalinks:
  post: /blog/:year/:month/:day/:filename/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ただし、ファイル名にも日付を含んでたので、あきらめて削除しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/blog.eiel.info/tree/master/content/post&#34;&gt;日付でソートできなくてつらい。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;あとは rss が atom.xml だったのが index.xmlになってしまったので、デプロイする前にcpして対処しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/blog.eiel.info/commit/baeea3fca8ee6a4cf987c42e4ab29da6831cb6b1&#34;&gt;https://github.com/eiel/blog.eiel.info/commit/baeea3fca8ee6a4cf987c42e4ab29da6831cb6b1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Werckerをつかってデプロイしていますが、ステップがすでにあってとても楽チンでした。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/blog.eiel.info/blob/baeea3fca8ee6a4cf987c42e4ab29da6831cb6b1/wercker.yml&#34;&gt;https://github.com/eiel/blog.eiel.info/blob/baeea3fca8ee6a4cf987c42e4ab29da6831cb6b1/wercker.yml&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;box: wercker/default
build:
  steps:
    - arjen/hugo-build:
        version: 0.13
    - script:
        name: create atom.xml
        code: cp public/index.xml public/atom.xml
deploy:
  steps:
    - lukevivier/gh-pages@0.2.1:
        token: $GIT_TOKEN
        domain: blog.eiel.info
        basedir: public
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;おまけでHugoのテーマでそのまま使えたのは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hyde&lt;/li&gt;
&lt;li&gt;purehugo&lt;/li&gt;
&lt;li&gt;redlounge&lt;/li&gt;
&lt;li&gt;simple-a&lt;/li&gt;
&lt;li&gt;tinyce&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;でした。手軽に移行したいなら参考にどうぞ。&lt;/p&gt;

&lt;p&gt;記事が増えて、生成速度が問題にならないように今後JekyllやOctopressでも対処されていくことだと思いますので、無理して移行する必要はないと思います。&lt;/p&gt;

&lt;p&gt;つらい場合は検討してみてはどうでしょうか。&lt;/p&gt;

&lt;p&gt;個人的には下書きだけ生成してくれるオプション欲しいです。(自分でつくれ)&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=eiel-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4873116899&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;参考文献:b5f717dad1677b7508f5552a316e1cc7&#34;&gt;参考文献&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2014/12/25/hugo/&#34;&gt;OctopressからHugoへ移行した | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>アイディアを思いついたらリーンキャンバスを書くと良いらしい</title>
          <link>https://blog.eiel.info/blog/2015/03/03/after-get-a-idea/</link>
          <pubDate>Tue, 03 Mar 2015 17:45:01 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/03/03/after-get-a-idea/</guid>
          <description>

&lt;p&gt;アイディアを思いついたらリーンキャンバスを書くと良いらしい。&lt;/p&gt;

&lt;p&gt;リーンキャンバス的なものを書く必要があったので、&lt;a href=&#34;https://ltdd.doorkeeper.jp&#34;&gt;LT駆動開発&lt;/a&gt;1周年ということで、リーンスタートアップの段階的にしている&lt;a href=&#34;https://twitter.com/k2works&#34;&gt;@k2works&lt;/a&gt;先生のスライドを見直しながら自分なりに整理しただけである。&lt;/p&gt;

&lt;p&gt;Q. アイディアを思いついたらどうするか。&lt;/p&gt;

&lt;p&gt;A. &lt;strong&gt;実現させる&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;アイディアを実現するための、おすすめの方法論が&lt;strong&gt;リーンスタートアップ&lt;/strong&gt;らしい。&lt;/p&gt;

&lt;p&gt;個人的なざっくりなイメージ&lt;/p&gt;

&lt;p&gt;「仮説検証を繰り返して方向を修正しながら、顧客と製品を育てる」&lt;/p&gt;

&lt;p&gt;その最初のステップがリーンキャンバスの書きながら検証する。
書きながら、専門家に相談したり、潜在顧客にインタビューする。&lt;/p&gt;

&lt;h1 id=&#34;リーンスタートアップ:601090340ed0c46c2ee56dfbb3604495&#34;&gt;リーンスタートアップ&lt;/h1&gt;

&lt;h2 id=&#34;リーン:601090340ed0c46c2ee56dfbb3604495&#34;&gt;リーン&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;ムダがなく効率的&lt;/strong&gt;という意味。&lt;/p&gt;

&lt;h2 id=&#34;スタートアップ:601090340ed0c46c2ee56dfbb3604495&#34;&gt;スタートアップ&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;不確実な状態で新しい製品やサービスを創り出さなければならない組織&lt;/strong&gt;のこと。&lt;/p&gt;

&lt;p&gt;「アイディアを実現するためのチーム」と言える。&lt;/p&gt;

&lt;h2 id=&#34;リーンスタートアップとは:601090340ed0c46c2ee56dfbb3604495&#34;&gt;リーンスタートアップとは&lt;/h2&gt;

&lt;p&gt;新しい製品やサービスを開発する際に、顧客にとって価値のないものを作ってしまうことを防ぎつつ、より早くサービスを生みだしつづける方法論。&lt;/p&gt;

&lt;p&gt;どうやってやるか。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;構築-計測-学習&lt;/strong&gt;を繰り返して行い最適なプランをみつける。&lt;/p&gt;

&lt;p&gt;仮説をたてて、検証して、学んだことを反映させて、次の仮説を立てる。そして、検証する。&lt;/p&gt;

&lt;p&gt;「プロトタイプを提供して、顧客にフィードバックをもらう」はコストが高い。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;プロトタイプの作成はコストが高い。&lt;/li&gt;
&lt;li&gt;そもそも顧客がまだいない。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;リーンキャンバスを作成して、潜在顧客にフィードバックをもらう。&lt;/p&gt;

&lt;h1 id=&#34;リーンキャンバス:601090340ed0c46c2ee56dfbb3604495&#34;&gt;リーンキャンバス&lt;/h1&gt;

&lt;p&gt;リーンキャンバスを書いていくことそれ自体が、アイディアを実現するための整理でこれからのプランの構築をすることになる。
リーンキャンバスでやることを並べると以下のようになる。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;対象とする顧客が明確にする&lt;/li&gt;
&lt;li&gt;何を課題としているのか明確にする&lt;/li&gt;
&lt;li&gt;顧客に伝えるコンセプトを明確にする&lt;/li&gt;
&lt;li&gt;どうやって解決するかを明確にする&lt;/li&gt;
&lt;li&gt;このサービスをどうやって宣伝するか決める&lt;/li&gt;
&lt;li&gt;収益源を想像する&lt;/li&gt;
&lt;li&gt;かかるコストを計算する&lt;/li&gt;
&lt;li&gt;成長していることを計測するための指標を決める&lt;/li&gt;
&lt;li&gt;他者より優れている点を整理する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;アイディアを思いついたらすべきことが整理されている。&lt;/p&gt;

&lt;p&gt;ここからリスクを洗い出して、プランを検証していくことになり、
配置に意味があるので、わかりやすくなることらしい。(たぶん)&lt;/p&gt;

&lt;h1 id=&#34;まとめ:601090340ed0c46c2ee56dfbb3604495&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;アイディアを思いついたらリーンキャンバスを作成する&lt;/li&gt;
&lt;li&gt;リーンキャンバスをつかって検証して、プランの固める&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;ここからどうするのか:601090340ed0c46c2ee56dfbb3604495&#34;&gt;ここからどうするのか&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;リーンキャンバスの書き方を学ぶ&lt;/li&gt;
&lt;li&gt;リーンキャンバスを使った検証方法を学ぶ&lt;/li&gt;
&lt;li&gt;リーンキャンバスに書いたソリューションのプロトタイプを作成する&lt;/li&gt;
&lt;li&gt;リーンスタートアップのことを学ぶ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とりあえず、ウェブ上の情報では表面的なことしかわからないので&lt;a href=&#34;https://www.amazon.co.jp/dp/4873115914?tag=eiel-22&amp;amp;camp=1027&amp;amp;creative=7407&amp;amp;linkCode=as4&amp;amp;creativeASIN=4873115914&amp;amp;adid=0Z805ZPCC6J63421JQYA&amp;amp;&#34;&gt;実践リーンスタートアップ&lt;/a&gt;を注文した。&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=eiel-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4873115914&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;h1 id=&#34;追記:601090340ed0c46c2ee56dfbb3604495&#34;&gt;追記&lt;/h1&gt;

&lt;p&gt;ウェブ上でリーンキャンバスを作成できる&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tinycanvas.grasphy.com/&#34;&gt;TinyCanvas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;参考文献:601090340ed0c46c2ee56dfbb3604495&#34;&gt;参考文献&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/kakimomokuri/lt-03-34275687&#34;&gt;実践リーンスタートアップ…その前に&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/kakimomokuri/ss-35629403&#34;&gt;実践リーンスタートアップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/meganehara/lean-for-social-startup&#34;&gt;NPO / ソーシャルビジネスのためのリーン・スタートアップ入門&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/kdmsnr/running-lean-17917258&#34;&gt;【Running Lean入門】リーンキャンバス作成ワークショップ（簡易版）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/leanstartupjp/ss-8602991?related=1&#34;&gt;はじめてのリーンスタートアップ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ChefDKハンズオンをして思ったこと</title>
          <link>https://blog.eiel.info/blog/2015/02/26/chefdk-hands-on/</link>
          <pubDate>Thu, 26 Feb 2015 23:04:36 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/02/26/chefdk-hands-on/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;https://hiroshimarb.doorkeeper.jp/events/20979&#34;&gt;ChefDKハンズオン&lt;/a&gt;をしました。
&lt;a href=&#34;http://great-h.github.io/events/event-093.html&#34;&gt;すごい広島93&lt;/a&gt;の脇で行いました。&lt;/p&gt;

&lt;p&gt;ハンズオンをするととても勉強になります。自分が。&lt;/p&gt;

&lt;p&gt;当日のトラブルを避けるための入念な準備をしたり、それでも想定しないことが起きたり、自分では簡単だと思っていることが他の人には意外と難しかったり、なんとなく理解の部分を発見したりできました。&lt;/p&gt;

&lt;p&gt;参加者にとってハンズオンの良いところは、本来一人で新しいことをはじめるとつまづいた時に一人で解決しないといけませんが、講師がいて一緒に解決できるところがとても大きいと思いました。&lt;/p&gt;

&lt;p&gt;そんなわけで、&lt;a href=&#34;http://qiita.com/eielh/items/adb173ffcd6389c12e36&#34;&gt;ChefDKハンズオン with すごい広島の資料&lt;/a&gt;はここにあるので、気が向いたら遊んでみてください。
反省点なんかを反映したいですが、間に合っていません。
作るのもそれなりに大変だったので、しっかり直したいです。&lt;/p&gt;

&lt;p&gt;今度から月1回程度、他の人の作成したハンズオン資料でハンズオンしたり、ときどき自作したりしてもいいかなと思いはじめています。&lt;/p&gt;

&lt;p&gt;そういえば、Boot2dockerの準備の仕方を書いてなかったらみんなハマってました。
使ったことなければ、それはそうですね、本当にすみません。&lt;/p&gt;

&lt;p&gt;再演希望とかあれば言ってください。研修に使いたい場合、講師で呼んでくれても良いです。
生活費稼がなきゃ。&lt;/p&gt;

&lt;p&gt;もっとみんなに使って欲しいと思った技術をみつけたら、新しいハンズオンを考えてみたいです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>「外資系エリートのシンプルな伝え方」を読んだ</title>
          <link>https://blog.eiel.info/blog/2015/02/22/simple-through-ms/</link>
          <pubDate>Sun, 22 Feb 2015 13:01:08 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/02/22/simple-through-ms/</guid>
          <description>&lt;p&gt;読んだというか、ジャンケン大会で勝った。&lt;/p&gt;

&lt;p&gt;あれはたしか1月31日に行われた「&lt;a href=&#34;http://heroshima.jp/EventInfo/20150131&#34;&gt;2015 MVP Community Camp～広島～&lt;/a&gt;」だった。
「澤 円さんという世界に何人か存在するプレゼンの神の一人がいらっしゃる」ということで足を運んだ。&lt;/p&gt;

&lt;p&gt;でも、たぶん澤円かさんが来なくても足を運んだと思う。&lt;/p&gt;

&lt;p&gt;なんだか珍しくジャンケン大会で勝つことができた。
そこで得たのは &lt;strong&gt;&lt;a href=&#34;http://www.amazon.co.jp/gp/product/4046010711/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=4046010711&amp;amp;linkCode=as2&amp;amp;tag=eiel-22&#34;&gt;澤円さん著 「外資系エリートのシンプルな伝え方」&lt;/a&gt;&lt;/strong&gt; である。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/2015-02-22-simple-a.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;当然だがサインをいただいた。(ありがとうございます)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/2015-02-22-simple-b.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ひっそり、りんごマークが映るように撮るべきだった。(やめろ)&lt;/p&gt;

&lt;p&gt;本書は意外と厚いのだけど、文字が大きめなので、そんなに内容は多くない。
そこら辺にいっぱいある自己啓発に書かれていることばかり書かれているかもしれない。&lt;/p&gt;

&lt;p&gt;だけど、冒頭で説明したように、神と評される人がどんなことを実践しているかと思って読んでみると驚くべき本である。
以前どこかにかいたけど、&lt;strong&gt;すごいと思う人の習慣を真似すること&lt;/strong&gt;はとても効果がある。
もし澤さんのように、心を動かす伝え方をしたいのであれば、この本はシンプルでとても良い本だ。&lt;/p&gt;

&lt;p&gt;本書は、自己啓発から始まり、コミュニケーション術を経由して、本題の澤さんがプレゼンで大切していることに向かう。
最後のプレゼンで大切にしていることはたくさん刺さる。&lt;/p&gt;

&lt;p&gt;「相手の未来を拓く核を持て」とあるが、これができている人のプレゼンは終わった後はワクワクする。実践してみたいものです。&lt;/p&gt;

&lt;p&gt;自分が得意なことを誰かに伝えたい人は、一度澤さんのプレゼンを見て、本書を読んでみると良い。
一度以上人前でプレゼンをしたことがあるとなお良い。&lt;/p&gt;

&lt;p&gt;とても心動かされることだろう。&lt;/p&gt;

&lt;p&gt;僕は誰かの心を動かすような話をすることが今後できるだろうか。&lt;/p&gt;

&lt;p&gt;勝手に宣伝しておくと、今週も広島に澤円かさんが広島にやってくるらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://connpass.com/event/11852/&#34;&gt;ヒーロー島 バレンタイン スペシャル 2015 with Windows女子部&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;宣伝する間もなく定員いっぱいみたいですが。&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=eiel-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4046010711&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;ところで、&lt;a href=&#34;https://www.google.com/webhp?sourceid=chrome-instant&amp;amp;ion=1&amp;amp;espv=2&amp;amp;ie=UTF-8#q=%E3%83%AD%E3%83%B3%E6%AF%9B%E3%81%8A%E3%81%98%E3%81%95%E3%82%93&#34;&gt;ロン毛おじさん&lt;/a&gt;でググると澤 円さんがヒットするらしい。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>GitHubに馴れると何ができるのか</title>
          <link>https://blog.eiel.info/blog/2015/02/19/github-for-commons/</link>
          <pubDate>Thu, 19 Feb 2015 19:09:59 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/02/19/github-for-commons/</guid>
          <description>

&lt;p&gt;コンピュータに疎い人にGitHubに馴れると何ができるのか聞かれたので、その時に書いた文章を残しておく。&lt;/p&gt;

&lt;h1 id=&#34;githubに馴れると何ができるのか:5b9bfe18631d84be041a37c3d50e7329&#34;&gt;GitHubに馴れると何ができるのか&lt;/h1&gt;

&lt;p&gt;GitHubの操作になれると、他の人の協力して「ものづくり」しやすくなります。&lt;/p&gt;

&lt;p&gt;「ものづくり」と書きましたが、なんにでも使えるわけではないです。&lt;/p&gt;

&lt;p&gt;基本的にはコンピュータ上で動くものを作るときでであり、作るものは、文字で表現できるものが主となります。
文字で表現できるものは、例えば、コンピュータ言語を記述して作るものがあります。&lt;/p&gt;

&lt;p&gt;コンピュータ言語を使って作成できるものは、アプリケーションやウェブページなどなどがあります。&lt;/p&gt;

&lt;p&gt;コンピュータに疎いということであれば、GitHubに慣れることよりもまず、コンピュータを使って何かを作ることになれる必要があるかもしれません。
もし、コンピュータを使って、アプリケーションやウェブページを作成しているのであれば、GitHubに馴れることで、他の人と協力しやすくなります。
HTMLというものやCSS、JavaScriptなどを利用して、なにかを作成している場合、今の時代であれば、どこかでGitHubというものに出会うと思います。&lt;/p&gt;

&lt;h1 id=&#34;蛇足:5b9bfe18631d84be041a37c3d50e7329&#34;&gt;蛇足&lt;/h1&gt;

&lt;p&gt;書いてて、思い出したのは「&lt;a href=&#34;http://yanorin.blogspot.jp/2015/01/git.html&#34;&gt;ものづくりにっぽん: Gitとかわかんなくても死なないです&lt;/a&gt;」だけど、Gitとかわかんなくても死なないのは事実だな、と思いながら書いた記憶があります。&lt;/p&gt;

&lt;p&gt;ただ協力して作業する場合に、便利なサービスとしてGitHubをたくさんの人が使うようになると、Gitが使えない人は協力して作業するのが難しくなると思います。
そのコストを誰かが払ってでも一緒にものをつくれるのであれば、Gitとかわかんなくても生きていけると思うのでした。&lt;/p&gt;

&lt;p&gt;何を学ぶかは、誰と作りたいのか、何を作りたいのか、それをどうやって作るのか。&lt;/p&gt;

&lt;p&gt;僕はGitがないと仕事できないので、一緒につくりたい人のためにはGitの使い方なんていくらでも教える。&lt;/p&gt;

&lt;p&gt;マイノリティーが生きるのはどこへいっても辛いものです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>「プログラマのためのGulp入門」というLTをするはずだった</title>
          <link>https://blog.eiel.info/blog/2015/02/16/ltdd-11-gulp/</link>
          <pubDate>Mon, 16 Feb 2015 00:04:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/02/16/ltdd-11-gulp/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT駆動開発11&#34;&gt;LT駆動開発11&lt;/a&gt;で「プログラマのためのGulp入門」というLTをするはずだったんだけど、
思っていたより発表者がいたためお蔵入りしました。&lt;/p&gt;

&lt;p&gt;次回に回してもよかったんだけど、正直まとまっていないし、そもそもLTに収まらないのが明らかだったので、今回はさっさとスライドを公開することにした。&lt;/p&gt;

&lt;p&gt;そして内容をいそいそと現在Qiitaに書き下しております。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/eielh/items/0ed141c0bda3663872b7&#34;&gt;プログラマのためのGulp入門 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;796230c2638345ca97398e5a42c70919&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;今回、用意したLTがDockerとGulpって僕はいったいどこへ向かっているのかさっぱりわからない。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>LT駆動開発11で「 dockerをどこかで使う」という話をした</title>
          <link>https://blog.eiel.info/blog/2015/02/14/ltdd-11/</link>
          <pubDate>Sat, 14 Feb 2015 23:38:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/02/14/ltdd-11/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA11&#34;&gt;LT駆動開発11&lt;/a&gt;でライトニングトークをしました。&lt;/p&gt;

&lt;p&gt;LT駆動開発11は&lt;a href=&#34;http://osh-web.github.io/2015/&#34;&gt;オープンセミナー2015@広島&lt;/a&gt;の懇親会内で行われました。&lt;/p&gt;

&lt;p&gt;そういえば、「タイトルがつまらないと」言われましたが、Dockerなんていますごく盛り上がってるのにキャッチーなタイトルつけたら死んでしまいます。
まさかり怖い。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;150b79fe25574978b0642df9aa2ba30c&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Dockerいろいろつかってますが、すごく楽しいです。
Dockerつかってやりたいことも結構あります。&lt;/p&gt;

&lt;p&gt;Docker自体はまだ使わないだろうとおもってたんですが、ちょっとDocker使いたくなってどっぷり使っています。&lt;/p&gt;

&lt;p&gt;「Railsのアプリを開発するのにRubyをインストールする必要がなかったり、production環境でRailsアプリを動かすのにRubyやnodejsをインストールする必要がなかったり」
その辺すごく良いとおもったので、そのあたりを強調した話をしました。&lt;/p&gt;

&lt;p&gt;CI環境で使えないミドルウェアがあっても安心っすね。Werckerがあるけど。&lt;/p&gt;

&lt;p&gt;僕自身そんなに頭は良くないので、シンプルに考えることができるようになるプロダクトは好きです。
そのひとつはDockerでしょう。「Gitのコミットしてブランチが切っていれば良い」みたいな安心感があります。&lt;/p&gt;

&lt;p&gt;そういえば、このスライドの内容は遊びでつくってるサービスでもやってるのでご自由に閲覧ください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/parkmap-h/parkmap&#34;&gt;Github Parkmap-h/parkmap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そういえば、時間があまらなかったので、もう一個スライドがあまってるのでどう消化するか悩み中です。(どうでもいい)&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>再・オープンセミナー広島は広島のITエンジニアが集う場所</title>
          <link>https://blog.eiel.info/blog/2015/02/06/osh-2015/</link>
          <pubDate>Fri, 06 Feb 2015 12:08:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/02/06/osh-2015/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://osh-web.doorkeeper.jp/events/7534&#34;&gt;昨年のオープンセミナー広島&lt;/a&gt;の実行委員長です。今年は雑務担当です。こんにちは。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://osh-web.github.io/2015/&#34;&gt;2015年2月14日(土)オープンセミナー2015@広島&lt;/a&gt;が開催されます。&lt;/p&gt;

&lt;p&gt;そういえば前振りとして&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2015/01/10/chef-abc-on-test-kitchen/&#34;&gt;LT駆動開発10でTest KitchenではじめるChef入門という話をした。OSH2015のステマかもしれない。 - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という記事も書いていた。&lt;/p&gt;

&lt;p&gt;しかーし、イベントを来週に控えた2015年2月6日現在の&lt;strong&gt;申し込み人数は28名&lt;/strong&gt;だ。&lt;/p&gt;

&lt;p&gt;ちなみに去年の参加者は93名だったらしい。
ついでに、懇親会は41名の参加があったらしい。&lt;/p&gt;

&lt;p&gt;それはさておいて、去年こんなタイトルの記事を書いていた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/01/04/lets-take-part-in-osh/&#34;&gt;オープンセミナー広島は広島のITエンジニアが集う場所 - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;すこしだけ抜粋しよう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;テーマに興味なくても参加しようぜ&lt;/li&gt;
&lt;li&gt;本番は懇親会らしい&lt;/li&gt;
&lt;li&gt;将来の委員長が会いたい人を呼べるイベントになればいいのに&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同じことを書いても仕方ないので少し遊ぶ。&lt;/p&gt;

&lt;h3 id=&#34;テーマに興味なくても参加しようぜ:5057ad463aea1f8e7b47970ddd09171e&#34;&gt;テーマに興味なくても参加しようぜ&lt;/h3&gt;

&lt;p&gt;テーマってコミュニティに参加している人の好みへ流れるので、参加して「俺好みにしようぜ」という話を書いた。
特に大きいイベントに。&lt;/p&gt;

&lt;p&gt;結果、自分が好むテーマのイベントが増えていくと思う。
それ以前にコミュニティの人たちが興味をもってることだから何かしら役には立つとは思いたい。&lt;/p&gt;

&lt;p&gt;どうやらイベントがバレンタインデーなのがまずくて、参加したくても参加ができないのではないかと思う。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt; ITエンジニアはなんてリア充なんだ!! &amp;lt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;本番は懇親会らしい:5057ad463aea1f8e7b47970ddd09171e&#34;&gt;本番は懇親会らしい&lt;/h3&gt;

&lt;p&gt;セミナーで講師の話を聞くのが目的にしないで、刺激をうけた上で情報交換しようってのが裏の理由だろう。&lt;/p&gt;

&lt;p&gt;そんなことはおいておいて面白いライトニングトークをして欲しいのが建前だ。
面白ければどうでもいいのが本音である。(?)&lt;/p&gt;

&lt;p&gt;ということで、懇親会でLT駆動開発を行うことになった。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt; テーマは「打倒オープンセミナー」&amp;lt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ltdd.doorkeeper.jp/events/19716&#34;&gt;LT駆動開発 11 - 打倒オープンセミナー - LT駆動開発 | Doorkeeper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DockerかGulpの話をする予定だけど、時間が足りなくて別の話をするかもしれない。&lt;/p&gt;

&lt;h3 id=&#34;将来の委員長が会いたい人を呼べるイベントになればいいのに:5057ad463aea1f8e7b47970ddd09171e&#34;&gt;将来の委員長が会いたい人を呼べるイベントになればいいのに&lt;/h3&gt;

&lt;p&gt;スタッフもボランティアなのでなにかメリットがあって欲しい。
そういう話である。&lt;/p&gt;

&lt;p&gt;しかし、参加者が少ないイベントに協賛してもらうのも心苦しいので、そういった意味ではたくさん人が来て欲しい。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt; ボランティアメリットにはまずは協賛メリットとかつらい! &amp;lt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;まとめ:5057ad463aea1f8e7b47970ddd09171e&#34;&gt;まとめ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;別に島根から来てもいいんだぜ(ちらちら&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;岡山の人は何も言わなくても来るだろう。
もちろん鳥取、山口、福岡、香川、徳島、高知、愛媛もね。&lt;/p&gt;

&lt;p&gt;私もちょろちょろ遊びにいきます。&lt;/p&gt;

&lt;p&gt;仕事が楽しいセミナー旅行で、ITエンジニアは魔法使いで、子供の憧れるような職業になればいいと思う。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.adventar.org/calendars/619&#34;&gt;打倒デスマ。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この想いはどの辺りまで届くんだろうか。えいやっ!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt; オチが同じ!! &amp;lt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://osh-web.doorkeeper.jp/events/18561&#34;&gt;オープンセミナー2015@広島 - オープンセミナー広島 | Doorkeeper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>DockerでCMSの会 Vol.2に挑む - 準備編</title>
          <link>https://blog.eiel.info/blog/2015/01/26/cms-hands-on-2-with-docker/</link>
          <pubDate>Mon, 26 Jan 2015 18:01:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/01/26/cms-hands-on-2-with-docker/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://kawa-tani.com/cms-hands-on/&#34;&gt;CMSの会 Vol.2&lt;/a&gt;というイベントが2月7日(土)に広島で行われるらしい。
&lt;a href=&#34;http://www.a-blogcms.jp/&#34;&gt;a-blog CMS&lt;/a&gt;,&lt;a href=&#34;http://concrete5-japan.org/&#34;&gt;concrete5&lt;/a&gt;,&lt;a href=&#34;https://ja.wordpress.org/&#34;&gt;Wordpress&lt;/a&gt;の3つのCMSを使って、同一のウェブサイトを作成して、個々の長所短所を学べるらしい。&lt;/p&gt;

&lt;p&gt;こっちも確認しておくとよいだろう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kawa-tani.com/blog/?p=447&#34;&gt;川谷制作所 » CMSの会Vol.2をやります&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;さて、参加するかどうかは不明だが、参加条件に環境を準備をしてくる必要がある。
どうやって環境を用意するかと考えた結果。「&lt;strong&gt;ここはDockerしかない&lt;/strong&gt;」と思い、環境を整えてみた。&lt;/p&gt;

&lt;p&gt;実際に参加してみるとどんな問題にぶつかるかわからないので、参加する場合に参考にする場合は注意しておいたほうが良いでしょう。
事前にテキスト的なものがいただけたら確認はできるかもしれないが。&lt;/p&gt;

&lt;p&gt;さて本題。&lt;/p&gt;

&lt;p&gt;dockerがインストールされていれば以下のコマンドで環境を構築できる。
Windowsは想定していない。(そろそろOSが欲しいが空いてる64bitマシンもない)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d --name my-mysql -e MYSQL_ROOT_PASSWORD=&amp;quot;secret&amp;quot; eiel/mysql:concrete5
docker run -d --name my-wordpress --link my-mysql:mysql  -p 8001:80 -v `pwd`/wordpress:/var/www/html eiel/wordpress
docker run -d --name my-concrete5 --link my-mysql:mysql -p 8002:80 -v `pwd`/concrete5:/var/www/html eiel/concrete5
docker run -d --name my-acms --link my-mysql:mysql  -p 8003:80 -v `pwd`/acms:/var/www/html eiel/acms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;イメージをダウンロードするので時間がかかります。
二度目からはダウンロードの必要がないのでだいぶはやくなります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;wordpress&lt;/li&gt;
&lt;li&gt;concrete5&lt;/li&gt;
&lt;li&gt;acms&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の3つのディレクトリが作成されます。
それぞれのCMSの作業ディレクトリとなっていて必要なものが準備されています。&lt;/p&gt;

&lt;p&gt;CMSの動作を見るにはdockerの動いているホストのそれぞれのポートにアクセスすればOKです。&lt;/p&gt;

&lt;p&gt;boot2dockerを使っている場合はまずIPを確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ boot2docker config | grep LowerIP
LowerIP = &amp;quot;192.168.59.103&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IPが192.168.59.109だったと仮定すると&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wordpress &lt;a href=&#34;http://192.168.59.103:8001&#34;&gt;http://192.168.59.103:8001&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;concrete5 &lt;a href=&#34;http://192.168.59.103:8002&#34;&gt;http://192.168.59.103:8002&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;a-blog cMS &lt;a href=&#34;http://192.168.59.103:8003&#34;&gt;http://192.168.59.103:8003&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;でそれぞれ動作確認ができます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/2015-01-27/cms2.png&#34; alt=&#34;cms2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;動作を停止するには&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker stop my-wordpress my-concrete5 my-acms my-mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;です。&lt;/p&gt;

&lt;p&gt;再度、起動するには&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker start my-wordpress my-concrete5 my-acms my-mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となります。&lt;/p&gt;

&lt;p&gt;concrete5とa-blog CMSはデータベースの指定をしないといけません。
以下の情報を使ってください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ホスト名: mysql&lt;/li&gt;
&lt;li&gt;ユーザ名: root&lt;/li&gt;
&lt;li&gt;パスワード: secret&lt;/li&gt;
&lt;li&gt;データベース: concrete5 (ablogの場合は acms)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を指定してください。&lt;/p&gt;

&lt;p&gt;a-blog CMSのインストール後に&lt;code&gt;setup&lt;/code&gt;ディレクトリの移動をしますが、&lt;code&gt;_setup&lt;/code&gt;にしてください。
&lt;code&gt;_setup&lt;/code&gt;以外のものにすると&lt;code&gt;docker run&lt;/code&gt;をするときに&lt;code&gt;setup&lt;/code&gt;ディレクトリを作ってしまってまた移動させる必要があります。&lt;/p&gt;

&lt;h3 id=&#34;やりなおす:bec45c93b06e5dd3cadbcaaa13d1d387&#34;&gt;やりなおす&lt;/h3&gt;

&lt;p&gt;Dockerのイメージを取得したところからやりなおしたくなったら、以下でなおせます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker stop  my-wordpress my-concrete5 my-acms my-mysql | xargs docker rm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もう一度起動する場合は代わりありません。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d --name my-mysql -e MYSQL_ROOT_PASSWORD=&amp;quot;secret&amp;quot; eiel/mysql:concrete5
docker run -d --name my-wordpress --link my-mysql:mysql  -p 8001:80 -v `pwd`/wordpress:/var/www/html eiel/wordpress
docker run -d --name my-concrete5 --link my-mysql:mysql -p 8002:80 -v `pwd`/concrete5:/var/www/html eiel/concrete5
docker run -d --name my-acms --link my-mysql:mysql  -p 8003:80 -v `pwd`/acms:/var/www/html eiel/acms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;確実に10秒以上待つことになるのでのんびりお待ちください。&lt;/p&gt;

&lt;h3 id=&#34;もっと詳しく:bec45c93b06e5dd3cadbcaaa13d1d387&#34;&gt;もっと詳しく&lt;/h3&gt;

&lt;p&gt;それぞれのDockerfileは下記にあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eiel/docker-mysql&#34;&gt;https://github.com/eiel/docker-mysql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eiel/docker-wordpress-ja&#34;&gt;https://github.com/eiel/docker-wordpress-ja&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eiel/docker-concrete5&#34;&gt;https://github.com/eiel/docker-concrete5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eiel/docker-acms&#34;&gt;https://github.com/eiel/docker-acms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;eiel/mysqlは5.6を利用した場合concrete5のインストールに失敗したので少しカスタマイズしてあります。
sql-modeが&lt;code&gt;STRICT_TRANS_TABLES&lt;/code&gt;にならないように変更しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参考文献 &lt;a href=&#34;http://www.ah-2.com/2014/05/13/mysql56_mysql_install_db.html&#34;&gt;http://www.ah-2.com/2014/05/13/mysql56_mysql_install_db.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;wordpressは公式のものを流用していますが、 日本語版をインストールするように変更しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参考文献 &lt;a href=&#34;https://github.com/docker-library/wordpress&#34;&gt;https://github.com/docker-library/wordpress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;concrete5はWordpressのものを参考に作成しています。
-v をつけたときのパーミッションではまったのでapacheの起動ユーザを変更して対処しています。&lt;/p&gt;

&lt;p&gt;基本的にはDocker公式のWordpressのDockerfileを参考にして作成しています。&lt;/p&gt;

&lt;p&gt;eiel/wordpressは日本語版をインストールするように改造しています。
eiel/cnocrete5とeiel/acmsはそれを参考にちょろちょろいじっています。&lt;/p&gt;

&lt;p&gt;仮想マシンで何度も実行するのは大変だけどDockerはだいぶ楽ですね。
そろそろ何か本番でつかっていきたいところです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>LT駆動開発10で「Rubyistからみたnpm」という話をした。</title>
          <link>https://blog.eiel.info/blog/2015/01/10/npm-abc-for-rubyist/</link>
          <pubDate>Sat, 10 Jan 2015 18:52:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/01/10/npm-abc-for-rubyist/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA10&#34;&gt;LT駆動開発10&lt;/a&gt;で「Rubyistからみたnpm」という話をした。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;9961d6c07adc0132c0c22e2d526dbddf&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;このスライドは10月につくったのだけど、使う場面がなかったけど、今日は時間が余ってたので取り出しました。&lt;/p&gt;

&lt;p&gt;なんか微妙だった。まあ。いいや。
使ってみた上での認識です。&lt;/p&gt;

&lt;p&gt;参考になれば幸いです。&lt;/p&gt;

&lt;h1 id=&#34;関連:d8e7875209aacee2cecc6347dacbedc1&#34;&gt;関連&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2015/01/10/chef-abc-on-test-kitchen/&#34;&gt;LT駆動開発10でTest KitchenではじめるChef入門という話をした。OSH2015のステマかもしれない。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>LT駆動開発で「GitHubのリポジトリで先月のコミット一覧を見たい」という話をした</title>
          <link>https://blog.eiel.info/blog/2015/01/10/git-month-commits/</link>
          <pubDate>Sat, 10 Jan 2015 18:27:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/01/10/git-month-commits/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA10&#34;&gt;LT駆動開発10&lt;/a&gt;で最近つくったGemを紹介した。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;50b6d3907ad7013276ef56408e7781f2&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;作業しているGitリポジトリの先月の作業内容を閲覧するためにつくった。
GitHubのcompareのページをブラウザで開いてくれるGemだ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git month-commits open
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で使える。&lt;/p&gt;

&lt;p&gt;openをけずると git log を実行します。&lt;/p&gt;

&lt;p&gt;インストールは下記の通りである。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install git_month_commits
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;毎月やる作業を楽にするどうでも良いスクリプトである。&lt;/p&gt;

&lt;p&gt;コミットを探す簡単なスクリプトを用意してたのだけど、折角なのでrubyで書き直した。&lt;/p&gt;

&lt;p&gt;エコシステムが整備されてこういうのが気軽にインターネットにおけるようになったのは利点なのが問題点なのかわからないけど、楽しいので良いことにしよう。&lt;/p&gt;

&lt;p&gt;ちょっと改造すれば先週とか月指定とかにもできるけど要望があったら考えることにしよう。&lt;/p&gt;

&lt;h1 id=&#34;関連:bc475f5b203cea3d52b89b9d45d0246a&#34;&gt;関連&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eiel/git_month_commits&#34;&gt;eiel/git_month_commits · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2015/01/10/chef-abc-on-test-kitchen/&#34;&gt;LT駆動開発10でTest KitchenではじめるChef入門という話をした。OSH2015のステマかもしれない。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>LT駆動開発10でTest KitchenではじめるChef入門という話をした。OSH2015のステマかもしれない。</title>
          <link>https://blog.eiel.info/blog/2015/01/10/chef-abc-on-test-kitchen/</link>
          <pubDate>Sat, 10 Jan 2015 12:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2015/01/10/chef-abc-on-test-kitchen/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA10&#34;&gt;LT駆動開発10&lt;/a&gt;で「Test KitchenではじめるChef入門」という話をした。&lt;/p&gt;

&lt;p&gt;ちなみにこの記事は&lt;a href=&#34;http://osh-web.github.io/2015/&#34;&gt;オープンセミナー2015@広島&lt;/a&gt;のステマ記事でもある。&lt;/p&gt;

&lt;p&gt;また、&lt;a href=&#34;http://qiita.com/eielh/items/64e197f4f1eaf5ff6097&#34;&gt;「Test KitchenではじめるChef入門」はQiitaに投稿した記事である&lt;/a&gt;。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;ba236a70755b0132ffbd4aca611a7ac2&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Chefはちょいちょい使っていて、使いこなせてはいません。&lt;/p&gt;

&lt;p&gt;Cookbookを作成するときの環境で、Vagrantfileでやるのがよいのか、knife-zeroを使うのがいいのかいろいろ悩んでいた。
やっぱりテストコードを書きたいし、ますは&lt;a href=&#34;https://github.com/test-kitchen/test-kitchen&#34;&gt;Test Kitchen&lt;/a&gt;をいじっておこうと至るのは自然な道だと思う。&lt;/p&gt;

&lt;p&gt;Test Kitchenをいじっていると、そのままの環境でCookbookを書くのが良さそうだということに気づいた。
ならば、はじめからTest Kitchenを使いつつChefを学ぶのも良さそうだということで「Test KitchenではじめるChef入門」というネタを考えた。&lt;/p&gt;

&lt;p&gt;詳細はQiitaの記事を参照して欲しい。&lt;/p&gt;

&lt;p&gt;広島のみんなは&lt;a href=&#34;http://osh-2014.github.io/&#34;&gt;オープンセミナー2014@広島&lt;/a&gt;で&lt;a href=&#34;https://twitter.com/t_wada&#34;&gt;@t_wada&lt;/a&gt;さんに来てもらったことだし、何をはじめるにしてもテストコードをかく環境から導入したいはずだ。
きっと、Chefのテスト環境にみんな興味があるはずだ。(確信)(そんなわけはない)&lt;/p&gt;

&lt;p&gt;そういえば、&lt;a href=&#34;http://osh-web.github.io/2015/&#34;&gt;オープンセミナー2015@広島&lt;/a&gt;は2月14日が行なわれる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://osh-web.doorkeeper.jp/events/18561&#34;&gt;事前申し込みはこちらからできる&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;そして、みんなすごいChefを試していると思うんだけど、Chefの調べものをしていると、きっと&lt;a href=&#34;https://twitter.com/sawanoboly&#34;&gt;@sawanoboly&lt;/a&gt;さんを何度もみかけるはずだ。
代表的な記事をピックアップしてみよう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sawanoboly/items/4f363909615d8a76e9e5&#34;&gt;Ruby - Chefのローカルモードチュートリアル + knife-zero + knife-sakura - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sawanoboly/items/9f560bd63ad0712b17ba&#34;&gt;test-kitchenのつかいかた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sawanoboly/items/218a7b03ddec6be45e34&#34;&gt;Chefのローカルモードだけでリモートサーバを運用してみようと、Knife-Zeroを作った。Nodeの構成情報もとれるよ。 - Qiita&lt;/a&gt;
ところで、オープンセミナー2015@広島の講師に&lt;a href=&#34;https://twitter.com/sawanoboly&#34;&gt;@sawanoboly&lt;/a&gt;さんがいるように見えるのは僕の気のせいだろか。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Chefに限らず構成管理ツールの利用箇所は幅が広がりつつある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Packerをつかって各仮想環境のbox作成&lt;/li&gt;
&lt;li&gt;Vagrantのプロビション&lt;/li&gt;
&lt;li&gt;Dockerなどコンテナのプロビジョン&lt;/li&gt;
&lt;li&gt;WerkerのBox作成&lt;/li&gt;
&lt;li&gt;GitLabのインストーラ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あまり知らないけど、僕が知る限りでも、そこそこある。
もっとあるんじゃないかと思う。
構成管理ツールは運用する人たちののツールから開発をする人たちでも使われていくツールなるだろう。&lt;/p&gt;

&lt;p&gt;せっかく&lt;a href=&#34;https://twitter.com/sawanoboly&#34;&gt;@sawanoboly&lt;/a&gt;さんがいらいしゃるので、いまのうちにChefをしっかりいじっておきたいよね。&lt;/p&gt;

&lt;p&gt;他にも広島でChefをいじっている人いえば、&lt;a href=&#34;https://twitter.com/akira345&#34;&gt;@akira345&lt;/a&gt;さんとか、&lt;a href=&#34;https://twitter.com/k2works&#34;&gt;@k2works&lt;/a&gt;さんとか、&lt;a href=&#34;https://twitter.com/ogatomo&#34;&gt;@ogatomo&lt;/a&gt;さんとか、&lt;a href=&#34;https://twitter.com/moobay&#34;&gt;@moobay9&lt;/a&gt;さんとか、&lt;a href=&#34;https://twitter.com/pecosantoyobe&#34;&gt;@pecosantoyobe&lt;/a&gt;さんとかがいる。
Ansibleなら&lt;a href=&#34;https://twitter.com/soudai1025&#34;&gt;@soudai&lt;/a&gt;さんとか&lt;a href=&#34;https://twitter.com/24motz&#34;&gt;@24motz&lt;/a&gt;さんとか、&lt;a href=&#34;https://twitter.com/yukilab&#34;&gt;@yukilab&lt;/a&gt;さんとか、&lt;a href=&#34;https://twitter.com/NeXTSTEP2OSX&#34;&gt;@NeXTSTEP2OSX&lt;/a&gt;さんとかがいじっていると聞いている。&lt;/p&gt;

&lt;p&gt;たぶんTwitter IDを上げた人はほとんど参加するはずだ。間違いない。
名前を上げなかった人でもきっと何かしらの構成管理ツールを使っている人がたくさんいて遊びに来るはずだ。
&lt;a href=&#34;https://twitter.com/sawanoboly&#34;&gt;@sawanoboly&lt;/a&gt;さんが来るんだし、きっと間違いない。(自信なし)&lt;/p&gt;

&lt;p&gt;さあ、みんなでオープンセミナー2015@広島に集まって情報交換しよう。
構成管理に入門するタイミングとしては、この上はないはずだ。&lt;/p&gt;

&lt;p&gt;そういえば以前こんな記事を書いている人がいましたね。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/01/04/lets-take-part-in-osh/&#34;&gt;オープンセミナー広島は広島のITエンジニアが集う場所 - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;くりかえす。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://osh-web.github.io/2015/&#34;&gt;オープンセミナー2015@広島&lt;/a&gt;は2月14日だ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://osh-web.doorkeeper.jp/events/18561&#34;&gt;事前申し込みはこちらからできる&lt;/a&gt;ぞい。&lt;/p&gt;

&lt;p&gt;全く関係ないし、公式に受理されていないが、オープンセミナー2015@広島の懇親会の裏の名前はLT駆動開発11なる予定だ。&lt;/p&gt;

&lt;h1 id=&#34;関連:3c166a901741b69349f74cc2dabda17c&#34;&gt;関連&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://akira-junkbox.blogspot.jp/2014/12/2015.html&#34;&gt;JunkBox～主に個人的防備録～: オープンセミナー2015@広島を開催します！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>2014年を振り返る - まとめ編</title>
          <link>https://blog.eiel.info/blog/2014/12/31/2014-monthy/</link>
          <pubDate>Wed, 31 Dec 2014 18:42:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/12/31/2014-monthy/</guid>
          <description>

&lt;p&gt;2014年をふりかえりしようと思っていたら31日なっていた。&lt;/p&gt;

&lt;p&gt;今年は去年に引続きアウトプットは意識してやっているので分量が多い。
というわけで、分割しながらすすめた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/12/31/2014-slides/&#34;&gt;2014年を振り返る - スライド編 - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/12/31/2014-github/&#34;&gt;2014年を振り返る - GitHub編 - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/12/31/2014-blog/&#34;&gt;2014年を振り返る - ブログ編 - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;他にも軸を絞ってふりかえりしたいところである。&lt;/p&gt;

&lt;p&gt;2014年はコミュニティ活動が忙しかった印象が強いです。
来年は実を結んでいきたいところです。&lt;/p&gt;

&lt;p&gt;以下はじっくり1月からふりかえってみる&lt;/p&gt;

&lt;h3 id=&#34;1月:adc6a630db256bc7421163247f9e26e6&#34;&gt;1月&lt;/h3&gt;

&lt;p&gt;オープンセミナーの準備を進めながらiOSアプリの作成をがんばってた気がする。
忙しいから仕事を控えめにしようと思ったのに3つが同時進行する悪夢だった。
見積りしたら負けなんです。&lt;/p&gt;

&lt;p&gt;大学生にiOSアプリを教える会を見にいった。
そういったところにもうちょっとノウハウを提供したいとは思うけどなかなかうまくいかない。&lt;/p&gt;

&lt;h3 id=&#34;2月:adc6a630db256bc7421163247f9e26e6&#34;&gt;2月&lt;/h3&gt;

&lt;p&gt;実行委員長を務めた&lt;a href=&#34;http://osh-2014.github.io/&#34;&gt;オープンセミナー2014@広島&lt;/a&gt;が行なわれた。
期待した程度に参加者が集まってよかった。本当によかった。
来年も同じぐらい人が来ると素敵である。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://osh-web.github.io/2015/&#34;&gt;オープンセミナー2015@広島&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;オープンセミナーがうまくいったので、ちょっとがんばろうと思ったことを思い出した。&lt;/p&gt;

&lt;h3 id=&#34;3月:adc6a630db256bc7421163247f9e26e6&#34;&gt;3月&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://ltdd.doorkeeper.jp/&#34;&gt;LT駆動開発&lt;/a&gt;がスタートした。
カレンダーにはIT勉強会駆動と書いてあるのは秘密である。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://hiroshima.5374.jp/&#34;&gt;5374(ｺﾞﾐﾅｼ).jp for Hiroshima&lt;/a&gt;を作った。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://twiliomeetup.doorkeeper.jp/events/9078&#34;&gt;Twilio API 勉強会 @広島&lt;/a&gt;なんかのサポートもしていたようだ。&lt;/p&gt;

&lt;p&gt;月末はとにかく仕事をしていたくせに、&lt;a href=&#34;http://hirosimaokayamarb.doorkeeper.jp/events/8993&#34;&gt;広島・岡山Ruby勉強会&lt;/a&gt;に参加したりしてとにかくバタバタしていた。&lt;/p&gt;

&lt;h3 id=&#34;4月:adc6a630db256bc7421163247f9e26e6&#34;&gt;4月&lt;/h3&gt;

&lt;p&gt;前半は土日も仕事していて納期が多重に重なる罠にはまる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://cssnite.webtouchmeeting.com/vol8/&#34;&gt;CSS Nite in Hiroshima Vol.8&lt;/a&gt;の準備なんかがはじまる。&lt;/p&gt;

&lt;h3 id=&#34;5月:adc6a630db256bc7421163247f9e26e6&#34;&gt;5月&lt;/h3&gt;

&lt;p&gt;割と楽しくのんびり過ごした。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://oso.shibangawa.net/&#34;&gt;オープンセミナー2014@岡山&lt;/a&gt;に参加したり、&lt;a href=&#34;http://sukusuku-scrum-hiroshima.doorkeeper.jp/events/10366&#34;&gt;すくすくスクラム広島で長めのイベントがあったり&lt;/a&gt;、&lt;a href=&#34;http://jczero.doorkeeper.jp/&#34;&gt;JSer&amp;rsquo;s Cafe ZERO&lt;/a&gt;がスタートしたりした。&lt;/p&gt;

&lt;h3 id=&#34;6月:adc6a630db256bc7421163247f9e26e6&#34;&gt;6月&lt;/h3&gt;

&lt;p&gt;Rubotyで&lt;a href=&#34;https://twitter.com/great_hiroshima&#34;&gt;すごい広島BOT&lt;/a&gt;をつくった。&lt;/p&gt;

&lt;p&gt;仕事がくるくると聞いていたので空けていたのだけど、こなくてswiftで遊んでいた気がする。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://lab.kxds.net/&#34;&gt;Sketch 3勉強会&lt;/a&gt;とか手伝ったりした。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://devlove-hiroshima.doorkeeper.jp/events/11247&#34;&gt;DevLOVE広島　第一回（夏の陣）&lt;/a&gt;が開催されて登壇したりもした。&lt;/p&gt;

&lt;h3 id=&#34;7月:adc6a630db256bc7421163247f9e26e6&#34;&gt;7月&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://gaba.eiel.info/&#34;&gt;とある我馬の非公式(ファンサイト)&lt;/a&gt;を作成した。&lt;/p&gt;

&lt;p&gt;dockerで遊んでいた時期でもある。&lt;/p&gt;

&lt;p&gt;Atom Editoへの引っ越しを検討したが失敗に終わった。&lt;/p&gt;

&lt;h3 id=&#34;8月:adc6a630db256bc7421163247f9e26e6&#34;&gt;8月&lt;/h3&gt;

&lt;p&gt;A8D:2というイベントがあって万華鏡をつくったりした。&lt;/p&gt;

&lt;p&gt;広島市立大学のプログラミング同好会と交流もした。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://great-h.github.io/hirohata/&#34;&gt;ヒロハタを勝手に応援するサイト&lt;/a&gt;をはじめた。&lt;/p&gt;

&lt;h3 id=&#34;9月:adc6a630db256bc7421163247f9e26e6&#34;&gt;9月&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://gbdaitokai.doorkeeper.jp/events/12940&#34;&gt;座駆動LT大会&lt;/a&gt;に参加した。
GitHub APIで遊んでいた時期である。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ospn.jp/osc2014-hiroshima/&#34;&gt;オープンソースカンファレンス2014 Hiroshima&lt;/a&gt;があり、&lt;a href=&#34;http://great-h-book.eiel.info/&#34;&gt;すごいHiroshimaの本&lt;/a&gt;を作成した。&lt;/p&gt;

&lt;p&gt;その夜には&lt;a href=&#34;http://www.webtouchmeeting.com/meeting/2014/09/71web-touch-meeting.html&#34;&gt;WEB TOUCH MEETING #71&lt;/a&gt;が行われて登壇した。
翌日には&lt;a href=&#34;http://dbstudychugoku.github.io/events/event-005.html&#34;&gt;第五回　中国地方DB勉強会&lt;/a&gt;が行われてわけがわからない。&lt;/p&gt;

&lt;p&gt;このあたりで精神力が尽きていたと思われる。&lt;/p&gt;

&lt;h3 id=&#34;10月:adc6a630db256bc7421163247f9e26e6&#34;&gt;10月&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.pasonatech.co.jp/search/features_plan/RHhiroshima.jsp&#34;&gt;Red Hackthon Hiroshima&lt;/a&gt;に参加した。
さくっとアプリを作るにはどうしたらいいのか考えるようにもなった気がする。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://coworking-hiroshima.com/%E3%80%9010%E6%9C%8819%E6%97%A5%E3%80%91-%E5%BA%83%E5%B3%B6%EF%BD%89%EF%BD%94%E6%9C%AA%E6%9D%A5%E4%BC%9A%E8%AD%B0/&#34;&gt;広島IT未来会議&lt;/a&gt;が行なわれて、パネリストとして登場させてもらった。&lt;/p&gt;

&lt;p&gt;カメラを少しはじめた。&lt;/p&gt;

&lt;h3 id=&#34;11月:adc6a630db256bc7421163247f9e26e6&#34;&gt;11月&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/%E3%81%99%E3%81%94%E3%81%84%E5%90%88%E5%90%8C%E5%8B%89%E5%BC%B7%E4%BC%9A2014&#34;&gt;すごい合同勉強会&lt;/a&gt;を開催した。
たいへん盛り上がった。
来年もできると良いと思う。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://cssnite.webtouchmeeting.com/vol8/&#34;&gt;CSS Nite in HIROSHIMA, Vol.8&lt;/a&gt;を開催した。
イベントは最悪全部一人でもできるように準備するべきだと思った。
ボランティアベースで必須な項目を誰かに依存するととても困ったことになると感じた。&lt;/p&gt;

&lt;p&gt;ここで僕の2014年が終わった気がする。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.facebook.com/events/473514299457307/?ref_dashboard_filter=past&#34;&gt;広島のサークルを盛り上げよう！！第1回サークル交流勉強会&lt;/a&gt;に参加した。
若い子ががんばっていたので、応援していかなければならない使命感を感じた。&lt;/p&gt;

&lt;h3 id=&#34;12月:adc6a630db256bc7421163247f9e26e6&#34;&gt;12月&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.pref.hiroshima.lg.jp/soshiki/70/hiroshimabusinessideathon.html&#34;&gt;広島ビジネスアイデアソン&lt;/a&gt;に参加した。
オープンデータを活用するアイデアを考えるイベントでゲストがとても豪華だったと思う。
ちょっとスーツなイベントでもったいなかった。&lt;/p&gt;

&lt;p&gt;第２回の&lt;a href=&#34;http://www.pasonatech.co.jp/search/features_plan/201412RHhiroshima.jsp&#34;&gt;Red Hackathon Hiroshima&lt;/a&gt;に参加した。
ハッカソンというよりアイデアソンな結果だった気がする。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gbdaitokai.doorkeeper.jp/events/15289&#34;&gt;合同勉強会 in 大都会岡山 -2014 Winter-&lt;/a&gt;に参加して登壇した。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:adc6a630db256bc7421163247f9e26e6&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;そこそこの数のイベントに参加したり登壇したりして、つながりがさらに広がった一年だったと思う。
来年も大きな流れを作るきっかけになれたいいと思う。&lt;/p&gt;

&lt;p&gt;もうちょっと県外にいってみてもいいかなと思う。
九州とか関西にもアンテナを伸ばしていこうと思う。&lt;/p&gt;

&lt;p&gt;しかし、なんだか漏れているものがたくさんありそうだ…。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>2014年を振り返る - ブログ編</title>
          <link>https://blog.eiel.info/blog/2014/12/31/2014-blog/</link>
          <pubDate>Wed, 31 Dec 2014 17:47:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/12/31/2014-blog/</guid>
          <description>

&lt;p&gt;2014年をふりかえりしようと思っていたら31日なっていた。&lt;/p&gt;

&lt;p&gt;今年は去年に引続きアウトプットは意識してやっているので分量が多い。
というわけで、分割しながらいきます。&lt;/p&gt;

&lt;p&gt;というわけで本ブログをふりかえる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;記事数 84&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2013のほうが多い気がする。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;年間PV 12万&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;去年は8万PVで大きくは伸びてない。増加率としては落ちている。&lt;/p&gt;

&lt;h2 id=&#34;pvランキング:6269c3baddafb4f87c8340dfc2c6649c&#34;&gt;PVランキング&lt;/h2&gt;

&lt;p&gt;せっかくなのでPVランキングをつくっておこう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;10位 &lt;a href=&#34;http://blog.eiel.info/blog/2013/02/12/gherkin/&#34;&gt;Cucumber のフィーチャの文法 - Gherkin - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2013年の記事。個人的にはがんばった記憶がある。
これをかいてCucumberはだいぶ怖くなくなった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;9位 &lt;a href=&#34;http://blog.eiel.info/blog/2014/07/07/emoji-for-git-commit-message/&#34;&gt;コミットメッセージの先頭に絵文字いれるのが流行ってんだろうか&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;結局覚えられないのであんまりつかってない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;8位 &lt;a href=&#34;http://blog.eiel.info/blog/2013/10/03/billing-github/&#34;&gt;GitHub に課金した&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;課金するだけの話なのに…英語だと怖い人がたくさんいるのかな。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;7位 &lt;a href=&#34;http://blog.eiel.info/blog/2013/01/13/ios-autolayout-2/&#34;&gt;今後のiOSアプリケーションのために Auto Layout を学んだ - 内容編&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2013年の記事。AutoLayoutはまだまだ勉強不足です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;6位 &lt;a href=&#34;http://blog.eiel.info/blog/2013/02/06/how-to-use-github/&#34;&gt;Git がわからなくても Github を利用しよう&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2013年の1位の記事。まだまだ見てくれる人がいる模様。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;5位 &lt;a href=&#34;http://blog.eiel.info/blog/2013/09/07/autoload-rails/&#34;&gt;Rails の自動読み込みの話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2013年の記事。結構リンクしてもらったりしているので伸びている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;4位 &lt;a href=&#34;http://blog.eiel.info/blog/2013/07/31/gpg/&#34;&gt;GnuPG で遊ぶ - 暗号化してみる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GnuPGはもっとみんな使えばいいのにって思う。これも2013年の記事。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;3位 &lt;a href=&#34;http://blog.eiel.info/blog/2013/07/20/not-in-on-rails/&#34;&gt;Ruby on Rails で NOT IN な SQL をかく。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最近Rails4に以降した人が多いのかそこそこ伸びている。これも2013年だと…。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2位 &lt;a href=&#34;http://blog.eiel.info/blog/2013/05/13/how-to-enjoy-github/&#34;&gt;Github の楽しみ方&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2013年の2位記事。まだまだいける。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1位 &lt;a href=&#34;http://blog.eiel.info/blog/2013/02/17/github-pages/&#34;&gt;Github Pages について整理しておきます&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1位も2013年かよ!ってことで、実用性があるものはじわじわ伸びるみたいです。&lt;/p&gt;

&lt;p&gt;というわけで2014年の記事はとても影が薄い展開となりました。
検索からの流入が多いのでどうしても過去の記事が強い。&lt;/p&gt;

&lt;h2 id=&#34;はてぶランキング:6269c3baddafb4f87c8340dfc2c6649c&#34;&gt;はてぶランキング&lt;/h2&gt;

&lt;p&gt;こっちは2014年のものに限る。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;9位 11はてぶ &lt;a href=&#34;http://blog.eiel.info/blog/2014/02/20/confirmation-token-error-indevise/&#34;&gt;Devise で登録時にConfirmation Token が不正な値というエラー&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;gemのアップデートを更新した時の対策をかいただけのやつ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;9位 11はてぶ &lt;a href=&#34;http://blog.eiel.info/blog/2014/09/06/ltdd-07/&#34;&gt;LT駆動開発で hubot をつかったオフィスに誰がいるかわかるコマンドを作成した話をした&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とても便利な「おるか」コマンド。チャットが促進されます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;8位 14はてぶ &lt;a href=&#34;http://blog.eiel.info/blog/2014/02/14/hawk/&#34;&gt;手軽にHaskell できる hawk が楽しい&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;haskellネタは情報が少ないので当たりやすいのか。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;7位 15はてぶ &lt;a href=&#34;http://blog.eiel.info/blog/2014/07/10/abc-docker-hub/&#34;&gt;Docker Hub を少し試してきた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GitHubからDockerHubの流れを確認したくて試したやつ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;5位 25はてぶ &lt;a href=&#34;http://blog.eiel.info/blog/2014/07/07/great-bot-and-ruboty-ltdd/&#34;&gt;LT駆動開発で ruboty の使い方っぽいことを適当に紹介した&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;hubotクローンなruboty。あんまり記事をみなかったけど最近もりあがってる気がする。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;5位 25はてぶ &lt;a href=&#34;http://blog.eiel.info/blog/2014/07/18/action-view/&#34;&gt;ActionView を単体で使ってみる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ソースコードリーディングの成果物。
知っていると役に立つこともあるかもしれない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;4位 28はてぶ &lt;a href=&#34;http://blog.eiel.info/blog/2014/08/01/hatebu-kurashi/&#34;&gt;はてぶの暮らしで新着にのると闇が見れますね&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なんというか怖い世界が見えました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;3位 60はてぶ &lt;a href=&#34;http://blog.eiel.info/blog/2014/09/13/github-scouter/&#34;&gt;GitHub戦闘力を提案してみた - 座駆動LT大会&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一発ネタはやはり伸びない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2位 81はてぶ &lt;a href=&#34;http://blog.eiel.info/blog/2014/11/02/internal-definitia-great-study/&#34;&gt;内包表記について、すごい合同勉強会で話した&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大きめの舞台にもってきたネタが伸びてよかった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1位 98はてぶ &lt;a href=&#34;http://blog.eiel.info/blog/2014/07/07/emoji-for-git-commit-message/&#34;&gt;コミットメッセージの先頭に絵文字いれるのが流行ってんだろうか - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AdventCalendarか何かで同じこと書いてるのを最近みかけたのでつらい。&lt;/p&gt;

&lt;h3 id=&#34;せっかくなのでピックアップ:6269c3baddafb4f87c8340dfc2c6649c&#34;&gt;せっかくなのでピックアップ&lt;/h3&gt;

&lt;p&gt;個人的にふりかえってピックアップする。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/02/03/global-variable-with-option/&#34;&gt;Rubyのオプション変数というグローバル変数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;タイトルみてもまったく記憶になくてみなおした甲斐があった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/02/14/route53-iam/&#34;&gt;Route 53 の特定の Hosted Zone を IAM ユーザで設定できるようにしてみた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ちょっと前に権限を制約したもので&lt;a href=&#34;https://github.com/winebarrel/roadworker&#34;&gt;roadworker&lt;/a&gt;を使おうとしたら使えなくてなんとかしたいと思っていたりする。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/05/01/cucumber-turnip-spinach/&#34;&gt;CucumberとTurnipとSpinachと。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SpinachをしってからCucumberでいいかなとおもっていたりする。Turnipでやりたいならリクエストスペックかこうかなぁと。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/05/28/cotains-commit-in-tags/&#34;&gt;Git で特定のコミットがどのタグに含まれているか確認する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;よくわすれる。マージ業するなら便利。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/12/14/gbdaitokai2014-winter-color/&#34;&gt;黒背景に青文字はやめろという話を合同勉強会in大都会で話をした&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;伸びなすぎたので宣伝。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/12/24/reason-for-written-qiita/&#34;&gt;Oiitaと技術系ブログを書き分けることにした理由&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;割りとどうでもいいけど伸びなかったので宣伝。&lt;/p&gt;

&lt;h1 id=&#34;まとめ:6269c3baddafb4f87c8340dfc2c6649c&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;ふりかえってみた結果。スライドが増えた分内容が減った印象があります。
来年はもっと減るんじゃないかなと思います。&lt;/p&gt;

&lt;h1 id=&#34;関連:6269c3baddafb4f87c8340dfc2c6649c&#34;&gt;関連&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/12/31/2014-github/&#34;&gt;2014年を振り返る - GitHub編 - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/12/31/2014-slides/&#34;&gt;2014年を振り返る - スライド編 - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>2014年を振り返る - GitHub編</title>
          <link>https://blog.eiel.info/blog/2014/12/31/2014-github/</link>
          <pubDate>Wed, 31 Dec 2014 16:08:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/12/31/2014-github/</guid>
          <description>

&lt;p&gt;2014年をふりかえりしようと思っていたら31日なっていた。&lt;/p&gt;

&lt;p&gt;今年は去年に引続きアウトプットは意識してやっているので分量が多い。
というわけで、分割しながらいきます。&lt;/p&gt;

&lt;p&gt;今回はGitHubのリポジトリを辿ってみた。
いっぱいしょうもないリポジトリをつくっていた。&lt;/p&gt;

&lt;p&gt;40個近く新しいリポジトリを作成していたようです。&lt;/p&gt;

&lt;h3 id=&#34;cpphiroshima-1:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;CppHiroshima-1&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/CppHiroshima-1&#34;&gt;https://github.com/eiel/CppHiroshima-1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://partake.in/events/5ddde1fe-88b7-4541-9f37-02cf4fa0284c&#34;&gt;C++勉強会in広島&lt;/a&gt;でスライドをつくるのに試したコードを置いている。
CppUTestというのを試した。&lt;/p&gt;

&lt;h3 id=&#34;cookbook-munin-example:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;cookbook-munin-example&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/cookbook-munin-example&#34;&gt;https://github.com/eiel/cookbook-munin-example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Chefを試すのにまずはリソースチェックかなということでmuninをインストールしてみて遊んでみたやつだ。&lt;/p&gt;

&lt;h3 id=&#34;ios-camerasample:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;iOS-CameraSample&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/iOS-CameraSample&#34;&gt;https://github.com/eiel/iOS-CameraSample&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;iOSプログラミングを大学生に教えるイベントに参加して、その時に学生と一緒につくったプログラムのソースコード&lt;/p&gt;

&lt;h3 id=&#34;actiontemplate:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;ActionTemplate&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/ActionTemplate&#34;&gt;https://github.com/eiel/ActionTemplate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;RailsのAbstractControllerを単体で使ってみたくて試した時のソースコードです。&lt;/p&gt;

&lt;h3 id=&#34;5374-csv-generator-in-hiroshima:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;5374-csv-generator-in-hiroshima&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/great-h/5374-csv-generator-in-hiroshima&#34;&gt;https://github.com/great-h/5374-csv-generator-in-hiroshima&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://hiroshima.5374.jp/&#34;&gt;hiroshima.5374.jp&lt;/a&gt;をつくるのにHTMLをスクレイピングしてCSVをつくるのに使ったスクリプトです。&lt;/p&gt;

&lt;h3 id=&#34;chef-porxy:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;chef-porxy&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/chef-proxy&#34;&gt;https://github.com/eiel/chef-proxy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;squidの動作確認をするのにつかったchefのcookbookです。&lt;/p&gt;

&lt;h3 id=&#34;keynotes-eiel:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;keynotes-eiel&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/keynotes-eiel&#34;&gt;https://github.com/eiel/keynotes-eiel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://keynotes.eiel.info/&#34;&gt;http://keynotes.eiel.info/&lt;/a&gt; のindex.htmlを作成してS3にアップロードするスクリプトです。
Haskellでかきました。&lt;/p&gt;

&lt;h3 id=&#34;jekyll-ention-test:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;jekyll-ention-test&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/jekyll-mention-test&#34;&gt;https://github.com/eiel/jekyll-mention-test&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GitHub Pages で jekyll-mentionが使えるようになっていたので動作確認に使ったものです。&lt;/p&gt;

&lt;h3 id=&#34;uidynamicssample:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;UIDynamicsSample&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/UIDynamicsSample&#34;&gt;https://github.com/eiel/UIDynamicsSample&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;iOS6あたりで追加されたUIDynamicsをつかったサンプルコードです。&lt;/p&gt;

&lt;h2 id=&#34;my-hubot:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;my-hubot&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/my-hubot&#34;&gt;https://github.com/eiel/my-hubot&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;idobataにつかってるhubotのソースコードです。&lt;/p&gt;

&lt;h3 id=&#34;wpho-30-typescript:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;wpho-30-typescript&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/wpho-30-typescript&#34;&gt;https://github.com/eiel/wpho-30-typescript&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;WindowsPhoneハンズオンでtypescriptのハンズオンをしたときのソースコードです。&lt;/p&gt;

&lt;h3 id=&#34;great-bot:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;great-bot&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/great-h/great-bot&#34;&gt;https://github.com/great-h/great-bot&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/great_hiroshima&#34;&gt;すごい広島のTwitterアカウント&lt;/a&gt;の中の人です。
&lt;a href=&#34;https://github.com/r7kamura/ruboty&#34;&gt;Ruboty&lt;/a&gt;でつくっています。&lt;/p&gt;

&lt;h3 id=&#34;vagrant-up-with-wordpress:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;vagrant-up-with-wordpress&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/vagrant-up-with-wordpress&#34;&gt;https://github.com/eiel/vagrant-up-with-wordpress&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;vagrant up したら wordpressの環境が整って欲しかったのでつくったVagrantfileです。&lt;/p&gt;

&lt;h3 id=&#34;kaleidoscope:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;kaleidoscope&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Augment8/kaleidoscope&#34;&gt;https://github.com/Augment8/kaleidoscope&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Swiftがベータの時につくった万華鏡です。
A8D:2というイベントのために作りました。&lt;/p&gt;

&lt;h3 id=&#34;docker:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;docker&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/docker-bannar&#34;&gt;https://github.com/eiel/docker-bannar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;dockerがはやっていたのでdockerで遊んだときのサンプルです。&lt;/p&gt;

&lt;h3 id=&#34;docker-development-environment:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;docker-development_environment&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/docker-development_environment&#34;&gt;https://github.com/eiel/docker-development_environment&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;dockerで開発環境が作れないか試行錯誤した時のものです。&lt;/p&gt;

&lt;h3 id=&#34;docker-portage:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;docker-portage&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/docker-portage&#34;&gt;https://github.com/eiel/docker-portage&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;最新のportageをいれたdocckerイメージがつくれるようにしたdockerfileです。&lt;/p&gt;

&lt;h3 id=&#34;use-actionview:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;use-actionview&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/use-actionview&#34;&gt;https://github.com/eiel/use-actionview&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;勉強のためにRailsのActionViewを単体でつかってみたくて試したときのサンプルコードです。&lt;/p&gt;

&lt;h3 id=&#34;gaba:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;gaba&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/gaba&#34;&gt;https://github.com/eiel/gaba&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.gaba-2000.com/&#34;&gt;ラーメン屋我馬の公式サイト&lt;/a&gt;の更新情報を取得できるgabaコマンドを提供するgaba-gemの中身です。&lt;/p&gt;

&lt;h3 id=&#34;gaba-eiel-info:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;gaba.eiel.info&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/gaba.eiel.info&#34;&gt;https://github.com/eiel/gaba.eiel.info&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gaba.eiel.info/&#34;&gt;とある我馬の非公式&lt;/a&gt;のソースコードです。&lt;/p&gt;

&lt;h3 id=&#34;wpho-31-typescript2:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;wpho-31-typescript2&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/wpho-31-typescript2&#34;&gt;https://github.com/eiel/wpho-31-typescript2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;WindowsPhoneハンズオン31回でかいたサンプルコードです。
今回もtypescriptでした。&lt;/p&gt;

&lt;h3 id=&#34;rails-template-eiel:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;rails_template-eiel&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/rails_template-eiel&#34;&gt;https://github.com/eiel/rails_template-eiel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;自分がつかっているRails Application Templateです。&lt;/p&gt;

&lt;h3 id=&#34;eiel-info:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;eiel.info&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/eiel.info&#34;&gt;https://github.com/eiel/eiel.info&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://eiel.info&#34;&gt;eiel.info&lt;/a&gt;の中身です。
自分のウェブサイトです。&lt;/p&gt;

&lt;h3 id=&#34;itunes-information-slack:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;itunes_information_slack&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/itunes_information_slack&#34;&gt;https://github.com/eiel/itunes_information_slack&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;現在itunesで再生している曲をslackにおくりつけるスクリプトです。&lt;/p&gt;

&lt;h3 id=&#34;hirohata-reporter:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;hirohata-reporter&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/great-h/hirohata-reporter&#34;&gt;https://github.com/great-h/hirohata-reporter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.facebook.com/hirohatap&#34;&gt;ヒロハタ&lt;/a&gt;の参加者の情報を収集するためのスクリプトです。&lt;/p&gt;

&lt;h3 id=&#34;hirohata:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;hirohata&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/great-h/hirohata&#34;&gt;https://github.com/great-h/hirohata&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;hirohata-reporterをつかって収集した情報を公開している&lt;a href=&#34;http://great-h.github.io/hirohata/&#34;&gt;ヒロハタを勝手に応援するサイト&lt;/a&gt;の中身です。&lt;/p&gt;

&lt;h3 id=&#34;wercker-box-review:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;wercker-box-review&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/wercker-box-review&#34;&gt;https://github.com/eiel/wercker-box-review&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://wercker.com/&#34;&gt;Wercker&lt;/a&gt;でRe:viewをつかった電子書籍をコンパイルするのにつくったboxです。&lt;/p&gt;

&lt;h3 id=&#34;github-scouter:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;github_scouter&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/github_scouter&#34;&gt;https://github.com/eiel/github_scouter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/09/13/github-scouter/&#34;&gt;GitHub戦闘力&lt;/a&gt;を計測できるスクリプトです。&lt;/p&gt;

&lt;h3 id=&#34;ltdd-shuffler:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;ltdd_shuffler&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/ltdd_shuffler&#34;&gt;https://github.com/LTDD/ltdd_shuffler&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LT駆動で喋る順番を決めるのがめんどくさくなってシャッフルするために書いたスクリプトです。&lt;/p&gt;

&lt;h3 id=&#34;modified-update-rails-sample:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;modified-update-rails-sample&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/modified-update-rails-sample&#34;&gt;https://github.com/eiel/modified-update-rails-sample&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;友人にActiveRecord(ActiveModel)のbefore_updateについて説明するのに書いたサンプルコードです。&lt;/p&gt;

&lt;h3 id=&#34;quim:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;quim&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/quim&#34;&gt;https://github.com/eiel/quim&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Eメールを管理するためのウェブアプリケーション。タグをつけて、特定の人にだけメールを送れたりする。
絞り込みをウェブインターフェースとして提供できなくて&lt;code&gt;rails c&lt;/code&gt;をつかって調整して使っているのは秘密だ。&lt;/p&gt;

&lt;h3 id=&#34;eiel-logo:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;eiel-logo&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/eiel-logo&#34;&gt;https://github.com/eiel/eiel-logo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;自分の名刺につかっているロゴです。
作ってもらった。感謝感激。&lt;/p&gt;

&lt;h3 id=&#34;circleci-notify:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;circleci_notify&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/circleci_notify&#34;&gt;https://github.com/eiel/circleci_notify&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CircleCIから通知しやすくすろに書いたGemなんだけど、アダプターがチャットワークしかつくってない。&lt;/p&gt;

&lt;h3 id=&#34;browserify-sample:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;browserify-sample&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/browserify-sample&#34;&gt;https://github.com/eiel/browserify-sample&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;browserifyというクライアントサイドでnodeモジュールが使えるようになるライブラリを試した時のサンプルコード。&lt;/p&gt;

&lt;h3 id=&#34;gulp-assemble-abc:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;gulp-assemble-abc&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/gulp-assemble-abc&#34;&gt;https://github.com/eiel/gulp-assemble-abc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;gulp で静的サイトジェネレータするのにassembleをつかってみたというサンプルコード。&lt;/p&gt;

&lt;h3 id=&#34;gulp-assemble-template:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;gulp-assemble-template&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/gulp-assemble-template&#34;&gt;https://github.com/eiel/gulp-assemble-template&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;gulp で静的サイトジェレートするためのGulpfileがおいてある。&lt;/p&gt;

&lt;h3 id=&#34;color-schemes:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;color-schemes&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/color-schemes&#34;&gt;https://github.com/eiel/color-schemes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;自分のつかっている配色データをおいておこうかとおもってつくったリポジトリ。&lt;/p&gt;

&lt;h3 id=&#34;great-mile:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;great-mile&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/great-h/great-mile&#34;&gt;https://github.com/great-h/great-mile&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;すごい広島のやること宣言を俯瞰するためにつくっているサービス。&lt;/p&gt;

&lt;h1 id=&#34;まとめ:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;みんなGitHubはゴミ箱じゃないぞ!&lt;/p&gt;

&lt;h1 id=&#34;関連:8f1c59f23b2db8e18a32f29b95558e7a&#34;&gt;関連&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/12/31/2014-slides/&#34;&gt;2014年を振り返る - スライド編 - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/12/31/2014-blog/&#34;&gt;2014年を振り返る - ブログ編 - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>2014年を振り返る - スライド編</title>
          <link>https://blog.eiel.info/blog/2014/12/31/2014-slides/</link>
          <pubDate>Wed, 31 Dec 2014 14:47:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/12/31/2014-slides/</guid>
          <description>

&lt;p&gt;2014年をふりかえりしようと思っていたら31日なっていた。&lt;/p&gt;

&lt;p&gt;今年は去年に引続きアウトプットは意識してやっているので分量が多い。
というわけで、分割しながらいきます。&lt;/p&gt;

&lt;p&gt;まずは公開したスライドから。&lt;/p&gt;

&lt;p&gt;今年はspeakerdeckにしかスライドをアップロードしていない。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/eiel&#34;&gt;https://speakerdeck.com/eiel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ざっと確認したところ34個のスライドを公開したようです。&lt;/p&gt;

&lt;p&gt;途中からkeynoteのファイルも以下で全て公開しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://keynotes.eiel.info/&#34;&gt;http://keynotes.eiel.info/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;ざっくり:abc927439e085197f773489d22910400&#34;&gt;ざっくり&lt;/h3&gt;

&lt;p&gt;主に2014年3月からはじまった&lt;a href=&#34;http://ltdd.doorkeeper.jp/&#34;&gt;LT駆動開発&lt;/a&gt;のせいで毎月スライドを二つ作ったりしたせいで30越えになった。
分割したのに、とても振り返ることのできる分量ではない気がする。&lt;/p&gt;

&lt;p&gt;仕事が忙しかった4月が一番少なく、一番仕事を避けていた9月が一番多い結果になった。
9月だけで8個あってわけがわからない。そういえば9月なんも仕事をした記憶がなかったのはこのせいだろう。&lt;/p&gt;

&lt;h1 id=&#34;いくつか紹介する:abc927439e085197f773489d22910400&#34;&gt;いくつか紹介する&lt;/h1&gt;

&lt;h3 id=&#34;オープンセミナー2014-広島の実行委員長になったので-完全版:abc927439e085197f773489d22910400&#34;&gt;オープンセミナー2014@広島の実行委員長になったので…完全版&lt;/h3&gt;

&lt;p&gt;主に2013年のふりかえりの結果を整理したスライド。
2013年はスライドを23個つくっていたことがわかった。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;d04a296071f801316b633e3e0c4ab66b&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;そいや今回のオープンセミナーの申し込みに事前アンケートをつくり忘れていることにも気づいた。
今回は私はただの下っ端ですが、目標は120人ぐらいなので、みんな申し込みしてください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://osh-web.doorkeeper.jp/events/18561&#34;&gt;オープンセミナー2015@広島 - オープンセミナー広島 | Doorkeeper&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;ciのある生活:abc927439e085197f773489d22910400&#34;&gt;CIのある生活&lt;/h3&gt;

&lt;p&gt;第1回のLT駆動開発用に対象者をウェブをやっている人まで引き下げたつもりでつくったスライド。
しかし、イベントの時間があまらなかったので大幅縮小で実質お蔵入りである。&lt;/p&gt;

&lt;p&gt;今みなおすと、長い。長いよ…。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;af93ee90836f0131cf5b265e09c13f13&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/03/03/ci-in-ltdd/&#34;&gt;LT駆動開発で「CI のある生活」という話をするはずだった - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;actiondispatch-ってなんだろう:abc927439e085197f773489d22910400&#34;&gt;ActionDispatch ってなんだろう？&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://hirosimaokayamarb.doorkeeper.jp/events/8993&#34;&gt;広島岡山Ruby交流会 01&lt;/a&gt;のためにつくったスライド。
RailsのActionDispatchがどういうものが自分でイメージできるようになっていたので整理した。&lt;/p&gt;

&lt;p&gt;Railsのアーキテクチャは無駄にがんばったがあっているか謎だ。
コアにはrackがいて、小さなラックアプリケーションへ橋渡しをする大きなラックアプリケーションがActionDIspatchである。
ルーティングをしているだけともいえる。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;97426d70998c013115765a48c3b99610&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/eiel/actiondispatch-tutenandarou&#34;&gt;ActionDispatch ってなんだろう？ // Speaker Deck&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;s3にスライドを保存することにした:abc927439e085197f773489d22910400&#34;&gt;S3にスライドを保存することにした&lt;/h3&gt;

&lt;p&gt;スライドって一度つくったらなおすことないしS3に保存するかーってことではじめてAWSのAPIを叩いて感動したので、HaskellでS3のAPIを叩いて遊んだ話である。
PVはあまり伸びなかった。(あたり前)&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;0917d000b4c40131d8ee7625813d8974&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/05/03/ltdd-03-s3/&#34;&gt;LT駆動開発03で「S3にスライドを保存することにした」という発表者をしてきた。 - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;継続は力になるのか:abc927439e085197f773489d22910400&#34;&gt;継続は力になるのか&lt;/h3&gt;

&lt;p&gt;結構反響があったスライドだけど、当日はあんまみんな話を聞いてなかった気がする記憶。&lt;/p&gt;

&lt;p&gt;日々続けることで身につく力はすごいと思う。&lt;/p&gt;

&lt;p&gt;途中にいれたツイートがおもったより伸びない。(仕方ない)&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;3f7575c0c1940131c12706a532522dbf&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/05/19/open-seminar-2014-at-okayama/&#34;&gt;オープンセミナー2014@岡山に参加した。ついでに懇親会で継続することについてLTした。 - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;愛無双-エンジニアリングの楽しさ:abc927439e085197f773489d22910400&#34;&gt;愛無双 - エンジニアリングの楽しさ&lt;/h3&gt;

&lt;p&gt;DevLOVE広島 第一回でエンジニアリングの楽しさを語るという使命の元に作成したもの。
実はかなり悩んだので作るのにつかった時間はかなりかかっている。
しかし、全然伸びなかった子なので見てない人はみて欲しいところ。&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re so Happyをめざしたい。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;0c4650b0dca20131b4bb7abe6293b58c&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/06/23/devlove-in-hiroshima-01/&#34;&gt;DevLOVE広島　第一回（夏の陣） でエンジニアリングの楽しさについて喋らされた - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;誰がおるんか:abc927439e085197f773489d22910400&#34;&gt;誰がおるんか&lt;/h3&gt;

&lt;p&gt;オフィスに誰がいるのかチャットツールでわかったら便利だよなーってことでそういうコマンドをつくった。
それを話した内容。
今も便利に活用している。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;78832e3017df013292f406657be3bf12&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/09/06/ltdd-07/&#34;&gt;LT駆動開発で hubot をつかったオフィスに誰がいるかわかるコマンドを作成した話をした - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;戦闘力:abc927439e085197f773489d22910400&#34;&gt;戦闘力&lt;/h3&gt;

&lt;p&gt;GitHub戦闘力を提案してみた。
今年もっともPVが多いスライド。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;9f557cd01d560132ff4612198c64cd5d&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/09/13/github-scouter/&#34;&gt;GitHub戦闘力を提案してみた - 座駆動LT大会 - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;電子書籍に挑戦した-その時に利用した技術のさわりを紹介:abc927439e085197f773489d22910400&#34;&gt;電子書籍に挑戦した。その時に利用した技術のさわりを紹介&lt;/h3&gt;

&lt;p&gt;対象者設定に失敗したあのスライド。
OSC広島に展示するのに電子書籍を作成した時の話をした。
こういうのが流行してるよ感でキーワードを伝えるだけの目的だったけど速すぎた思い出が残っています。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;5010f1e023630132a9090a763f010e40&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/09/21/great-h-book-osc-2014-and-wtm71/&#34;&gt;すごいHirohsimaの本について、OSC2014とWTM71で紹介した - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;内包表記-仮:abc927439e085197f773489d22910400&#34;&gt;内包表記(仮)&lt;/h3&gt;

&lt;p&gt;モナドの内包表記をしってからやろうと思ってたネタを放出した。
広島のITコミュニティの合同勉強会という立ち位置のイベントだったけど、もっといろんなコミュニティと協力したかった。
これも結構伸びた子である。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;7cb24810446c0132e04e4e24d1028d6d&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/eiel/nei-bao-biao-ji-jia&#34;&gt;内包表記(仮) // Speaker Deck&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;黒背景に青文字はやめろ:abc927439e085197f773489d22910400&#34;&gt;黒背景に青文字はやめろ&lt;/h3&gt;

&lt;p&gt;出オチと言われたアレ。
インターネット上にはあまり拡散されなかった子。
まあ中身があんまりないしね。&lt;/p&gt;

&lt;p&gt;個人的にはまあまあ気に入っている。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;6bc3a81065840132d6705e4dc25c732c&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/12/14/gbdaitokai2014-winter-color/&#34;&gt;黒背景に青文字はやめろという話を合同勉強会in大都会で話をした。 - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;まとめ:abc927439e085197f773489d22910400&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;いっぱいセッションした。
しかし、やっぱり喋るのは苦手なのはあまり治らない。&lt;/p&gt;

&lt;p&gt;ダメな部分は意識して挑戦していきたいと思う。&lt;/p&gt;

&lt;p&gt;来年は控えめになると思います。たぶん。&lt;/p&gt;

&lt;h1 id=&#34;関連:abc927439e085197f773489d22910400&#34;&gt;関連&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/12/31/2014-github/&#34;&gt;2014年を振り返る - GitHub編 - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/12/31/2014-blog/&#34;&gt;2014年を振り返る - ブログ編 - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Oiitaと技術系ブログを書き分けることにした理由</title>
          <link>https://blog.eiel.info/blog/2014/12/24/reason-for-written-qiita/</link>
          <pubDate>Wed, 24 Dec 2014 18:35:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/12/24/reason-for-written-qiita/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://qiita.com/&#34;&gt;Qiita&lt;/a&gt;をどのように使うのか迷っていたのだけど、答えが出たのでQiitaも使うことにした。
結論から書くと「&lt;strong&gt;読者のことを考えた上で書き分ける&lt;/strong&gt;」ことにした。&lt;/p&gt;

&lt;p&gt;そんなわけで、昨日はじめてQiitaに投稿した。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/eielh/items/8b9f86a980b08125eb93&#34;&gt;oh-my-fishではじめるfish - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;読者にとって、書いた内容がQiitaのほうが読みやすいのであればQiitaに書くことにした。
そうではなく、そこから漏れてしまったことはこのブログに書くことにする。&lt;/p&gt;

&lt;p&gt;「読者のことを考える」は文章を書く上でとても大切なことです。
数学文書作法で、&lt;a href=&#34;http://twitter.com/hyuki&#34;&gt;結城先生&lt;/a&gt;がとても大切なこととして説明されています。&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=eiel-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=448009525X&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=eiel-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4480095268&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;この記事の目次。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Qiitaに書いたほうが良いこと&lt;/li&gt;
&lt;li&gt;Qiitaに書いても広告収入は増えないけど&lt;/li&gt;
&lt;li&gt;その他雑多なこと&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;qiitaに書いたほうが良いこと:0d118b3fff807f1aa2e968604181be64&#34;&gt;Qiitaに書いたほうが良いこと&lt;/h3&gt;

&lt;p&gt;Qiitaに書いたほうが良いものはなんだろうか。&lt;/p&gt;

&lt;p&gt;Oiitaはプログラミングに関する知識を記録、共有するサービスです。
ということは、プログラミングに関する知識を閲覧するのに、私が何もしなくても、日々読みやすくなっていくと考えることができます。
自分のブログをもっと読みやすくしていくこともできますが、この労力を捻出することはなかなか難しいです。&lt;/p&gt;

&lt;p&gt;しかし、このブログにいつも書いていたことが、Qiitaでも書けるかというと、そうでもない記事もいくつかあることに気づきました。
本記事もそうだし、どこそこでLTしたなんかもそうだし、あれを作った、というのもQiitaには書ける気がしない。&lt;/p&gt;

&lt;p&gt;書きたいことが浮かんだ時に、何を伝えたいのか明確だったらQiita書くと思う。&lt;/p&gt;

&lt;p&gt;Qiitaでタグをフォロしている人はどんな情報を読みたいだろうか。
そのタグに関する有益な情報を読みたいはずです。&lt;/p&gt;

&lt;p&gt;少し話はずれるけど、&lt;a href=&#34;note.mu/eiel&#34;&gt;note&lt;/a&gt;に文章を投稿する場合も同様で、何か伝えたいことがあってすごく強い時でジャンルが技術系ではない場合に使っています。&lt;/p&gt;

&lt;p&gt;書く場所を変えることで、文章を書く時の気持ちを切り換えもできます。&lt;/p&gt;

&lt;h3 id=&#34;qiitaに書いても広告収入は増えないけど:0d118b3fff807f1aa2e968604181be64&#34;&gt;Qiitaに書いても広告収入は増えないけど&lt;/h3&gt;

&lt;p&gt;そもそもなぜQiitaに書かないのかを考えると、どっちでもいいならこのブログに書けば広告収入が増える可能性があるからだろう。&lt;/p&gt;

&lt;p&gt;これからQiitaに書くだろう記事をこのブログに書けば、このブログからの広告収入は増えるだろう。
しかし、技術系の広告収入なんて雀の涙で、せいぜいサーバの運用費ぐらいにしかならない。&lt;/p&gt;

&lt;p&gt;あまり気にすることではない。&lt;/p&gt;

&lt;p&gt;読者のことを考えて良いと思う選択をするほうが、いつかもっと大きな利益になって還元されるんじゃないだろうか。
目先のメリットに囚われるな。&lt;/p&gt;

&lt;p&gt;そもそも広告収入で生活したいならもっと別のことをすべきだし、そっちのほうが効率が良いはずだ。&lt;/p&gt;

&lt;h3 id=&#34;その他雑多なこと:0d118b3fff807f1aa2e968604181be64&#34;&gt;その他雑多なこと&lt;/h3&gt;

&lt;p&gt;過去に書いた記事を整理してQiitaに書きなおしたりすることもあると思う。
その際には自分のブログから引用にしたり参考文献にはったりすることもできる。
ハイパーメディアの特徴を生かせたら良いと思う。&lt;/p&gt;

&lt;p&gt;Qiitaだけでなくて他のサービスも使い方にも悩む。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ja.stackoverflow.com/&#34;&gt;スタックオーバーフロー&lt;/a&gt;を今から調べたいことを質問しておいて、作業をすすめるとアドバイスしてくれる人がいて捗りそうな気がしている。
「アドバイスがくる前に解決したら自分で回答する」みたいな使い方もありなのか検討していたりする。&lt;/p&gt;

&lt;p&gt;ますますブログにかくことがなくなりそうではある。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:0d118b3fff807f1aa2e968604181be64&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;整理されたドキュメントや何か伝えたいことがあればQiitaも使っていこうと思う。
そこから漏れてしまう書いておきたい技術メモはこのブログにかいていく。&lt;/p&gt;

&lt;p&gt;現時点でQiitaに書かないこと。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;どこかのイベントでセッションをしたこと&lt;/li&gt;
&lt;li&gt;バグをみつけた、一時的な回避方法&lt;/li&gt;
&lt;li&gt;ライブラリやウェブサービスやウェブアプリケーションを作成した&lt;/li&gt;
&lt;li&gt;ちょっと確認しただけの書き捨てたメモ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ということで、Qiitaさんには読み手も書き手も便利なサービスになっていくことを期待したいと思います。&lt;/p&gt;

&lt;p&gt;何をするにしても「読者のことを考える」ことを大切にしたいですね。&lt;/p&gt;

&lt;p&gt;もちろん文章を書く以外では「相手のことを考える」ことを大切にしたい。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>gitで公開されてるクックブックに依存している時のmetadata</title>
          <link>https://blog.eiel.info/blog/2014/12/24/test-kitchen-depends/</link>
          <pubDate>Wed, 24 Dec 2014 12:32:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/12/24/test-kitchen-depends/</guid>
          <description>&lt;p&gt;ふつうに書くしかない。&lt;/p&gt;

&lt;p&gt;利用する際にはcookbooksディレクトリにあればよい。
test-kitchenをする際には、Berksfileにかいとけばよい。
以下のようになる。例はrbenv。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;metadata
cookbook &#39;rbenv&#39;, git: &#39;git://github.com/fnichol/chef-rbenv.git&#39;, branch: &#39;v0.7.2&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このクックブックに依存したクックブックを書くとつらい目にあうような気がするので、READMEにしっかりかいておいたほうが良さそう。&lt;/p&gt;

&lt;p&gt;どうしてこんな話が出てくるかというと、rbenvは系統が違うものがふたつある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fnichol/chef-rbenv&#34;&gt;chef-rbenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/RiotGames/rbenv-cookbook&#34;&gt;rbenv-cookbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;chef-rbenvのほうは&lt;a href=&#34;https://supermarket.chef.io/&#34;&gt;supermacket&lt;/a&gt;にあるのだけどrbenv-cookbookのほうはない。お互いに関連はなさそう。&lt;/p&gt;

&lt;p&gt;「&lt;a href=&#34;http://qiita.com/zaru/items/1436a383c3d41483c371&#34;&gt;VagrantにRuby/Rails開発環境を整えるChef+Berkshelf構築メモ - Qiita&lt;/a&gt;」ではgitで指定していたのでそんな話がでてきただけである。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>黒背景に青文字はやめろという話を合同勉強会in大都会で話をした。</title>
          <link>https://blog.eiel.info/blog/2014/12/14/gbdaitokai2014-winter-color/</link>
          <pubDate>Sun, 14 Dec 2014 15:03:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/12/14/gbdaitokai2014-winter-color/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://gbdaitokai.doorkeeper.jp/events/15289&#34;&gt;合同勉強会 in 大都会岡山 -2014 Winter-&lt;/a&gt;に参加して、「黒背景に青文字はやめろ」という話をした。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://togetter.com/li/757033&#34;&gt;その様子をみたいならTogetterがある&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;なんか色の勉強する機会が欲しいと思って出オチなタイトルを設定してみた。
しかし、あんまり調べたことがそんなに反映されていない。
ちゃんと咀嚼できなかったのとそんなに時間をとれなかったのが原因である。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;6bc3a81065840132d6705e4dc25c732c&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;終わる終わる詐欺です。どうもありがとうございます。&lt;/p&gt;

&lt;p&gt;後半は完全に「&lt;a href=&#34;http://blog.eiel.info/blog/2013/03/13/cielch/&#34;&gt;エディタの文字色に悩む日々 - CIELCH&lt;/a&gt;」の使いまわしではあるが、書いてないことも喋ったりしたし、気にしないことにしよう。&lt;/p&gt;

&lt;p&gt;まあ、HSBの明度は人間の感覚には合わされてないので、感覚で調整するには使えるけどプログラムで処理するにはあまりつかいやすくない。
知っていると若干色づくりに役に立つかもしれない。&lt;/p&gt;

&lt;p&gt;そういえばPCメガネは青色をカットするけど、青色が文字の読みやすさには影響を与えずに光を弱くできるという機能があるのかと言えるのかもしれないと思ったけど、根拠がないので言わなかった。
そのあたりはディスプレイの設定でカバーできる気もしなくもない。
しかし、画面ってだいたい白いしな。まぶしいぜ。&lt;/p&gt;

&lt;p&gt;というわけで、中身があったのかなかったのか自分ではよくわからない始末である。&lt;/p&gt;

&lt;p&gt;まとめると、黒と青の組み合わせ、白と黄の組み合わせが読みにくいという話でした。&lt;/p&gt;

&lt;p&gt;そういえば、今回作成したiTermのカラースキームは&lt;a href=&#34;https://github.com/eiel/color-schemes&#34;&gt;eiel/color-schemes · GitHub&lt;/a&gt;においている。
ハイライト色を暗めにとっていて、場合によっては使いにくいかもしれない。
世の中にはいろんなカラースキームが公開されているので、そっちを使うほうがいいかもしれない。&lt;/p&gt;

&lt;p&gt;今年はたくさんセッションをしたけど、これが最後だと思われる。
来年も考えたことはてきとうにまとめていこう。&lt;/p&gt;

&lt;h3 id=&#34;参考文献:1822aa27a6afcb00d837c683b3b04087&#34;&gt;参考文献&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jsa.or.jp/stdz/instac/commitee-acc/WG2/Docs/web-tech-repo/technical-report.html&#34;&gt;X 8341-3:2004 「高齢者・障害者等配慮設計指針－情報通信における機器，ソフトウェア及びサービス－ 第３部：ウェブコンテンツ」技術解説　第1.1版　委員会ワーキングドラフト（7月22日版）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.zspc.com/documents/wcag10/&#34;&gt;ウェブコンテンツ・アクセシビリティ・ガイドライン 1.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kanzaki.com/docs/html/color-check&#34;&gt;色の組み合わせチェック - 読みやすい前景色と背景色&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.xrite.com/documents/literature/ja/L10-001_Understand_Color_ja.pdf&#34;&gt;カラーコミュニケーションガイド 色を正しく伝えるために&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.konicaminolta.jp/instruments/knowledge/color/index.html&#34;&gt;色色雑学-楽しく学べる知恵袋 | コニカミノルタ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://w3.kcua.ac.jp/~fujiwara/infosci/&#34;&gt;情報科学講義資料 - グラフィックス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hackage.haskell.org/package/colour&#34;&gt;colour: A model for human colour/color perception | Hackage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/03/13/cielch/&#34;&gt;エディタの文字色に悩む日々 - CIELCH - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>PostGIS関連でRailsの本番環境でエラー</title>
          <link>https://blog.eiel.info/blog/2014/12/13/activerecord-postgis/</link>
          <pubDate>Sat, 13 Dec 2014 05:51:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/12/13/activerecord-postgis/</guid>
          <description>&lt;p&gt;PostGIS
開発環境ではおきないのだけど、pointを作ろうとしてエラーが起きる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NoMethodError (undefined method `point&#39; for #&amp;lt;Proc:0x000000038dde90&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;見事に下記の通りだった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/rgeo/activerecord-postgis-adapter/issues/63&#34;&gt;https://github.com/rgeo/activerecord-postgis-adapter/issues/63&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;self.lonlat = Pin.rgeo_factory_for_column(:latlon).point(self.longitude, self.latitude)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;だったのを&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;self.lonlat = Pin.rgeo_factory_for_column(:latlon, {}).point(self.longitude, self.latitude)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;に書き換え。&lt;code&gt;rgeo_factory_for_column&lt;/code&gt;の第2引数に &lt;code&gt;{}&lt;/code&gt;を加えた。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>PostGISを試してみる</title>
          <link>https://blog.eiel.info/blog/2014/12/11/postgis-abc/</link>
          <pubDate>Thu, 11 Dec 2014 13:54:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/12/11/postgis-abc/</guid>
          <description>

&lt;p&gt;緯度経度って奴をDBにいれる。
Postgresなら&lt;a href=&#34;http://postgis.net/&#34;&gt;PostGIS&lt;/a&gt;って奴があるらしい。&lt;/p&gt;

&lt;p&gt;とりあえずローカルで試す。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install postgresql
brew install postgis
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;データベースを作る&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;createdb postgis_sample
psql -d postgis_sample -c &amp;quot;CREATE EXTENSION postgis;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;CREATE EXTENSION postgis;&lt;/code&gt; すれば postgis が使えるらしい。&lt;/p&gt;

&lt;p&gt;八丁堀から510ビルまでの距離を求めてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ psql -d postgis_sample -c &amp;quot;SELECT ST_Distance(ST_GeographyFromText(&#39;Point(132.463495 34.393817)&#39;), ST_GeographyFromText(&#39;Point(132.468527 34.393366)&#39;));&amp;quot;
  st_distance
---------------
 465.421862299
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ST_Distanceで距離を算出できる。&lt;/p&gt;

&lt;p&gt;テーブルをつくってみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE table places ( name VARCHAR(255),geog GEOGRAPHY(Point));
INSERT INTO places  VALUES (&#39;ShakeHands&#39;, &#39;POINT(132.458767 34.394010)&#39;);
INSERT INTO places  VALUES (&#39;MOVIN&#39;&#39;ON&#39;, &#39;POINT(132.465314 34.393052)&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;シャレオ中央からの距離を求めてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; SELECT name, ST_Distance(geog, ST_GeographyFromText(&#39;POINT(132.457589 34.395300)&#39;)) FROM places;

ShakeHands | 179.475100761
 MOVIN&#39;ON   | 752.858070591
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;500m 以内の絞り込みをしてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT name FROM places WHERE ST_Distance(geog, ST_GeographyFromText(&#39;POINT(132.457589 34.395300)&#39;)) &amp;lt; 500;

ShakeHands
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3000件つっこんで検索してみる&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ for i in `seq 3000`
&amp;gt; do
&amp;gt;   psql -d postgis_sample -c &amp;quot;INSERT INTO places  VALUES (&#39;$i&#39;, &#39;POINT(132.$i 34.$i)&#39;);&amp;quot;
&amp;gt; done

$ psql -d postgis_sample

&amp;gt; /timing

&amp;gt; SELECT name FROM places WHERE ST_Distance(geog, ST_GeographyFromText(&#39;POINT(132.457589 34.395300)&#39;)) &amp;lt; 5000

Time: 12.816 ms;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;12msだった。ジオグラフィ型だと計算量があれこれらしいの狭い範囲ならジオメトリでやるほうがよいようだけど、どうしたらよいかわからないけど、ジオグラフィのままでも場合によっては良さそう。&lt;/p&gt;

&lt;h3 id=&#34;参考文献:08c78688b32cefde89caa7e680b8c4dd&#34;&gt;参考文献&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://workshops.boundlessgeo.com/postgis-intro-jp/geography.html&#34;&gt;Boundless : Introduction to PostGIS (Japanese) : 第17章: ジオグラフィー型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://user.numazu-ct.ac.jp/~tsato/tsato/geoweb/googlemaps/coordinates/advanced.html&#34;&gt;Googleマップで緯度・経度を求める （拡張版）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.geopacific.org/opensourcegis/postgis/postgis-30af30a830ea30fc306e57fa672c&#34;&gt;PostGIS クエリーの基本 — GeoPacific.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>VagrantでX転送</title>
          <link>https://blog.eiel.info/blog/2014/12/10/vagrant-xforward/</link>
          <pubDate>Wed, 10 Dec 2014 20:47:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/12/10/vagrant-xforward/</guid>
          <description>&lt;p&gt;以下をかいておけばよい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config.ssh.forward_x11 = true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとは普通に&lt;code&gt;vagrant ssh&lt;/code&gt;して、Xクライアントを動かせばよい。&lt;/p&gt;

&lt;p&gt;サーバ側にある程度必要なライブラリがない場合はディスプレイがないと言われてしまう。
CentOSなら以下をいれとくとよい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum -y groupinstall &amp;quot;X Window System&amp;quot; vlgothic-fonts

&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
      
    
      
        <item>
          <title>広島で使われるゆるい言葉 - ゆるい広島 Advent Calendar 2014</title>
          <link>https://blog.eiel.info/blog/2014/12/09/yurui-word/</link>
          <pubDate>Tue, 09 Dec 2014 00:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/12/09/yurui-word/</guid>
          <description>

&lt;p&gt;この記事は&lt;a href=&#34;http://www.adventar.org/calendars/334&#34;&gt;ゆるい広島 Advent Calendar 2014&lt;/a&gt;の7日目の記事です。昨日は&lt;a href=&#34;https://twitter.com/Toro_kun&#34;&gt;Toro_kun&lt;/a&gt;さんの&lt;a href=&#34;http://106n.net/toro/blog/ltdd09-hiroshima-advent-2014-8/&#34;&gt;LT駆動開発というゆるい勉強会でCreative Commons LicenseについてゆるくLTしてきた – ゆるい広島 Advent Calendar 2014 8日目&lt;/a&gt;でした。&lt;/p&gt;

&lt;p&gt;広島とか言いつつ、僕のまわりで使われているだけど、ゆるい言葉を紹介する。
これらの言葉を知っていると広島の人とのコミュニケーションはとてもスムーズになるかもしれません。
完全にネタ記事です。
期待して読まないでください。&lt;/p&gt;

&lt;h3 id=&#34;ごろごろ:b1b2b3f6b14ba2a700f4cf07651c68e5&#34;&gt;ごろごろ&lt;/h3&gt;

&lt;p&gt;ごろごろは、だらだらごろごろしている状態を示す言葉です。&lt;/p&gt;

&lt;p&gt;疲れたときや暇なときによく使われます。ごろごろ…。&lt;/p&gt;

&lt;p&gt;とりあえず、困ったらごろごろしましょう。ごろごろー。&lt;/p&gt;

&lt;p&gt;別にお腹の調子が悪いわけではないです。(ごろ&lt;/p&gt;

&lt;p&gt;実際に言葉にする用途よりもチャットで使われていることが多いです。
&lt;a href=&#34;github.com&#34;&gt;GitHub&lt;/a&gt;のコメント欄などで使用しましょう。&lt;/p&gt;

&lt;h3 id=&#34;またあした:b1b2b3f6b14ba2a700f4cf07651c68e5&#34;&gt;またあした&lt;/h3&gt;

&lt;p&gt;「またあした」は別れの挨拶としてよく使われます。
「またあしたも会えたらいいね」の略で使用されています。
非常によく使われているゆる語です。&lt;/p&gt;

&lt;p&gt;実際に明日も会う可能性がある場合は派生系の「またきょう」や「また来年」などが使用されます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;github.com&#34;&gt;GitHub&lt;/a&gt;を使うための集まりの別れの挨拶としては定番化しています。
もっと流行らせましょう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://note.mu/eiel/n/naeb4c3c02c5f&#34;&gt;また、あした。 - よく使う言葉&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;しらんけど:b1b2b3f6b14ba2a700f4cf07651c68e5&#34;&gt;しらんけど&lt;/h2&gt;

&lt;p&gt;困っている人がいるときに、ちゃんと調べていないがなんとなく知ることを相手に伝える場合に、ちゃんと調べずに回答していることを伝えるための魔法の言葉です。
ちゃんと調べていると反応が遅くなってしますので、この言葉を使えばショートカットすることができます。&lt;/p&gt;

&lt;p&gt;使われ方が非常にゆるいです。&lt;/p&gt;

&lt;p&gt;人間はあまり間違ったことを言いたくないらしく、困っている人を助けられないシーンが見られるために登場した非常に便利な言葉です。
あまり使いするぎると、オフラインで喋ることすべての語尾に勝手につけられて、あなたの発言の信憑性が著しく下がる場合があります。
気をつけましょう。&lt;/p&gt;

&lt;h3 id=&#34;ぎっとはぶ:b1b2b3f6b14ba2a700f4cf07651c68e5&#34;&gt;ぎっとはぶ&lt;/h3&gt;

&lt;p&gt;広島だけでなく日本全国…いや、世界で利用されているゆるい言葉です。
知らないと非常に困ることになります。&lt;/p&gt;

&lt;p&gt;派生語としては「おくときゃっと」とかがあります。&lt;/p&gt;

&lt;p&gt;そうです。広島のみんなはソーシャルコーディングをしているんです。&lt;/p&gt;

&lt;p&gt;オチはない。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Lispインタープリタ勉強会に参加したので - LT駆動開発09</title>
          <link>https://blog.eiel.info/blog/2014/12/08/ltdd-09-mylisp/</link>
          <pubDate>Mon, 08 Dec 2014 15:49:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/12/08/ltdd-09-mylisp/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA09&#34;&gt;LT駆動開発09&lt;/a&gt;でLTをした。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://great-h.doorkeeper.jp/events/16621&#34;&gt;Lispインタープリタ勉強会&lt;/a&gt;に参加したのでLispを実装しなければいけない気がしたので、勉強したことを参考に作成しはじめてみた。
インタプリタと書くか、インタープリターと書くか、インタープリタと書くかブレまくっていたのは秘密である。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;22a8e5b060470132ec2f1eb00375a1f0&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;書いたコードはGistにあるんだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/eiel/af120e6f44febc875702&#34;&gt;Gist - Lisp インタープリタ勉強で学んだことを試した。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;勉強会でlesson0として、用意してあったJavaScriptのコードを参考にした。
これは四則演算がすることができて、
JavaScriptの配列リテラルを使ってLISPのコードをかく。
この配列を評価できる評価機をつくる。&lt;/p&gt;

&lt;p&gt;配列リテラルを評価したものが、それ自身がASTなので割と簡単にLISPの評価機が作れる。
ASTなんだけどLispのプログラムのように見えるからLispをつくった気分になる。
そのスタート部分を作成しただけである。
といいつつも、和しか実装していない。&lt;/p&gt;

&lt;p&gt;しかし、Haskellのリストは同じ型の値しかリストには入れなれないので実際リストで書いてみると、値をつくる必要があり、LISP感は下がる。やはりパーサを書かねばならないのである。&lt;/p&gt;

&lt;p&gt;やることはそんなに難しくないし、手を動かしてみると学ぶことはたくさんある。
勉強会に参加したかどうかはおいておいて、自分だけのLISPを作るべきである。&lt;/p&gt;

&lt;p&gt;HaskellでLISPを作るなら良さ気な文献があるのでそちらをやるのもよい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ja.wikibooks.org/wiki/48%E6%99%82%E9%96%93%E3%81%A7Scheme%E3%82%92%E6%9B%B8%E3%81%93%E3%81%86&#34;&gt;48時間でSchemeを書こう - Wikibooks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>LT駆動開発09で「Vagrantを使ったa-blog CMSの環境で思ったことを話した</title>
          <link>https://blog.eiel.info/blog/2014/12/08/ltdd-09-vagrant-ablog/</link>
          <pubDate>Mon, 08 Dec 2014 15:26:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/12/08/ltdd-09-vagrant-ablog/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA09&#34;&gt;LT駆動開発09&lt;/a&gt;でLTをした。&lt;/p&gt;

&lt;p&gt;ちょっと前に&lt;a href=&#34;http://www.a-blogcms.jp/&#34;&gt;a-blog CMS&lt;/a&gt;の作業環境を&lt;a href=&#34;https://www.vagrantup.com/&#34;&gt;Vagrant&lt;/a&gt;で作成したのでその時に思ったことを話しただけである。
おまけでVagrantについての解説をしたがきっと必要のない情報だろう。中身がない。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;4d02497060470132157b26e128a6f114&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Vagrantは簡単に開発環境を作成するツールらしいです。
Vagrantfileがあれば環境が何度でも構築できるのがポイントだろう。
あと設定が楽チンである。&lt;/p&gt;

&lt;p&gt;a-blog CMSをchefでインストールするには&lt;a href=&#34;https://github.com/ogom/cookbook-acms&#34;&gt;ogom/cookbook-acms&lt;/a&gt;をいじったものを使用している。
いじったものは公開していなくてさーせん。&lt;/p&gt;

&lt;p&gt;どんな問題があったかというとローカルで編集したファイルが全然反映されない問題がおきてつらかった。
あとは他の人がプロジェクトをクローンして&lt;code&gt;vagrant up&lt;/code&gt;しても実行できない問題がおきた。
それについて説明しただけである。&lt;/p&gt;

&lt;p&gt;というわけで、作業用のコードとCMSのコードは分離して配置できるといい気がするという話をしただけである。
a-blog CMS だと &lt;code&gt;config.server.php&lt;/code&gt; でテーマディレクトリ位置は変えられるようなのでうまく使うと良さそうだと気づいが次に使う機会がない限りにそのままである。&lt;/p&gt;

&lt;p&gt;中身がない。&lt;/p&gt;

&lt;p&gt;ついでにVagrantのBOXは&lt;a href=&#34;https://vagrantcloud.com/&#34;&gt;Vagrant Cloud&lt;/a&gt;のものを使いたいけど、&lt;a href=&#34;https://github.com/opscode/bento&#34;&gt;bento&lt;/a&gt;で作成されているBOXを使いたいという話をした。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ぶらりと飲み物を買いにいくついでに写真をとってきた - ゆるい広島 Advent Calendar 2014</title>
          <link>https://blog.eiel.info/blog/2014/12/06/yurui-photo/</link>
          <pubDate>Sat, 06 Dec 2014 00:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/12/06/yurui-photo/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;http://www.adventar.org/calendars/334&#34;&gt;ゆるい広島 Advent Calendar 2014&lt;/a&gt;の6日目の記事です。
昨日は&lt;a href=&#34;http://taka4.hateblo.jp/entry/2014/12/05/000000&#34;&gt;あかぎたかしさん の a-blog cms DAY Hiroshima というゆるい勉強会を紹介する&lt;/a&gt;でした。&lt;/p&gt;

&lt;p&gt;このアドベントカレンダーは広島をテーマに好きなことを書いていいらしいです。&lt;/p&gt;

&lt;p&gt;というわけで、広島の写真を撮影してきました。広島っぽさは全くありません。&lt;/p&gt;

&lt;p&gt;使用したカメラはRICOH GRさんです。&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=eiel-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=B00CE2V2VI&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;16時を過ぎていたので、なるべく場所が特定されないように露出を高めにして、逆光で撮影した写真が多いです。
ちなみにカメラは1ヶ月前ぐらいからはじめた初心者です。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;cd7e55a05eb30132af2f7ab1dd6de866&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.flickr.com/photos/43922152@N04/sets/72157649608092071/&#34;&gt;Flickrで見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あらためてみるとピントが残念なのがいくつかある…。&lt;/p&gt;

&lt;p&gt;明日は誰なのか知らない。&lt;/p&gt;

&lt;p&gt;また意味のない記事を書いてしまった。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>すごい広島 x IBM - クラウド交流会でゆるくすごい広島の紹介した。 - ゆるい広島 Advent Calendar 2014</title>
          <link>https://blog.eiel.info/blog/2014/12/03/yurui-great-h-x-ibm/</link>
          <pubDate>Wed, 03 Dec 2014 00:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/12/03/yurui-great-h-x-ibm/</guid>
          <description>&lt;p&gt;一応、&lt;a href=&#34;http://www.adventar.org/calendars/334&#34;&gt;ゆるい広島 Advent Calendar 2014&lt;/a&gt;の三日目の記事になります。&lt;/p&gt;

&lt;p&gt;12月1日のお昼に&lt;a href=&#34;http://ibm-seminar.jp/cloudexchange/&#34;&gt;IBM Cloud Exchange 2014&lt;/a&gt;の広島が開催されておりましたが、その夜にひっそりと&lt;a href=&#34;https://www.facebook.com/events/741892012568562/&#34;&gt;すごい広島 x IBM - クラウド座談会&lt;/a&gt;が開催されました。
すごい広島という弱小コミュニティがIBMさまといったいどんな交流をしたらいいのかよくわかりませんが、ここは弱小なことは気にせず、対等な振りをして対等なつもりでいつもどおり&lt;a href=&#34;http://great-h.github.io/&#34;&gt;すごい広島&lt;/a&gt;の紹介をしてきました。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;f251d8205b9b0132e0851646a38ce118&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;なるべくゆるくいこうとはじめからおもっていたので、「すごい広島っていうのはー」という、すごいゆるいタイトルをつけてみました。&lt;/p&gt;

&lt;p&gt;まとめると、すごい広島は、すごい人を集めるのが目的のようです。&lt;/p&gt;

&lt;p&gt;すごい広島の話はもう何度もしていますが、IBMの方たちを対象にしたとき、なにをしたいコミュニティなのか改めてブレストをして臨みました。
そうすると普段のすごい広島の参加者から、「そんな目的が!」なんて声が聞こえました。
なんとなく新しいスライドをつくった甲斐がありました。&lt;/p&gt;

&lt;p&gt;あとあと、&lt;a href=&#34;http://jslug.jp/&#34;&gt;SoftLayerユーザ会&lt;/a&gt; 広島支部を作りたいそうです。
支部長希望者探しているようです。主に女性。&lt;/p&gt;

&lt;p&gt;少し脱線しますが、今回挑戦したことは自分が撮影した写真を使うというところでした。
ちなみに、使用しているカメラはRICOH GRです。&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=eiel-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=B00CE2V2VI&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;たぶん高級コンパクトデジタルカメラに分類されるカメラで、起動がはやく気軽に撮影できて、ミラーレスと同等のセンサーサイズを備えるなかなか素敵なカメラです。
このカメラの素晴しいのはレンズ沼にはまらないということがあります。
低価格帯のミラーレスの少し触らせてもらっいましたが、良いカメラを買ったと感じております。
でも、フルサイズの一眼レフ欲しくなるので、沼には確実に近づいていますね。&lt;/p&gt;

&lt;p&gt;閑話休題。
コミュニティを運営することに関しては、わりと無欲におこなって継続できるペースで続けるのがいいかなとなんとく改めて思いました。
継続することから産まれるリターンが計ることができないように思います。&lt;/p&gt;

&lt;p&gt;「だからこそ、企業との対話、連携に価値が産まれるのかな」なんて思いました。
お互いにとって価値のあることがもっとできるようになるといいですね。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>LT駆動開発というゆるいIT勉強会を紹介する - ゆるい広島 Advent Calendar 2014</title>
          <link>https://blog.eiel.info/blog/2014/11/26/yurui-ltdd/</link>
          <pubDate>Wed, 26 Nov 2014 19:46:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/11/26/yurui-ltdd/</guid>
          <description>

&lt;p&gt;この記事は&lt;a href=&#34;http://www.adventar.org/calendars/334&#34;&gt;ゆるい広島 Advent Calendar 2014&lt;/a&gt;の1日目の記事です。このアドベントカレンダーは広島をテーマに好きなことを書いていいらしいアドベントカレンダーです。&lt;/p&gt;

&lt;p&gt;広島には&lt;a href=&#34;http://ltdd.doorkeeper.jp/&#34;&gt;LT駆動開発&lt;/a&gt;というゆるめのIT勉強会があります。
IT勉強会の形式には&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;セミナー形式&lt;/li&gt;
&lt;li&gt;ハンズオン形式&lt;/li&gt;
&lt;li&gt;アンカンファレンス形式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などなどがありますが、LT駆動開発はセミナー形式になります。&lt;/p&gt;

&lt;p&gt;LT駆動開発はライトニングトークと呼ばれる5分から10分程度の短いセッションで構成され、10人程度の発表があります。
LTはライトニングトークの略で、「&lt;strong&gt;LTを毎月やるつもりで普段の開発(仕事)をしよう&lt;/strong&gt;」という勉強会になります。&lt;/p&gt;

&lt;p&gt;セミナー形式は普通は参加対象者をしっかり定めて、スピーカーが参加者に価値のある情報を提供するのが一般的ですが、このLT駆動開発では、スピーカーになることに重点を置いています。
そのため、参加対象者は曖昧となっています。&lt;/p&gt;

&lt;p&gt;セミナー形式の勉強会で、聴衆はたいていの場合、内容のすべてを理解することはできません。
そして、聞いたことを実践できる人はほとんどいないと思われます。
しかし、&lt;strong&gt;スピーカーは喋ることを理解した上で伝える方法を準備してきているのです。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;スピーカーになるということは喋る内容をより理解できるということなのです。
これを利用して、喋ることで学んだことをより理解を深めるのがLT駆動開発なのです。&lt;/p&gt;

&lt;p&gt;スピーカーは参加対象者は自由に決めることができるし、喋る内容も自由に決めることができるし、発表者する時間ほ長くなければ自由に決めることができるというとても&lt;strong&gt;ゆるい&lt;/strong&gt;IT勉強会なのです。&lt;/p&gt;

&lt;p&gt;ライトニングトークを行うイベントはたいてい時間制限がきっちりしていて、ドラが鳴らされて発表が打ち切りになりますが、このLT駆動開発ではぐだぐだに継続することができます。
やはり&lt;strong&gt;ゆるい&lt;/strong&gt;ですね。&lt;/p&gt;

&lt;p&gt;これまでのLT駆動開発の8回行われています。
その中からいくつか公開されているスライドをゆるく紹介したいと思います。&lt;/p&gt;

&lt;h3 id=&#34;これまでのlt駆動開発:475e74b3cd5073f5681f7a2b877b0dc9&#34;&gt;これまでのLT駆動開発&lt;/h3&gt;

&lt;p&gt;これまでのLT駆動開発のは&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki&#34;&gt;Wiki&lt;/a&gt;に整理されています。ここで紹介しないものはそっちからみてください。&lt;/p&gt;

&lt;h4 id=&#34;ワイヤレスディスプレイをつかってみよう:475e74b3cd5073f5681f7a2b877b0dc9&#34;&gt;ワイヤレスディスプレイをつかってみよう！&lt;/h4&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/34260183&#34; width=&#34;425&#34; height=&#34;355&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/yo.takata/20140405-ltdd02-widi&#34; title=&#34;ワイヤレスディスプレイをつかってみよう！&#34; target=&#34;_blank&#34;&gt;ワイヤレスディスプレイをつかってみよう！&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/yo.takata&#34; target=&#34;_blank&#34;&gt;Yoshitake Takata&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

無線で画面を飛ばせる。最近はおもしろいものがありますね。


#### コーチングから学んだこと

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/39881805&#34; width=&#34;425&#34; height=&#34;355&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/yurikamimori/ss-39881805&#34; title=&#34;コーチングから学んだこと&#34; target=&#34;_blank&#34;&gt;コーチングから学んだこと&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/yurikamimori&#34; target=&#34;_blank&#34;&gt;Yuri Kamimori&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

おれたちのLT駆動はまだはじまったばかりだ。
自分がどんなタイプなのか、一緒に仕事する人はどんなタイプなのか。

#### LT駆動開発03　Web制作をカレー作りで例えてみる

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/34252680&#34; width=&#34;425&#34; height=&#34;355&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/kawakamihiroko/lt-03&#34; title=&#34;LT駆動開発03　Web制作をカレー作りで例えてみる&#34; target=&#34;_blank&#34;&gt;LT駆動開発03　Web制作をカレー作りで例えてみる&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/kawakamihiroko&#34; target=&#34;_blank&#34;&gt;Kawakami Hiroko&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

すべてはカレー作りに通ずる。

#### 原典にあたったら英語も勉強できた話 〜 Git編 〜

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/39322224&#34; width=&#34;425&#34; height=&#34;355&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/YukinoriKitadai/osc-2014-hiroshima-reading-original-git-and-english&#34; title=&#34;原典にあたったら英語も勉強できた話 〜 Git編 〜&#34; target=&#34;_blank&#34;&gt;原典にあたったら英語も勉強できた話 〜 Git編 〜&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/YukinoriKitadai&#34; target=&#34;_blank&#34;&gt;Yukinori Kitadai&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

名作スライド #とは。

#### Twitterのスパムアカウントを考察する

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/31794766&#34; width=&#34;425&#34; height=&#34;355&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/nemumu/2-31794766&#34; title=&#34;Twitterのスパムアカウントを考察する [LTDD 01]&#34; target=&#34;_blank&#34;&gt;Twitterのスパムアカウントを考察する [LTDD 01]&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/nemumu&#34; target=&#34;_blank&#34;&gt;nemumu&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

Twitterで大量のアカウントにつくるにはどうすればいいのだろうか。
**実際にやってみた**

#### 資格は役に立つか

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/35598571&#34; width=&#34;425&#34; height=&#34;355&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/tsudaa/ss-35598571&#34; title=&#34;資格は役に立つか &#34; target=&#34;_blank&#34;&gt;資格は役に立つか &lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/tsudaa&#34; target=&#34;_blank&#34;&gt;tsudaa&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

資格は役に立つか…ぶっちゃけてみましょう。


#### ジョーク駆動開発2

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/36682978&#34; width=&#34;425&#34; height=&#34;355&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/nisyu/itpass-36682978&#34; title=&#34;Itpass&#34; target=&#34;_blank&#34;&gt;Itpass&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/nisyu&#34; target=&#34;_blank&#34;&gt;Takashi Akagi&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

伝説のジョーク駆動開発 第2章

### LT駆動開発 02 一発ネタ

&lt;script async class=&#34;speakerdeck-embed&#34; data-slide=&#34;11&#34; data-id=&#34;a473c2f09ef50131ed925eeea3b4da59&#34; data-ratio=&#34;1.6&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

君はこのネタをしっているか。


#### 能年玲奈ちゃんのファンとして本気を出してみた

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/33155901&#34; width=&#34;425&#34; height=&#34;355&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/masakazuminamiyama/ss-33155901&#34; title=&#34;能年玲奈ちゃんのファンとして本気を出してみた&#34; target=&#34;_blank&#34;&gt;能年玲奈ちゃんのファンとして本気を出してみた&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/masakazuminamiyama&#34; target=&#34;_blank&#34;&gt;真一 北原&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

見せてもらおうか。ファンの本気とやらを。


#### ITリテラシーの格差問題を考える

&lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/tSk63Sn3ZJU?rel=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;動画で参加することだってできるんだぜ。&lt;/p&gt;

&lt;h4 id=&#34;ひどいサービスの作り方:475e74b3cd5073f5681f7a2b877b0dc9&#34;&gt;ひどいサービスの作り方&lt;/h4&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/38765905&#34; width=&#34;425&#34; height=&#34;355&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/ducky19999/ss-38765905&#34; title=&#34;ひどいサービスの作り方&#34; target=&#34;_blank&#34;&gt;ひどいサービスの作り方&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/ducky19999&#34; target=&#34;_blank&#34;&gt;Minoru Kawaguchi&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;反面教師。&lt;/p&gt;

&lt;h4 id=&#34;5sのはなし:475e74b3cd5073f5681f7a2b877b0dc9&#34;&gt;5sのはなし&lt;/h4&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/38912911&#34; width=&#34;425&#34; height=&#34;355&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/kakimomokuri/5-s-38912911&#34; title=&#34;5 sのはなし&#34; target=&#34;_blank&#34;&gt;5 sのはなし&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/kakimomokuri&#34; target=&#34;_blank&#34;&gt;Kakigi Katuyuki&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;そう。iPhone 5s ならね。&lt;/p&gt;

&lt;h4 id=&#34;踏まれる可能性について:475e74b3cd5073f5681f7a2b877b0dc9&#34;&gt;踏まれる可能性について&lt;/h4&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/38770495&#34; width=&#34;425&#34; height=&#34;355&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/mrtc0/ss-38770495&#34; title=&#34;踏まれる可能性について #LT駆動開発07&#34; target=&#34;_blank&#34;&gt;踏まれる可能性について #LT駆動開発07&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/mrtc0&#34; target=&#34;_blank&#34;&gt;mrtc0&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;別に踏まれたいわけではない。&lt;/p&gt;

&lt;h4 id=&#34;morning-mail:475e74b3cd5073f5681f7a2b877b0dc9&#34;&gt;morning mail&lt;/h4&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;5b283660fc2e0131c46b52d757e5bc8b&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;朝の習慣をはじめよう。&lt;/p&gt;

&lt;h4 id=&#34;マネジメントという道具-v0-0-1:475e74b3cd5073f5681f7a2b877b0dc9&#34;&gt;マネジメントという道具(v0.0.1)&lt;/h4&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/37606524&#34; width=&#34;425&#34; height=&#34;355&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/uzundk/toolof-management&#34; title=&#34;マネジメントという道具(v0.0.1)&#34; target=&#34;_blank&#34;&gt;マネジメントという道具(v0.0.1)&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/uzundk&#34; target=&#34;_blank&#34;&gt;uzundk&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;ぜんぜんゆるくない。ガチ。&lt;/p&gt;

&lt;h4 id=&#34;オフィスチェアを買いました:475e74b3cd5073f5681f7a2b877b0dc9&#34;&gt;オフィスチェアを買いました&lt;/h4&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;4ce27df0d07d01310fe546b5cb27a5ae&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;椅子は仕事の相棒です。&lt;/p&gt;

&lt;h3 id=&#34;次回のlt駆動開発:475e74b3cd5073f5681f7a2b877b0dc9&#34;&gt;次回のLT駆動開発&lt;/h3&gt;

&lt;p&gt;どうでしょうか。ゆるい感じがしたでしょうか。&lt;/p&gt;

&lt;p&gt;次回の&lt;a href=&#34;http://ltdd.doorkeeper.jp/events/17506&#34;&gt;LT駆動開発は12月7日9時から12時&lt;/a&gt;です。
気軽に発表しにいってみてください。&lt;/p&gt;

&lt;p&gt;明日のゆるい広島AdventCalendarは &lt;a href=&#34;https://twitter.com/takatayoshitake&#34;&gt;@takatayoshitake&lt;/a&gt; さんです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>内包表記について、すごい合同勉強会で話した</title>
          <link>https://blog.eiel.info/blog/2014/11/02/internal-definitia-great-study/</link>
          <pubDate>Sun, 02 Nov 2014 12:25:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/11/02/internal-definitia-great-study/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/%E3%81%99%E3%81%94%E3%81%84%E5%90%88%E5%90%8C%E5%8B%89%E5%BC%B7%E4%BC%9A&#34;&gt;すごい合同勉強会2014 in 広島&lt;/a&gt;でセッションしたので内容を公開しておく。&lt;/p&gt;

&lt;p&gt;今回は「私がモナドの内包表記という名前を知った時の感覚を伝えよう」というのが目的でした。
さりげなく「私がモナドに感じている効能を伝える」というのもしているのですが、そこは本当にさりげなく。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;7cb24810446c0132e04e4e24d1028d6d&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;内包表記。その意味を知らずに5年前ぐらいにpythonで利用していて、forやif文字通りにうけとっており、その動作を正しく理解できてないときがありました。
現在とその間にHaskellを学び、その5年前の自分に内包表記を伝えるにはという観点で話を進めました。&lt;/p&gt;

&lt;p&gt;まず、リストの内包表記ですが、リストを生成を簡単にしてくれる機能です。&lt;/p&gt;

&lt;p&gt;内包表記は、どうやら数学の集合の記法である内包的記法に由来するそうで、「&lt;a href=&#34;http://www.amazon.co.jp/gp/product/427406896X/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=427406896X&amp;amp;linkCode=as2&amp;amp;tag=eiel-22&#34;&gt;関数プログラミング入門 ―Haskellで学ぶ原理と技法―&lt;/a&gt;」か何かで読んだ記憶があります。&lt;/p&gt;

&lt;p&gt;その対になる記法として外延的記法があります。
これは具体的な中身を列挙する方法で、普段のリテラル表記ともみなすことができます。
リテラルで地道にかくのではなく、てプログラミングで自動生成しようというのが内包表記と言えそうです。&lt;/p&gt;

&lt;p&gt;Haskellの内包表記は ジェネレータとガードと呼ばれる真偽値を並べることで作成します。
&lt;code&gt;x &amp;lt;- [1..9]&lt;/code&gt; の部分がジェネレータです。あと真偽値を返す式がガードになります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参考 &lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellch3.html#x8-420003.11&#34;&gt;3 Expressions - Haskell 2010&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;pythonではジェネレータとガードが for と if で表現されています。
直感的だし、キーワードの使いまわしとも言えそうです。
(関係ないけど、C++はキーワードの使いまわしたいへんそうだなぁって思った)&lt;/p&gt;

&lt;p&gt;あとはジェネレータを並べた際にどうなるか、というのがわかればリストの内包表記はうまく使えるのではないかと思います。
直積をとる。つまり、全部のパターンをつくる。
あとはフィルタで、致しているものを求めるだけですね。&lt;/p&gt;

&lt;p&gt;そういえば、リストモナドでできることですね。複数答えがある場合にリストモナドを使うとすべての回答が得られます。&lt;/p&gt;

&lt;p&gt;よく内包表記がmapやfilterと比較されることがありますが、そもそも同一に扱っても面白いことは特にない気がします。
目的しだいではmapやfilterを使うより便利だと考えてよいと思います。&lt;/p&gt;

&lt;p&gt;蛇足ですが、モナドの有効性として、コードが斜めに述びる性質がある際に真っ直ぐに伸ばすことができるみたいなイメージを持っています。
それをさりげなく言っていたのですが、後で&lt;a href=&#34;https://twitter.com/nobkz&#34;&gt;はなださん&lt;/a&gt;のセッションで実例がでてきました。&lt;/p&gt;

&lt;p&gt;さて、ここまでくると内包表記とSQLの類似性が簡単に説明できるし、具体例にしやすいので、SQLと絡めた話をしました。
あとはモナドの内包表記へと一般化する話です。具体例のリストから、Maybeへと繋ぎ一般化して終わりです。&lt;/p&gt;

&lt;p&gt;Rubyの例でflattenしている部分がありますが、あの辺はリストモナドがいつも勝手にやってくれてるところで、さりげなく強調していたりしますね。&lt;/p&gt;

&lt;p&gt;モナドはなんか怖いとか言われますが、それはさておいて内包表記は便利なので知っておいて損はないと思います。&lt;/p&gt;

&lt;p&gt;会場はわりとポカーンとしていましたが「誰かの何かに役に立てばいいなぁ」ということでスライドと簡単な解説を残しておきます。&lt;/p&gt;

&lt;h3 id=&#34;登場したコード:1aaa3329fe0e09fc9b43bfdccf024329&#34;&gt;登場したコード&lt;/h3&gt;

&lt;p&gt;コピペしやすいように置いておきます。
主に対話環境用に。&lt;/p&gt;

&lt;p&gt;Haskell&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;[(x,y) | x &amp;lt;- [1..9], y &amp;lt;- [1..9], x * y == 24]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;[(x,y,z) | x &amp;lt;- [1..9], y &amp;lt;- [1..9], z &amp;lt;- [1..9], x * y * z == 24]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-Haskell&#34;&gt;:set -XTransformListComp
[ (x,y) | x &amp;lt;- [1..9], y &amp;lt;- [1..9], x * y == 24, then take 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;:set -XTransformListComp
:m GHC.Exts
[ (x,y) | x &amp;lt;- [1..9], y &amp;lt;- [1..9], x * y == 24, then sortWith by y]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;:set -XMonadComprehensions
[ (x,y) | x &amp;lt;- Just 3, y &amp;lt;- Just 8, x * y == 24]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Python&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[(x,y) for x in range(1,10) for y in range(1,10) if x * y == 24]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ruby&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;[*1..9].map do |x|
  [*1..9].map do |y|
    [x,y]
  end
end.flatten(1).select do |x,y|
  x * y == 24
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;[*1..9].map do |x|
  [*1..9].map do |y|
    [*1..9].map do |z|
      [x,y,z]
    end
  end
end.flatten(2).select do |x,y,z|
  x * y * z == 24
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;[*1..9].product([*1..9],[*1..9]).select do |x,y,z|
    x * y * z == 24
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SQL&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT x,y
FROM generate_series(1,9) AS X,
     generate_series(1,9) AS Y
WHERE x * y = 24;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT x,y,z
FROM generate_series(1,9) AS X,
     generate_series(1,9) AS Y,
     generate_series(1,9) AS Z
WHERE x * y * z = 24;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;参考文献:1aaa3329fe0e09fc9b43bfdccf024329&#34;&gt;参考文献&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ja.wikipedia.org/wiki/%E5%86%85%E5%8C%85%E3%81%A8%E5%A4%96%E5%BB%B6&#34;&gt;内包と外延 - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ja.wikipedia.org/wiki/%E9%9B%86%E5%90%88&#34;&gt;内包的記法の出展 - 集合 - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.python.jp/2/tutorial/datastructures.html#id6&#34;&gt;5. データ構造 — Python 2.7ja1 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kotha.net/ghcguide_ja/7.6.2/syntax-extns.html#generalised-list-comprehensions&#34;&gt;7.3. 構文的拡張 - 内包表記の拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kotha.net/ghcguide_ja/7.6.2/syntax-extns.html#monad-comprehensions&#34;&gt;7.3. 構文的拡張 Monadの内包表記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/uduki845/items/d60dc51ad3a26b9ab430&#34;&gt;Haskell - ghciで言語拡張を有効にする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;関連リンク:1aaa3329fe0e09fc9b43bfdccf024329&#34;&gt;関連リンク&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;blog/2014/11/02/great-study-2014/&#34;&gt;すごい合同勉強会2014 in 広島を開催した - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>すごい合同勉強会2014 in 広島を開催した</title>
          <link>https://blog.eiel.info/blog/2014/11/02/great-study-2014/</link>
          <pubDate>Sun, 02 Nov 2014 12:14:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/11/02/great-study-2014/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/%E3%81%99%E3%81%94%E3%81%84%E5%90%88%E5%90%8C%E5%8B%89%E5%BC%B7%E4%BC%9A&#34;&gt;すごい合同勉強会2014 in 広島&lt;/a&gt;を開催しました。
開催したといっていいのだろうか？&lt;/p&gt;

&lt;p&gt;この勉強会は広島市立大学の大学祭にあたる市大祭の出し物として行われました。
主催は広島市立大学 プログラミング同好会です。&lt;/p&gt;

&lt;p&gt;といっても、広島で毎月行われている&lt;a href=&#34;http://ltdd.doorkeeper.jp/&#34;&gt;LT駆動開発&lt;/a&gt;の年に一度の大型バージョンという側面もあります。
でっかいLT駆動開発です。&lt;/p&gt;

&lt;p&gt;いつもより大きいだけあって、いつもの参加者も少しだけ長い時間を喋っていてボリュームのあるものになったと思います。&lt;/p&gt;

&lt;p&gt;学生や学校と交流できたこともよかったと思います。
学祭と被っているため懇親会に参加できる学生が少ないのはとても残念でした。&lt;/p&gt;

&lt;p&gt;しかも、プログラミング同好会を巻き込んだだけのLT駆動開発ではなくて、&lt;a href=&#34;https://twitter.com/EzoeRyou&#34;&gt;江添&lt;/a&gt;さんと&lt;a href=&#34;https://twitter.com/nobkz&#34;&gt;はなだ&lt;/a&gt;さんがいらっしゃっいました。
イベントのメンバーは固定化がおきていて、今回は特に県外から別の文化が届くのはとても大切だと感じました。
とても大きな刺激になりました。&lt;/p&gt;

&lt;p&gt;お二人が参加されるきっかけができたことには本当に感謝しています。&lt;/p&gt;

&lt;p&gt;この規模だと、県外からの参加もあったりするのもとてもよいです。
県外は岡山や山口にいく程度ですが、九州や関西にも足を運ぶようにしたいと改めて思いました。
「これだけは行っとけ」というイベントがあれば教えて欲しいです。
Ruby World Cunference にいければいいんだけど日程的に無理である。&lt;/p&gt;

&lt;p&gt;イベントを行うのは、参加者の貴重な時間を使うことになります。
イベントが大きいものになればなるほど不安も大きくなります。
そんな中で思ったのは、参加者が受け身にならないように自発的に動いていきたくなるような空気感をつくるのが、参加者も運営者もメリットになるものになるのではないかとさっき考えたりもしました。
結局はみんなが協力していて、さりげなく支えてくれてる人がいて成立しているものだと思いました。
本当にありがとう。&lt;/p&gt;

&lt;p&gt;発表することのメリットを私自身がしっかり享受して、広島がITエンジニアにとってもっと楽しい街になると良いと思っています。&lt;/p&gt;

&lt;p&gt;ただし、私の定義する広島は広いぞ。#知らんけど&lt;/p&gt;

&lt;p&gt;それでは、また来年(あした)&lt;/p&gt;

&lt;h3 id=&#34;関連リンク:5a2871aac5a6c58e47c8f05890f39e3d&#34;&gt;関連リンク&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2014/11/02/internal-definitia-great-study/&#34;&gt;内包表記についてすごい合同勉強会で話した&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>nodejsのモジュールをブラウザで使えるようにするbrowserifyでちょっと遊んだ</title>
          <link>https://blog.eiel.info/blog/2014/10/30/browserify/</link>
          <pubDate>Thu, 30 Oct 2014 11:13:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/10/30/browserify/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://browserify.org/&#34;&gt;Browserify&lt;/a&gt;で少し遊んだ。&lt;/p&gt;

&lt;p&gt;npmにあるライブラリをクライアントサイドで使いたいなぁ、という時に便利な子がBrowserifyさんです。
HTML側に複数のscriptタグを書かなくてよくなり、&lt;code&gt;&amp;lt;script src=&amp;quot;bundle.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;のみ記述しておけば良いので管理が楽です。
(当然&lt;code&gt;bundle.js&lt;/code&gt;以外の名前にすることもできます)&lt;/p&gt;

&lt;p&gt;requirejsの代わりに使うこともできるし、gulpやらを組み合わせてminifyなどもできるでしょう。&lt;/p&gt;

&lt;h3 id=&#34;とりあえず試すには:564bac21602d3e06fe43c7d8c37025b3&#34;&gt;とりあえず試すには&lt;/h3&gt;

&lt;p&gt;QUERY_STRINGをクライアントサイドで処理するのを試した。
ライブラリには&lt;a href=&#34;https://www.npmjs.org/package/qs&#34;&gt;qs&lt;/a&gt;を利用。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;nodejsをインストール&lt;/li&gt;
&lt;li&gt;npm install -g browserify&lt;/li&gt;
&lt;li&gt;npm install qs&lt;/li&gt;
&lt;li&gt;qsを使うコードをかく&lt;/li&gt;
&lt;li&gt;browserfyを実行&lt;/li&gt;
&lt;li&gt;生成されたjsを使う&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;nodejsのインストールは省略。&lt;/p&gt;

&lt;p&gt;browserifyコマンドを利用するために&lt;code&gt;npm intsall -g browseriy&lt;/code&gt;する。&lt;/p&gt;

&lt;p&gt;今回はqsを使うので&lt;code&gt;npm install qs&lt;/code&gt; をする。&lt;/p&gt;

&lt;p&gt;以下のコードは&lt;code&gt;main.js&lt;/code&gt;に書いた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var qs = require(&#39;qs&#39;);

console.log(qs.parse(&#39;aaa=bbb&amp;amp;ccc=ddd&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出力は以下のようになった。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{ aaa: &#39;bbb&#39;, ccc: &#39;ddd&#39; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これをブラウザ上でもうごくようにするためにbrowserifyを使う。&lt;/p&gt;

&lt;p&gt;以下のコマンドでbundle.jsを作成する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ browserify main.js -o bundle.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;qsの中身を&lt;code&gt;bundle.js&lt;/code&gt;の中に加えて&lt;code&gt;require&lt;/code&gt;を使える状態にもなってるらしいけど確認してない。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.html&lt;/code&gt;を作成してブラウザで開くとコンソールで開いてみると同じ出力がでている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;script src=&amp;quot;bundle.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;もうちょっとちゃんとquery-stringを解析してみる:564bac21602d3e06fe43c7d8c37025b3&#34;&gt;もうちょっとちゃんとQUERY_STRINGを解析してみる&lt;/h3&gt;

&lt;p&gt;さっきのは固定値だったので、ちゃんとURLから取得する。
&lt;code&gt;location.search&lt;/code&gt;の値を使った。&lt;/p&gt;

&lt;p&gt;main.js を以下のようにして、HTML上にも表示した。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var qs = require(&#39;qs&#39;);

var queryString = location.search || &amp;quot;&amp;quot;;
queryString = queryString.substr(1, queryString.length);
var params = qs.parse(queryString);
var json_text = JSON.stringify(params);
document.getElementsByTagName(&amp;quot;body&amp;quot;)[0].innerText = json_text;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;gulpと連携して変更検知して自動生成する:564bac21602d3e06fe43c7d8c37025b3&#34;&gt;gulpと連携して変更検知して自動生成する。&lt;/h3&gt;

&lt;p&gt;以下に書いてある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gulpjs/gulp/blob/master/docs/recipes/fast-browserify-builds-with-watchify.md&#34;&gt;gulp/fast-browserify-builds-with-watchify&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;bundel.js&lt;/code&gt;に補助の情報としてファイルの場所が表示されていたが絶対パスでリリースには使いづらかったので、&lt;code&gt;watchify.args.fullPaths = false;&lt;/code&gt;にしてみた。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;main.js&lt;/code&gt;をsrcディレクトリ移動して、出力先をdistディレクトリに変更しています。&lt;/p&gt;

&lt;p&gt;gulpfile.jsは以下のとおり。ほとんどそのまま。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var gulp = require(&#39;gulp&#39;);
var gutil = require(&#39;gulp-util&#39;);
var source = require(&#39;vinyl-source-stream&#39;);
var watchify = require(&#39;watchify&#39;);
var browserify = require(&#39;browserify&#39;);

gulp.task(&#39;watch&#39;, function() {
  watchify.args.fullPaths = false;
  var bundler = watchify(browserify(&#39;./src/main.js&#39;, watchify.args));

  // Optionally, you can apply transforms
  // and other configuration options on the
  // bundler just as you would with browserify
  bundler.transform(&#39;brfs&#39;);

  bundler.on(&#39;update&#39;, rebundle);

  function rebundle() {
    return bundler.bundle()
      // log errors if they happen
      .on(&#39;error&#39;, gutil.log.bind(gutil, &#39;Browserify Error&#39;))
      .pipe(source(&#39;bundle.js&#39;))
      .pipe(gulp.dest(&#39;./dist&#39;));
  }

  return rebundle();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/substack/watchify&#34;&gt;watchfy&lt;/a&gt;は&lt;code&gt;browserify&lt;/code&gt;のwatchモードにするためのものらしい。&lt;/p&gt;

&lt;p&gt;gulp で実行できるようにするには、以下のようなことをした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm install -g gulp
$ npm install --save-dev gulp gulp-util vinyl-source-stream watchify browserify brfs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;brfsはまだよくわかってない。&lt;/p&gt;

&lt;p&gt;あとはgulpを起動すればよい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gulp watch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;作成したものはGitHubに投げています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eiel/browserify-sample&#34;&gt;eiel/browserify-sample · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こちらは&lt;code&gt;npm run watch&lt;/code&gt;でうごくようにしてあります。
以下のコマンドを実行すると動作確認ができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm install
$ npm run watch
$  # index.htmlをブラウザでひらく。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt; の scripts を使うと&lt;code&gt;npm install -g gulp&lt;/code&gt;なしでも動かせるらしいので試した。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;  &amp;quot;scripts&amp;quot;: {
    &amp;quot;test&amp;quot;: &amp;quot;echo \&amp;quot;Error: no test specified\&amp;quot; &amp;amp;&amp;amp; exit 1&amp;quot;,
    &amp;quot;watch&amp;quot;: &amp;quot;gulp watch&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Macで open . が失敗する</title>
          <link>https://blog.eiel.info/blog/2014/10/28/failture-open-directory/</link>
          <pubDate>Tue, 28 Oct 2014 14:27:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/10/28/failture-open-directory/</guid>
          <description>

&lt;p&gt;&lt;code&gt;open .&lt;/code&gt;をしようとしたら &lt;code&gt;LSOpenURLsWithRole() failed&lt;/code&gt;が発生した。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ open .
LSOpenURLsWithRole() failed with error -600 for the file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;tmux のペインを全部消して開きなおしたら治った。&lt;/p&gt;

&lt;h3 id=&#34;参考文献:4d9c9a8755e21d7b8dfd07ea9f5e7d9c&#34;&gt;参考文献&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://superuser.com/questions/746606/open-safari-and-finder-failed-in-tmux&#34;&gt;osx - open Safari and Finder failed in tmux - Super User&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>最近のMacでRubyのビルドに失敗するなら brew unlink apple-gcc42とかしたらいいかもしれない</title>
          <link>https://blog.eiel.info/blog/2014/10/14/building-ruby-on-mac/</link>
          <pubDate>Tue, 14 Oct 2014 16:03:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/10/14/building-ruby-on-mac/</guid>
          <description>

&lt;p&gt;友人のMacでRubyのインストールに失敗するらしいということでログとかいろいろみせてもらった。&lt;/p&gt;

&lt;p&gt;結果だけいうと&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew unlink apple-gcc42
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を実行してもらったらなおった。&lt;/p&gt;

&lt;h3 id=&#34;もっと詳しく:30930d3af21b739c74dfe7cf5131e4cd&#34;&gt;もっと詳しく&lt;/h3&gt;

&lt;p&gt;rbenv と ruby-build をつかっているっぽくてログファイルを渡してもらった。
ログは失敗したときにここにあるよ。的なのが端末にでているはずだ。&lt;/p&gt;

&lt;p&gt;たぶん、&lt;code&gt;/var/folders/XXXXXXXXXXXXXXXXXX/ruby-build.20141014143529.76588.log&lt;/code&gt;みたいな感じになっている。
それを詳しい人に渡してきくようにするといいと思う。&lt;/p&gt;

&lt;p&gt;中身をみたら ./configure で失敗していたので config.log をみせてもらった。&lt;/p&gt;

&lt;p&gt;そしたら&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;configure:3064: result: x86_64-apple-darwin13.4.0
configure:3335: checking for gcc-4.2
configure:3351: found /usr/local/bin/gcc-4.2
configure:3362: result: gcc-4.2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となってて&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Target: i686-apple-darwin11
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となってて&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ld: library not found for -lcrt1.10.6.o
collect2: ld returned 1 exit status
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なってた。&lt;/p&gt;

&lt;p&gt;ターゲットが &lt;code&gt;x86_64-apple-darwin13&lt;/code&gt; になってないのがなんか嫌だなと思いつつ、事例が「&lt;a href=&#34;http://qa.atmarkit.co.jp/q/3491&#34;&gt;rbenvで ruby インストールエラー (OS X mavericks)  - QA@IT&lt;/a&gt;」に似ているので、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo ln -sf /usr/bin/llvm-gcc-4.2 /usr/bin/gcc-4.2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で解決すること的なことが書いてあるけどなんか嫌だなぁってことで、そもそもなんで&lt;code&gt;/usr/local/bin&lt;/code&gt;に&lt;code&gt;gcc-4.2&lt;/code&gt;があるねん、ということで&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ls -l /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;してもらったらsymlinkでhomebrewでインストールしたapple-gcc42だったので、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew unlink apple-gcc42
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;してもらったら、うまくいきました。&lt;/p&gt;

&lt;p&gt;おわり。&lt;/p&gt;

&lt;p&gt;たぶん、一時期の間、apple-gcc42をいれないとrubyがインストールできなかった時代があるのが原因と予想される。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参考 &lt;a href=&#34;http://stackoverflow.com/questions/12578220/cannot-install-ruby-1-9-2-in-mac-osx-10-8-1-due-to-symlink-error&#34;&gt;Cannot install ruby-1.9.2 in Mac OSX 10.8.1 due to symlink error - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>LT駆動開発08でHiroshima.rbをふりかえった</title>
          <link>https://blog.eiel.info/blog/2014/10/05/hiroshimarb-ltdd-08/</link>
          <pubDate>Sun, 05 Oct 2014 10:45:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/10/05/hiroshimarb-ltdd-08/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA08&#34;&gt;LT駆動開発08&lt;/a&gt;で活動が不定期になるHiroshima.rbについてふりかえった。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;21da6e502e5c0132ee3d367ad875ef0d&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href=&#34;http://hiroshimarb.github.io/&#34;&gt;Hiroshima.rb&lt;/a&gt;がリアルでのイベントを中止するらしいので、Hiroshima.rbについてふりかえることにした。&lt;/p&gt;

&lt;p&gt;結局、Hiroshima.rbなんて毎日楽しく生きられるようにするためにはじめたものらしい。&lt;/p&gt;

&lt;p&gt;そもそも、広島Ruby勉強会からRubyっていうテーマを外しただけのものが&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki&#34;&gt;LT駆動開発&lt;/a&gt;で、Hiroshima.rbの活動がなくなる。
それもどうなのかって思ったので、月に二回集まる時間をつくっただけである。
集まるだけのイベントは&lt;a href=&#34;http://great-h.github.io/&#34;&gt;すごい広島&lt;/a&gt;があるのであり、負担になってるなら休止するだけなのである。&lt;/p&gt;

&lt;p&gt;あと、およそ5年間の思い出を何か話したはずだが記憶にない。&lt;/p&gt;

&lt;p&gt;まあ、なにかRubyのイベントときどきしたらいい。
私がしてもよいし、誰か別の人でもよい。&lt;/p&gt;

&lt;p&gt;それでは、&lt;a href=&#34;https://note.mu/eiel/n/naeb4c3c02c5f&#34;&gt;また、あした。&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;読む必要ないネタの解説:646879e461c717a7faaeb84ac8c55036&#34;&gt;読む必要ないネタの解説&lt;/h3&gt;

&lt;p&gt;ネタに解説はいらない。&lt;/p&gt;

&lt;p&gt;「生きているよりマシさ」ここ最近よく聞いている曲で、タイトルほどネガティブじゃなくて、「生きているほうがマシさ」なんじゃないかと勘違いするという話をした。実にどうでもいい。&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/FyD0jRsAqNk?rel=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;この曲が好きな人たぶんこのフレーズが好きな人が多いでないかと思う。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;君と居られたのが嬉しい&lt;br&gt;
間違いだったけど嬉しい&lt;br&gt;
会えないのはちょっと寂しい&lt;br&gt;
誰かの君になってもいい嬉しい&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;解釈の仕方は自由だけど、人によっては、「君」をどんな人に当て入めても合うんじゃないだろうかなぁ。&lt;/p&gt;

&lt;p&gt;もう絶対会えない人がいて、その人にすごく感謝していたら、自分がしてもらったことを誰かにしたい。&lt;/p&gt;

&lt;p&gt;そんな風に感じている。
間違いだと思うのは、だいたいその人の主観による勘違いなのだけど、自覚しているのもやっぱり好きである。&lt;/p&gt;

&lt;p&gt;何が言いたいかと言うと、「嬉しいとおもったことは連鎖したら良いな」と思う。
Hiroshima.rbに感謝している人がいるのであれば、似たようなことをする人が出てくるんじゃないかと思う。&lt;/p&gt;

&lt;p&gt;関係はないが、「死んでいる方がマシさ」とは歌うが、「死んだ方がマシさ」なんて一言も言ってない。
そんな曖昧さに「生きたい」と思うかどうかは人それぞれなのであるような気がしているが、なんか、「だけど、生きようかな」って次の句を繋ぎたくなるのである。&lt;/p&gt;

&lt;p&gt;まあ、目立たないように生きたいのは正直な気持ちである。(ておくれ)&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>LT駆動開発08でWerckerのBOXの作り方の流れを軽く説明した</title>
          <link>https://blog.eiel.info/blog/2014/10/05/wercker-box-ltdd-08/</link>
          <pubDate>Sun, 05 Oct 2014 10:30:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/10/05/wercker-box-ltdd-08/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA08&#34;&gt;LT駆動開発08&lt;/a&gt;でWerckerのBOXの作り方を本当に軽く説明した。&lt;/p&gt;

&lt;p&gt;本当は図を用意したかった。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;fc4873602e5b0132b2d742ff5e01ba23&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;何が話したかったかというとWerckerはboxなりstepなり自分でつくれるけど、それはGitHubなどに公開してWerckerでCIするとWerckerづ使えるようになるという循環している話がしたかった。&lt;/p&gt;

&lt;p&gt;一言で言うと、&lt;strong&gt;CIで使うためにCIをする&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;BOXをつくっていて容量制限にひっかかったの懐しい思い出です。
BOXやSTEPを作ること自体はシンプルなものでいいので一度やってみると面白いと思います。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ChatworkをOperaで使うのはやめといたほうがいい。</title>
          <link>https://blog.eiel.info/blog/2014/10/01/chatwork-on-opera/</link>
          <pubDate>Wed, 01 Oct 2014 01:01:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/10/01/chatwork-on-opera/</guid>
          <description>&lt;p&gt;ずっとOperaでChatworkをつかっていた。
通知が微妙だなぁって思ってた。
Chromeで開いてみてみた。
不満に思うことがおきなかった。
Chromeでひらくべきだとおもった。&lt;/p&gt;

&lt;p&gt;そもそも僕はひらきっぱなしにしたいサイトはOperaで開いている。
デフォでタブが固定できるのが主な理由で、あとは開きっぱなしのものは閲覧用のブラウザと分離したいからだ。
なので、Operaでちゃっと動いてくれると実はすごく嬉しい。&lt;/p&gt;

&lt;p&gt;Operaで開いていてよく困るのが通知音がしないことが多いことだ。
特に開いているチャットは通知音がならない。
フォーカス管理まわりの挙動が違うんじゃないかと思う。&lt;/p&gt;

&lt;p&gt;こんなことしてる人はあまりいないと思うけど、記録に残すことにした。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>hiroshima.rbを休止することに決めた話</title>
          <link>https://blog.eiel.info/blog/2014/09/29/the-end-of-hiroshimarb/</link>
          <pubDate>Mon, 29 Sep 2014 06:17:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/09/29/the-end-of-hiroshimarb/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://hiroshimarb.github.io/&#34;&gt;Hiroshima.rb&lt;/a&gt;の活動を休止しようと思います。
すでに立ててしまっている&lt;a href=&#34;http://hiroshimarb.doorkeeper.jp/events/15457&#34;&gt;Hiroshima.rb #055&lt;/a&gt;を区切りにしたいと思いますが、
&lt;a href=&#34;http://great-study.doorkeeper.jp/events/13215&#34;&gt;すごい合同勉強会&lt;/a&gt;があるのでそこが最後の活動になると思います。&lt;/p&gt;

&lt;p&gt;理由は僕自身ががんばるための、根本的なモチベーションを失なってしまったからです。
&lt;a href=&#34;http://great-h.github.io/&#34;&gt;すごい広島&lt;/a&gt;の縮小も検討しています。
オフラインのすごい広島は月1ぐらいにしようかなと思っています。
エア参加オンリー化とか。&lt;/p&gt;

&lt;p&gt;一応、Hiroshima.rbを引き継ぎをしたい人は募集したいと思います。
気軽にご連絡ください。
さまざまな権限をお渡しします。&lt;/p&gt;

&lt;p&gt;そもそも現在、僕が主体となり、運営したり、主催しているものは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;すごい広島&lt;/li&gt;
&lt;li&gt;LT駆動開発&lt;/li&gt;
&lt;li&gt;Hiroshima.rb&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cssniteinhiroshimavol8.peatix.com/view&#34;&gt;CSS Nite in HIROSHIMA, Vol.8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://great-study.doorkeeper.jp/events/13215&#34;&gt;すごい合同勉強会&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;があります。&lt;/p&gt;

&lt;p&gt;お手伝いしているものとしては&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://osh-web.github.io/&#34;&gt;オープンセミナー2015@広島&lt;/a&gt; - 会計&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.android-group.jp/index.php?%A5%EF%A1%BC%A5%AD%A5%F3%A5%B0%A5%B0%A5%EB%A1%BC%A5%D7%2F%C3%E6%B9%F1%BB%D9%C9%F4&#34;&gt;日本Androidの会 中国支部&lt;/a&gt; - ウェブ担当?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://webtouchmeeting.com/&#34;&gt;WEB TOUCH MEETING&lt;/a&gt; - サポート&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dbstudychugoku.github.io/&#34;&gt;中国地方DB勉強会&lt;/a&gt; - 開催地が広島の場合のサポート&amp;amp;ウェブ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などがあります。&lt;/p&gt;

&lt;p&gt;正直にいうと一番つらいのはCSS Niteで、参加者からお金を集めるイベントなので、委員長からの引き継ぎもなく、いままで見てきた知識で指揮を取っていてつらいです。
このイベントを7回も行なった藤本さんは本当に素晴しいと思います。
しかも、WEB TOUCH MEETINGを継続している。
マジ半端ない。&lt;/p&gt;

&lt;p&gt;つまり、僕自身が完全にキャパシティオーバーなのです。&lt;/p&gt;

&lt;p&gt;心臓の病気で、身体障がい者3級なのだけど、体力が他の人よりなくてもこれぐらいはがんばれるというのは示せたと思います。
ただし、実質無職のようなフリーランスで、時間を自由に使えたからでもあると思います。&lt;/p&gt;

&lt;p&gt;オープンセミナー2015が終わるまでは一息つけそうにないですが、なんとかやっていきたいと思います。&lt;/p&gt;

&lt;p&gt;もしこれから勉強会をやってみようと思う人がいたら積極的にサポートしていきたいと思います。&lt;/p&gt;

&lt;h3 id=&#34;もっと詳しく:728d36f50c219f70ee65675b58b6f39a&#34;&gt;もっと詳しく&lt;/h3&gt;

&lt;p&gt;以下は読みたい人だけどうぞ。&lt;/p&gt;

&lt;p&gt;きっかけの根本を辿ると恋人ができたことです。
恋人を充分に大切にしつつ、コミュニティ活動するには僕は手を広げすぎました。
そもそも前提として「恋人ができることを諦めた」ということではじめることができたのが「すごい広島」や「&lt;a href=&#34;http://ltdd.doorkeeper.jp/&#34;&gt;LT駆動開発&lt;/a&gt;」でした。
だから、3ヶ月ほど前からコミュニティ活動を縮小することを考えていました。
家族がいて、子供がいて、勉強会に参加する人は本当にすごいなと学ぶことができました。主催する人は本当に半端ない。&lt;a href=&#34;https://twitter.com/soudai1025&#34;&gt;@soudai1025&lt;/a&gt;とかマジすごい。&lt;/p&gt;

&lt;p&gt;ただ、付き合いはじめて、コミュニティ活動を縮小するのは止めて欲しいという要望があったので、どこまでがんばれるか試してからにしようと考えていました。
結果、がんばることで生じた無理はどこかに存在してしまっていて、今回いろいろ諦めようと思いました。&lt;/p&gt;

&lt;p&gt;継続するためには無理しないことが大切です。そして、継続できるように維持することが大切です。&lt;/p&gt;

&lt;p&gt;僕自身は人前に出るのはとてもとても苦手で、大人数の前で話した後は自己嫌悪がすごいです。
人前で話すのは、だいぶ馴れたと思ってたのですが、オープンソースカンファレンスからのWEB TOUCH MEETINGの後はとてもつらかったです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2014/09/20/osc-2014/&#34;&gt;オープンソースカンファレンス2014広島 - LT駆動開発 ベストセッションズ 凪のライトニングトーク&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2014/09/21/great-h-book-osc-2014-and-wtm71/&#34;&gt;すごいHirohsimaの本について、OSC2014とWTM71で紹介した&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;それを乗り越えられたのは恋人の存在が支えになっていたからで、今日からはちょっとがんばれそうになくなってしまったので、心が折れてしまう前にいくつか諦めて表明しておこうというのがこの記事の意図です。&lt;/p&gt;

&lt;p&gt;あと僕自身はなるべくネガティブな感情はポジティブに変換して発信するようにしているつもりですがちょっと今回そんな風に見えない気がします。。
だから、最後にこの言葉を残していきます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://note.mu/eiel/n/nc78bb994e310&#34;&gt;ありがとう。&lt;/a&gt;
&lt;a href=&#34;https://note.mu/eiel/n/naeb4c3c02c5f&#34;&gt;また明日。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;やっぱりみんなそれぞれ、何かが凄い。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>RubyでFacebookのコメントに写真を投稿する</title>
          <link>https://blog.eiel.info/blog/2014/09/28/put-comment-with-photo-in-facebook/</link>
          <pubDate>Sun, 28 Sep 2014 12:44:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/09/28/put-comment-with-photo-in-facebook/</guid>
          <description>

&lt;p&gt;FacebookのGraph APIをさわった。コメントを自動でしたかったからだ。&lt;/p&gt;

&lt;p&gt;RubyでFacebook Graph APIをたたくにはサードパーティなgemを使うのでいろいろい種類がある。今回は&lt;a href=&#34;https://github.com/arsduo/koala&#34;&gt;koala&lt;/a&gt;を使用した。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.facebook.com/docs/graph-api/reference/v2.1/object/comments&#34;&gt;コメントに関するAPIの仕様はここに書いてある&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;kola&#39;

object_id = &amp;quot;OBJECT_ID&amp;quot;
file_path = &amp;quot;FILE_PATH&amp;quot;
oauth_access_token = &amp;quot;ACCESS_TOKEN&amp;quot;

file = Koala::UploadableIO.new(file_path)
graph = Koala::Facebook::API.new(oauth_access_token)
graph.put_object(object_id,&amp;quot;comments&amp;quot;, source: file)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、投稿できる。&lt;code&gt;graph.put_comment&lt;/code&gt; というメソッドがあるが、ファイルがわたせない。コメントしたいだけならこれで充分。&lt;/p&gt;

&lt;p&gt;object_id が必要になる。
てっとり早い方法はブラウザでコメントしたいポストを開いたらURLに書いてある数字がobject_idである。&lt;/p&gt;

&lt;p&gt;画像はsourceに指定するが Koala::UploadableIOで開いておく。&lt;/p&gt;

&lt;p&gt;またoauth_tokenが必要になる。
&lt;a href=&#34;https://developers.facebook.com/tools/explorer?method=GET&amp;amp;path=me%3Ffields%3Did%2Cname&amp;amp;version=v2.1&#34;&gt;Graph API Explorer&lt;/a&gt;(アクセスにはログインしている必要がありそう)``から作成できる。たぶん1、2時間しかつかえないはず。(ちゃんと調べてない)&lt;/p&gt;

&lt;p&gt;権限は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;user_photos&lt;/li&gt;
&lt;li&gt;publish_actions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;が最低必要で、書き込みする場所によって対応したものが必要。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;user_status&lt;/li&gt;
&lt;li&gt;user_groups&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などなど。必要に応じて追加する。&lt;/p&gt;

&lt;p&gt;user_photosをつけてなくて3時間ぐらい悩んだのはただの愚痴。&lt;/p&gt;

&lt;p&gt;ついでにRestClientで送りつける場合の方法&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;rest_client&#39;
url = &amp;quot;https://graph.facebook.com/v2.1/#{object_id}/comments?oauth_token=&amp;quot; + oauth_access_token
RestClient.post(url, &amp;quot;source&amp;quot; =&amp;gt; open(&amp;quot;/Users/eiel/Desktop/hoge.png&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;参考文献:73717b21f862f2e91a4b1d32275a2efb&#34;&gt;参考文献&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/184178/ruby-how-to-post-a-file-via-http-as-multipart-form-data&#34;&gt;Ruby: How to post a file via HTTP as multipart/form-data? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>re: Rails update時に値を変更して更新したい</title>
          <link>https://blog.eiel.info/blog/2014/09/24/re-modified-rails-update/</link>
          <pubDate>Wed, 24 Sep 2014 23:23:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/09/24/re-modified-rails-update/</guid>
          <description>

&lt;p&gt;友人のブログ記事へのレスです。
&lt;a href=&#34;http://akira-junkbox.blogspot.jp/2014/09/rails-update.html&#34;&gt;JunkBox～主に個人的防備録～: Rails update時に値を変更して更新したい。&lt;/a&gt;について。&lt;/p&gt;

&lt;p&gt;さすがにやってることがまわりくどい。コメント欄だと返信がつらいのでここにかく。&lt;/p&gt;

&lt;p&gt;まず、元の内容を引用します。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;たとえば、保存時１０円単位で四捨五入して保存したい場合。
ついでに登録日を１日ずらす。&lt;/p&gt;

&lt;p&gt;日付型の項目は、年、月、日、時、分、秒と別れてパラメタに入ってくるので、扱いづらい。ので、一旦モデルに突っ込んで処理し、その後ハッシュに変換する。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def update
  # パラメタを一旦モデルに突っ込む
  tmp = Syohin.new(syohin_params)
  # 金額を10円単位で丸める
  tmp.kingaku = tmp.kingaku.round(-1)
  # 日付型の登録日を１日ずらす。
  tmp.record_datetime = tmp.record_datetime + (60 * 60 * 24)
  # モデルをハッシュに変換する。
  tmp2 = tmp.attributes
  # 不要なキーを削除
  [&amp;quot;id&amp;quot;,&amp;quot;created_at&amp;quot;,&amp;quot;updated_at&amp;quot;].each do |key|
    tmp2.delete(key)
  end
  #updateに突っ込む
  respond_to do |format|
    if @syohin.update(tmp2)
      format.html { redirect_to @syohin, notice: &#39;更新完了&#39; }
    else
      format.html { render :edit }
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;わざわざ一時的な新しいモデルをつくっているけど、updateメソッドのsaveしなバージョンのメソッドがある。assign_attributesメソッドである。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def update
  @syohin.assign_attributes(syohin_params)
  @syohin.kingaku = @syohin.kingaku.round(-1) # 金額を10円単位で丸める
  @syohin.record_datetime += 1.day # 日付型の登録日を１日ずらす。
  respond_to do |format|
    if @syohin.save
      format.html { redirect_to @syohin, notice: &#39;Syohin was successfully updated.&#39; }
      format.json { render :show, status: :ok, location: @syohin }
    else
      format.html { render :edit }
      format.json { render json: @syohin.errors, status: :unprocessable_entity }
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;だいぶすっきりした。&lt;/p&gt;

&lt;p&gt;ついでに日付だけど、1日増加させたいなら 1.day を足すほうが確実によみやすいので変更した。&lt;/p&gt;

&lt;h3 id=&#34;そもそもcontrollerに処理を書きたくない:c270ff8ba5f5400af7698c69e481e7d3&#34;&gt;そもそもcontrollerに処理を書きたくない&lt;/h3&gt;

&lt;p&gt;整理したところで、これらの処理はコントローラレイヤーに書くべきだろうか。
モデルで処理しよう。&lt;/p&gt;

&lt;p&gt;コントローラは最初の状態にもどそう。なにも変更は必要ない。&lt;/p&gt;

&lt;p&gt;コールバックbefore_updateを使う。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Syohin &amp;lt; ActiveRecord::Base
  before_update do
    self.kingaku = kingaku.round(-1)
    self.record_datetime += 1.day
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回はないけど、新規の時も+1したいし、表示するときは+1してない値にしたいとかになるとまた別のテクニックが必要になりそうだけど今回は必要がないので割愛。&lt;/p&gt;

&lt;h3 id=&#34;動作確認用のコード:c270ff8ba5f5400af7698c69e481e7d3&#34;&gt;動作確認用のコード&lt;/h3&gt;

&lt;p&gt;タグ v1 と v2 をきってあるので動かしたい場合はそこにチェックアウトしてください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eiel/modified-update-rails-sample&#34;&gt;modified-update-rails-sample&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>すごいHirohsimaの本について、OSC2014とWTM71で紹介した</title>
          <link>https://blog.eiel.info/blog/2014/09/21/great-h-book-osc-2014-and-wtm71/</link>
          <pubDate>Sun, 21 Sep 2014 10:50:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/09/21/great-h-book-osc-2014-and-wtm71/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://great-h.github.io/&#34;&gt;すごい広島&lt;/a&gt;を紹介するための書籍(通称、薄い本)である、すごいHiroshimaの本というものを作成しました。
作成した主の目的はオープンソースカンファレンスで展示をするためです。&lt;/p&gt;

&lt;p&gt;作成した電子書籍は&lt;a href=&#34;http://great-h-book.eiel.info/&#34;&gt;すごいHiroshimaの本置場&lt;/a&gt;というところに置いています。
ePubとPDFを提供しています。&lt;/p&gt;

&lt;h3 id=&#34;osc2014広島編:017021d1665f9696038118823e7cad42&#34;&gt;OSC2014広島編&lt;/h3&gt;

&lt;p&gt;せっかく電子書籍を作ったので、興味をもってもらうために、&lt;a href=&#34;http://www.ospn.jp/osc2014-hiroshima/&#34;&gt;オープンソースカンファレンス2014広島&lt;/a&gt;の&lt;a href=&#34;https://www.ospn.jp/osc2014-hiroshima/modules/eguide/event.php?eid=7&#34;&gt;LT駆動開発 ベストセッションズ – 凪のライトニングトーク&lt;/a&gt;の中でライトニングトークをしました。&lt;/p&gt;

&lt;p&gt;題して、すごいHirohsimaの本のここがヒドいです。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;23114bc022a7013253c762b11b8dfdf5&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;少し、補足。&lt;/p&gt;

&lt;p&gt;しつこいですが、&lt;a href=&#34;https://www.google.com/webhp?sourceid=chrome-instant&amp;amp;ion=1&amp;amp;espv=2&amp;amp;ie=UTF-8#q=%E6%88%91%E9%A6%AC&#34;&gt;我馬&lt;/a&gt;は広島のラーメン屋です。博多ラーメンを提供します。&lt;/p&gt;

&lt;p&gt;私とすごい広島の章は実際には4人しか書いていません。
一人で5役している人がいます。誰やねん。あ、でも一役は入れ替わる可能性も。&lt;/p&gt;

&lt;h2 id=&#34;第71回-web-touch-meeting:017021d1665f9696038118823e7cad42&#34;&gt;第71回 WEB TOUCH MEETING&lt;/h2&gt;

&lt;p&gt;OSC2014広島と同日に行なわれた&lt;a href=&#34;http://webtouchmeeting.doorkeeper.jp/events/15334&#34;&gt;WEB TOUCH MEETING 71&lt;/a&gt;で、Web製作者向けにこの書籍をつくるのに利用技術がどんなものなのか、すごい速さでざっくりと紹介しました。
対象者をWebの初心者にすればよかったと少し反省しております。&lt;/p&gt;

&lt;p&gt;速さ自体はやや意図的にやった部分はあるのですが、いろんな参加者がいて真ん中あたりの人を対象にしてしまった感じがあります。
よくわからないけど、キーワードをひろってもらったりしてもらえた良いかなぁ。という感じでつくりました。&lt;/p&gt;

&lt;p&gt;それよりも図はもっとがんばらなければ。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;5010f1e023630132a9090a763f010e40&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;スライドは前半のすごいHiroshimaの本のここがヒドいの部分はカットしてアップロードしています。&lt;/p&gt;

&lt;p&gt;そして補足。&lt;/p&gt;

&lt;p&gt;電子書籍をつくるためには&lt;a href=&#34;https://github.com/kmuto/review&#34;&gt;Re:VIEW&lt;/a&gt;を利用しました。はじめて挑戦する場合は&lt;a href=&#34;https://github.com/kmuto/review/blob/master/doc/quickstart.rdoc&#34;&gt;クイックスタートガイド&lt;/a&gt;を読めば良いと思います。&lt;/p&gt;

&lt;p&gt;Re:VIEWは電子書籍をつくりたい場合でも、技術書を書きたい人向けのものっぽいです。プログラミングなどをしてない人には少し扱うのが難しいかもしれません。
ただ、環境さえ用意できれば、使うこと自体はは難しくはないと思います。
書くだけとかなら。&lt;/p&gt;

&lt;p&gt;本の中でグラフをかくのに今回gnuplotを利用しました。
gnuplotは理系の学生であれば利用したことが多いと思われるグラフ作成ツールです。コマンドラインから利用します。&lt;/p&gt;

&lt;p&gt;Re:VIEWではgnuplotのコマンドを書く方法が用意されていて、PDFに変換する時はPDF用の画像をつくってくれて、ePubに変換する時はePub用に画像をつくってくれます。
ありがたい。&lt;/p&gt;

&lt;p&gt;この本をつくるにあたって、最初にしたことは、ePubとPDFに変換する部分を自動化したことです。
もし途中で執筆に誰かが参加しようと思った時に作成されるものをわかりやすくしたり、本が生成されてるところを見せて、興味をもってもらおうと思ったというのが主な目的です。
他にも執筆に集中してしまって、いざePubやPDFに変換する際にトラブルで間に合わないという自体を避けるなどの理由もあります。
実際に文字化けとかグラフが生成されなかったり、予期していなかったエラーを事前に発見することができました。&lt;/p&gt;

&lt;p&gt;Octokitは付録の「すごい広島の統計情報」「すごい広島の参加者」を作成するために、利用しています。すごい広島のサイトの情報がおいてあるGitHubのリポジトリ&lt;a href=&#34;https://github.com/great-h/great-h.github.io&#34;&gt;great-h.github.io&lt;/a&gt;から情報を取得して、gnuplot用のCSVを作成したり、Re:VIEWの&lt;code&gt;.re&lt;/code&gt;ファイル内に挿入する文字列を作成しています。&lt;/p&gt;

&lt;p&gt;Octokitを使った例として、&lt;a href=&#34;http://blog.eiel.info/blog/2014/09/13/github-scouter/&#34;&gt;GitHub戦闘力&lt;/a&gt;があります。(GitHub戦闘力が完全にこれを作るときの副産物である)&lt;/p&gt;

&lt;p&gt;蛇足ですが、この電子書籍には他にも最新の情報を取得して、更新している部分がいくつかあります。
コミットの数なんかは随時変化していくので、ePubやPDFを作成する際に最新情報を使うようにしています。&lt;/p&gt;

&lt;p&gt;対象読者に対して説明不足になってしまうのですが、この電子書籍はgit pushしたら自動生成するようにしています。
これを実現しているのがCIサーバで今回利用したサービスが&lt;a href=&#34;http://wercker.com/&#34;&gt;Wercer&lt;/a&gt;です。
CIサーバでできることは結局は自分のコンピュータできることと基本的に同じです。
しかし、CIサーバを使うと基本的にクリーンな状態でePubやPDFを作成することができます。
これがどんな時に嬉しいかというと、執筆者が増えた時に、ePubやPDFをつくるのに、自分が追加し忘れたファイルがないことを保証できます。
(一部のファイルがキャッシュされたりはじますが…)
また、ePubやPDFを生成するための手順をコードに落とす必要がでるため、作成方法が明確なります。&lt;/p&gt;

&lt;p&gt;こういったことを早めにやっておくと、本を作成するための全体像を把握しやすくなります。&lt;/p&gt;

&lt;p&gt;Werckerを使う際にRe:VIEWを使うための仮想マシン(box)も作成しました。
この詳しい話は今回割愛しますが、リポジトリは晒しておきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eiel/wercker-box-review&#34;&gt;eiel/wercker-box-review&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Werckerで作成したePubやPDFはAmazon S3へアップロードしています。
作成したファイルは&lt;code&gt;tmp/great-h-book-[バージョン番号]&lt;/code&gt;というファイル名にして保存しています。
これらのファイルは1週間たつと削除されるようにしています。こちらはAmazon S3の機能です。
ただ、masterブランチものをCIサーバに動かした場合は、&lt;code&gt;great-h-book&lt;/code&gt;というファイル名にして、消えないようにしてあります。
(厳密にはファイル名はオブジェクト名ですが…)&lt;/p&gt;

&lt;p&gt;Amazon S3はとても安価で信頼性も高いので、最近、成果物はなるべくS3におくようにしています。特に変更がもうないものを置くのが良いと思います。&lt;/p&gt;

&lt;p&gt;最後に、ePubやPDFが生成されたことがみんなに伝わらないと意味がないので、Twitterに流すようにしています。この時にユニークなハッシュタグをつけるようにしています。
&lt;a href=&#34;https://sites.google.com/site/yorufukurou/&#34;&gt;夜フクロウ&lt;/a&gt;は特定のキーワードを含むツイートを音声つきで通知する機能があるので、これも使ってます。
とても便利です。&lt;/p&gt;

&lt;p&gt;継続的デリバリなんて言葉を使いましたが、みんなで一緒になって何かをつくるときはみんが嬉しくなるようにやるのが大切だと思います。
書く人も、確認する人も、作りたい人も、読む人もみんなチームだよね。&lt;/p&gt;

&lt;p&gt;意外と長くなってしまった。
関連する技術を深く掘り下げて紹介して欲しい要望があれば&lt;a href=&#34;http://ltdd.doorkeeper.jp/&#34;&gt;LT駆動&lt;/a&gt;や&lt;a href=&#34;http://webtouchmeeting.com/&#34;&gt;WEB TOUCH MEETING&lt;/a&gt;で紹介したいと思います。&lt;/p&gt;

&lt;h3 id=&#34;リンク:017021d1665f9696038118823e7cad42&#34;&gt;リンク&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://oreilly-generator.com/&#34;&gt;O&amp;rsquo;Reilly Generator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;関連:017021d1665f9696038118823e7cad42&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2014/09/20/osc-2014/&#34;&gt;オープンソースカンファレンス2014広島 - LT駆動開発 ベストセッションズ 凪のライトニングトーク&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>オープンソースカンファレンス2014広島 - LT駆動開発 ベストセッションズ 凪のライトニングトーク</title>
          <link>https://blog.eiel.info/blog/2014/09/20/osc-2014/</link>
          <pubDate>Sat, 20 Sep 2014 12:44:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/09/20/osc-2014/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://www.ospn.jp/osc2014-hiroshima/&#34;&gt;オープンソースカンファレンス2014広島&lt;/a&gt;の&lt;a href=&#34;https://www.ospn.jp/osc2014-hiroshima/modules/eguide/event.php?eid=7&#34;&gt;LT駆動開発 ベストセッションズ – 凪のライトニングトーク&lt;/a&gt;の中でライトニングトークをしてきました。&lt;/p&gt;

&lt;p&gt;今回は&lt;a href=&#34;http://ltdd.doorkeeper.jp/&#34;&gt;LT駆動開発&lt;/a&gt;の説明を担当させていただきました。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;f83d11b022a50132ff8e7a94a7c4ee2d&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;LT駆動開発の説明もしましたが、LT駆動開発の中でよくあることを紹介しました。&lt;/p&gt;

&lt;p&gt;以下補足&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;LT駆動の説明をする人を毎回変えるようにしているのは、参加主旨をみんなに考えて欲しいからです。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gaba-2000.com/&#34;&gt;我馬&lt;/a&gt;は広島のラーメン屋です。博多ラーメンを提供しています。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;その他のLTについても随時公開される予定です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA-%E3%83%99%E3%82%B9%E3%83%88%E3%82%BB%E3%83%83%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%BA-%E2%80%93-%E5%87%AA%E3%81%AE%E3%83%A9%E3%82%A4%E3%83%88%E3%83%8B%E3%83%B3%E3%82%B0%E3%83%88%E3%83%BC%E3%82%AF&#34;&gt;詳しくはこちら&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://ltdd.doorkeeper.jp/events/15063&#34;&gt;また、来月のLT駆動開発の申し込みはこちらになります。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;テーマは「おれたちのLT駆動はまだはじまったばかりだ」ということでLT駆動2期のスタートです。&lt;/p&gt;

&lt;h3 id=&#34;関連:24e83adf4ada0d4b00690712441b1da0&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:4000/blog/2014/09/21/great-h-book-osc-2014-and-wtm71/&#34;&gt;すごいHirohsimaの本について、OSC2014とWTM71で紹介した&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>GitHub戦闘力を提案してみた - 座駆動LT大会</title>
          <link>https://blog.eiel.info/blog/2014/09/13/github-scouter/</link>
          <pubDate>Sat, 13 Sep 2014 22:38:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/09/13/github-scouter/</guid>
          <description>

&lt;p&gt;座駆動LT大会で「戦闘力」というLTをしてきました。&lt;/p&gt;

&lt;p&gt;座駆動LT大会とは、岡山にはRyouteiという素晴しいお店があり、そこの座スタジアムという部屋は非常にLTに適した場所です。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;大都会岡山が誇る最強の懇親会会場「Ryoutei 座・スタジアム」でLT大会を開催します！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;というわけで、今回参加してきた時のスライドを紹介します。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;9f557cd01d560132ff4612198c64cd5d&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;戦闘力といえば、Vim戦闘力やEmacs戦闘力がありますが、GitHub戦闘力を適当に定義してみました。
スターの数がGitHub戦闘力と言われているのもみかけましたが、折角なのでいろいろ考えてみました。&lt;/p&gt;

&lt;p&gt;実は&lt;a href=&#34;http://www.ospn.jp/osc2014-hiroshima/&#34;&gt;オープンソースカンフェレンス2014広島&lt;/a&gt;のために制作しているものの中でGitHub APIを使用してつくっていたものがあり、そのノウハウで、そのついでに作成したのが今回の&lt;code&gt;github_scouter&lt;/code&gt;です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eiel/github_scouter&#34;&gt;eiel/github_scouter · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;オープンソースカンファレンスは今週末の土曜日、2014年9月20日に予定されています。
予約数があまり多くないらしいので、今後も継続して欲しいと考えている方は参加や告知を協力していただけると助かります。&lt;/p&gt;

&lt;p&gt;ちなみに私は&lt;a href=&#34;https://www.ospn.jp/osc2014-hiroshima/modules/eguide/event.php?eid=7&#34;&gt;LT駆動開発ベストセッションズ&lt;/a&gt;でLTをする予定です。&lt;/p&gt;

&lt;p&gt;閑話休題。
今回はGitHub戦闘力を攻撃力、知力、すばやさの3種類に分けて戦闘力を定義しました。&lt;/p&gt;

&lt;p&gt;攻撃力は所有リポジトリを元に算出しました。&lt;/p&gt;

&lt;p&gt;知力はさまざまな言語を利用していると高くなるようにしました。&lt;/p&gt;

&lt;p&gt;すばやさはOrganizationの情報を元にチーム力の高さとして算出しました。&lt;/p&gt;

&lt;p&gt;と、非常にどうでもいい戦闘力ですが、みなさんも御自分の戦闘力を算出してみてはいかがでしょうか。
また、APIの利用しすぎにご注意ください。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p&gt;.&lt;a href=&#34;https://twitter.com/eielh&#34;&gt;@eielh&lt;/a&gt; 「わたしの戦闘力は168Gです」 &lt;a href=&#34;https://twitter.com/hashtag/zadrvnlt?src=hash&#34;&gt;#zadrvnlt&lt;/a&gt;&lt;/p&gt;&amp;mdash; (っ’ヮ’c) ＜ 君のほうがかわいいよ (@ryosms) &lt;a href=&#34;https://twitter.com/ryosms/status/510772214694572032&#34;&gt;2014, 9月 13&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
かけ算バージョンは表計算で出したので、コマンドを用意していません。
0にならないように1を加えてからかけ算しています。&lt;/p&gt;

&lt;p&gt;今後、計算式を定義しなおしてVersion2も検討したいと考えているのはまた別の話です。&lt;/p&gt;

&lt;h1 id=&#34;追記:0769bc5dcffbc42073a9913880f78a40&#34;&gt;追記&lt;/h1&gt;

&lt;p&gt;Gem化して欲しいって要望があったのでしておきました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem install github_scouter
$ github_scouter [GitHub ID]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で利用できます。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>LT駆動開発で hubot をつかったオフィスに誰がいるかわかるコマンドを作成した話をした</title>
          <link>https://blog.eiel.info/blog/2014/09/06/ltdd-07/</link>
          <pubDate>Sat, 06 Sep 2014 19:43:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/09/06/ltdd-07/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki&#34;&gt;LT駆動開発07&lt;/a&gt; でLTしてきた。&lt;/p&gt;

&lt;p&gt;今回は hubot をつかってオフィスに誰がいるのかわかるようにした。
どうしてそんなことをしようとするのか、そして簡単に仕組みを紹介しました。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;78832e3017df013292f406657be3bf12&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;みんなが積極的に関わろうとするにはどうするのか。
おもしろかったり便利だと思うことをやること。
興味をもってもらうことだ。&lt;/p&gt;

&lt;p&gt;オフィスには人がいたりいなかったりで、「誰かいたらいこうかなー」とか思うこともあるので完全に俺得である。&lt;/p&gt;

&lt;p&gt;スライド内のデモ動画はこちらにあります。&lt;/p&gt;

&lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/zb9Y-ZjCW2c?rel=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;結構みんなつかっていて、コンボも流行っている。
そのコマンドは&lt;code&gt;突然のおるんか&lt;/code&gt;とかですね。&lt;/p&gt;

&lt;p&gt;デモにいれておけばよかった。&lt;/p&gt;

&lt;p&gt;仕組みはMACアドレスをつかっていて、みんなノートPCなのでなかなかうまくいっている。
最初はデーモンをつくろうかと思っていたけど、なくても解決できそうなのでこうなった。&lt;/p&gt;

&lt;p&gt;おまけで、他につくったコマンドを紹介しとく。&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/eNSgpdIUfVo?rel=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;アリア社長とアリシアさんの画像は&lt;a href=&#34;http://www.moaibu.com/sozai/aria/index.htm&#34;&gt;こちらから拝借&lt;/a&gt;しております。
ありがとうございます。&lt;/p&gt;

&lt;p&gt;非常に癒される。&lt;/p&gt;

&lt;h2 id=&#34;おまけ:71546956586175d61ecba28f023c94ef&#34;&gt;おまけ&lt;/h2&gt;

&lt;p&gt;LT駆動では予備のスライドを用意しておくことが大事らしい。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;c84e2e2017de013292f306657be3bf12&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Haskell のフィールドラベルをもつデータ型について</title>
          <link>https://blog.eiel.info/blog/2014/09/06/datatypes-with-field-labels-for-haskell/</link>
          <pubDate>Sat, 06 Sep 2014 09:26:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/09/06/datatypes-with-field-labels-for-haskell/</guid>
          <description>

&lt;p&gt;Haskellのレコード構文というかフィールドラベルをもつデータ型についてなんだけど、苦手意識というか更新の方法を最近までよくしらなくてうまく使えてなかった。
わかったことを含めて書いておく。&lt;/p&gt;

&lt;p&gt;フィールドラベルをもつデータ型はざっくりいえば、構造体のようなものである。名前と年齢をもつ「人」を表現する型をつくってみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;data Person = Person { name :: String, age :: Int } deriving Show
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記はフィールラベルがないデータ型にいろいろおまけがついてくるだけなので&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;data Perosn = Person String Int
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とした場合と同じような使い方ができる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;ghci&amp;gt; data Person = Person { name :: String, age :: Int } deriving Show
ghci&amp;gt; Person &amp;quot;eiel&amp;quot; 30
Person {name = &amp;quot;eiel&amp;quot;, age = 30}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;せっかくラベルがあるので、生かした使い方をしてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;ghci&amp;gt; data Person = Person { name :: String, age :: Int } deriving Show
ghci&amp;gt; Person { name = &amp;quot;eiel&amp;quot;, age = 30 }
Person {name = &amp;quot;eiel&amp;quot;, age = 30}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;冗長であるがわかりやすい。&lt;/p&gt;

&lt;p&gt;ラベルをつけるとよいところは値を取り出すのが少し楽になる。
ラベルと同名の関数が生成される。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;ghci&amp;gt; data Person = Person { name :: String, age :: Int } deriving Show
ghci&amp;gt; let person = Person { name = &amp;quot;eiel&amp;quot;, age = 30 }
ghci&amp;gt; name person
&amp;quot;eiel&amp;quot;
ghci&amp;gt; age person
30
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;特に意味はないが let を使わない場合。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;ghci&amp;gt; data Person = Person { name :: String, age :: Int } deriving Show
ghci&amp;gt; name Person { name = &amp;quot;eiel&amp;quot;, age = 30 }
&amp;quot;eiel&amp;quot;
ghci&amp;gt; age Person { name = &amp;quot;eiel&amp;quot;, age = 30 }
30
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;補足で、ラベルがない場合どうするか。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;ghci&amp;gt; data Person = Person { name :: String, age :: Int } deriving Show
ghci&amp;gt; let person = Person { name = &amp;quot;eiel&amp;quot;, age = 30 }
ghci&amp;gt; case person of Person name _ = name
&amp;quot;eiel&amp;quot;
ghci&amp;gt; case person of Person _ age = age
30
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;値を更新する方法。
ここをちゃんと知らなくて使ってなかったけど、とても簡単。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;ghci&amp;gt; data Person = Person { name :: String, age :: Int } deriving Show
ghci&amp;gt; let person = Person { name = &amp;quot;eiel&amp;quot;, age = 30 }
ghci&amp;gt; person { name = &amp;quot;eielh&amp;quot; }
Person {name = &amp;quot;eielh&amp;quot;, age = 30}
ghci&amp;gt; person { name = &amp;quot;eielh&amp;quot;, age = 20 }
Person {name = &amp;quot;eielh&amp;quot;, age = 20}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&amp;gt; 突然のハタチ &amp;lt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;特に意味はないが lot を使わない場合。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;ghci&amp;gt; data Person = Person { name :: String, age :: Int } deriving Show
ghci&amp;gt; Person { name = &amp;quot;eiel&amp;quot;, age = 30 } { name = &amp;quot;eielh&amp;quot; }
Person {name = &amp;quot;eielh&amp;quot;, age = 30}
ghci&amp;gt; Person { name = &amp;quot;eiel&amp;quot;, age = 30 } { name = &amp;quot;eielh&amp;quot;, age = 20 }
Person {name = &amp;quot;eielh&amp;quot;, age = 20}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ということはこういうこともできる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;ghci&amp;gt; data Person = Person { name :: String, age :: Int } deriving Show
ghci&amp;gt; Person { name = &amp;quot;eiel&amp;quot;, age = 30 } { name = &amp;quot;eielh&amp;quot; } { age = 20 }
Person {name = &amp;quot;eielh&amp;quot;, age = 20}
ghci&amp;gt; Person { name = &amp;quot;eiel&amp;quot;, age = 30 } { name = &amp;quot;eielh&amp;quot; } { name = &amp;quot;goro&amp;quot; }
Person {name = &amp;quot;goro&amp;quot;, age = 30}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;補足で、ラベルがない場合どうするか。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;ghci&amp;gt; data Person = Person { name :: String, age :: Int } deriving Show
ghci&amp;gt; let person = Person { name = &amp;quot;eiel&amp;quot;, age = 30 }
ghci&amp;gt; case (case person of Person name age -&amp;gt; Person &amp;quot;eielh&amp;quot; age) of Person name age -&amp;gt; Person name 20
Person {name = &amp;quot;eielh&amp;quot;, age = 30}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最適化できるけど、あえてしっかり書いてみる。これはつらい。
というか case 万能すぎ。&lt;/p&gt;

&lt;p&gt;「構造体なんてただの組で、アクセスしやすいようにラベルがついてるだけなんだよ」と言われている気がした。&lt;/p&gt;

&lt;p&gt;あれ?これ、十分&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki&#34;&gt;LT駆動開発&lt;/a&gt;でネタにできた気がする…しまった。&lt;/p&gt;

&lt;h3 id=&#34;参考文献:d941a2b8d40372519c254f53324860b0&#34;&gt;参考文献&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.haskell.org/onlinereport/haskell2010/haskellch3.html#x8-490003.15&#34;&gt;Haskell 2010 3 Expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sampou.org/haskell/report-revised-j/exps.html&#34;&gt;Haskell 98 Report: 式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2番目のリンクは山下先生の日本語訳。2010はまだ訳されてない模様。
3.15節からあたり。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Git で現在チェックアウトしているコミットのID</title>
          <link>https://blog.eiel.info/blog/2014/09/04/git-revision/</link>
          <pubDate>Thu, 04 Sep 2014 14:57:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/09/04/git-revision/</guid>
          <description>

&lt;p&gt;稀に今チェックアウトしてるところのコミットIDを知りたいときがある。
ぐぐったら下記のページがあったけど、grep やら awk やらつかっててずるい気がした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tmtk.org/blog/2011/05/164&#34;&gt;gitリポジトリのリビジョン(コミットID)を取得するワンライナー | tomotaka-itoの日記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;git log |grep &#39;^commit&#39; |head -1|awk &#39;{print $2}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;git コマンドだけで完結できる気がするので help を読んだりした。&lt;/p&gt;

&lt;p&gt;以下に落ちついた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git show -s --format=%H
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;git log -n 1 --format=%H
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;関連:f016f6e6325e2e2ee0ad0ea357d50987&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/06/04/git-log-s/&#34;&gt;このコード書いた誰だよ! そんな時の git log -S でもしてみよう - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/05/28/cotains-commit-in-tags/&#34;&gt;Git で特定のコミットがどのタグに含まれているか確認する - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Redis に保存されてる値を見ようと思った時に覚えておきたい redis コマンド</title>
          <link>https://blog.eiel.info/blog/2014/08/26/remember-redis/</link>
          <pubDate>Tue, 26 Aug 2014 17:54:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/08/26/remember-redis/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://redis.io/&#34;&gt;redis&lt;/a&gt; なんか使ったことないけど redis を使うアプリケーションを使う場合に、デバッグや動作確認をするのに、データベースの中身が知りたい場合がある。&lt;/p&gt;

&lt;p&gt;そんな時に覚えておきたいことを整理してみた。&lt;/p&gt;

&lt;p&gt;自分が hubot や sensu の動きを確認するのに必要だったことを書いてるだけで、 redis のことはよく知らない。&lt;/p&gt;

&lt;p&gt;コマンドラインで redis にアクセスするには redis-cli コマンドを使用する。&lt;/p&gt;

&lt;p&gt;redis-cli を実行して、対話環境を利用してもいいし、引数を追加して実行することもできる。&lt;/p&gt;

&lt;p&gt;最初に紹介する keys コマンドを例にすると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli
&amp;gt; keys *
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli keys &amp;quot;*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;といったアクセス方法がある。&lt;/p&gt;

&lt;p&gt;ここで紹介するコマンドの一覧&lt;/p&gt;

&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;コマンド&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;keys *&lt;/td&gt;&lt;td&gt;redisに登録されているキーの一覧を取得する key のパターンを指定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;type [key]&lt;/td&gt;&lt;td&gt;value の種類を返す。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;get [key]&lt;/td&gt;&lt;td&gt;type が string だった場合の値をみる方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lrange [key] 0 -1&lt;/td&gt;&lt;td&gt;type が list だった場合の値をみる方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;smembers [key]&lt;/td&gt;&lt;td&gt;type が set だった場合の値をみる方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;zrange [key] 0 -1&lt;/td&gt;&lt;td&gt;type が zsetだった場合の値をみる方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hgetall [key]&lt;/td&gt;&lt;td&gt;type が hash だった場合の値をみる方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hkeys [key]&lt;/td&gt;&lt;td&gt;type が hash だった場合に field の一覧をみる方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hvals [key]&lt;/td&gt;&lt;td&gt;type が hash だった場合に value の一覧をみる方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;monitor&lt;/td&gt;&lt;td&gt;redisサーバが受けとったコマンドを表示する&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;設定したりもっと細かい作業をしたい場合は help コマンドを使う。
種類ごとのヘルプをみたい場合は &lt;code&gt;@&lt;/code&gt; をつけるとよい&lt;/p&gt;

&lt;p&gt;例えばリスト関連のコマンドを知りたいなら&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; help @list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;といった感じ。&lt;/p&gt;

&lt;p&gt;以下は解説&lt;/p&gt;

&lt;h3 id=&#34;keys:3918f65df03d8c723f59e27787291cdf&#34;&gt;keys&lt;/h3&gt;

&lt;p&gt;登録されている key がわからないと何もできないので、keyの一覧をみる方法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; keys *
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;引数にはパターンを入力する hogeではじまるものに絞りこみしたい場合は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; key hoge*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とかする。shell の場合はアスタリスクはエスケープする必要があるのに注意&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli keys \*
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;type:3918f65df03d8c723f59e27787291cdf&#34;&gt;type&lt;/h3&gt;

&lt;p&gt;redis は key に格納された値の種類によって取得コマンドが違うらしい。
値をみるために種類の確認が必要。&lt;/p&gt;

&lt;p&gt;hoge というキーがあった場合は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; type hoge
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とする。&lt;/p&gt;

&lt;p&gt;返す値としては&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;string&lt;/li&gt;
&lt;li&gt;list&lt;/li&gt;
&lt;li&gt;set&lt;/li&gt;
&lt;li&gt;zset&lt;/li&gt;
&lt;li&gt;hash&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;があるっぱい。&lt;/p&gt;

&lt;h3 id=&#34;string-だった場合:3918f65df03d8c723f59e27787291cdf&#34;&gt;string だった場合&lt;/h3&gt;

&lt;p&gt;キーとキーの種類が別れば値を見ることができる。&lt;/p&gt;

&lt;p&gt;キーhoge の値の種類が string だったら get を使う&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; get hoge
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに設定する場合は set。hubot は json が string で保存してあった。&lt;/p&gt;

&lt;h3 id=&#34;list-だった場合:3918f65df03d8c723f59e27787291cdf&#34;&gt;list だった場合&lt;/h3&gt;

&lt;p&gt;キーhoge の値の種類が list だった lrange を使う。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; lrange hoge 0 -1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先頭 から 最後から1番目までの値を返せという感じになる。
必要な範囲を指定したい場合は微調整するとよい。&lt;/p&gt;

&lt;h3 id=&#34;set-だった場合:3918f65df03d8c723f59e27787291cdf&#34;&gt;set だった場合&lt;/h3&gt;

&lt;p&gt;キーhoge の値の種類が set だった場合は smembers を使う。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; smembers hoge
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;zset-だった場合:3918f65df03d8c723f59e27787291cdf&#34;&gt;zset だった場合&lt;/h3&gt;

&lt;p&gt;キーhoge の値の種類が zset だった場合は zrange を使う。
zset 順序のある集合&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; zrange hoge 0 -1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;list の時と同じ。&lt;/p&gt;

&lt;h3 id=&#34;hash-だった場合:3918f65df03d8c723f59e27787291cdf&#34;&gt;hash だった場合&lt;/h3&gt;

&lt;p&gt;キーhoge の値の種類が hash だった場合は hgetall を使う。
ただし、field と value が交互に表示されてよみやすくはない。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; hgetall hoge
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;field だけや value だけの一覧をみたい場合は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; hkeys hoge
&amp;gt; hvals hoge
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;がある。&lt;/p&gt;

&lt;p&gt;なぜ hfields ではないのか。&lt;/p&gt;

&lt;h3 id=&#34;アクセスされてるのか確認したい時:3918f65df03d8c723f59e27787291cdf&#34;&gt;アクセスされてるのか確認したい時&lt;/h3&gt;

&lt;p&gt;ログをみてもいいのかしれないけど &lt;code&gt;monitor&lt;/code&gt; コマンドが便利。
データベース内で何が起きているかを理解するのに良いらしい。&lt;/p&gt;

&lt;p&gt;tail -f みたいな感じ。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:3918f65df03d8c723f59e27787291cdf&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;これだけ知っていれば十分に redis の中身を見ることができる気がする。&lt;/p&gt;

&lt;p&gt;詳しいことは help コマンドとか redis のサイトを見よう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://redis.shibu.jp/&#34;&gt;日本語訳もある&lt;/a&gt;&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=eiel-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=B00HSC64P8&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Haskell で Selenium</title>
          <link>https://blog.eiel.info/blog/2014/08/25/hs-webdriver/</link>
          <pubDate>Mon, 25 Aug 2014 16:20:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/08/25/hs-webdriver/</guid>
          <description>&lt;p&gt;たまには Haskell が書きたかったので、コマンドラインからあるウェブサービスに書き込みできるようにしたが失敗した。&lt;/p&gt;

&lt;p&gt;失敗したというか画面を進めていくと止まってしまう。
なにやらアラートがでて処理ができていない感じなのだろうか。
Rubyでやっても停止するので、Haskellの問題ではない。&lt;/p&gt;

&lt;p&gt;一応、最低限の使い方がわかったのでメモしとく。&lt;/p&gt;

&lt;p&gt;利用したのは、&lt;a href=&#34;http://hackage.haskell.org/package/webdriver&#34;&gt;hs-webdriver&lt;/a&gt; と &lt;a href=&#34;http://phantomjs.org/&#34;&gt;phantomJS&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;phantomJS は &amp;ndash;webdriver オプションを使用することで、SeleniumのServerとして使えるようになる。
Haskellでは Selenium と対話するための webdriverというライブラリがあって制御することが可能。&lt;/p&gt;

&lt;p&gt;Google にアクセスしてスクリーンショットを作成するプログラムをかいてみた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{-# LANGUAGE OverloadedStrings #-}
import Test.WebDriver
import Control.Monad.IO.Class
import qualified Data.ByteString.Lazy.Char8 as B

main :: IO ()
main =
  runSession defaultConfig $ do
    openPage &amp;quot;http://google.co.jp/&amp;quot;
    screenshotWriteFile &amp;quot;google.png&amp;quot;

screenshotWriteFile::  FilePath -&amp;gt; WD ()
screenshotWriteFile name = do
  string &amp;lt;- screenshot
  liftIO . B.writeFile name  $ string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;事前に&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ phantomjs --webdriver=4444
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としてから実行する。&lt;/p&gt;

&lt;p&gt;実行すると google.png というファイルが生成されている。&lt;/p&gt;

&lt;p&gt;screenshot は ByteString を返すので保存しやすいように screenshotWriteFile という関数を定義して保存しやすくした。
これは webdriver が base64 形式で情報を返してくるのでエンコードした情報を返す模様。&lt;/p&gt;

&lt;p&gt;ブラウザを操作するための関数は&lt;a href=&#34;https://hackage.haskell.org/package/webdriver-0.6.0.1/docs/Test-WebDriver-Commands.html&#34;&gt;Test.WebDriver.Commands&lt;/a&gt;を見ればかいてある。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Rails 4.2.0 beta1 ちょっとだけ見たのでメモしとく。</title>
          <link>https://blog.eiel.info/blog/2014/08/22/rails4-beta/</link>
          <pubDate>Fri, 22 Aug 2014 15:21:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/08/22/rails4-beta/</guid>
          <description>

&lt;p&gt;Rails 4.2.0.beta1 が出てるよね。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://weblog.rubyonrails.org/2014/8/20/Rails-4-2-beta1/&#34;&gt;Riding Rails: Rails 4.2.0 beta1: Active Job, Deliver Later, Adequate Record, Web Console&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;betaが出ると試したくなるのでアップデートしても問題ないものをアップデートして遊ぶ。&lt;/p&gt;

&lt;h3 id=&#34;先に結論:76d27696f138b0b82e7539488c014aa5&#34;&gt;先に結論&lt;/h3&gt;

&lt;p&gt;詳細とかあとで述べる。&lt;/p&gt;

&lt;p&gt;Gemfile に追加とか変更とか。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem &#39;rails&#39;, &#39;4.2.0.beta1&#39;
gem &#39;sass-rails&#39;, &#39;~&amp;gt; 5.0.0.beta1&#39;
gem &#39;web-console&#39;, &#39;~&amp;gt; 2.0.0.beta2&#39;

group :development, :test do
  gem &#39;byebug&#39;
  gem &#39;web-console&#39;, &#39;~&amp;gt; 2.0.0.beta2&#39;
end

gem &#39;rails-html-sanitizer&#39;, &#39;~&amp;gt; 1.0&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;config/application.rb&lt;/code&gt; に追加&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config.active_record.raise_in_transactional_callbacks = true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;config/environments/development.rb&lt;/code&gt; に追加。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config.assets.digest = true
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;rails-new-したときの違い:76d27696f138b0b82e7539488c014aa5&#34;&gt;rails new したときの違い&lt;/h3&gt;

&lt;p&gt;rails new してときの生成されるファイルの違い下記の方法で確認した。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rails _4.2.0.beta1_ new --no-rc hoge
$ mv hoge 4.2.0.beta1
$ rails _4.1.5_ new --no-rc hoge
$ mv hoge 4.1.5
$ diff -ur 4.1.5 4.2.0.beta1/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/eiel/403e6e473487bb9a9a42&#34;&gt;全文はGistに貼った。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;まず gem 関連&lt;/p&gt;

&lt;p&gt;web-console と byebug と rails-html-sanitizer が追加されてる。
その他は、バージョン調整されてるだけ。&lt;/p&gt;

&lt;p&gt;debugger はたぶん ruby 2.1 だと動いてないし、web-console を使うようになったので、byebug も追加された感じがする。よくしらん。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/rails/rails-html-sanitizer&#34;&gt;rails-html-sanitaizer&lt;/a&gt; は &lt;code&gt;sanitize&lt;/code&gt; ヘルパーが追加できるらしい。HTMLタグがとりのぞけて独自のルールはScrubberを作ることで調整ができる模様。&lt;/p&gt;

&lt;p&gt;以下、それ意外の抜粋。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;onfig/application.rb&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;+    # For not swallow errors in after_commit/after_rollback callbacks.
+    config.active_record.raise_in_transactional_callbacks = true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちゃんと確認してない。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Currently, Active Record will rescue any errors raised within after_rollback/after_create callbacks and print them to the logs. Next versions of rails will not rescue those errors anymore, and just bubble them up, as the other callbacks.

This adds a opt-in flag to enable that behaviour, of not rescuing the errors. Example:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とあってトランザクジョン後のコールバックでのエラー rescue されなくなったのかしら。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;config/boot.rb&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-require &#39;bundler/setup&#39; if File.exist?(ENV[&#39;BUNDLE_GEMFILE&#39;])
+require &#39;bundler/setup&#39; # Set up gems listed in the Gemfile.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ENV[&#39;BUNDLE_GEMFILE&#39;]&lt;/code&gt; 次第だったのが読まれるようになった。
 Gemfile の一覧になってる gem を読む。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;config/environments/development.rb&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;+  # Asset digests allow you to set far-future HTTP expiration dates on all assets,
+  # yet still be able to expire them through the digest params.
+  config.assets.digest = true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;development 環境でも assets.digest が true になったらしい。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;environments/production.rb&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  # Set to :info to decrease the log volume.
+  config.log_level = :debug

-  # Disable automatic flushing of the log to improve performance.
-  # config.autoflush_log = false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;production での log_levele が debug になったらしい。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;config/initializers/assets.rb&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+# Add additional assets to the asset load path
+# Rails.application.config.assets.paths &amp;lt;&amp;lt; Emoji.images_path
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Emoji.images_path を追加する例が増えてる…。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>LT駆動開発で UIDynamics を利用した万華鏡アプリを紹介した</title>
          <link>https://blog.eiel.info/blog/2014/08/02/a8d2-kaeidscope/</link>
          <pubDate>Sat, 02 Aug 2014 12:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/08/02/a8d2-kaeidscope/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;https://www.facebook.com/events/321060364724219/&#34;&gt;A8D:2&lt;/a&gt; というイベントが2014年8月3日に行なわれます。明日じゃねーか。&lt;/p&gt;

&lt;p&gt;そんなことはさておいて、&lt;a href=&#34;http://augment8.org/&#34;&gt;Augment8&lt;/a&gt;というグループがあります。
このグループは年に1回、普段作っているものをみんなに体験してもらう場をつくろうというイベントがあるらしく、Augment8 Day を省略して A8D というイベントをしているそうです。&lt;/p&gt;

&lt;p&gt;デジタルなガジェットを一般の人に体験していただくイベントだ。&lt;/p&gt;

&lt;p&gt;そのイベントに参加することになったので、このために作成したアプリを告知を兼ねて&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA06&#34;&gt;LT駆動開発06&lt;/a&gt;で紹介をしました。&lt;/p&gt;

&lt;p&gt;というわけでまずスライド。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;4e0e1b60fb610131b3ca3a8923229263&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;つづいて、スライド内で利用している動画。&lt;/p&gt;

&lt;p&gt;万華鏡のサンプル1&lt;/p&gt;

&lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/sMJtJsOGcPg&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;万華鏡のサンプル2&lt;/p&gt;

&lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/GXqg2EEn-d4&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;UIDynamicsのサンプル&lt;/p&gt;

&lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/4AIo5x1DoZo&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;iOS7 からUIKitで物理エンジンが搭載されていて気軽に使えるようになったらしい。
まだ試してなかったのだけど、普通の人にも楽しめそうなものとして万華鏡をつくってみた。
iOSのCoreMotionを使いiOS端末を操作して画面に映る万華鏡が変化するという寸法です。&lt;/p&gt;

&lt;p&gt;普段、iOSアプリをつくってるわけではないのでそんなに凝ったことはしていません。
万華鏡といえば三角なのですが四角のものもあるそうで、手抜きで四角の万華鏡になっています。&lt;/p&gt;

&lt;p&gt;Apple Swift で作成しているためアプリとして申請するのもできないし、体験できるようにソースコードを公開しておきますね。まだ勉強中でソースコードが汚いですね、わかります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Augment8/kaleidoscope&#34;&gt;Augment8/kaleidoscope · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;サブディスプレイに対応しているので、プロジェクタに写したり Apple TV で画面に写したりできます。&lt;/p&gt;

&lt;p&gt;当日は丸いものにプロジェクトションマップもどきをしたりする予定です。
操作用のiOS端末のために&lt;strong&gt;拡張パーツ&lt;/strong&gt;を用意しています。デザイン担当の&lt;a href=&#34;https://twitter.com/akigonn&#34;&gt;あきさん&lt;/a&gt;が作成しています。これを装着すると…つづきは当日のA8D:2にて体験してください。&lt;/p&gt;

&lt;p&gt;デジタルならではなところは動的に反射している数が増えたり、中身が変化したり、マスクが変化したりと用意してみました。
それなりに面白くなったでしょうか。
魅せるためのスキル不足なため、本当に楽しめるものになったのかよくわからないので、みんなの反応が気になります。&lt;/p&gt;

&lt;p&gt;今回のLT駆動における初挑戦は「動画をつかってみる」でした。
スライドを公開する際に動画は別のところにアップロードしないといけないのがすこしつらい。&lt;/p&gt;

&lt;p&gt;Swiftのコードを書いていて思ったことは、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ブロック構文がなかなか書きなれない&lt;/li&gt;
&lt;li&gt;変数宣言で型から書きそうになる&lt;/li&gt;
&lt;li&gt;なぜか&lt;code&gt;［&lt;/code&gt;を入力してしまう&lt;/li&gt;
&lt;li&gt;なるべつ let で済ませたい病&lt;/li&gt;
&lt;li&gt;selector 補完効かない。つらい。(文字列で渡すから当たり前)&lt;/li&gt;
&lt;li&gt;ヘッダファイルいらないヒャッハー&lt;/li&gt;
&lt;li&gt;CGFloat が絡む数値計算なんかよくわからない(すぐ型エラーに阻まれる)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などなどでしょうか。(咄嗟に思いついたものだけ書いた)&lt;/p&gt;

&lt;p&gt;UIDynamics で ビヘイビアのインスタンスを節約しようとするとランタイムエラーではまったりしたのも良い思い出です。アニメータごとにインスタンスをつくりましょう。&lt;/p&gt;

&lt;p&gt;Viewを触れるようにしてみたけど、移動したViewは元の位置にもどるという残念な結果にもなりました。&lt;/p&gt;

&lt;p&gt;最後になりますが、調整するのに&lt;a href=&#34;https://bauhaus-web.jp/&#34;&gt;BAUHAUS&lt;/a&gt;の&lt;a href=&#34;https://twitter.com/uehaso&#34;&gt;上原さん&lt;/a&gt;や&lt;a href=&#34;http://funaffect.jp/&#34;&gt;ファナフェクト&lt;/a&gt;の方々にアドバイスをちょろっともらったりしました。さんきゅーです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>LT駆動開発で とある我馬の非公式というLTをした</title>
          <link>https://blog.eiel.info/blog/2014/08/02/gaba-ltdd/</link>
          <pubDate>Sat, 02 Aug 2014 11:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/08/02/gaba-ltdd/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA06&#34;&gt;LT駆動開発06&lt;/a&gt; でライトニングトークをした。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.gaba-2000.com/&#34;&gt;我馬&lt;/a&gt;というラーメン屋のウェブサイトが更新情報のフィード配信してないので、勝手に応援しているという話をしました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gaba.eiel.info/&#34;&gt;とある我馬の非公式(ファンサイト)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;af32c140fc3e01312f2926529f74da74&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;折角なのでフィードの存在を知らない人もいるかもしれないので、簡単に説明しつつ、どうやってフィードをつくったのか説明しました。&lt;/p&gt;

&lt;p&gt;とりあえず、季節のラーメンはアツいので広島には3ヶ月に一度程度いらっしゃると良いと思います。&lt;/p&gt;

&lt;h3 id=&#34;関連:77a32f3198ef37442d00c5e329cdbc18&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gaba.eiel.info/&#34;&gt;とある我馬の非公式(ファンサイト)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gaba-2000.com/&#34;&gt;我馬&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eiel/gaba&#34;&gt;eiel/gaba · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eiel/gaba.eiel.info&#34;&gt;eiel/gaba.eiel.info · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>はてぶの暮らしで新着にのると闇が見れますね</title>
          <link>https://blog.eiel.info/blog/2014/08/01/hatebu-kurashi/</link>
          <pubDate>Fri, 01 Aug 2014 19:36:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/08/01/hatebu-kurashi/</guid>
          <description>&lt;p&gt;なんか Twitter でとある記事(僕は全く関係ない)を検索したら酷い状況が見れた。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/2014-08-01-kurashi.png&#34; alt=&#34;Twitte で http://eielh-life.tumblr.com/post/93485540398/it を検索&#34; /&gt;&lt;/p&gt;

&lt;p&gt;何これ怖い。&lt;/p&gt;

&lt;p&gt;フォロワーを増やす沢山の仕掛けが垣間見れますね。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>iOSアプリでスリープしないようにしても、ホーム画面にもどったらスリープするよね</title>
          <link>https://blog.eiel.info/blog/2014/07/28/ios-application-no-sleep/</link>
          <pubDate>Mon, 28 Jul 2014 18:19:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/07/28/ios-application-no-sleep/</guid>
          <description>&lt;p&gt;「iOS スリープしないように」で検索した結果、上位のいくつかの記事に&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[UIApplication sharedApplication].idleTimerDisabled = YES;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とあり、これでうまく動作する。&lt;/p&gt;

&lt;p&gt;注意事項として以下のこともかいてある。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;上記の処理をするとアプリが終了してもスリープが起こらなくなってしまうため，アプリの終了時には必ず戻すようにします．&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.objectivec-iphone.com/UIKit/UIApplication/idleTimerDisabled.html&#34;&gt;逆引きObjective-C for iPhoneアプリ - スリープモード（自動ロック）に移行しないようにする&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ただし、このまま放っておくとアプリを終わらせてもスリープが起こらなくなるので、アプリの終了時には必ず戻すこと！&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/uosoft/20100809/1281283605&#34;&gt;iPhoneSDKでスリープさせない方法 - 電子ガジェットいろいろ 開発メモ&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;などなど書かれていて、事実なのか気になった。
UIApplication のインスタンスの設定を変えているのに OS の設定が変わるとは思えない。
というわけで、実際に試した。&lt;/p&gt;

&lt;p&gt;普通にスリープしました。&lt;/p&gt;

&lt;p&gt;記事自体も古いのでOSのバージョンによって違うのかもしれません。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ヒロハタ 第1回レギュラー・ミーティング に潜入してきた</title>
          <link>https://blog.eiel.info/blog/2014/07/28/hirohata-1st-meeting/</link>
          <pubDate>Mon, 28 Jul 2014 17:39:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/07/28/hirohata-1st-meeting/</guid>
          <description>

&lt;p&gt;ひろしま発人材集積促進プロジェクトというのが行われていて、通称「ヒロハタ」というらしいのですが、その&lt;a href=&#34;http://hiro-hata.com/post/91065991460/1-7-26&#34;&gt;第1回 レギュラー・ミーティング&lt;/a&gt;があったので&lt;a href=&#34;http://great-h.github.io/&#34;&gt;すごい広島&lt;/a&gt; をネタに潜入してきました。&lt;/p&gt;

&lt;p&gt;「ヒロハタ」というのは一言からいうと、広島にクリエイティブな人材を集めようというプロジェクトだと思われます。&lt;/p&gt;

&lt;p&gt;第１回のミーティングはプロジェクトに応募したアイディアのプレゼンテーションをするというもので一部のプレゼンが Ustream で配信されていました。&lt;/p&gt;

&lt;p&gt;もうすでに動いているプロジェクトでさらなるブラッシュアップを計る人たちや、準備中で動いてはいるけど表に出るようなアウトプットはない人たちだったり、構想だけのものだったり、いろんな立場の人たちがいました。&lt;/p&gt;

&lt;p&gt;参加してみると、こういった人たちがつながり相互に良い影響を与えようというのがプロジェクトの目的のように感じました。&lt;/p&gt;

&lt;p&gt;「すごい広島」の立ち位置自体は協力できそうなプロジェクトをみつけて、Webアプリケーションのプロトタイプを作成してみたり、良いと感じたものを広めるお手伝いをしようという目論みです。
「すごい広島」は結果的にすごいエンジニアをみつけることができればメリットになります。または、作成したプロトタイプのつづきの作成するエンジニアをみつけることができればメリットになるかなぁ、というそんな感じです。&lt;/p&gt;

&lt;p&gt;個人的には、参加者同士が交流する方法が少ないので、他の参加者の現状を見える化やコミュニケーションをとる何かがあるといいなぁ、と思っているところです。&lt;/p&gt;

&lt;h3 id=&#34;関連:5e4a6f614546f542b488b29b39f0b346&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hiro-hata.com/&#34;&gt;ヒロハタ～Web・ITを活用してアイデアの事業化を目指そう～&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ActionView 単体で slim を使ってみる</title>
          <link>https://blog.eiel.info/blog/2014/07/28/action-view-with-slim/</link>
          <pubDate>Mon, 28 Jul 2014 15:52:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/07/28/action-view-with-slim/</guid>
          <description>

&lt;p&gt;「&lt;a href=&#34;https://blog.eiel.info/blog/2014/07/18/action-view/&#34;&gt;ActionView を単体で使ってみる&lt;/a&gt;」というのを書いたので、ついでにいろいろ試してみる。その1。&lt;/p&gt;

&lt;p&gt;誰が得するのか謎だけど ActionView だけで slim を使うことを試みてみました。
&lt;code&gt;action_view&lt;/code&gt;を require して、 &lt;code&gt;action_pack&lt;/code&gt; を require して、 &lt;code&gt;slim&lt;/code&gt; を require すれば使えます。&lt;/p&gt;

&lt;p&gt;用意したファイル&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;views/prefix/slim.html.slim&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;p
  | Hello, #{@name}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;views/layout/appliacation.html.erb&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;--
&amp;lt;%= yield %&amp;gt;
--
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;action_view&#39;
require &#39;action_pack&#39;
require &#39;slim&#39;

lookup_context = ActionView::LookupContext.new(&#39;./views&#39;)
lookup_context.cache = false   # ActionPachk を読まなくて済む魔法

view_context = ActionView::Base.new(lookup_context)
view_context.assign(name: &#39;eiel&#39;)
ret = view_context.render(template: &#39;slim&#39;,
                          prefixes: &#39;prefix&#39;,
                          
puts ret

=begin
--
&amp;lt;p&amp;gt;Hello, eiel&amp;lt;/p&amp;gt;
--
=end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;slim は &lt;a href=&#34;https://github.com/judofyr/temple&#34;&gt;temple&lt;/a&gt; という gem を使ってRailsに対応してました。
ActionPack はバージョン確認に利用しているだけなので、ちょっといじればなんとかなりそうですけど。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/judofyr/temple/blob/v0.6.8/lib/temple/templates/rails.rb&#34;&gt;Temple::Templates::Rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;もう少し詳しく:7dcde33f55e4e3742902be6a8bf43ee6&#34;&gt;もう少し詳しく&lt;/h3&gt;

&lt;p&gt;誰得感がひどいのでもうちょっと書いてみる。&lt;/p&gt;

&lt;p&gt;Railsとの連携の処理の部分は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Temple::Templates::Rails(Slim::Engine,
  :register_as =&amp;gt; :slim,
  # Use rails-specific generator. This is necessary
  # to support block capturing and streaming.
  :generator =&amp;gt; Temple::Generators::RailsOutputBuffer,
  # Disable the internal slim capturing.
  # Rails takes care of the capturing by itself.
  :disable_capture =&amp;gt; true,
  :streaming =&amp;gt; defined?(::Fiber))
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/slim-template/slim/blob/master/lib/slim/template.rb#L9-L17&#34;&gt;Slim::Template&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そうすると &lt;code&gt;Temple::Template#method_missing&lt;/code&gt; が呼ばれてます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def self.method_missing(name, engine, options = {})
  const_get(name).create(engine, options)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/judofyr/temple/blob/v0.6.8/lib/temple/templates.rb#L7-L9&#34;&gt;Temple::Temlate#method_missing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;変数を置き換えてみると&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Temple::Templates::Rails.create(Slim::Engin,
  register_as: :slim,
  generator: Temple::Generators::RailsOutputBuffers,
  disable_caputre: true,
  streaming: defined?(::Fiber))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と &lt;a href=&#34;https://github.com/judofyr/temple/blob/v0.6.8/lib/temple/mixins/template.rb#L17-L25&#34;&gt;Temple::Templates::Rails.create&lt;/a&gt; が  &lt;code&gt;register_as: :slim&lt;/code&gt; 呼ばれることがわかります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def create(engine, options)
  register_as = options.delete(:register_as)
  template = Class.new(self)
  template.disable_option_validator!
  template.default_options[:engine] = engine
  template.default_options.update(options)
  template.register_as(*register_as) if register_as
  template
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そうすると &lt;a href=&#34;https://github.com/judofyr/temple/blob/v0.6.8/lib/temple/templates/rails.rb#L41-L45&#34;&gt;Temple::Templates::Rails.register_as&lt;/a&gt; が &lt;code&gt;ActionViewActionView::Template.register_template_handler&lt;/code&gt; を呼びだされて、ActionView で利用できるようになります。&lt;/p&gt;

&lt;p&gt;names には &lt;code&gt;[:slim]&lt;/code&gt; が束縛されることになります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def self.register_as(*names)
  names.each do |name|
    ActionView::Template.register_template_handler name.to_sym, new
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;まとめ:7dcde33f55e4e3742902be6a8bf43ee6&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;ActionViewにテンプレートエンジンを追加するには &lt;code&gt;ActionView::Template.register_template_handler&lt;/code&gt; 使うことがわかりました。&lt;/p&gt;

&lt;p&gt;ちなみに Rails のリポジトリを検索するとこんな感じでした。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;base.register_default_template_handler :erb, ERB.new
base.register_template_handler :builder, Builder.new
base.register_template_handler :raw, Raw.new
base.register_template_handler :ruby, :source.to_proc
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rails/rails/blob/v4.1.4/actionview/lib/action_view/template/handlers.rb#L10-L13&#34;&gt;ソースコード&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;関連:7dcde33f55e4e3742902be6a8bf43ee6&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2014/07/18/action-view/&#34;&gt;ActionView を単体で使ってみる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ActionView を単体で使ってみる</title>
          <link>https://blog.eiel.info/blog/2014/07/18/action-view/</link>
          <pubDate>Fri, 18 Jul 2014 18:35:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/07/18/action-view/</guid>
          <description>

&lt;p&gt;誰が興味があるのか謎ですが、&lt;a href=&#34;https://github.com/rails/rails/tree/v4.1.4/actionview&#34;&gt;ActionView&lt;/a&gt; を単体で使ってみようと思います。
意外にも Rails の仕組みとか見えてくるかもしれません。&lt;/p&gt;

&lt;p&gt;Rails 4.1 ぐらいから ActionPack から独立した記憶があります。どうでしたっけ。&lt;/p&gt;

&lt;p&gt;テンプレートを使いたい時には erb, haml, slim などを単体で利用すればいいのであまり使う機会はないかもしれません。&lt;/p&gt;

&lt;p&gt;雑感では、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;layout 機能を使いたい&lt;/li&gt;
&lt;li&gt;インスタンス変数で値にアクセスしたい&lt;/li&gt;
&lt;li&gt;Rails が提供するビューヘルパーを使いたい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あたりがメリットかと思います。&lt;/p&gt;

&lt;p&gt;この記事のために&lt;a href=&#34;https://github.com/eiel/use-actionview&#34;&gt;作成したコードはこちら&lt;/a&gt;においておきます。&lt;/p&gt;

&lt;p&gt;補足の部分は読み飛ばせるように書いているつもりです。&lt;/p&gt;

&lt;p&gt;利用したRailsのバージョンは 4.1.4 です。&lt;/p&gt;

&lt;h3 id=&#34;1-hello-world:1c071b860be59640993cf2f27a5f39dd&#34;&gt;1 Hello, world&lt;/h3&gt;

&lt;p&gt;まずは使ってみます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ActionView::Base.new.render(inline: &#39;Hello, World!&#39;) # =&amp;gt; Hello, world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/rails/rails/blob/v4.1.4/actionview/lib/action_view/base.rb&#34;&gt;ActionView::Base&lt;/a&gt; のインスタンスを作成し、renderメソッドを呼びだします。
コントローラでの render メソッドはどうやらこの render メソッドのようです。&lt;/p&gt;

&lt;p&gt;(viewで使う render もこの render ですが…)&lt;/p&gt;

&lt;h3 id=&#34;1の補足-actionview-base:1c071b860be59640993cf2f27a5f39dd&#34;&gt;1の補足 ActionView::Base&lt;/h3&gt;

&lt;p&gt;Rails を使ってる際に erb ファイルの中で &lt;code&gt;self.class&lt;/code&gt; を確認したことはあるでしょうか？&lt;/p&gt;

&lt;p&gt;ちょっと確認してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;%= self.class %&amp;gt;
&amp;lt;%= self.class.superclass %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;lt;Class:0x007f82891092e0&amp;gt;
ActionView::Base
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;self は無名のクラスになっていますが、そのスーパークラスは ActiovView::Base です。
ビューは ActionView::Base のインスタンスのコンテキストで実行されるわけです。ビューコンテキストと呼んでいるようです。&lt;/p&gt;

&lt;p&gt;また、このクラスにヘルパーをミックスインすることでヘルパーとして利用できるようになります。&lt;/p&gt;

&lt;p&gt;デフォルトのHelperはすでに include されています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; ActionView::Base.ancestors.map(&amp;amp;:to_s).grep(/Helper/)
=&amp;gt; [&amp;quot;ActionView::Helpers&amp;quot;, &amp;quot;ActionView::Helpers::TranslationHelper&amp;quot;, &amp;quot;ActionView::Helpers::RenderingHelper&amp;quot;, &amp;quot;ActionView::Helpers::RecordTagHelper&amp;quot;, &amp;quot;ActionView::Helpers::OutputSafetyHelper&amp;quot;, &amp;quot;ActionView::Helpers::NumberHelper&amp;quot;, &amp;quot;ActionView::Helpers::JavaScriptHelper&amp;quot;, &amp;quot;ActionView::Helpers::FormOptionsHelper&amp;quot;, &amp;quot;ActionView::Helpers::FormHelper&amp;quot;, &amp;quot;ActionView::Helpers::FormTagHelper&amp;quot;, &amp;quot;ActionView::Helpers::TextHelper&amp;quot;, &amp;quot;ActionView::Helpers::DebugHelper&amp;quot;, &amp;quot;ActionView::Helpers::DateHelper&amp;quot;, &amp;quot;ActionView::Helpers::CsrfHelper&amp;quot;, &amp;quot;ActionView::Helpers::ControllerHelper&amp;quot;, &amp;quot;ActionView::Helpers::CacheHelper&amp;quot;, &amp;quot;ActionView::Helpers::AtomFeedHelper&amp;quot;, &amp;quot;ActionView::Helpers::AssetTagHelper&amp;quot;, &amp;quot;ActionView::Helpers::AssetTagHelper::StylesheetTagHelpers&amp;quot;, &amp;quot;ActionView::Helpers::AssetTagHelper::JavascriptTagHelpers&amp;quot;, &amp;quot;ActionView::Helpers::SanitizeHelper&amp;quot;, &amp;quot;ActionView::Helpers::ActiveModelHelper&amp;quot;, &amp;quot;ActionView::Helpers::UrlHelper&amp;quot;, &amp;quot;ActionView::Helpers::TagHelper&amp;quot;, &amp;quot;ActionView::Helpers::CaptureHelper&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-インスタンス変数を使う:1c071b860be59640993cf2f27a5f39dd&#34;&gt;2 インスタンス変数を使う&lt;/h3&gt;

&lt;p&gt;Rails ではコントローラのインスタンス変数がビューの中で使えます。
普段はRailsが自動でやってくれていますが、自分でインスタンス変数を設定するには assign メソッドを使います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;view_context = ActionView::Base.new
view_context.assign(name: &#39;eiel&#39;)
view_context.render(inline: &#39;Hello, &amp;lt;%= @name %&amp;gt;&#39;) # =&amp;gt; Hello, eiel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;@name&lt;/code&gt; が eiel に展開されています。&lt;/p&gt;

&lt;p&gt;ActionView::Base のコンストラクタの第2引数に渡しても設定できます。&lt;/p&gt;

&lt;h3 id=&#34;2の補足-actionview-rendering:1c071b860be59640993cf2f27a5f39dd&#34;&gt;2の補足 ActionView::Rendering&lt;/h3&gt;

&lt;p&gt;コントローラがビューコンテキストに対して assign メソッドを利用して、設定します。
これは &lt;a href=&#34;https://github.com/rails/rails/blob/v4.1.4/actionview/lib/action_view/rendering.rb&#34;&gt;ActionView::Rendering&lt;/a&gt; で行われます。&lt;/p&gt;

&lt;p&gt;この ActionView::Rendering には ActionController::Base にミックスインされていて、コントローラがビューを設定する処理などが記述されているようです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; ActionController::Base.ancestors.map(&amp;amp;:to_s).grep(/ActionView/)
=&amp;gt; [&amp;quot;ActionView::Layouts&amp;quot;, &amp;quot;ActionView::Rendering&amp;quot;, &amp;quot;ActionView::ViewPaths&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ActionController::Base には ActionView::Rendering がミックスインされています。&lt;/p&gt;

&lt;p&gt;ちなみに assign するのに使う Hash は AbstractController::Rendering#view_assign で作成されています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def view_assigns
  protected_vars = _protected_ivars
  variables      = instance_variables

  variables.reject! { |s| protected_vars.include? s }
  variables.each_with_object({}) { |name, hash|
    hash[name.slice(1, name.length)] = instance_variable_get(name)
  }
end
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rails/rails/blob/53d7b2ffe9ccdf2ded9898e20a947ea7da63566e/actionpack/lib/abstract_controller/rendering.rb#L66-L74&#34;&gt;ソースコード&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;インスタンス変数の一覧を取り出し、先頭の &lt;code&gt;@&lt;/code&gt; を取り除いてハッシュにしています。_protected_ivars に登録されているものは除外されます。&lt;/p&gt;

&lt;h3 id=&#34;3-テンプレートファイルの利用:1c071b860be59640993cf2f27a5f39dd&#34;&gt;3 テンプレートファイルの利用&lt;/h3&gt;

&lt;p&gt;別のファイルに保存したテンプレートを利用してみます。
ActionView::LookupContext というものがテンプレートファイルを探します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;views/prefix/hoge.html.erb&lt;/code&gt; を用意して中身は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Hello, &amp;lt;%= @name %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;として用意しているとします。&lt;/p&gt;

&lt;p&gt;使ってみます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;action_dispatch/http/mime_type&#39;
view_context = ActionView::Base.new(&#39;./views&#39;)
view_context.assign(name: &#39;eiel&#39;)
view_context.render(template: &#39;hoge&#39;, prefixes: &#39;prefix&#39;) # =&amp;gt; Hello, eiel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ActionView::Base の第一引数から自動的に ActionView::LookupContext が生成されます。&lt;/p&gt;

&lt;p&gt;バグなのかどうか判断が付いていないですが action_dispatch/http/mime_type を読まなりと動いてくれません。&lt;/p&gt;

&lt;p&gt;どうしても読みたくない場合は以下のようにします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;lookup_context = ActionView::LookupContext.new(&#39;./views&#39;)
lookup_context.cache = false   # ActionPack を読まなくて済む魔法

view_context = ActionView::Base.new(lookup_context)
view_context.assign(name: &#39;eiel&#39;)
view_context.render(template: &#39;hoge&#39;, prefixes: &#39;prefix&#39;) # =&amp;gt; Hello, eiel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ルックアップコンテキストを自分で作り、cache を切ると ActionDispatch を利用せずに動かすことができます。&lt;/p&gt;

&lt;p&gt;Rails が prefixes と template を自動で設定してくれていることが想像できます。普段はコントローラ名やアクション名から判断できるからですね。&lt;/p&gt;

&lt;p&gt;prefixes は指定しないとテンプレートをみつけることができないようです。&lt;/p&gt;

&lt;p&gt;また、文字列を指定することもできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;view_context.render(&#39;prefix/hoge&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この場合は &lt;code&gt;prefix/_hoge.html.erb&lt;/code&gt; のようなファイルを探しにいきます。&lt;/p&gt;

&lt;h3 id=&#34;3の補足:1c071b860be59640993cf2f27a5f39dd&#34;&gt;3の補足&lt;/h3&gt;

&lt;p&gt;render に自動設定されるオプションは _normalize_options メソッドで設定されるようです。&lt;/p&gt;

&lt;p&gt;例えば  &lt;a href=&#34;https://github.com/rails/rails/blob/v4.1.4/actionview/lib/action_view/rendering.rb&#34;&gt;ActionVIew::Rendreing#_normalive_options&lt;/a&gt; では&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def _normalize_options(options)
  options = super(options)
  if options[:partial] == true
    options[:partial] = action_name
  end

  if (options.keys &amp;amp; [:partial, :file, :template]).empty?
    options[:prefixes] ||= _prefixes
  end

  options[:template] ||= (options[:action] || action_name).to_s
  options
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となっていて prefixes や template が設定されている様子があります。&lt;/p&gt;

&lt;p&gt;特に &lt;code&gt;options[:template] ||= (options[:action] || action_name).to_s&lt;/code&gt; なんかは予想通りな感じですね。
options に :action を利用して、なければ action_name を利用しています。&lt;/p&gt;

&lt;p&gt;prefixes は &lt;a href=&#34;https://github.com/rails/rails/blob/7b50d7f2496a84bec5aceb9e0fd1f1f9dcbdab88/actionview/lib/action_view/view_paths.rb#L34-L36&#34;&gt;ActionView::ViewPaths&lt;/a&gt; で&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def local_prefixes
  [controller_path]
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となっており、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def _prefixes # :nodoc:
  @_prefixes ||= begin
    deprecated_prefixes = handle_deprecated_parent_prefixes
    if deprecated_prefixes
      deprecated_prefixes
    else
      return local_prefixes if superclass.abstract?

      local_prefixes + superclass._prefixes
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最終的に _prefixes として利用できることがわかります。&lt;/p&gt;

&lt;p&gt;そういえば ActionView::ViewPaths も ActionController::Base にミックスインされていましたね。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; ActionController::Base.ancestors.map(&amp;amp;:to_s).grep(/ActionView/)
=&amp;gt; [&amp;quot;ActionView::Layouts&amp;quot;, &amp;quot;ActionView::Rendering&amp;quot;, &amp;quot;ActionView::ViewPaths&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-レイアウトの利用:1c071b860be59640993cf2f27a5f39dd&#34;&gt;4 レイアウトの利用&lt;/h3&gt;

&lt;p&gt;レイアウトを利用するには &lt;code&gt;layout&lt;/code&gt; オプションを使います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tree views/
views/
├── layouts
│   └── application.html.erb
└── prefix
    └── hoge.html.erb
$ cat view/layouts/application.html.erb
--
&amp;lt;%= yield %&amp;gt;
--
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としておいて、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;lookup_context = ActionView::LookupContext.new(&#39;./views&#39;)
lookup_context.cache = false   # ActionPachk を読まなくて済む魔法

view_context = ActionView::Base.new(lookup_context)
view_context.assign(name: &#39;eiel&#39;)
view_context.render(template: &#39;hoge&#39;,
                          prefixes: &#39;prefix&#39;,
                          
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすると、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--
Hello, eiel

--
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のような文字列がかえってきます。&lt;/p&gt;

&lt;h3 id=&#34;4の補足:1c071b860be59640993cf2f27a5f39dd&#34;&gt;4の補足&lt;/h3&gt;

&lt;p&gt;layout に関するコントローラの処理は &lt;a href=&#34;https://github.com/rails/rails/blob/v4.1.4/actionview/lib/action_view/layouts.rb&#34;&gt;ActionView::Layouts&lt;/a&gt; にあります。&lt;/p&gt;

&lt;p&gt;もう一度確認してみましょう。ActionController::Base にミックスインされているモジュールを確認してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; ActionController::Base.ancestors.map(&amp;amp;:to_s).grep(/ActionView/)
=&amp;gt; [&amp;quot;ActionView::Layouts&amp;quot;, &amp;quot;ActionView::Rendering&amp;quot;, &amp;quot;ActionView::ViewPaths&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに ActionView::Rendering は ActionView::Layouts で &lt;code&gt;include&lt;/code&gt; されています。&lt;/p&gt;

&lt;p&gt;render へのオプション設定はやっぱり &lt;code&gt;_normalaize_options&lt;/code&gt; にあります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def _normalize_options(options) # :nodoc:
  super

  if _include_layout?(options)
    layout = options.delete(:layout) { :default }
    options[:layout] = _layout_for_option(layout)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;options[:layout]&lt;/code&gt; を設定しています。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:1c071b860be59640993cf2f27a5f39dd&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;ActionView を単体で使いたい場面を考えると ERB を単体で利用していたけど layout を使いたくなったときぐらいしか浮かびません。
Rails が提供する MVC に乗かりたいなら AbstroctController を使うほうが楽そうです。&lt;/p&gt;

&lt;p&gt;補足としたほうを読んでみると Rails の仕組みも見えてくるような気がしますね。(#知らんけど)&lt;/p&gt;

&lt;h3 id=&#34;補足のまとめ:1c071b860be59640993cf2f27a5f39dd&#34;&gt;補足のまとめ&lt;/h3&gt;

&lt;p&gt;登場人物を整理しておきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;view_context - ActionView::Base のサブクラスのインスタンス。ビューの中のself&lt;/li&gt;
&lt;li&gt;lookup_context - ActionView::LookupContext のインスタンス。テンプレートを探してくれる。テンプレートを探すための情報ももってる。&lt;/li&gt;
&lt;li&gt;renderer - render を実際に行うところ。今回は登場してない。render の引数によってどのクラスを使うか選択される。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;コントローラーと連携するためにコントローラに機能を追加する人たちとして、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ActionView::Layouts&lt;/li&gt;
&lt;li&gt;ActionView::Rendering&lt;/li&gt;
&lt;li&gt;ActionView::ViewPaths&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;が登場しました。&lt;/p&gt;

&lt;h3 id=&#34;関連:1c071b860be59640993cf2f27a5f39dd&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/09/04/extend-abstract-controller/&#34;&gt;AbstractController を継承して遊ぶ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;blog/2014/03/30/action-dispatch/&#34;&gt;ActionDispatch ってなんだろう？ - 広島・岡山Ruby交流会01&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/09/07/autoload-rails/&#34;&gt;Rails の自動読み込みの話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Mac で docker 起動できない時。具体的にはDOCKER_HOSTを指定してない時</title>
          <link>https://blog.eiel.info/blog/2014/07/10/docker-on-mack/</link>
          <pubDate>Thu, 10 Jul 2014 18:27:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/07/10/docker-on-mack/</guid>
          <description>&lt;p&gt;DOCKER_HOST を指定しとけって話。&lt;/p&gt;

&lt;p&gt;個人的には Docker を外部マシンで起動して使えないか検討したいが、ここでは関係ない。&lt;/p&gt;

&lt;p&gt;Macだと VirtuaBox 上で docker が動くので DOCKR_HOST を設定してないといけない。&lt;/p&gt;

&lt;p&gt;その状態で使おうとすると下記のようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http:///var/run/docker.sock/v1.13/containers/create: dial unix /var/run/docker.sock: no such file or directory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;boot2docker up&lt;/code&gt; を実行すると設定すべき値を確認できる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ boot2docker up
Waiting for VM to be started...

Started.
To connect the Docker client to the Docker daemon, please set:
    export DOCKER_HOST=tcp://xx.xx.xx.xx:2375
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;表示された &lt;code&gt;export DOCKER_HOST=tcp://xx.xx.xx.xx:2375&lt;/code&gt; をコピペしとけばいい。&lt;/p&gt;

&lt;p&gt;設定ファイルで export しとけって。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Docker Hub を少し試してきた</title>
          <link>https://blog.eiel.info/blog/2014/07/10/abc-docker-hub/</link>
          <pubDate>Thu, 10 Jul 2014 15:04:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/07/10/abc-docker-hub/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://www.docker.com/&#34;&gt;Docker&lt;/a&gt; 初心者です。
難しいことはよくわかりません。&lt;/p&gt;

&lt;p&gt;いまさら &lt;a href=&#34;https://hub.docker.com/&#34;&gt;Docker Hub&lt;/a&gt; で遊んだ。&lt;/p&gt;

&lt;p&gt;ちなみに &lt;a href=&#34;http://great-h.github.io/events/event-060.html&#34;&gt;#すごい広島 60&lt;/a&gt; で遊んでたことらしいです。&lt;/p&gt;

&lt;h3 id=&#34;今回は何をしたのか:fa815a66b9e024206917c488bc425e45&#34;&gt;今回は何をしたのか&lt;/h3&gt;

&lt;p&gt;docker さえインストールされていれば、以下のコマンドを実行できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run eiel/banner
######   #######   #####   #    #  #######  ######
#     #  #     #  #     #  #   #   #        #     #
#     #  #     #  #        #  #    #        #     #
#     #  #     #  #        ###     #####    ######
#     #  #     #  #        #  #    #        #   #
#     #  #     #  #     #  #   #   #        #    #
######   #######   #####   #    #  #######  #     #
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ docker run -e BANNER_ENV=&amp;quot;happy hacking&amp;quot; eiel/banner
#     #     #     ######   ######   #     #
#     #    # #    #     #  #     #   #   #
#     #   #   #   #     #  #     #    # #
#######  #     #  ######   ######      #
#     #  #######  #        #           #
#     #  #     #  #        #           #
#     #  #     #  #        #           #


#     #     #      #####   #    #  ###  #     #   #####
#     #    # #    #     #  #   #    #   ##    #  #     #
#     #   #   #   #        #  #     #   # #   #  #
#######  #     #  #        ###      #   #  #  #  #  ####
#     #  #######  #        #  #     #   #   # #  #     #
#     #  #     #  #     #  #   #    #   #    ##  #     #
#     #  #     #   #####   #    #  ###  #     #   #####
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BANNER_ENV を設定すると出力を変えられます。&lt;/p&gt;

&lt;p&gt;これの何が嬉しいかというと、&lt;strong&gt;banner コマンドの実行環境が簡単に用意できる&lt;/strong&gt;ことだと思います。
redmine を実行するのに、 GitLab を実行するのに、Wordpressを実行するのに &lt;code&gt;docker run&lt;/code&gt; でリポジトリ名を指定するだけでできるとしたらとても嬉しいと思います。&lt;/p&gt;

&lt;p&gt;(実際にはDbのデータどうすんの？とかある気がするけど、どうするのがいいのかよく知らないけど)&lt;/p&gt;

&lt;p&gt;定時実行するスクリプトが Docker さえインストールしていれば実行できたりするわけですね。&lt;/p&gt;

&lt;h3 id=&#34;docke-hub-はどこで使ってるのか:fa815a66b9e024206917c488bc425e45&#34;&gt;Docke Hub はどこで使ってるのか&lt;/h3&gt;

&lt;p&gt;eiel/banner というイメージが Docker Hub にあいてあるので、&lt;code&gt;docker run eiel/banner&lt;/code&gt; を実行すると、まだローカルにイメージがなければ取得して実行できます。
それだけ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://registry.hub.docker.com/u/eiel/banner/&#34;&gt;このイメージはここにあります&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/docker-banner&#34;&gt;イメージを作成するのに Dockerfile をつかっており、コードは GitHub に up してあります。&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM eiel/gentoo-sample:banner
MAINTAINER Tomohiko Himura &amp;lt;eiel.hal@gmail.com&amp;gt;

ENV BANNER_ENV docker
CMD banner $BANNER_ENV
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このファイルをカレントディレクトリに置いて &lt;code&gt;docker build -t banner .&lt;/code&gt; とするとイメージを作ることができます。
&lt;code&gt;docker run banner&lt;/code&gt; とすることで、同じことができるようになります。&lt;/p&gt;

&lt;p&gt;Docker Hub は GitHub と連携して、&lt;code&gt;git push&lt;/code&gt; した際に、&lt;code&gt;docker build&lt;/code&gt; をして自動的にイメージをつくってくれる機能があります。
これで docker ファイルを編集して GitHub に push するたびに最新のイメージを自動的に作成され、Docke Hub に置かれるようになります。素敵。&lt;/p&gt;

&lt;p&gt;Docker Hub でリポジトリをつくる際に automated build を選び、GitHub のリポジトリを指定するだけでした。&lt;/p&gt;

&lt;p&gt;複数のリポジトリに紐付けしたり、途中から別のリポジトリに紐付けしたりはできませんでした。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;CMD banner $BANNER_ENV&lt;/code&gt; と指定している部分が run に引数を指定しなかった時のコマンドになるそうです。&lt;/p&gt;

&lt;h3 id=&#34;もうちょっと詳しく-リポジトリ連携:fa815a66b9e024206917c488bc425e45&#34;&gt;もうちょっと詳しく リポジトリ連携&lt;/h3&gt;

&lt;p&gt;Dockerfile をみると &lt;code&gt;FROM eiel/gentoo-sample:banner&lt;/code&gt; となっています。
元になるイメージが別にあります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://registry.hub.docker.com/u/eiel/gentoo-sample/&#34;&gt;このイメージはこっちにあります。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;banner はタグです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/docker-sample-eiel-gentoo-banner/blob/master/Dockerfile]&#34;&gt;これも Dockerfile が GitHub にあります。&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM eiel/gentoo
MAINTAINER Tomohiko Himura &amp;lt;eiel.hal@gmail.com&amp;gt;

WORKDIR /usr
ADD install-portage.sh .
RUN sh /install-portage.sh
RUN emerge banner
CMD banner docker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;emerge するために portage を追加して、emerge banner をしているだけです。&lt;/p&gt;

&lt;p&gt;ADD するときに .tar.bz2 を展開できたら便利なのに…。&lt;/p&gt;

&lt;p&gt;これも git push すると自動的にイメージが作成されます。
ところで、 eiel/gentoo-sample:banner が更新されたら、先ほどの eie/banner のイメージも構築しなおして欲しいですよね。&lt;/p&gt;

&lt;p&gt;Docker Hub に Repository Links という機能があるらしいので、
eiel/banner のほうの Reposityr Links に eiel/gentoo-sample と追加すると eiel/gentoo-sample のイメージが新しくなると、eiel/banner も自動的にビルドされるようになりました。&lt;/p&gt;

&lt;h3 id=&#34;さらに詳しく-eiel-gentoo-はどうやってつくったか:fa815a66b9e024206917c488bc425e45&#34;&gt;さらに詳しく eiel/gentoo はどうやってつくったか&lt;/h3&gt;

&lt;p&gt;FROM に eiel/gentoo と指定されてます。
これは Docker File を用意していません。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget http://ftp.iij.ad.jp/pub/linux/gentoo/releases/amd64/current-iso/stage3-amd64-$20140619.tar.bz2 -O - | bzcat | docker import - eiel/gentoo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;みたいな感じでつくりました。
こちらはイメージを作成したあと docker push eiel/gentoo にアップロードしました。&lt;/p&gt;

&lt;p&gt;こちらも Repository Links を設定しておくとベースシステムの Gentoo が更新されると、eiel/gentoo-sample/banner が更新され、 eiel/banner が更新されるはずです。(試してないけど)&lt;/p&gt;

&lt;p&gt;stage3 の tarball を展開しただけだけどこんなのでいいのかは &lt;a href=&#34;https://github.com/naota/dockergentoo&#34;&gt;@naota さんのリポジトリをみてみたいと思う。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;個人的には portage をつっこんだイメージで emerge して 、portage をつっこんでないほうへもっていって使いたい。&lt;/p&gt;

&lt;h3 id=&#34;蛇足:fa815a66b9e024206917c488bc425e45&#34;&gt;蛇足&lt;/h3&gt;

&lt;p&gt;最初は sl コマンドをつかっていたのだけど run する時に &lt;code&gt;-t&lt;/code&gt; 必要なのでやめた。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:fa815a66b9e024206917c488bc425e45&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;GitHub にプルリクをだすと実行環境として必要なイメージが作成されて、作成したイメージの上でテストコードを実行して、イメージのIDが返ってきて、その上でアプリケーションの実行とかできて、そのままデプロイできると素敵そうですね。失敗した場合は動作確認ができたりとか。&lt;/p&gt;

&lt;p&gt;知らんけど&lt;/p&gt;

&lt;h3 id=&#34;参考文献:fa815a66b9e024206917c488bc425e45&#34;&gt;参考文献&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/reference/builder/&#34;&gt;Dockerfile - Docker Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/reference/commandline/cli/&#34;&gt;Command line - Docker Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/naota/dockergentoo&#34;&gt;naota/dockergentoo · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/k2works/docker_practice#ruby-on-rails%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AEdockerfile%E3%82%92%E3%81%A4%E3%81%8F%E3%82%8B&#34;&gt;k2works/docker_practice · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>LT駆動開発で ruboty の使い方っぽいことを適当に紹介した</title>
          <link>https://blog.eiel.info/blog/2014/07/07/great-bot-and-ruboty-ltdd/</link>
          <pubDate>Mon, 07 Jul 2014 17:14:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/07/07/great-bot-and-ruboty-ltdd/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA05&#34;&gt;LT駆動開発 05&lt;/a&gt; でライトニングトークをした。&lt;/p&gt;

&lt;p&gt;6月は&lt;a href=&#34;https://twitter.com/great_hiroshima&#34;&gt;すごい広島のBOT&lt;/a&gt;を作って遊ぶことをしていた気がしたのでこれを紹介することにした。これは &lt;a href=&#34;https://github.com/r7kamura/ruboty&#34;&gt;Ruboty&lt;/a&gt; で作成した。&lt;/p&gt;

&lt;p&gt;何か毎回やってないネタを挟みたいということで、ふたつスライドを用意して相互参照するというネタをした。
まずは、BOTの具体例である「すごい広島 BOT」を紹介することでなにがしたいのかをBOTを知らない人に理解してもらう。
そこから、どうやってそれを作るのか。というところに焦点をおいたというライトニングトークするという流れである。&lt;/p&gt;

&lt;p&gt;しかし、実際、ふたつもライトニングトークをする時間があるかどうかわからないので「Rubotyの使い方」はかなり適当につくってしまった。
類似性を持たせるために、前半は同じ構成になっている。&lt;/p&gt;

&lt;p&gt;最終的にしたいことは、「すごい広島のTwitterアカウントを誰か運用してくれ」ということかもしれない。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;589b86f0e4c8013160d4220f151a2dd2&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;22966d40e4c90131438f225375d05812&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;すごい広島のBOTは今後もプロキシーBOTとして活躍していただきたいところである。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/r7kamura/ruboty-twitter/&#34;&gt;ruboty-twitter&lt;/a&gt; の fork をみてみると、デバッグ用のコード仕込んでみたりとかしているところがあって、うまくメンションが返ってこなかったからかと思い、その辺を補足してみたという経緯があったりなかったりもします。&lt;/p&gt;

&lt;h3 id=&#34;関連:1775b1f910f762fbfac43e9ba225b4f1&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/06/08/ruboty-with-web/&#34;&gt;Rackup で Ruboty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/05/23/1st-anniversary-for-great-h/&#34;&gt;すごい広島 一周年&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/02/19/start-ltdd/&#34;&gt;LT駆動開発という勉強会をはじめるよ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>コミットメッセージの先頭に絵文字いれるのが流行ってんだろうか</title>
          <link>https://blog.eiel.info/blog/2014/07/07/emoji-for-git-commit-message/</link>
          <pubDate>Mon, 07 Jul 2014 16:38:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/07/07/emoji-for-git-commit-message/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://atom.io&#34;&gt;Atom Editor&lt;/a&gt; の Contributringをみてみると、「コミットメッセージの先頭に関係ある絵文字をいれろ」的なことが書いてある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/docs/v0.108.0/contributing#git-commit-messages&#34;&gt;Git Commit Message - contributing - Atom&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;https://a248.e.akamai.net/assets.github.com/images/icons/emoji/lipstick.png&#34; alt=&#34;:lipstick:&#34; /&gt; &lt;code&gt;:lipstick:&lt;/code&gt; when improving the format/structure of the code&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://a248.e.akamai.net/assets.github.com/images/icons/emoji/racehorse.png&#34; alt=&#34;:racehorse:&#34; /&gt; &lt;code&gt;:racehorse:&lt;/code&gt; when improving performance&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://a248.e.akamai.net/assets.github.com/images/icons/emoji/non-potable_water.png&#34; alt=&#34;:non-potable_water:&#34; /&gt; &lt;code&gt;:non-potable_water:&lt;/code&gt; when plugging memory leaks&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://a248.e.akamai.net/assets.github.com/images/icons/emoji/memo.png&#34; alt=&#34;:memo:&#34; /&gt; &lt;code&gt;:memo:&lt;/code&gt; when writing docs&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://a248.e.akamai.net/assets.github.com/images/icons/emoji/penguin.png&#34; alt=&#34;:penguin:&#34; /&gt; &lt;code&gt;:penguin:&lt;/code&gt; when fixing something on Linux&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://a248.e.akamai.net/assets.github.com/images/icons/emoji/apple.png&#34; alt=&#34;:apple:&#34; /&gt; &lt;code&gt;:apple:&lt;/code&gt; when fixing something on Mac OS&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://a248.e.akamai.net/assets.github.com/images/icons/emoji/checkered_flag.png&#34; alt=&#34;:checkered_flag:&#34; /&gt; &lt;code&gt;:checkered_flag:&lt;/code&gt; when fixing something on Windows&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://a248.e.akamai.net/assets.github.com/images/icons/emoji/bug.png&#34; alt=&#34;:bug:&#34; /&gt; &lt;code&gt;:bug:&lt;/code&gt; when fixing a bug&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://a248.e.akamai.net/assets.github.com/images/icons/emoji/fire.png&#34; alt=&#34;:fire:&#34; /&gt; :&lt;code&gt;fire:&lt;/code&gt; when removing code or files&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://a248.e.akamai.net/assets.github.com/images/icons/emoji/green_heart.png&#34; alt=&#34;:green_heart:&#34; /&gt; &lt;code&gt;:green_heart:&lt;/code&gt; when fixing the CI build&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://a248.e.akamai.net/assets.github.com/images/icons/emoji/white_check_mark.png&#34; alt=&#34;:white_check_mark:&#34; /&gt; &lt;code&gt;:white_check_mark:&lt;/code&gt; when adding tests&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://a248.e.akamai.net/assets.github.com/images/icons/emoji/lock.png&#34; alt=&#34;:lock:&#34; /&gt; &lt;code&gt;:lock:&lt;/code&gt; when dealing with security&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;あまり絵文字を使うのは得意ではないけど、タグ的に使うのは他にどんなのがあるんだろうなぁ。&lt;/p&gt;

&lt;p&gt;一応適当に日本語にしとこう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:lipstick:&lt;/code&gt; コードの構造やフォーマットを変更した時&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:racehorse:&lt;/code&gt; パフォーマンスを改善した時&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:non-potable_water:&lt;/code&gt;メモリーリークの直した時&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:memo:&lt;/code&gt; ドキュメントを書いた時&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:penguin:&lt;/code&gt; Linux に関連する修正をした時&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:apple:&lt;/code&gt; Mac に関連する修正をした時&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:checkered_flag:&lt;/code&gt; Windows に関連する修正をした時&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:bug:&lt;/code&gt; バグを修正した時&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:fire:&lt;/code&gt; ファイルやコードを削除した時&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:green_heart:&lt;/code&gt; CIビルドの修正をした時&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:white_check_mark:&lt;/code&gt; テストを追加した時&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:lock:&lt;/code&gt; セキュリティを扱う時&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;いっそ &lt;code&gt;:linux:&lt;/code&gt; とか &lt;code&gt;:mac:&lt;/code&gt; とかの絵文字があるほうがいい感もしなくもないけど、どーなんですかね。&lt;/p&gt;

&lt;h3 id=&#34;参考:5fcd81bd6e7411f5a3617f31bdae1a31&#34;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/docs/v0.108.0/contributing#git-commit-messages&#34;&gt;Git Commit Message - contributing - Atom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.emoji-cheat-sheet.com/&#34;&gt;Emoji Cheet Sheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Atom で キーバインディングを使うには key-binding-resolver を使えばいいらしい</title>
          <link>https://blog.eiel.info/blog/2014/07/07/key-binding-resolver-on-atom-editor/</link>
          <pubDate>Mon, 07 Jul 2014 16:29:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/07/07/key-binding-resolver-on-atom-editor/</guid>
          <description>&lt;p&gt;キーに割り当ててるコマンドを探す場合、emacs だと &lt;code&gt;Ctrl-h k&lt;/code&gt; を使うけど、&lt;a href=&#34;https://atom.io/&#34;&gt;Atom&lt;/a&gt; なら Key Binding Resolver を使えばいいらしい。
Macならデフォルトでは &lt;code&gt;cmd+.&lt;/code&gt; にバインディングされてる。&lt;/p&gt;

&lt;p&gt;helm-describe-bindings に比べると不便だけどないよりましだと思う。
わがままをいうとコマンド名をコピーできるようにして欲しい。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Atom Editor で markdownモードのスニペットの追加</title>
          <link>https://blog.eiel.info/blog/2014/07/07/github-markdown-on-atom-editor/</link>
          <pubDate>Mon, 07 Jul 2014 15:20:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/07/07/github-markdown-on-atom-editor/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34;&gt;Atom Editor&lt;/a&gt;をときどき試している。
markdownモードにスニペットを追加する方法がなかなかわからなくて困ったのでメモ。&lt;/p&gt;

&lt;p&gt;最初に指定する文法名がわからなかった。&lt;code&gt;.source.gfm&lt;/code&gt;を指定すれば良かった。
この &lt;code&gt;.source.gfm&lt;/code&gt; の簡単な調べ方がよくわからない。&lt;/p&gt;

&lt;p&gt;gfm は GitHub Flaver Markdown の略だと思われる。&lt;/p&gt;

&lt;p&gt;参考例をあげておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;.source.gfm&#39;:
  &#39;Sample Snippet Hoge&#39;:
    &#39;prefix&#39;: &#39;hoge&#39;
    &#39;body&#39;: &#39;hogehoge&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;atom.syntax.grammarsByScopeName&lt;/code&gt; にいろんな名前がとれたけど、全然効率よくない。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>シェルの if を1行でかく</title>
          <link>https://blog.eiel.info/blog/2014/07/03/oneline-if-on-shell-script/</link>
          <pubDate>Thu, 03 Jul 2014 12:13:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/07/03/oneline-if-on-shell-script/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;http://great-h.github.io/events/event-059.html&#34;&gt;すごい広島 59&lt;/a&gt; のメモ&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://sensuapp.org/&#34;&gt;sensu&lt;/a&gt; の実験をしていて実行する command に if を含むスクリプトをかいていたのだけど、ちょっとはまったのでメモしとく。&lt;/p&gt;

&lt;p&gt;以下のようなスクリプトを1行で書きたいとする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;HTTP_STATUS=`curl -w &#39;%{http_code}&#39; -s http://blog.eiel.info/ -o /dev/null`
if [ $HTTP_STATUS -eq 200 ]
then
  echo -n $STATUS
else
  echo -n $STATUS; exit 1
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1行で書くとこうなる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;HTTP_STATUS=`curl -w &#39;%{http_code}&#39; -s http://blog.eiel.info/ -o /dev/null`; if [ $HTTP_STATUS -eq 200 ]; then echo -n $STATUS; else echo -n $STATUS; exit 1; fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then と else のすぐ後ろにはセミコロンがあってはいけないらしい。&lt;/p&gt;

&lt;p&gt;整理すると&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;if [test]; then command1; else command2; fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;簡単に確認したいなら以下のような感じかしら。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ if [ 1 -eq 1 ]; then echo true; else echo false; fi
true
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ if [ 2 -eq 1 ]; then echo true; else echo false; fi
false
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
      
    
      
        <item>
          <title>さくらVPSでGentoo をインストールした時のはまったことのメモ</title>
          <link>https://blog.eiel.info/blog/2014/07/01/gentoo-linux-in-sakura-vps/</link>
          <pubDate>Tue, 01 Jul 2014 17:58:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/07/01/gentoo-linux-in-sakura-vps/</guid>
          <description>

&lt;p&gt;つかってた VPS がサービス終了してしまったので、さくら VPS に移行してみた。
折角なので OS は &lt;a href=&#34;https://www.gentoo.org/&#34;&gt;Gentoo Linux&lt;/a&gt; を選択した。&lt;/p&gt;

&lt;p&gt;前の VPS では Debian をつかってた。
なんか、ウェブサーバの応答がよくなった気がする。&lt;/p&gt;

&lt;p&gt;一応はまったことを書いておくけど大したことは書いていない。&lt;/p&gt;

&lt;p&gt;iso アップロードして、普通にインストールした。&lt;/p&gt;

&lt;h3 id=&#34;デバイス-eth0-がみつからない:e34c3ccdd1c68d0a41c9b85aa59ae074&#34;&gt;デバイス eth0 がみつからない&lt;/h3&gt;

&lt;p&gt;なんか enp0s3 として認識してた。
おかげで、ネットワークつながらなくて苦労した。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参考 &lt;a href=&#34;http://gakutarou.hatenablog.com/entry/2013/05/22/204507&#34;&gt;さくらのVPS（2G）でのハマリポイント(enp0s3) - /dev/curiosity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ディスク-が-vda-だった:e34c3ccdd1c68d0a41c9b85aa59ae074&#34;&gt;ディスク が vda だった&lt;/h3&gt;

&lt;p&gt;「ディスクがねぇぇええ」って、デフォのCentOS起動してよくみたら &lt;code&gt;sda&lt;/code&gt; じゃなくて &lt;code&gt;vda&lt;/code&gt; だった。&lt;/p&gt;

&lt;h3 id=&#34;gpt-に挑戦したら-grub-が入らなかった:e34c3ccdd1c68d0a41c9b85aa59ae074&#34;&gt;GPT に挑戦したら GRUB が入らなかった&lt;/h3&gt;

&lt;p&gt;最近Linuxインストールしてなかった。GPTとやらにしてみることにした。
なにも考えずにデフォのCentOSのパーティションをそのまま利用して構築していた。
さあ、GRUBをインスールするぞ。というところで気づいたのだけど、&lt;a href=&#34;http://www.gnu.org/software/grub/manual/html_node/BIOS-installation.html&#34;&gt;BIOS boot partition&lt;/a&gt;とやらなく、GRUBのインストールに失敗するので、対処を迫られた。&lt;/p&gt;

&lt;p&gt;すでにカーネル配置済みの &lt;code&gt;/boot&lt;/code&gt; の中身を一旦退避して、パーティションを書き換えてごまかした。&lt;/p&gt;

&lt;h3 id=&#34;ブートcd-がある方法で-ディスクブートする方法がわからない:e34c3ccdd1c68d0a41c9b85aa59ae074&#34;&gt;ブートCD がある方法で、ディスクブートする方法がわからない&lt;/h3&gt;

&lt;p&gt;15秒放置するだけでした。&lt;/p&gt;

&lt;h3 id=&#34;virtio-いれわすれてディスクがみつけられない:e34c3ccdd1c68d0a41c9b85aa59ae074&#34;&gt;virtio いれわすれてディスクがみつけられない&lt;/h3&gt;

&lt;p&gt;とりあえず、 genkernel したからなにもいらないかとおもったけどダメだったらしい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ genkernel --virtio all
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とか genkernel にいろいろオプションがあるのを学んだ。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:e34c3ccdd1c68d0a41c9b85aa59ae074&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;Gentoo力上がってるので、あんまりハマってない。
最初のネットワークが繋がらないで挫折しそうだったのは秘密である。&lt;/p&gt;

&lt;h3 id=&#34;他に参考したものとか:e34c3ccdd1c68d0a41c9b85aa59ae074&#34;&gt;他に参考したものとか&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ruby.agile.esm.co.jp/pages/HowToInstallGentooForSakuraVps&#34;&gt;Ruby x Agile version:β - Rubyとアジャイルでふつうのシステム開発を実現する永和システムマネジメントのWebサイト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;コンパネにもかいってあったけどシリアルコンソール用の設定とかみないと忘れていたであろう。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>DevLOVE広島　第一回（夏の陣） でエンジニアリングの楽しさについて喋らされた</title>
          <link>https://blog.eiel.info/blog/2014/06/23/devlove-in-hiroshima-01/</link>
          <pubDate>Mon, 23 Jun 2014 09:40:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/06/23/devlove-in-hiroshima-01/</guid>
          <description>

&lt;p&gt;いや、別に無理矢理だったとかわけではなく。
依頼されて喋ることになったからこういうタイトルになった。&lt;/p&gt;

&lt;p&gt;ということで、 &lt;a href=&#34;http://devlove-hiroshima.doorkeeper.jp/events/11247&#34;&gt;DevLOVE広島　第一回（夏の陣） &lt;/a&gt; に参加して「愛無双 - エンジニアリングの楽しさ」というタイトルでセッションをしてきた。&lt;/p&gt;

&lt;p&gt;エンジニアリングの楽しさを語れということだったので、自由にはっちゃけてきた。&lt;/p&gt;

&lt;p&gt;中身のないあるひどいセッションだったと思うけど、みんなが楽しめるようにがんばったつもりである。
何度か会場に笑いとれていた気がするのでよかったことにしよう。&lt;/p&gt;

&lt;p&gt;会場に電波がなかったせいであまり &lt;a href=&#34;http://togetter.com/li/682827&#34;&gt;Twitterにも感想が流れていない&lt;/a&gt; のでみんな感想ブログを垂れ流してもらえると自分が勉強になる。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;0c4650b0dca20131b4bb7abe6293b58c&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href=&#34;http://dic.nicovideo.jp/a/i&#39;m%20so%20happy&#34;&gt;タイトルはご存知 jubeat knitのボス曲 I&amp;rsquo;m so Happy&lt;/a&gt;です。
解禁にお財布が Broken するアレです。
多くの人が Happy になれないアレです。
ちょうど言いたいことにマッチしていたのでこのタイトルにしておきました。(他意はない)
ちなみに、わしはぶち楽しいけぇ。&lt;/p&gt;

&lt;h3 id=&#34;エンジニアリングの楽しさ:43327d2f5c73f159d6a4f5db7dc45691&#34;&gt;エンジニアリングの楽しさ&lt;/h3&gt;

&lt;p&gt;技術的なネタがないし、30分もネタが浮かびそうになかったので、前半は「エンジリアリングの楽しさ」というのはなんだろうかと自分なりに考えた話をした。
DevLoveには参加してないようなエンジニアリングというのがよくわからな人に届けばいいな、と思いながらつくった気がする。
あとは「&lt;a href=&#34;https://twitter.com/eielh&#34;&gt;友人のツイート&lt;/a&gt;」が使いやすかったからこうしたという説もある。&lt;/p&gt;

&lt;h3 id=&#34;楽しくある必要性:43327d2f5c73f159d6a4f5db7dc45691&#34;&gt;楽しくある必要性&lt;/h3&gt;

&lt;p&gt;二番目は「楽しくある必要性」として、さてどうして僕がそんなにいろいろがんばれるか。という根本原理について話してみようと試みたがたぶんあまりうまくいってなく自分でも消化不良である。&lt;/p&gt;

&lt;p&gt;ここで登場しているダチョウさんは、グーグルの画像検索で再利用可能なものを指定して検索した場合、一番使いたくなる画像らしいです。
普段から撮影した写真を感情ごとに分類しておけばいいなと、今回とても感じた。&lt;/p&gt;

&lt;p&gt;よーするにさ、こうしたいってのみつけと、どーしたらいいか考えてるだけだ。
あと、できるだけ楽しいほうがいい。&lt;/p&gt;

&lt;h3 id=&#34;僕の楽しい:43327d2f5c73f159d6a4f5db7dc45691&#34;&gt;僕の楽しい&lt;/h3&gt;

&lt;p&gt;正直、楽しいものはよくわからない。わからないけど、出てきたものは楽しいものだ。
そういう気持ちで、目的の被らないネタを選択して適当に紹介した。&lt;/p&gt;

&lt;p&gt;「変態は褒め言葉」ということで&lt;a href=&#34;http://ja.wikipedia.org/wiki/%E5%A4%89%E6%85%8B&#34;&gt;蝶の写真&lt;/a&gt;を選択したけど、ネタが通じた気がしない。よーするにエンジニアはものをつくるため、ものの仕組みに詳しくなり、人によっては自分が自由に使いやすいようにしたりするのも楽しむよね。
だから、エンジニアリングとはあまり関係ない例になってしまったが、わかりやすいのでキーボードの話をした。
Aの左横が Cotrol の人がかなりいました。delete の人はいませんでした。&lt;/p&gt;

&lt;p&gt;あとよくみればわかりますが Dvorak 仕様になっています。&lt;/p&gt;

&lt;p&gt;GitHubですが、もっと整理しとけばよかったなと思いますが、今回の参加者は大きい企業にお勤めの方が多そうだったので話しておこうと思ったところです。
それ以外に深い意味はありません。&lt;/p&gt;

&lt;p&gt;あと勉強会をすることについてですが、この辺はスライドがあまり面白くないので、背景に&lt;a href=&#34;http://www.gaba-2000.com/&#34;&gt;我馬&lt;/a&gt; というラーメン屋のラーメンの写真を利用しました。
狙ってやってるのはカリーつけ麺だけです。
みそ菜麺はかなり好きだったのでまとめに使いました。&lt;/p&gt;

&lt;p&gt;我馬は広島に店舗を構える博多の有名なラーメン店に似ているラーメン屋です。
レギュラーメニューもとてもおいしいのですが、毎回新作が登場する季節のラーメンのこだわりがすごすぎて、よくいくラーメン屋です。
広島へお越しの際は、一度行ってみてください。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:43327d2f5c73f159d6a4f5db7dc45691&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;スライドを作成するにあたりキーボード書いたり、写真選んだり、ツイート探したりと、それなりに時間をつかったのは久しぶりでした。&lt;/p&gt;

&lt;p&gt;楽しんでもらえたのでしょうか。&lt;/p&gt;

&lt;p&gt;そんなことは #知らんけど、そんなことはさておいて、わしらはぶち楽しいけぇ。&lt;/p&gt;

&lt;h3 id=&#34;スペシャルサンクスとか:43327d2f5c73f159d6a4f5db7dc45691&#34;&gt;スペシャルサンクスとか&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/shuuheyhey&#34;&gt;@shuuheyhey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/Toro_kun&#34;&gt;@Toro_kun&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/kakenavi&#34;&gt;@kakenavi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/eielh&#34;&gt;@eielh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://funaffect.jp/&#34;&gt;ファナフェクト株式会社&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;関連:43327d2f5c73f159d6a4f5db7dc45691&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/05/23/1st-anniversary-for-great-h/&#34;&gt;すごい広島 一周年 - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/02/07/osh-2014/&#34;&gt;本当に障がい者でもオープンセミナー広島の実行委員長ができるのか？ - 答え: できた。 - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/02/19/start-ltdd/&#34;&gt;LT駆動開発という勉強会をはじめるよ - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/05/13/how-to-enjoy-github/&#34;&gt;Github の楽しみ方 - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>rackup で ruboty</title>
          <link>https://blog.eiel.info/blog/2014/06/08/ruboty-with-web/</link>
          <pubDate>Sun, 08 Jun 2014 10:31:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/06/08/ruboty-with-web/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://r7kamura.hatenablog.com/entry/2014/05/31/190240&#34;&gt;ruboty&lt;/a&gt; を heroku で動かすついでに web アプリケーションとして扱いたい。
その場しのぎで書いたコードを紹介する。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;config.ru&lt;/code&gt; の中で別スレッドを起動して Ruboty#run を走らせた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Rackアプリになるように call メソッドを実装
module Ruboty::Web
  def call(env)
    [200, {&#39;Content-type&#39; =&amp;gt; &#39;text/html&#39;}, [&#39;hello, world&#39;]]
  end
end
Ruboty::Robot.include(Ruboty::Web)

Thread.new do
  robot.run   # bot起動
end

run robot  # rack アプリを構築
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;heroku では 1X dynos でもスレッドが 256 個ぐらい起動できるっぽいしきっと大丈夫だろう。いや、わからんけど。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参考: &lt;a href=&#34;https://devcenter.heroku.com/articles/limits&#34;&gt;Limits | Heroku Dev Center&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;シグナル処理も追加したほうが良い気がするけど、とりあえず気にしない。&lt;/p&gt;

&lt;p&gt;そのうちウェブアプリを構築しやすくする方法を考えたい。&lt;/p&gt;

&lt;h3 id=&#34;関連:a71c96431c9f899855c73bf2ad2244ca&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/05/27/message-send-from-hubot-httpd-to-idobata/&#34;&gt;hubot で起動しているウェブサーバを経由して idobata へ投稿してみる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>オフィスチェアを買いました。- LT駆動開発04</title>
          <link>https://blog.eiel.info/blog/2014/06/08/office-chair/</link>
          <pubDate>Sun, 08 Jun 2014 00:01:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/06/08/office-chair/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA04&#34;&gt;LT駆動開発04&lt;/a&gt;で椅子を買った自慢をしといた。
これからは真面目に仕事をがんばろうと思う。(しかし、僕はもう結構限界だ)&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;4ce27df0d07d01310fe546b5cb27a5ae&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;というわけで、椅子を買いました。
ほぼオカムラ一択で決めていた。&lt;/p&gt;

&lt;p&gt;というか、あまり椅子の情報ってネットにない。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.okamura.co.jp/product/seating/baron/&#34;&gt;バロン&lt;/a&gt;もすわったけど、座った感触が&lt;a href=&#34;http://www.okamura.co.jp/product/seating/sylphy/&#34;&gt;シルフィー&lt;/a&gt;がよかったので、金額的にもシルフィーにした。&lt;/p&gt;

&lt;p&gt;シルフィーは&lt;a href=&#34;http://www.okamura.co.jp/product/seating/sylphy/&#34;&gt;バックカーブアジャスト機構&lt;/a&gt;のレバーを上げた状態がすごくフィットしてて、そこが気にいっています。別に小柄ではないはずだけど。(大柄でもないけどさ)&lt;/p&gt;

&lt;p&gt;感想としては、コンピュータルームによくある椅子のさらにちょっと良い奴。という印象です。&lt;/p&gt;

&lt;p&gt;本当は&lt;a href=&#34;http://www.okamura.co.jp/product/seating/shift/&#34;&gt;シフト&lt;/a&gt;が気になってて、非常にだらだらした体制で作業したい。
というか、ほとんどが後傾姿勢で作業してることが多いので、「そうそうその体制で作業したいんだ!」という思いがありました。
しかし、購入ルートがわかんなくて、レビューも全然なくて高い買い物なので。諦めました。&lt;/p&gt;

&lt;p&gt;というわけで、椅子のレビューはあんまりないのでみんなすればPVが稼げるんではないかと思います。&lt;/p&gt;

&lt;p&gt;体験はご自由にしていただいて構わないので気軽に遊びにきてください。(どこに)&lt;/p&gt;

&lt;p&gt;ちゃんとしたレビューは使い込んでからしたい。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>通知環境としてidobataを試した話をLT駆動開発04でした</title>
          <link>https://blog.eiel.info/blog/2014/06/07/notification-development/</link>
          <pubDate>Sat, 07 Jun 2014 23:34:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/06/07/notification-development/</guid>
          <description>

&lt;p&gt;今月も&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA04&#34;&gt;LT駆動開発04&lt;/a&gt;でライトニングトークしてきました。&lt;/p&gt;

&lt;p&gt;結構今回雑…。喋りもグダってた。見直しとか、リハっぽいこともしてないから…。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;b2e78510d07b0131bebd268a39862ac0&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href=&#34;https://circleci.com/&#34;&gt;CircleCI&lt;/a&gt;の通知をしたいなーってことで &lt;a href=&#34;https://idobata.io/&#34;&gt;idobata&lt;/a&gt; のクライアント使えばできそうなので、 &lt;a href=&#34;https://hubot.github.com/&#34;&gt;hubot&lt;/a&gt; をつかって idobata に情報を送信してみたよ!という話をしました。&lt;/p&gt;

&lt;p&gt;なんか開発で BOT を使うの良さってのがやっとわかってきたので、その話もちらっとした気がします。しかし、中身がないな…。&lt;/p&gt;

&lt;p&gt;気になってるのは CircleCI の Web Hook から飛んでくるJSONの情報が整理されてなくて調べるのがめんどくさいなーって思ってたりします。なんかライブラリはないのだろうか。&lt;/p&gt;

&lt;h3 id=&#34;関連:fdd903ceba3839837355b0b2f8cef221&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/05/27/message-send-from-hubot-httpd-to-idobata/&#34;&gt;hubot で起動しているウェブサーバを経由して idobata へ投稿してみる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ツイートを埋め込みするためのボタンが行方不明なので、JavaScriptでなんとかする</title>
          <link>https://blog.eiel.info/blog/2014/06/02/not-found-etc-button/</link>
          <pubDate>Mon, 02 Jun 2014 10:28:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/06/02/not-found-etc-button/</guid>
          <description>&lt;p&gt;ブログにツイートを埋め込みしたい…。
なぜか「その他」ボタンがみつからない…なぜだ…。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/2014-0602-etc-button.png&#34; alt=&#34;その他ボタンどこ…&#34; /&gt;&lt;/p&gt;

&lt;p&gt;解析したら要素は存在している模様。ブックマークレットをつくってごまかす。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;javascript: $(&#39;.permalink-tweet .embed-link button&#39;)[0].click()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに、ログインしてない状態だと「その他」ボタンが出ることに後で気づいた。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Git で特定のコミットがどのタグに含まれているか確認する</title>
          <link>https://blog.eiel.info/blog/2014/05/28/cotains-commit-in-tags/</link>
          <pubDate>Wed, 28 May 2014 17:11:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/05/28/cotains-commit-in-tags/</guid>
          <description>&lt;p&gt;バグなどをみつけて原因のコミットをみつけたけど、バグというか自分が依存してるライブラリが古いせいだったりして、いつからじゃないと使えないですよーって伝えたい時に、どのタグに含まれてるコミットなのか調べたかった。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git tag&lt;/code&gt; コマンドの &lt;code&gt;--contaions&lt;/code&gt; オプションが使える。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git tag -l --contains [コミットID]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;フィルターしたい場合は 引数にパターンが渡せる。 v4.0 系をみたいとかであれば&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git tag -l --contians [コミットID] `v4.0.*`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;みたいな感じ。&lt;/p&gt;

&lt;p&gt;クオートしないとシェルに食われる。
パイプで grep してもいいけどね。&lt;/p&gt;

&lt;p&gt;ブランチにも同様のオプションがある。
&lt;code&gt;branch&lt;/code&gt; には似たようなものとして、ブランチにマージされてるかどうか調べる &lt;code&gt;--merged&lt;/code&gt; とか &lt;code&gt;--no-merged&lt;/code&gt; とかある。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>hubot で起動しているウェブサーバを経由して idobata へ投稿してみる</title>
          <link>https://blog.eiel.info/blog/2014/05/27/message-send-from-hubot-httpd-to-idobata/</link>
          <pubDate>Tue, 27 May 2014 16:24:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/05/27/message-send-from-hubot-httpd-to-idobata/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://hubot.github.com/&#34;&gt;hubot&lt;/a&gt; をつかって &lt;a href=&#34;https://idobata.io/&#34;&gt;idobata&lt;/a&gt; 用のBOTを作っていた。
&lt;a href=&#34;https://dashboard.heroku.com/apps&#34;&gt;heroku&lt;/a&gt; にホスティングして HTTPアクセスをすると idobata へメッセージが流れるようにしたい。&lt;/p&gt;

&lt;p&gt;最終目的は CircleCI から WebHooks に登録しておいて、ビルドが終了したら通知したい、だったりするけど今回はそこはおいておく。&lt;/p&gt;

&lt;p&gt;チャットへメッセージを送るには &lt;code&gt;robot#send&lt;/code&gt; を呼べばよくて、第1引数が envelope で 第2引数以降が文字列。
idobata-adapter の場合は第1引数の message.data.room_id に投稿する ROOM_ID が必要になる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/idobata/hubot-idobata/blob/v0.0.3/src/idobata.coffee#L13-L14&#34;&gt;参考 - hubot-idobata&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;robot.send_room &#39;hogehoge&#39;&lt;/code&gt; みたいな感じに投稿できるようにメソッドを加えるならこんな感じになった。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ROOM_ID = process.env.HUBOT_IDOBATA_DEFAULT_ROOM_ID

module.exports = (robot) -&amp;gt;
  robot.send_room = (msg) -&amp;gt;
    envelope = { message: { data: {room_id: ROOM_ID } } }
    @send envelope, msg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ROOM_ID を取得しないといけないので、登録したBOTに &lt;code&gt;room_id&lt;/code&gt; を返すような機能を追加しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;robot.respond /ROOM_ID/i, (msg) -&amp;gt;
  room_id = msg.message.data.room_id
  robot.logger.debug room_id
  msg.send room_id
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ROOM_ID がわかったら 環境変数 HUBOT_IDOBATA_DEFAULT_ROOM_ID を設定しておく。
あとは &lt;code&gt;robot.router.get&lt;/code&gt; とか &lt;code&gt;robot.router.post&lt;/code&gt; をつかって処理を作成すればいよい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;robot.router.post &amp;quot;/hubot/ping&amp;quot;, (req, res) -&amp;gt;
  robot.send_room &#39;pong&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ローカルで実行する場合は 8080 ポート。
heroku へは push するだけで使える。&lt;/p&gt;

&lt;p&gt;/hubot/ping にアクセスするとチャットに pong と書き込みがされます。&lt;/p&gt;

&lt;p&gt;hubot 自体のソースコードはそんなに長くないので、いじりながらソースよめばなんとか使えるようになりそうでした。&lt;/p&gt;

&lt;h3 id=&#34;補足:3e0f256f778db620819538f6e47ca8ff&#34;&gt;補足&lt;/h3&gt;

&lt;p&gt;robot.respond とか、使った場合は コールバック引数 msg があるのでこいつの &lt;code&gt;send&lt;/code&gt; を利用するだけでチャットにかきこみができる。
msg は &lt;a href=&#34;https://github.com/github/hubot/blob/v2.7.2/src/response.coffee&#34;&gt;Response&lt;/a&gt; クラスのインスタンスでサーバからうけとった情報を message プロパティに保存されてて、この情報で envelope.message から取り出せる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/github/hubot/blob/v2.7.2/src/response.coffee#L21-L22&#34;&gt;Response#send は以下のように実装されていて&lt;/a&gt;、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;send: (strings...) -&amp;gt;
  @robot.adapter.send @envelope, strings...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;@robot.adapter.send へいくので、それぞれの adapter の send メソッドをみてみればいい。&lt;/p&gt;

&lt;p&gt;前述しているけど、&lt;a href=&#34;https://github.com/idobata/hubot-idobata/blob/v0.0.3/src/idobata.coffee#L13-L14&#34;&gt;idobataの場合は&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;send: (envelope, strings...) -&amp;gt;
  @_postMessage string, envelope.message.data.room_id for string in strings
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となってて message.data.room_id が必要なことがわかる。&lt;/p&gt;

&lt;p&gt;試したコードの全体をはっとく。
script ディレクトリに保存しておけばよいだけです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ROOM_ID = process.env.HUBOT_IDOBATA_DEFAULT_ROOM

module.exports = (robot) -&amp;gt;
  robot.send_room = (msg) -&amp;gt;
    @send { message: { data: {room_id: ROOM_ID } } }, msg

  robot.respond /ROOM_ID/i, (msg) -&amp;gt;
    room_id = msg.message.data.room_id
    robot.logger.debug room_id
    msg.send room_id

  robot.router.post &amp;quot;/hubot/circle&amp;quot;, (req, res) -&amp;gt;
    robot.send_room &amp;quot;finished build&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;/hubot/circle&lt;/code&gt; を CircleCI から叩かせるつもり。
&lt;code&gt;req&lt;/code&gt; に CircleCI からの情報がはいってくるので、ちょっと料理する予定。&lt;/p&gt;

&lt;h3 id=&#34;参考文献:3e0f256f778db620819538f6e47ca8ff&#34;&gt;参考文献&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/idobata/hubot-idobata&#34;&gt;idobata/hubot-idobata · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/github/hubot/blob/master/docs/deploying/heroku.md&#34;&gt;hubot/docs/deploying/heroku.md at master · github/hubot · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>すごい広島 一周年</title>
          <link>https://blog.eiel.info/blog/2014/05/23/1st-anniversary-for-great-h/</link>
          <pubDate>Fri, 23 May 2014 10:51:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/05/23/1st-anniversary-for-great-h/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://great-h.github.io/&#34;&gt;すごい広島&lt;/a&gt;って勉強会というかミートアップが一年間、毎週休まず活動したらしい。「すごい」というか、めでたい。&lt;/p&gt;

&lt;p&gt;概要&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;すごい広島とは何か&lt;/li&gt;
&lt;li&gt;一年間活動してみて&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;すごい広島とは何か:745e88304fc7d7cf810bcaecdb73f8ae&#34;&gt;すごい広島とは何か&lt;/h3&gt;

&lt;p&gt;すごい広島は、「ITエンジニアとか、情報系の学生とか、Web系デザイナが毎週どこかに集まっていればそれだけで面白いことになるはずだ」
と考えた &lt;a href=&#34;https://twitter.com/Toro_kun&#34;&gt;@Toro_kun&lt;/a&gt; と &lt;a href=&#34;https://twitter.com/CentBoss&#34;&gt;@CentBoss&lt;/a&gt; と &lt;a href=&#34;https://twitter.com/eielh&#34;&gt;@eielh&lt;/a&gt; がはじめたミートアップらしいです。(他人事)&lt;/p&gt;

&lt;p&gt;「すごい広島」は、もともと&lt;a href=&#34;http://www.amazon.co.jp/gp/product/4274068854/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=4274068854&amp;amp;linkCode=as2&amp;amp;tag=eiel-22&#34;&gt;すごいHaskell を楽しく学ぼう&lt;/a&gt; という書籍の読書会を広島でやろうとした際に考えた名前だそうです。
しかし、Haskell の需要が少ない関係で、参加者が見込めないため、読書会はお蔵入りしてしまいました。
せっかく考えた名前は面白いし、どこかで使いたい。
そこで、流用したのが「すごい広島」となりました。&lt;/p&gt;

&lt;p&gt;しかし、ただ集まるだけでは目的を見失う恐れがあります。
「広島のエンジニア」のアウトプットの総量を増やすことによって広島が盛り上ってるように錯覚させることができないか考えることにしました。&lt;/p&gt;

&lt;p&gt;結果、参加ルールを設けることにしました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;その場で何をするつもりなのか &lt;a href=&#34;https://github.com/great-h/great-h.github.io/issues?milestone=55&amp;amp;state=open&#34;&gt;GitHub の Issue に書く&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;すごい広島内でブログを書く&lt;/li&gt;
&lt;li&gt;GitHub に Pull Request をする&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というルールです。&lt;/p&gt;

&lt;p&gt;GitHubに慣れてもらうために、開発でない部分にGitHubをつかおうとする試みです。
最初に Pull Request した時の楽しさを伝えたいというのもありますし、GitHubを使える人と仕事をしたいという裏の目的です。
結果、GitHubを練習するための場として定着するようになりました。
しかし、ブログをかくのは少し負担が大きいということになり最近では「何かしらのやったことをウェブに残すこと」というルールに緩和されました。&lt;/p&gt;

&lt;p&gt;ところで、広島でもIT勉強会は土日にそこそこの数あります。
自分がいろんなすごい人たちの話を聞きたいのもありますが、土日以外なら参加できる人もいるかもしれない。
毎週やっていれば、月に1回ぐらいは来られるかもしれない。
そんな気持ちでやっています。&lt;/p&gt;

&lt;p&gt;気がつけば、すごい広島はほぼ毎週参加されている人は3,4人います。
いつもいる人を中心に、輪が広がり、相乗効果が起きるといいと思っています。&lt;/p&gt;

&lt;h3 id=&#34;一年間活動してみて:745e88304fc7d7cf810bcaecdb73f8ae&#34;&gt;一年間活動してみて&lt;/h3&gt;

&lt;h4 id=&#34;つづけたいこと:745e88304fc7d7cf810bcaecdb73f8ae&#34;&gt;つづけたいこと&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;毎週活動する&lt;/li&gt;
&lt;li&gt;学生など若い人を優遇する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;学生が来る場合は、社会人がひとりいるだけでも学生にとっては参考になる話も聞けると思うので、それだけでやってる価値がでて良いと思います。&lt;/p&gt;

&lt;h4 id=&#34;問題点とか直したい点:745e88304fc7d7cf810bcaecdb73f8ae&#34;&gt;問題点とか直したい点&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;人数が多いと喫茶店だと迷惑がかかる&lt;/li&gt;
&lt;li&gt;参加者の固定化&lt;/li&gt;
&lt;li&gt;名前からやってることが想像をしづらい。なにしてるか不明。&lt;/li&gt;
&lt;li&gt;よく参加する人はステップアップして欲しいが、その道を示してない。&lt;/li&gt;
&lt;li&gt;はじめての参加者に優しく、参加しやいように&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;メンバーの固定化はちょっと深刻な気もします。
なるべくはじめてきた人が入りにくくならないように気をつけたい。&lt;/p&gt;

&lt;h4 id=&#34;挑戦したいこと:745e88304fc7d7cf810bcaecdb73f8ae&#34;&gt;挑戦したいこと&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;みんなが勝手に準備して、勝手にまわるように&lt;/li&gt;
&lt;li&gt;協賛。活動することにメリットがある企業をみつけて支援してもらいたい。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;企業に協力してもらいたいところはちょっとある。&lt;/p&gt;

&lt;h4 id=&#34;その他感じてること:745e88304fc7d7cf810bcaecdb73f8ae&#34;&gt;その他感じてること&lt;/h4&gt;

&lt;p&gt;大人がんばれ&lt;/p&gt;

&lt;p&gt;参加者に学生がわりと多く、どうやら大学の同好会の活動の一部になってきているらしいです。
それこそ学生が参加して価値を提供できるように社会人ががんばるようになるとすてきだと思います。
2ヶ月に一度ぐらい来る人とかが数人いるとちょっと雰囲気が変わるかなとも思います。
とりあえず、家族をまず大切にしましょう。(関係ない)&lt;/p&gt;

&lt;p&gt;参加費は取りたくない。&lt;/p&gt;

&lt;p&gt;気軽に集まることを大切にしたいので、参加費をとりたくない。来るのも大変だしね。
「エンジニアが交流することは価値があるよ」みたいな事実があれば本当は良いのですが、そんなものはまだ弱い。
しかし、最近は安定した参加者があるので、お金を払い場所を利用するようになりました。
金銭的負担をどうやって減らしていくかは少し課題です。
継続して欲しいなーって思う人に寄付してもらうというのが当面のスタイルになりそうです。&lt;/p&gt;

&lt;p&gt;たまにワイワイ、ひとりの時間も大切に。&lt;/p&gt;

&lt;p&gt;何か作りはじめた人は作ってるものを小出しにしつつ交流したほうがいいと思います。
たいていの場合は、プログラミングをしている人はこもりがちです。
刺激をいれると新しい発想とか問題点もみつかるとおもいます。
外に出る時間だってもったいない時期もあると思いますが、ぜひ。
特にプログラミングとかはじめたばかりであれば、外に出る価値はあると思います。
聞いてみればサクっと解決したりするかもしれません。&lt;/p&gt;

&lt;p&gt;だからといって、交流ばかりしていてもダメなのも感じていて、ひとりの時間も大切にしたいです。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:745e88304fc7d7cf810bcaecdb73f8ae&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;みんながそれぞれ楽しいって思うことを共有しつつ、楽しいってことを追求していけば、楽しいことが起こるんじゃないかなー。
変えられなかったものも変えられるようになるんじゃないかなー。&lt;/p&gt;

&lt;p&gt;エンジニアって職業が子供の憧れる職業になるように模索していきたい。&lt;/p&gt;

&lt;p&gt;あれ、これ個人の結論で何もまとめてないや…。&lt;/p&gt;

&lt;p&gt;とりあえず、すごい広島 1周年おめでとうございます。&lt;/p&gt;

&lt;h3 id=&#34;関連:745e88304fc7d7cf810bcaecdb73f8ae&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/15/great-h/&#34;&gt;「Github をつかったコミュニティ すごい広島」というタイトルでLTしてきた - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/10/21/operation-great-h/&#34;&gt;コミュニティに GitHub に使ってみて - すごい広島 - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>オープンセミナー2014@岡山に参加した。ついでに懇親会で継続することについてLTした。</title>
          <link>https://blog.eiel.info/blog/2014/05/19/open-seminar-2014-at-okayama/</link>
          <pubDate>Mon, 19 May 2014 23:58:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/05/19/open-seminar-2014-at-okayama/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://okayama.open-seminar.org/&#34;&gt;オープンセミナー2014@岡山&lt;/a&gt;に参加しました。大盛況でした。
中四国地方では最強の無料セミナーなんじゃないかと思えてしまいます。(他を知らないだけ)&lt;/p&gt;

&lt;p&gt;実行委員長の &lt;a href=&#34;https://twitter.com/mako_wis/status/468405879738335233&#34;&gt;@mako_wis&lt;/a&gt; おつかれさまです。&lt;/p&gt;

&lt;p&gt;本編の話はおいておいて、ライトニングトークをしたので資料をはりつけておきます。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;3f7575c0c1940131c12706a532522dbf&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;一日で何回テンプレートが &lt;a href=&#34;http://memo.sanographix.net/post/82160791768&#34;&gt;azusa&lt;/a&gt; の資料をみたことでしょう。僕は配色は変えてありますが…。&lt;/p&gt;

&lt;p&gt;本資料はもともと&lt;a href=&#34;http://ltdd.doorkeeper.jp/&#34;&gt;#LT駆動&lt;/a&gt; の余った時間用につくったスライドでした。
前回、時間がなく利用するタイミングがなかったので、ほぼそのまま使いました。&lt;/p&gt;

&lt;p&gt;このスライドは &lt;a href=&#34;https://github.com/eiel&#34;&gt;GitHub の Longest streak が 365日を越えた記念&lt;/a&gt;で作ろうかなーっと思ひてつくったものです。&lt;/p&gt;

&lt;p&gt;Longest Streak は GitHub で活動した日数が最大で何日続いているかというものです。
毎日続けてみたいなーって思い、続けてみたのですが、ときどきふつうの人と比べてみると、怖いレベルになってる気がしてきています。
今も継続しています。この記事を書いてる時点では394日でした。&lt;/p&gt;

&lt;p&gt;つづけるための秘訣は、なるべくがんばりすぎないことと、ちゃんと通知する仕組みを用意することだと思います。
他にもいろいろ毎日やってることがありますが、
心臓病と診断される前は腕立腹筋とかもしてましたが、最近は医者に怒られるのでやってません。その頃はorg-modeで管理していましたが、今は Mac のリマインダーを使って管理をしています。
自分がやりたいことに近づいていけるように、毎日何かをしたいし、癖にしてしまいなにもしない日があったしても、少なくともなんらかの基礎力は付けたいです。&lt;/p&gt;

&lt;p&gt;その上で継続したからこそ起きたことをゆっくり話したかったですが、グダグダでした。&lt;/p&gt;

&lt;p&gt;物事の成長は線型じゃないことを覚えていたほうがいいと思うので、Beatmania IIDX の段位認定を元に成長速度の話をするつもりでしたが、全部カットしました。THE SAFARI は例外的に山が高いです。がおー。&lt;/p&gt;

&lt;p&gt;最後にいつもツイートを使わせていただいている、友人の&lt;a href=&#34;http://twitter.com/eielh&#34;&gt;えいる&lt;/a&gt;さんの努力に関する心に残ったツイートを引用していたのですが、そこにいくための前振りでタイムアップでした。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p&gt;あの人すげーって思ったら、その人がしてる努力や日常に目を向ける。どういうことを継続すればあんな風になれるかわかる。&lt;/p&gt;&amp;mdash; えいる (@eielh) &lt;a href=&#34;https://twitter.com/eielh/statuses/345803571406725120&#34;&gt;2013, 6月 15&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;みんなでオープンセミナーを盛り上げて、ITエンジニアをこどもたちが憧れるような職業に変えていけたらいいのに。&lt;/p&gt;

&lt;h3 id=&#34;関連記事:6b2495024f0b130513e51ae0509a9834&#34;&gt;関連記事&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/02/19/start-ltdd/&#34;&gt;LT駆動開発という勉強会をはじめるよ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/02/07/osh-2014/&#34;&gt;本当に障がい者でもオープンセミナー広島の実行委員長ができるのか？ - 答え: できた。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/01/04/lets-take-part-in-osh/&#34;&gt;.オープンセミナー広島は広島のITエンジニアが集う場所&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>rails console でルーティングが生成した helper を使う</title>
          <link>https://blog.eiel.info/blog/2014/05/16/rails-console-routeing-helper/</link>
          <pubDate>Fri, 16 May 2014 15:54:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/05/16/rails-console-routeing-helper/</guid>
          <description>

&lt;p&gt;Railsで &lt;code&gt;config/routes.rb&lt;/code&gt; に&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;resources :users
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とかくと&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;users_path&lt;/li&gt;
&lt;li&gt;users_url&lt;/li&gt;
&lt;li&gt;user_path&lt;/li&gt;
&lt;li&gt;user_url&lt;/li&gt;
&lt;li&gt;new_user_path&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などなどのViewで利用できるヘルパーが生成される。&lt;/p&gt;

&lt;p&gt;このヘルパーを &lt;code&gt;rails console&lt;/code&gt; で使うには、&lt;code&gt;app&lt;/code&gt; オブジェクトを経由する。&lt;/p&gt;

&lt;p&gt;例&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app.users_path  # =&amp;gt; &amp;quot;/users&amp;quot;
app.users_url  # =&amp;gt; &amp;quot;http://www.example.com/records/3.html&amp;quot;
app.user_path(User.first) # =&amp;gt; &amp;quot;/users/1&amp;quot;
app.user_path(User.first, :html) # =&amp;gt; &amp;quot;/users/1.html&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なんとなく関係ない例を混ぜた。&lt;/p&gt;

&lt;p&gt;routing helper というらしいのに helper からアクセスできない。&lt;/p&gt;

&lt;h3 id=&#34;関連リンク:7f0734fc78dcc450b87ba7840a5485a2&#34;&gt;関連リンク&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/03/30/action-dispatch/&#34;&gt;ActionDispatch ってなんだろう？ - 広島・岡山Ruby交流会01 - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>GitHub Pages で jekyll を使うなら safe: false で開発したほうが良いかもしれない</title>
          <link>https://blog.eiel.info/blog/2014/05/08/jekyll-on-github-devel-safe-false/</link>
          <pubDate>Thu, 08 May 2014 09:50:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/05/08/jekyll-on-github-devel-safe-false/</guid>
          <description>

&lt;p&gt;3月ぐらいから GitHub Pages でも使える Jekyll のプラグインが一部使えるようになりました。
最新の &lt;a href=&#34;https://github.com/github/pages-gem&#34;&gt;github-pages gem&lt;/a&gt; の v18 だと&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jekyll/jemoji&#34;&gt;jemoji&lt;/a&gt; - GitHubの絵文字が使える&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jekyll/jekyll-mentions&#34;&gt;jekyll-mentions&lt;/a&gt; - &lt;code&gt;@github-id&lt;/code&gt; と、書くと自動でユーザへのリンクになる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jekyll/jekyll-redirect-from&#34;&gt;jekyll-redirect-from&lt;/a&gt; - 別のページからこのページに飛ばせる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jekyll/jekyll-sitemap&#34;&gt;jekyll-sitemap&lt;/a&gt; - &lt;code&gt;sitemap.xml&lt;/code&gt; が自動生成される&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;が使えます。&lt;/p&gt;

&lt;p&gt;ローカルで開発する場合、&lt;code&gt;_config.yml&lt;/code&gt; に&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;safe: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と記述してしまうと、これらのプラグインが動作しません。
GitHubに push すると動作してました。&lt;/p&gt;

&lt;p&gt;ただし、GitHub上では &lt;code&gt;safe: true&lt;/code&gt; の状態で動いてるはずなので、注意が必要です。(実際に確認はしてないけど)&lt;/p&gt;

&lt;p&gt;github-pages v19 で Jekyll が 2.0.2 になるのでこれはこれでまた違ってくるかもしれませんが、確認していません。(まだリリースされてない)
そういえば、SASS とか CoffeeScript が使えるようになりそうなので非常に期待したい v19 です。&lt;/p&gt;

&lt;p&gt;ローカルやTravisで生成すればだいたいのことができますが GitHub で生成できるとGitHub 入門として使いやすいですし、どんどん機能拡張されると良いですねー。&lt;/p&gt;

&lt;h3 id=&#34;補足:7862db9e748a2cbd4163d6e30c890c9c&#34;&gt;補足&lt;/h3&gt;

&lt;p&gt;プラグインを利用するには &lt;code&gt;_config.yml&lt;/code&gt; に&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gems:
  - jekyll-mentions
  - jekyll-redirect-from
  - jemoji
  - jekyll-sitemap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;の記載が必要です。&lt;/p&gt;

&lt;p&gt;当然不要なものがあれば削ちゃってください。&lt;/p&gt;

&lt;h3 id=&#34;参考文献:7862db9e748a2cbd4163d6e30c890c9c&#34;&gt;参考文献&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://help.github.com/articles/using-jekyll-with-pages&#34;&gt;Using Jekyll with Pages · GitHub Help&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;関連:7862db9e748a2cbd4163d6e30c890c9c&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/02/17/github-pages/&#34;&gt;Github Pages について整理しておきます - そんなこと覚えてない&lt;/a&gt;
&lt;a href=&#34;http://blog.eiel.info/blog/2013/02/18/jekyll-on-github/&#34;&gt;Github で Jekyll を使う時に調べたこと - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/08/13/github-pages-gem/&#34;&gt;github-pages Gem というのが用意された - Github Page で使う gem のバージョンをあわせてくれる - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://great-h.github.io/&#34;&gt;すごい広島&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>LT駆動開発03で「S3にスライドを保存することにした」という発表者をしてきた。</title>
          <link>https://blog.eiel.info/blog/2014/05/03/ltdd-03-s3/</link>
          <pubDate>Sat, 03 May 2014 23:29:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/05/03/ltdd-03-s3/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA03&#34;&gt;LT駆動開発03&lt;/a&gt; でLTをしてきました。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;0917d000b4c40131d8ee7625813d8974&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;最近、本当にSSDの容量不足が深刻で仮想マシンなんて作った日にはさっさと用事を済ませて消さないとやばい状態が続いています。&lt;/p&gt;

&lt;p&gt;そんなわけで、滅多に使うことのないけど、残しておいたら役に立ちそうなファイルはS3に保存してみることにしました。
それだけだとつまらないので、ついでに一般公開しました。&lt;/p&gt;

&lt;p&gt;index.html を作るのに手動で作るのはめんどくさいので、
S3のバケットに保存しているオブジェクトの一覧をAPI経由で取得して、この情報を元に index.html を作成して、アップロードして、静的サイトとして公開しています。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;一覧の取得&lt;/li&gt;
&lt;li&gt;index.html の作成&lt;/li&gt;
&lt;li&gt;index.html のアップロード&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;を自動化しています。&lt;/p&gt;

&lt;p&gt;実際のページとソースコードはこちらに。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://keynotes.eiel.info/&#34;&gt;http://keynotes.eiel.info/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eiel/keynotes-eiel&#34;&gt;GitHub - eiel/keynotes-eiel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;S3を使った静的サイトの運用もちょっと試してみたかったので良い機会でした。まだ、調査が必要そうですけども。&lt;/p&gt;

&lt;p&gt;自動化はしていない部分であるスライドのアップロードには &lt;a href=&#34;http://s3tools.org/s3cmd&#34;&gt;s3cmd&lt;/a&gt; を利用しています。&lt;/p&gt;

&lt;p&gt;後半はHaskellの話です。
HaskellのAWSのAPIを叩くには &lt;a href=&#34;https://hackage.haskell.org/package/aws&#34;&gt;aws&lt;/a&gt; ライブラリを使用しました。他にも &lt;a href=&#34;https://hackage.haskell.org/package/aws-sdk&#34;&gt;aws-sdk&lt;/a&gt; というライブラリもあるようですが、対応しているサービスが違っているようでした。&lt;/p&gt;

&lt;p&gt;元々 Ruby を使ってつくってたのですが、なんとなく理由もなく Haskell でやりたくなってHaskellでやってみましたが、意外と簡単にできました。
Haskell 良いですね。&lt;/p&gt;

&lt;p&gt;あとレコード型が実に使いこなせてないことに気づいたので勉強してこようと思いました。&lt;/p&gt;

&lt;p&gt;まだ、 keynotes.eiel.info に特化しているのでそのうち汎用性を上げたいと思います。&lt;/p&gt;

&lt;p&gt;スライドですが、&lt;a href=&#34;http://memo.sanographix.net/post/82160791768&#34;&gt;azusa テンプレート&lt;/a&gt;をかなり参考にさせていただきました。
というか、色は少し自分好みに変えただけですね。
赤はもうちょっと明るい色を使うほうがいいなって思う反省点がありました。&lt;/p&gt;

&lt;p&gt;そんなわけで、今日はこの辺で。&lt;/p&gt;

&lt;h3 id=&#34;関連リンク:b3783079e786d24bd78477f1a8b31e09&#34;&gt;関連リンク&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/02/19/start-ltdd/&#34;&gt;LT駆動開発という勉強会をはじめるよ - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>CucumberとTurnipとSpinachと。</title>
          <link>https://blog.eiel.info/blog/2014/05/01/cucumber-turnip-spinach/</link>
          <pubDate>Thu, 01 May 2014 01:37:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/05/01/cucumber-turnip-spinach/</guid>
          <description>

&lt;p&gt;最近 spinach というライブラリがあることを知って Cucumber や Turnip と同じようなものだということはわかっていたのですが、ちゃんと調べてみることにした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cukes.info/&#34;&gt;Cucumber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jnicklas/turnip&#34;&gt;Turnip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/codegram/spinach&#34;&gt;Spinach&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「きゅうり」と「かぶ」と「ほうれん草」ですね。
一応ざっくり解説しておくと &lt;a href=&#34;http://ja.wikipedia.org/wiki/%E3%83%93%E3%83%98%E3%82%A4%E3%83%93%E3%82%A2%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA&#34;&gt;ビヘイビア駆動開発&lt;/a&gt; を実践するためのテスティングフレームワークです。
&lt;a href=&#34;https://github.com/cucumber/gherkin&#34;&gt;Gherkin&lt;/a&gt; という書式を利用して自然言語をならべて記述した文書を使い、自動テストとの結びつけができます。
動くことを確認することができる仕様書として使えます。&lt;/p&gt;

&lt;p&gt;今回登場している3つのソフトウェアは Gherkin を使っている Cucumber がら派生したライブラリです。
Turnip は Cucumber から派生して、使いやすく改良したものです。
Spinach は Cucumber から機能を削減して見通しをよくしています。&lt;/p&gt;

&lt;h3 id=&#34;turnip:077f29a11a792b7f6d209f7fe0a365be&#34;&gt;Turnip&lt;/h3&gt;

&lt;p&gt;Cucumber から派生して、Cucumber のイケてないところが修正されており、最近徐々に人気が出ているようです。
&lt;a href=&#34;http://magazine.rubyist.net/?0042-FromCucumberToTurnip&#34;&gt;るびま&lt;/a&gt;で取り上げられているので知っている方も多いと思います。
また rspec コマンドから実行することになります。&lt;/p&gt;

&lt;h3 id=&#34;spinach:077f29a11a792b7f6d209f7fe0a365be&#34;&gt;Spinach&lt;/h3&gt;

&lt;p&gt;Spinach は &lt;a href=&#34;https://github.com/gitlabhq/gitlabhq/blob/master/features/steps/help.rb&#34;&gt;GitLab&lt;/a&gt; で利用されています。
Cucumber から強い機能が外されてます。
ステップから引数をうけとったり、シナリオテンプレートが廃止されていたり。
「重複を排除するための機能は Ruby のレイヤーでやらせてしまおう」という感じがしました&lt;/p&gt;

&lt;p&gt;また、Gherkin は独自のものが再実装されていて国際化がされてないので、Cucumberだとできることが一部できません。
When や Given などは、日本語で「前提」や「もし」とかけましたが、Spinach 日本語が使えません。&lt;/p&gt;

&lt;h3 id=&#34;もうちょっと詳しく:077f29a11a792b7f6d209f7fe0a365be&#34;&gt;もうちょっと詳しく&lt;/h3&gt;

&lt;p&gt;例として Feature をひとつ作成してみました&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Feature: Cucumber と Turnip と Spinach
ちょっと遊んでみる

Scenario: 配列の作成
  Given 長さが10の配列を作成
  When &amp;quot;string&amp;quot;を最後尾に追加
  Then 配列の中身は&amp;quot;string&amp;quot;である
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;features ディレクトリに保存しています。&lt;/p&gt;

&lt;p&gt;まずはCucumberを試してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cucumber
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と実行すると下記のような出力があります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Given(/^長さが(\d+)の配列を作成$/) do |arg1|
  pending # express the regexp above with the code you wish you had
end

When(/^&amp;quot;(.*?)&amp;quot;を最後尾に追加$/) do |arg1|
  pending # express the regexp above with the code you wish you had
end

Then(/^配列の中身は&amp;quot;(.*?)&amp;quot;である$/) do |arg1|
  pending # express the regexp above with the code you wish you had
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;「ステップがないので追加しろ。雛形は用意した。」そんな感じですね。
数字やダブルグオーテーションで括った部分は arg1 として利用できるように生成されます。&lt;/p&gt;

&lt;p&gt;次に turinp を試してみます。
rspec コマンドから実行できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rspec -r turnip/rspec features
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出力結果には Cucumberのように雛形が出力されたりはしませんでした。
なれていないとここからの作業は少し難しいかもしれません。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Pending:
  Cucumber と Turnip と Spinach 配列の作成 長さが10の配列を作成 -&amp;gt; &amp;quot;string&amp;quot;を最
後尾に追加 -&amp;gt; 配列の中身は&amp;quot;string&amp;quot;である
    # No such step: &#39;長さが10の配列を作成&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;rspec の一部のように動くようになります。&lt;/p&gt;

&lt;p&gt;spinach も使ってみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ spinach
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cucumber との大きな違いは正規表現で特定の値を抽出がなくなっています。
Turnip ではプレースホルダになりますが、 Spinach で利用できなくなっています。
&lt;strong&gt;使わない&lt;/strong&gt;という思想のようです。&lt;/p&gt;

&lt;p&gt;クラス定義になっており、使えるメソッドを増やすにはミックスインを利用することになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Feature: Cucumber と Turnip と Spinach
    Could not find steps for `Cucumber と Turnip と Spinach` feature


    Please create the file cucumber_turnip_spinach.rb at features/steps, with:

    class Spinach::Features::CucumberTurnipSpinach &amp;lt; Spinach::FeatureSteps
      step &#39;長さが10の配列を作成&#39; do
        pending &#39;step not implemented&#39;
      end

      step &#39;&amp;quot;string&amp;quot;を最後尾に追加&#39; do
        pending &#39;step not implemented&#39;
      end

      step &#39;配列の中身は&amp;quot;string&amp;quot;である&#39; do
        pending &#39;step not implemented&#39;
      end
    end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;まとめ:077f29a11a792b7f6d209f7fe0a365be&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;簡単な比較しかしていませんが、spinach 面白いと思います。
もうちょっと試して紹介したいと思います。
Cucumberのシナリオテンプレートは使ってみると少し闇な感じがしていたので、使わないという割り着もよいと思います。
テーブルなんかは Rspec を使うより優位性を感じますが、この場合使えません。&lt;/p&gt;

&lt;p&gt;あとは、ふるまいを記述する人がふるまいに集中できる感じがします。&lt;/p&gt;

&lt;h3 id=&#34;関連:077f29a11a792b7f6d209f7fe0a365be&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/02/12/gherkin/&#34;&gt;Cucumber のフィーチャの文法 - Gherkin - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/05/23/cucumber-with-phantomjs/&#34;&gt;cucumber で PhantomJS を使う - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/09/03/cucumber-js/&#34;&gt;Cucumber-js を試した。 - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>hiroshima.5374.jpをつくった話を LT駆動開発 02 でしてきた</title>
          <link>https://blog.eiel.info/blog/2014/04/06/ltdd-02-5374/</link>
          <pubDate>Sun, 06 Apr 2014 00:43:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/04/06/ltdd-02-5374/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA02&#34;&gt;LT駆動開発 02&lt;/a&gt;に参加してきました。
そもそも主催者らしい。&lt;/p&gt;

&lt;p&gt;LT駆動開発は普段の開発する際に「毎月ライトニングトークすることを考えながらやろう」という主旨の勉強会で、「勉強会では発表者が一番勉強になる」という法則を軸にした勉強会です。&lt;/p&gt;

&lt;p&gt;今回は3月頭に &lt;a href=&#34;http://5374.jp/&#34;&gt;5374.jp&lt;/a&gt; の&lt;a href=&#34;http://hiroshima.5374.jp/&#34;&gt;広島市バージョン&lt;/a&gt;を作成したのでその話をしました。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;0fad3ff09efe0131ed915eeea3b4da59&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;世の中には「誰かがやれば便利になるだろう」と思うものがあると思います。
でも、「誰かがやるだろう」って思う人がたくさんいます。
だからこそ、積極的に誰かがやるだろうと思うことをやることで、良い流れを作れる人になれるのではないかと最近思ってたりします。&lt;/p&gt;

&lt;p&gt;でもでも、独りのキャパシティには限界にあるので、どうやって周りをまきこむかも大事だと思っています。
こういう想いを書いたブログ記事を書いたりとかも巻き込もうという意図があるかもしれません。&lt;/p&gt;

&lt;p&gt;以前どこかで書きましたが、私は一般の人より体力が少ないみたいなのです。
最近はどうやったらそれを補えるか、どうやったら生かせるか、を考えていたりしています。&lt;/p&gt;

&lt;p&gt;その一つの答えは「大きな流れをつくるきっかけを作る」ことかと思っているのですが、その想いは特に語りませんでした。
みんなが楽しくなる場所とか、みんなが便利暮らせる社会とか、そういう風に考える人が少しでもたくさんいて欲しい。&lt;/p&gt;

&lt;p&gt;あ、でも、まずは、自分のことを大切にしてくださいね。
自己犠牲なんか誰も喜ばないからね。&lt;/p&gt;

&lt;p&gt;話が逸れた。&lt;/p&gt;

&lt;p&gt;Code For Japan とか Code For X のこと自体、私自身がよくわかってはいないですが簡単に話したりもしました。&lt;/p&gt;

&lt;p&gt;そもそもの目的は GitHub を普通の人に使ってもらえる機会が作れるんじゃないかと思ったのですが、結局自分ひとりでCSVをつくってしまったという話も少ししました。&lt;/p&gt;

&lt;p&gt;そんなわけで、LT駆動開発はなるべく毎月やっていきたいと思います。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ActionDispatch ってなんだろう？ - 広島・岡山Ruby交流会01</title>
          <link>https://blog.eiel.info/blog/2014/03/30/action-dispatch/</link>
          <pubDate>Sun, 30 Mar 2014 01:27:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/03/30/action-dispatch/</guid>
          <description>&lt;p&gt;ちわっす。絶賛、仕事が遅れまくっていてこんなことをしている場合じゃない状態です。こんにちは。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://hirosimaokayamarb.doorkeeper.jp/events/8993&#34;&gt;広島岡山Ruby交流会01&lt;/a&gt; に参加してきました。
一応セッションをしたので、ブログに残しておきたいと思います。&lt;/p&gt;

&lt;p&gt;Rails のコードリーディングをしているので、自分の中に構築できたイメージをアウトプットをしようというシリーズです。4ヶ月ぶりぐらいですね。&lt;/p&gt;

&lt;p&gt;今回は ActionDispatch です。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;97426d70998c013115765a48c3b99610&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;ActionDispatch ってなにすんだよ？って正直思っていたので、「ActionDispatchってなんだろう？」というタイトルにしました。&lt;/p&gt;

&lt;p&gt;Rails は MVC フレームワークということで MVC のどこかにはまるものであればイメージが湧きやすいのですが、それ意外の部分になると途端に想像できなくなります。
ようやく想像できるようになったので簡単に図示しつつ、それと気になる部分をざっくりと紹介しました。&lt;/p&gt;

&lt;p&gt;スライド中のコードは Gist にアップロードしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/eiel/b4c6e39bf9b694022b17&#34;&gt;https://gist.github.com/eiel/b4c6e39bf9b694022b17&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;最後に言い訳をしておくと、時間を使ってる場合ではないので図が雑です。&lt;/p&gt;

&lt;p&gt;Rails の勉強をしている人に参考になれば幸いです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Twilio を使って、着信でモールス信号してみた。</title>
          <link>https://blog.eiel.info/blog/2014/03/15/twilio-abc/</link>
          <pubDate>Sat, 15 Mar 2014 02:54:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/03/15/twilio-abc/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://twiliomeetup.doorkeeper.jp/events/9078&#34;&gt;Twilio API 勉強会&lt;/a&gt;に遊びにいった。&lt;/p&gt;

&lt;p&gt;勉強会では基本的なことを学んだ。
電話をかけたときの動作を登録したり、電話をかけたりしました。&lt;/p&gt;

&lt;p&gt;せっかくなので、なにか作ってみることにした。&lt;/p&gt;

&lt;p&gt;以下、完全にネタです。実用性皆無です。
あとサービスにどれくらい負荷がかかるのかよくわからないので、試す場合はほどほどにしましょう。
たぶん、もう二度と試さない。&lt;/p&gt;

&lt;p&gt;着信する長さが一応調整できるのでモールス信号してみました。&lt;/p&gt;

&lt;p&gt;コードは以下の感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;twilio-ruby&#39;
require &#39;morse&#39;

account_sid = &#39;account_sid を設定する&#39;
auth_token = &#39;auth_tokenを設定する&#39;
@client ||= Twilio::REST::Client.new account_sid, auth_token

TWILIO_NUMBER = &#39;Twilio で作成した電話番号を登録する&#39;
MY_NUMBER = &#39;自分の電話番号を設定する&#39;

def call(n)
  call = @client.account.calls.create(
    from: TWILIO_NUMBER,
    to: MY_NUMBER,
    url: &#39;http://example.com/&#39;,
    timeout: n,
  )
  puts &amp;quot;create call #{call.sid}&amp;quot;
  loop do
    call = @client.account.calls.get(call.sid)
    puts &amp;quot;call status #{call.status}&amp;quot;
    case call.status
    when &#39;no-answer&#39;, &#39;completed&#39;
      sleep(1)
      break
    when &#39;failed&#39;,&#39;canceled&#39;
      break
    when &#39;queued&#39;,&#39;ringing&#39;,&#39;in-progress&#39;,&#39;busy&#39;
      sleep(0.5)
    end
  end
end

morse = Morse.encode(ARGV[0])
puts &amp;quot;word: #{ARGV[0]}&amp;quot;
puts &amp;quot;morse: #{morse}&amp;quot;
morse.each_char do |c|
  case c
  when &#39;.&#39;
    call(1)
  when &#39;-&#39;
    call(3)
  when &#39; &#39;
    sleep(1)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使い方&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ruby 作成したファイル hello
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行例&lt;/p&gt;

&lt;p&gt;動画とりたいけど、とってない。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ruby twilio-sample.rb a
word: a
morse: .-
create call CA9ec2867270b920fcebbe47583ee0b9d2
call status ringing
call status ringing
call status ringing
call status ringing
call status no-answer
create call CAdf11adbe89a3d995369e97531f4b22f9
call status ringing
call status ringing
call status ringing
call status ringing
call status ringing
call status no-answer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;簡単に解説。&lt;/p&gt;

&lt;p&gt;まず、call メソッド。引数 n でn秒間着信する電話をかけます。&lt;/p&gt;

&lt;p&gt;仕組みは電話をかけると sid が振られます。
sid をつかって twilio に問い合せると状態が取得できます。
コールが終わっているか確認し、終わっていたら処理が戻るようにしています。こうすることで call メソッドを並べていけるようにしました。
キューに入れることができればこんなことしなくていいのに…。
よくわからなかった。&lt;/p&gt;

&lt;p&gt;あとは好きな文字をモールス符号に変換して、あとは短いところを 1秒、長いところを3秒になるようにしてみました。&lt;/p&gt;

&lt;p&gt;そんなに応答速度がいいわけではないので、時間かかるし、コール時間も安定しない。サービスにどれくらい負荷がかかるのかわからないので、良い子は何度も何度も実行しないほうがいいと思う。&lt;/p&gt;

&lt;h3 id=&#34;蛇足:317e528a0b0afc2ff38b76f842a94944&#34;&gt;蛇足&lt;/h3&gt;

&lt;p&gt;終わった後、おうちに帰ってなんか少しだけネタなことしてみようと思い、電話をかける部分で遊ぶことにした。&lt;/p&gt;

&lt;p&gt;通話してしまうと、電話代かかりますしね。(トライアル期間なので大丈夫ですが)&lt;/p&gt;

&lt;p&gt;しかし、ローカルで遊ぼうと思うとできることが限界があります。
Twilio からローカルマシンにコールバックする方法が基本的にないからです。
コールバックを受けるには公開サーバを用意する必要があります。&lt;/p&gt;

&lt;p&gt;静的ファイルだけでも繰り返しや分岐はできます。
しかし、状態が保存できないため、表現力に限界が。&lt;/p&gt;

&lt;p&gt;電話をかけた情報などはローカルでも取得可能なので、電話をかけることで遊ぶことにしました。&lt;/p&gt;

&lt;p&gt;本来の使い方とは違うし無駄に負荷がかかるような気がするので、こういった遊びはほどほどにしましょう。&lt;/p&gt;

&lt;p&gt;一応、規約には目を通してみたけど、極端に負荷をかけなければ大丈夫そう。&lt;/p&gt;

&lt;h3 id=&#34;参考文献:317e528a0b0afc2ff38b76f842a94944&#34;&gt;参考文献&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.twilio.com/docs/api/rest/call&#34;&gt;Twilio Docs - API REST Call&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.twilio.com/docs/api/rest/making-calls&#34;&gt;Twilio Docs - API REST Making Calls&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Sensu を少しだけ触ってみた</title>
          <link>https://blog.eiel.info/blog/2014/03/05/sensu-abc/</link>
          <pubDate>Wed, 05 Mar 2014 20:16:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/03/05/sensu-abc/</guid>
          <description>

&lt;p&gt;ちょっと前に &lt;a href=&#34;http://sensuapp.org/&#34;&gt;Sensu&lt;/a&gt; を試した。
大したことは試してないのですが、日本語の情報もあまりないので試したことを記録しておこうと思う。&lt;/p&gt;

&lt;h3 id=&#34;sensu-って:a96f6097673edaa404e42451cd38aa4e&#34;&gt;Sensu って？&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://ja.wikipedia.org/wiki/Nagios&#34;&gt;Nagios&lt;/a&gt; という統合監視ツールの置き換えを狙ったプロダクトのようで、Nagios のプラグインがそのまま使えます。
そもそも Nagios のプロトコルをそのまま使ってるようです。&lt;/p&gt;

&lt;p&gt;同様のツールとして &lt;a href=&#34;http://ja.wikipedia.org/wiki/Zabbix&#34;&gt;Zabbix&lt;/a&gt; などありますが、結構毛色が違うツールだということを今回わかりました。(Zabbix は試したことがありますが、Nagios は試したことがないです)&lt;/p&gt;

&lt;p&gt;Zabbix は全部入りみたいな感じで、これだけでなんでもできたりして、入門するには難しい感じです。&lt;/p&gt;

&lt;p&gt;Nagios を利用する際にはグラフを書きたい場合は &lt;a href=&#34;http://munin-monitoring.org/&#34;&gt;munin&lt;/a&gt; などを併用する人も多いようです。
munin は個人的に設定が楽なので、ちょろっとした時に利用します。&lt;/p&gt;

&lt;p&gt;そんなわけで、「いまどきの Nagios」 である Sensu を試してみようという流れです。&lt;/p&gt;

&lt;h3 id=&#34;まずインストールしてみる:a96f6097673edaa404e42451cd38aa4e&#34;&gt;まずインストールしてみる&lt;/h3&gt;

&lt;p&gt;どんなものかピンと来ない場合はまず動かしてみるほうがいいです。
Sensu をインストールするのに chef や puppet が使えるように公式から &lt;a href=&#34;https://github.com/sensu/sensu-chef&#34;&gt;sensu-chef&lt;/a&gt; や &lt;a href=&#34;https://github.com/sensu/sensu-puppet&#34;&gt;chef-puppet&lt;/a&gt; があり割と簡単にインストールできるようです。&lt;/p&gt;

&lt;p&gt;手動でもそんなに難しいわけではなく &lt;a href=&#34;http://sensuapp.org/docs/0.12/guide&#34;&gt;ドキュメント&lt;/a&gt;を見ながらやればできると思います。&lt;/p&gt;

&lt;p&gt;というわけで、今回は sensu-chef を試しました。&lt;/p&gt;

&lt;p&gt;私が chef の初心者なので、その辺のメモも書いています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/sensu/sensu-chef&#34;&gt;sensu-chef の README.md をみる&lt;/a&gt;とやり方が書いてあります。
&lt;a href=&#34;http://www.vagrantup.com/&#34;&gt;Vagrant&lt;/a&gt; をつかって動かすサンプルがあります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone git@github.com:sensu/sensu-chef.git
$ cd sensu-chef/examples
$ gem install bundler
$ bundle install
$ librarian-chef install
$ vagrant up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすると sensu-server, suns-clint, sensu-api, sensu-dashboard, Redis, RabbitMQ がインストールされます。&lt;/p&gt;

&lt;p&gt;それぞれの関係は &lt;a href=&#34;http://sensuapp.org/docs/0.12/overview&#34;&gt;ドキュメントに図示されています&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://sensuapp.org/docs/0.12/img/sensu-diagram-4801b356.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;sensu が収集している情報は sensu-api 経由、または sensu-dashboard にアクセスと取得できるようです。
この example を利用した場合、 &lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt; で sensu-dashboard アクセスできます。
Basic認証がかかっていて、デフォルトでは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User名: admin&lt;/li&gt;
&lt;li&gt;password: secret&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;になってます。
ちなみに &lt;a href=&#34;https://github.com/sensu/sensu-chef/blob/master/attributes/default.rb#L35-L36&#34;&gt;attributes/default.rb&lt;/a&gt; に定義されています。
実際に運用する場合は、この値ををどこかで上書きすればよいです。
(chef はいろんなポイントで値を上書きできるっぽい)&lt;/p&gt;

&lt;h3 id=&#34;なんか監視してみる:a96f6097673edaa404e42451cd38aa4e&#34;&gt;なんか監視してみる&lt;/h3&gt;

&lt;p&gt;監視項目の追加には check を追加するようです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sensuapp.org/docs/0.12/adding_a_check&#34;&gt;Sensu | An open source monitoring framework&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最初のサンプルは crond をチェックするもので、 &lt;code&gt;/etc/conf.d/check_cron.json&lt;/code&gt; というJSONファイルを作成することになります。&lt;/p&gt;

&lt;p&gt;この chef のレシピを使っていると chef の機能である Data Bag をつかってcheckの追加ができるようになっています。
&lt;code&gt;data_bags/sensu_checks&lt;/code&gt; ディレクトリにJSONファイルをおくことで設定できるようになっています。
試しに &lt;code&gt;data_bags/sensu_checks/check_cron.json&lt;/code&gt; を作成してみました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;id&amp;quot;: &amp;quot;cron_check&amp;quot;,
    &amp;quot;handlers&amp;quot;: [&amp;quot;default&amp;quot;],
    &amp;quot;command&amp;quot;: &amp;quot;check-procs.rb -p crond -C 1 &amp;quot;,
    &amp;quot;interval&amp;quot;: 5,
    &amp;quot;subscribers&amp;quot;: [&amp;quot;all&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この JSON は &lt;code&gt;/etc/conf.d/check_cron.json&lt;/code&gt; を生成するための&lt;a href=&#34;https://github.com/portertech/chef-monitor&#34;&gt;monitor&lt;/a&gt;というクックブックにより提供されている機能で読み込まれて使用されます。&lt;/p&gt;

&lt;p&gt;このJSONを配置すると下記のような &lt;code&gt;/etc/conf.d/check_cron.json&lt;/code&gt; が生成されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;checks&amp;quot;: {
    &amp;quot;cron_check&amp;quot;: {
      &amp;quot;command&amp;quot;: &amp;quot;check-procs.rb -p crond -C 1 &amp;quot;,
      &amp;quot;subscribers&amp;quot;: [
        &amp;quot;all&amp;quot;
      ],
      &amp;quot;handlers&amp;quot;: [
        &amp;quot;default&amp;quot;
      ],
      &amp;quot;interval&amp;quot;: 5
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;似ているものですが違うものです。&lt;/p&gt;

&lt;p&gt;Sensu は設定ファイルがJSONで書くことができて、Chefやなんかで設定を生成しやすいという特徴があることがわかりました。&lt;/p&gt;

&lt;p&gt;あとは cron をとめたり、開始したりして遊んでみてみると良いと思います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ service cron stop   # crond 停止
$ service cron start  # crond 開始
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;crond を止めてみると下記のような状態になりました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/2014-03-05-sensu.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;まとめ:a96f6097673edaa404e42451cd38aa4e&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;まだまだわからないことが多いのですが、とりあえず Sensu を体験することができました。
RedisやRabbitMQ のインストールが必要ですが Chef を使えば特に設定はせずに体験することができました。&lt;/p&gt;

&lt;p&gt;ついでに chef の Cookbook を読んで chefの勉強することもできました。&lt;/p&gt;

&lt;h3 id=&#34;参考文献:a96f6097673edaa404e42451cd38aa4e&#34;&gt;参考文献&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/portertech/chef-monitor&#34;&gt;portertech/chef-monitor · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sensuapp.org/docs/0.12&#34;&gt;Sensu | An open source monitoring framework&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>S3を使って静的サイトの公開する奴をしてみた。自動化できるみたいで幸せだった。</title>
          <link>https://blog.eiel.info/blog/2014/03/04/s3-static-site/</link>
          <pubDate>Tue, 04 Mar 2014 02:16:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/03/04/s3-static-site/</guid>
          <description>

&lt;p&gt;AWS 楽しいですね。プログラミングできる領域が増加する楽しさがありますね。&lt;/p&gt;

&lt;p&gt;なかなかAWSのマネージメントコンソールとお別れできない、AWS初心者です、こんばんは。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://aws.amazon.com/jp/s3/&#34;&gt;Amazon S3&lt;/a&gt; の売り文句に静的サイトにするという話がよくあります。
ちょっとやってみたのですが、マネージメントコンソールでのポリシーの設定とかめんどくさい。&lt;/p&gt;

&lt;p&gt;具体的にいうと、&lt;a href=&#34;http://www.slideshare.net/horiyasu/amazon-s3web-27138902/25&#34;&gt;S3を使って静的サイトを公開する手順&lt;/a&gt;に記載されてる1番と2番と3番がめんどくさい。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Webサイト用にS3のバケットを設定する。&lt;/li&gt;
&lt;li&gt;バケット内のファイルがアップロードした際、自動的に公開されるようバケットポリシーを追加する。&lt;/li&gt;
&lt;li&gt;HTMLファイルをアップロードする。&lt;/li&gt;
&lt;li&gt;S3のwebsite  endpointにアクセスし、ウェブサイト が表示されることを確認する。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;という手順を踏む。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1番はデフォルト設定だとそんなにめんどくさくない。&lt;/li&gt;
&lt;li&gt;2番はコピペして修正しなきゃいけなくて少しめんどくさい。これはやらないと毎回アップしたオブジェクトを公開しないといけない。上書きしたとしても。&lt;/li&gt;
&lt;li&gt;3番はいろんなツールがありそうな気がする。今回は気にしない。&lt;/li&gt;
&lt;li&gt;4番はしゃーない。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というわけで、1番と2番を ruby の aws-sdk をつかってやってみた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;aws-sdk&#39;

def s3_static_site(bucket_name)
  @hostname = bucket_name
  set_policy
  set_website
end

def set_policy
  bucket.policy = AWS::S3::Policy.from_json(policy_json)
end

def set_website
  bucket.configure_website do |cfg|
    cfg.index_document_suffix = &#39;index.html&#39;
    cfg.error_document_key = &#39;error.html&#39;
  end
end

def s3
  region = ENV[&#39;AWS_REGION&#39;]
  end_point = &amp;quot;s3-#{region}.amazonaws.com&amp;quot;
  @s3 ||= AWS::S3.new(s3_endpoint: end_point)
end

def bucket
  @bucket ||= s3.buckets[@hostname]
end

def policy_json
 &amp;lt;&amp;lt;POLICY_JSON
{
  &amp;quot;Version&amp;quot;:&amp;quot;2012-10-17&amp;quot;,
  &amp;quot;Statement&amp;quot;:[{
        &amp;quot;Sid&amp;quot;:&amp;quot;AddPerm&amp;quot;,
        &amp;quot;Effect&amp;quot;:&amp;quot;Allow&amp;quot;,
          &amp;quot;Principal&amp;quot;: {
            &amp;quot;AWS&amp;quot;: &amp;quot;*&amp;quot;
         },
      &amp;quot;Action&amp;quot;:[&amp;quot;s3:GetObject&amp;quot;],
      &amp;quot;Resource&amp;quot;:[&amp;quot;arn:aws:s3:::#{@hostname}/*&amp;quot;
      ]
    }
  ]
}
POLICY_JSON
end


s3_static_site ARGV[0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;s3-static-site.rb&lt;/code&gt; とかで保存していると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ruby s3-static-site.rb [バケット名]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でバケットの設定が終わる。&lt;/p&gt;

&lt;p&gt;ただし、事前に環境変数として、&lt;code&gt;AWS_ACCESS_KEY_ID&lt;/code&gt; &lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt; &lt;code&gt;AWS_REGION&lt;/code&gt; の設定をしておかないといけません。
&lt;code&gt;AWS_ACCESS_KEY_ID&lt;/code&gt; &lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt; はIAMでユーザをつくってそこから生成した。
AWS_REGIONは利用したいリージョンで、東京をつかう場合は &lt;code&gt;ap-northeast-1&lt;/code&gt; を設定する。&lt;/p&gt;

&lt;p&gt;いっそバケットの作成とRoute53の設定を組み込んですれば「10秒でS3を使って静的サイト環境を作成」とか言える気がする。
すごく車輪の再発明臭がする。&lt;/p&gt;

&lt;p&gt;そういうのなかったら gemとか作りたい。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:f219bb23e6dc68ad310244efa584babe&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;そんなわけで、AWSはいままでハードウェアだと思ってたものを操作できるということを学んだ。
プログラマーのできることが増えて非常に楽しい。&lt;/p&gt;

&lt;p&gt;なんでこういう楽しさをみんなもっとはやく教えてくれないんだ。
(従量課金が怖かったとか言えない)&lt;/p&gt;

&lt;p&gt;そんなことを思った。&lt;/p&gt;

&lt;p&gt;関係ないけど &lt;a href=&#34;http://twilio.kddi-web.com/&#34;&gt;Twilio&lt;/a&gt; もプログラミングできるものを増やしてくれて楽しさを感じた。&lt;/p&gt;

&lt;h3 id=&#34;参考文献:f219bb23e6dc68ad310244efa584babe&#34;&gt;参考文献&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/horiyasu/amazon-s3web-27138902&#34;&gt;Amazon S3による静的Webサイトホスティング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.aws.amazon.com/AWSRubySDK/latest/AWS/S3.html&#34;&gt;Class: AWS::S3 — AWS SDK for Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/dev/AccessPolicyLanguage_UseCases_s3_a.html&#34;&gt;Example Cases for Amazon S3 Bucket Policies - Amazon Simple Storage Service&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>LT駆動開発で「CI のある生活」という話をするはずだった</title>
          <link>https://blog.eiel.info/blog/2014/03/03/ci-in-ltdd/</link>
          <pubDate>Mon, 03 Mar 2014 12:05:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/03/03/ci-in-ltdd/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/LTDD/Sessions/wiki/LT%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA01&#34;&gt;LT駆動開発 01&lt;/a&gt;で「CI のある生活 すごい広島の例」という話をするはずでしたが、時間の都合で「すごい広島の例」だけになりました。&lt;/p&gt;

&lt;p&gt;LT駆動開発の参加者には、継続インテグレーション(以下、CI)の知らない普通の人もいるだろうという想定で CI の説明をしてみようという試みでしたが、時間がなかったので30枚ぐらいスライドを省略しました。&lt;/p&gt;

&lt;p&gt;下記のスライドは省いたスライドも追加してあります。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;af93ee90836f0131cf5b265e09c13f13&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;本スライドは「CI を普通の人に有用性を知ってもらうには」や「Web制作の人にも使いどころを考えてもらうにはどうすればいいか」を考えつつ、ウェブで見つかる CI の説明は開発者よりのものばかりなので、他の説明方法はできないかと考えてみたものです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://great-h.github.io/&#34;&gt;すごい広島&lt;/a&gt;の中に &lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis-CI&lt;/a&gt; というサービスが登場するようになりました。
すごい広島の目的の一つに、プログラマではないITの仕事をしてる人に「GitHubの使い方を学んでもらう」というのがあるというのが発端です。&lt;/p&gt;

&lt;p&gt;CI って、とりあえずテストを自動実行するところから入る使い方から入るパターンが多くて、自動テストかいてなくて使いどころがなくって使ってないなんて話や「何に使うの？」って話が周りでは多い気がします。
そんな中、「CIサーバってなんだろうなー」と半日考えた結果の答えは「作ることに集中したい」ってことと「継続的デリバリーをするためのツール」ってことだと考えました。&lt;/p&gt;

&lt;p&gt;そこで、そこへ至る道を論理的に進めてみたつもりです。&lt;/p&gt;

&lt;p&gt;ちなみに&lt;a href=&#34;http://www.amazon.co.jp/gp/product/4048707876/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=4048707876&amp;amp;linkCode=as2&amp;amp;tag=eiel-22&#34;&gt;継続的デリバリー&lt;/a&gt;は読んでいない。&lt;/p&gt;

&lt;p&gt;スライドつくってて困ったのは、最初 CI って言葉しか使ってなくて、文脈によっては CIサーバという意味に変化してることがあって、それをどうやってごまかさないのか苦労しました。
気がついたら CI が継続的デリバリーって意味になっていることに気がついて、「これ CI じゃないじゃん」「CI ってなんなんだ」とか、ぐるぐるしました。
あと、統合って説明しにくい。&lt;/p&gt;

&lt;p&gt;LT 仕様なのでスライドの枚数の割に内容がないですね。&lt;/p&gt;

&lt;p&gt;そんなわけでLT駆動開発なのですが、私はLTをするために、いろいろ考えたので、当日参加した時点で勉強する目的を達成した感があったりします。
参加しなくても勉強になったかもしれない。&lt;/p&gt;

&lt;p&gt;他のLTは分野が多岐にわたり、自分が追えてない情報がまとまっていたり、自分にはない発想があったりと、当日は当日で勉強になりました。&lt;/p&gt;

&lt;p&gt;LT駆動開発の主旨を説明するために用意したスライドもアップロードしておいたので興味があれば、確認してみてください。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;0fdaccc0836f0131c82e4ea9b462f4d3&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;ついでに、スライドの .key ファイルをどっかに残しておきたいと思いつつ GitHub だとローカルディスクにコピーがいるし、悩んだ結果 S3 に置いてみたりしました。
来月にはこのあたりを自動化したりして、この話を整理して話そうかなぁ、と考えていたりします。3月は忙しそうで怖い。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://keynotes.eiel.info/&#34;&gt;keynotes.eiel.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;index.html を自動生成したい。&lt;/p&gt;

&lt;h3 id=&#34;関連:d620192eeb02a2e24418c588ce4dcf5a&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/02/19/start-ltdd/&#34;&gt;LT駆動開発という勉強会をはじめるよ - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/02/18/github-push-from-travis/&#34;&gt;Travis-CI でコミットして GitHub にプッシュする - 公開鍵認証を利用してみる - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/02/19/change-sitespec-for-great-h/&#34;&gt;すごい広島のサイトを sitespec に変えてみた - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Devise で登録時にConfirmation Token が不正な値というエラー</title>
          <link>https://blog.eiel.info/blog/2014/02/20/confirmation-token-error-indevise/</link>
          <pubDate>Thu, 20 Feb 2014 14:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/02/20/confirmation-token-error-indevise/</guid>
          <description>

&lt;p&gt;Devise で確認メールで確認してから有効にする機能 Confirmable の機能をつかってたのだけど、トークンが不正というエラーがおきた。&lt;/p&gt;

&lt;p&gt;この問題は devise 3.1.0 より前で、確認のために送信されるメールの内容をカスタマイズしていれば起きてるんじゃないかと思う。&lt;/p&gt;

&lt;p&gt;DBに格納される Token の値が HMAC されるようになったらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/plataformatec/devise/commit/143794d701bcd7b8c900c5bb8a216026c3c68afc&#34;&gt;Use HMAC on tokens stored in the DB ·  143794d · plataformatec/devise · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そのため、画面をカスタマイズしている場合、token の取得方法が変えないといけないっぽい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-&amp;lt;p&amp;gt;&amp;lt;%= link_to &#39;Confirm my account&#39;, confirmation_url(@resource, :confirmation_token =&amp;gt; @resource.confirmation_token) %&amp;gt;&amp;lt;/p&amp;gt;
+&amp;lt;p&amp;gt;&amp;lt;%= link_to &#39;Confirm my account&#39;, confirmation_url(@resource, :confirmation_token =&amp;gt; @token) %&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;確認メールだけでなく &lt;code&gt;app/views/devise/mailer&lt;/code&gt; 内のファイル全部変えないといけない気がする。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;confirmation_instructions.html.erb&lt;/li&gt;
&lt;li&gt;reset_password_instructions.html.erb&lt;/li&gt;
&lt;li&gt;unlock_instructions.html.erb&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あたりですね。&lt;/p&gt;

&lt;h3 id=&#34;蛇足:fa9d61f5264beb87c65f061b161f485f&#34;&gt;蛇足&lt;/h3&gt;

&lt;p&gt;v3.1.0 ってリリースされたの9月なんだが…さっき気づいたということは…。とおもって Gemfie.lock を git log &amp;ndash;patch Gemfile.lock して devise 検索したら、デプロイされたのは最近だった。&lt;/p&gt;

&lt;h3 id=&#34;参考:fa9d61f5264beb87c65f061b161f485f&#34;&gt;参考&lt;/h3&gt;

&lt;p&gt;直してから探したやつだけど。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/18626544/devise-confirmation-token-is-invalid-when-user-signs-up&#34;&gt;ruby on rails - Devise &amp;ldquo;Confirmation token is invalid&amp;rdquo; when user signs up - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;関連:fa9d61f5264beb87c65f061b161f485f&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2012/12/30/modify-email-on-devise/&#34;&gt;Devise で email 変更する。 - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>LT駆動開発という勉強会をはじめるよ</title>
          <link>https://blog.eiel.info/blog/2014/02/19/start-ltdd/</link>
          <pubDate>Wed, 19 Feb 2014 20:15:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/02/19/start-ltdd/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://ltdd.doorkeeper.jp/&#34;&gt;LT駆動開発&lt;/a&gt;という勉強会がはじまります。広島で。&lt;/p&gt;

&lt;p&gt;「LT駆動開発」というのは、「毎月ライトニングトークすることを前提に普段の開発をしようぜ」という意味らしいです。命名した人が言ってました。私だけど。&lt;/p&gt;

&lt;p&gt;「勉強会で最も勉強になっている人は発表している人なのではないか？」ということで、「発表することで勉強をしよう」、という目的の勉強会です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ltdd.doorkeeper.jp/events/9051&#34;&gt;第1回は3月1日に行われます。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;まだ1週間以上あるので準備はまだ間に合いますね。(?)&lt;/p&gt;

&lt;p&gt;この記事の概要&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;発表して勉強する&lt;/li&gt;
&lt;li&gt;発表しなくても参加しても良いよ&lt;/li&gt;
&lt;li&gt;「なんとなく」で、できることを増やそう&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;発表して勉強する:b8d5b45293ba35e4982b6f2ce1ddf7c9&#34;&gt;発表して勉強する&lt;/h3&gt;

&lt;p&gt;発表するという行動は人に考えを伝えることです。
何かを伝えるために自分がまず理解している必要があります。
発表の準備をしているとまだちゃんと理解していない点を見つけることができます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;とても勉強になりますね。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;人にわかりやすく伝えるには情報を整理する必要があります。
なんとなく理解しているだけではうまく伝えられません。
伝えようとすることでより情報が整理できます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;とても勉強になりますね。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;整理された発表資料を残しておくと、説明する手間が省けますね。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;他の人が勉強になりますね。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;蛇足なのですが、地方の勉強会では発表者が不足がちで、喋り手に困ることがあります。
そういう理由で、広島Ruby勉強会では、クオリティはさておいて、「みんな発表しよう。練習で良いので」という感じでここ1年ぐらい進んでました。
最近は、5、6人の発表者がでるようになりました。&lt;/p&gt;

&lt;p&gt;しかし、Rubyというテーマに絞るのはもったいないよね。
そんなわけで、そこから派生したのがのがこのLT駆動開発になります。&lt;/p&gt;

&lt;p&gt;もちろん、地方に発表できる人を増やすという裏の目的はもちろんありますが。&lt;/p&gt;

&lt;h3 id=&#34;発表しなくても参加して良いよ:b8d5b45293ba35e4982b6f2ce1ddf7c9&#34;&gt;発表しなくても参加して良いよ。&lt;/h3&gt;

&lt;p&gt;見学歓迎です。&lt;/p&gt;

&lt;p&gt;発表するというのはハードルが高いし、無理してする必要はないです。
ただし、&lt;strong&gt;一番勉強になるのは発表者らしいです。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;というわけで、ふらっと来れるように参加費は無料に設定しています。
スポンサーが裏でひっそり会場費を全額払うそうです。6000円ぐらいだっと思います。
誰かの発表を聞いてモチベーションを上げにくるのもOKです。&lt;/p&gt;

&lt;p&gt;会場費を払うスポンサーですが、緩やかに募集します。
そんなことよりも、代わりに別の勉強会を開催したり、地域活性化になりそうなこととか、情報リテラシーが向上しそうなことに使ってもらえたら嬉しいなー。
と、私自身は思ってます。&lt;/p&gt;

&lt;p&gt;そこで誰かが何かイベントとかはじめて同じような流れになって、どんどんいろいろやる人が増えたらいいなー。
そういう良さげな循環ができるといいなー。&lt;/p&gt;

&lt;p&gt;「悪い循環は止めて、良い循環は作りたいな」というのが最近の私の考えのようです。&lt;/p&gt;

&lt;p&gt;実はふらっと来てもらう場合、参加費って設定しづらくて、「どこまでを参加者とするの？」というのがあるというのもあります。
会場の &lt;a href=&#34;http://www.shakehands.jp/&#34;&gt;ShakeHands&lt;/a&gt; さんも面白いところなので、ついでに体験してもらう機会になればと思います。&lt;/p&gt;

&lt;h3 id=&#34;どんな人を対象に発表すればいいのか:b8d5b45293ba35e4982b6f2ce1ddf7c9&#34;&gt;どんな人を対象に発表すればいいのか？&lt;/h3&gt;

&lt;p&gt;とくに今は設定してません。
参加者しだいなところで、どんな人が参加するかによってちょっとづつ変わっていくと思います。&lt;/p&gt;

&lt;p&gt;勉強会を作るのは参加者なのです。
どうするか良いかは参加してる人たちの考えていきたいですね。&lt;/p&gt;

&lt;h3 id=&#34;なんとなくで-できることを増やそう:b8d5b45293ba35e4982b6f2ce1ddf7c9&#34;&gt;なんとなくで、できることを増やそう&lt;/h3&gt;

&lt;p&gt;はじめてやることって、どうしても準備に時間がかかります。&lt;/p&gt;

&lt;p&gt;なんとなくやっても人に見せられることを増やせると気楽にアウトプットできるようになります。
たぶん、ブログも最初は一つの記事にたくさんの時間をかけてしまうでしょう。
時間かかると認識しちゃうとだんだん書かなくなってしまいます。
手軽に良い感じの記事がすぐ書けるようになった人はたくさん書いてます。
たぶん、回数とか慣れとか、効率よく書くにはどうすればいいのかちゃんと考えているのだと思います。&lt;/p&gt;

&lt;p&gt;発表をすると&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;スライドの作り方を学ばないといけない&lt;/li&gt;
&lt;li&gt;人に説明する方法を学ばないといけない&lt;/li&gt;
&lt;li&gt;考えを整理すること学ばないといけない&lt;/li&gt;
&lt;li&gt;(場合によっては)図を書くツールの使い方を学ばないといけない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などなど、レイヤーがブレてる箇条書きになってしまってますが、たくさん学ぶことがあります。&lt;/p&gt;

&lt;p&gt;いまの段階でなんとなくでどれくらいできるでしょうか。
私はまだまだ全然ダメで苦手なところがちらほらあります。
毎回、新しいことにチャレンジしていろんなことをなんとなくできるようにしたいです。&lt;/p&gt;

&lt;p&gt;最近の開発方法ってまずデプロイすることを大事にしますよね。デプロイしてみてはじめてわかることがたくさんあるからですよね。
まずは発表してみて、どんなことをしないといけないか学んでみましょう。&lt;/p&gt;

&lt;p&gt;発表になれていても、「どんな人を対象に話をするのか」とか、「もっとわかりやすく伝えるにはどうしたらいいか」などなど発展課題も出てきます。
慣れてる人は次のステップを考えながらやると効果的だと思います。&lt;/p&gt;

&lt;p&gt;説明するのが上手い人が増えたら私自身も効率よく勉強できるような気がするんだ。(幻想だったらどうしよう)
IT業界の進化は速いので、みんなが効率よく勉強できると良い気がしませんか？&lt;/p&gt;

&lt;p&gt;そもそもさ、勉強するのだって体力使うんですよ。体力が少ない自分としては効率よく学ぶことはすごく大事なんだよ。だって、仕事もしなきゃいけないんだぜ。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:b8d5b45293ba35e4982b6f2ce1ddf7c9&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;2時間ぐらいの準備時間があれば、ちょっとしたライトニングトークができるようになりたいですね。
あと、ネタは普段から積極的につくりながら仕事したいです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ltdd.doorkeeper.jp/events/9051&#34;&gt;第１回の申し込みはこちらからです&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;関連:b8d5b45293ba35e4982b6f2ce1ddf7c9&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2014/02/07/osh-2014/&#34;&gt;本当に障がい者でもオープンセミナー広島の実行委員長ができるのか？ - 答え: できた。 - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>すごい広島のサイトを sitespec に変えてみた</title>
          <link>https://blog.eiel.info/blog/2014/02/19/change-sitespec-for-great-h/</link>
          <pubDate>Wed, 19 Feb 2014 18:43:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/02/19/change-sitespec-for-great-h/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://great-h.github.io/events/event-040.html&#34;&gt;すごい広島 #40&lt;/a&gt; で書いてる。&lt;/p&gt;

&lt;p&gt;すごい広島には &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; に馴れるというサブの目的が存在します。
参加者は 「GitHub にプルリクエストをしなければならない」というルールがあって、参加するだけでプルリクエストの練習することができます。
プルリクエストを体験することで、GitHubがどういうものなのか理解してもらおうという魂胆です。&lt;/p&gt;

&lt;p&gt;どんなプルリクエストを行うかというと、すごい広島のサイトに情報を追加してもらいます。
すごい広島で何をしているのか GitHubのIssue に書いてもらっているので、そこへのリンクを貼るのが一番簡単な変更となります。&lt;/p&gt;

&lt;p&gt;さて本題です。&lt;/p&gt;

&lt;p&gt;40回を迎えたことだし、もっと実際の GitHub の作業フローに合わせるためにすごい広島のプロセスの中に CI サーバを登場させることを考えてみました。
すごい広島のサイトは GitHub に生成させていましたが、Travis-CI でサイトを生成するようにしました。
プルリクエストすると Travis-CI でサイトが生成できるかどうか確認します。
これで、プルリクエストを本流にマージする際にサイトが生成できることを確認してからマージすることができるようになりました。&lt;/p&gt;

&lt;p&gt;これで少しだけですが、より実際の開発の流れに近づけることができたはずです。たぶん。&lt;/p&gt;

&lt;p&gt;下図はTravi-CI でサイトが生成できるかどうか確認中の時のプルリクエストのマージボタンです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/2014-02-19-travis.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;ついでに静的サイトジェネレータを変更する:805d6ee8f9be4a8a874327ae75367d6e&#34;&gt;ついでに静的サイトジェネレータを変更する&lt;/h3&gt;

&lt;p&gt;せっかくなので、静的サイトジェネレータもJekyllから別ものに変えることにしました。&lt;/p&gt;

&lt;p&gt;GitHub 上でビルドしなくなるので Jekyll でもいろいろできるようになりますが、どうせ機能面で優れたものに変えたいですよね。&lt;/p&gt;

&lt;p&gt;候補は &lt;a href=&#34;http://middlemanapp.com/&#34;&gt;middleman&lt;/a&gt; か &lt;a href=&#34;https://github.com/r7kamura/sitespec&#34;&gt;sitespec&lt;/a&gt; だったのですが、sitespec を試してみたかったので sitespec にしてみました。&lt;/p&gt;

&lt;h3 id=&#34;sitespec:805d6ee8f9be4a8a874327ae75367d6e&#34;&gt;Sitespec&lt;/h3&gt;

&lt;p&gt;sitespec は rspecをつかってサイトを生成します。&lt;/p&gt;

&lt;p&gt;Sitespec を使ってみて良い点は、普段のテスト駆動開発っぽいプロセスで開発できて、思考を変えなくてよかったところです。
作成したいページの spec を書いて、 rspec を実行するとそのページが生成できないことが確認できます。&lt;/p&gt;

&lt;p&gt;そこからは好きな方法で Rack アプリケーションを用意してあげればよいのです。
あとは通常のウェブ開発と同じやり方になりそうだと、sitespec を使いはじめてすぐにわかりました。&lt;/p&gt;

&lt;p&gt;Rails や Sinatra に馴れているのであればそれを使えばよくて、拡張機能もそれぞれのフレームワークのものが使えるし、足りないものがあれば同じ要領で開発すればよさそうです。
新しいことを覚えなくていいし、かゆいところに手が届きます。
また、なにか拡張機能を作れば普段の開発にも生かせそうなのも良いです。&lt;/p&gt;

&lt;p&gt;sitespec は柔軟性がありますが、その代わりにやることがちょっと増えたりします。
気軽に作りたい場合は middleman のようなツールを使うほうが良いかもしれません。&lt;/p&gt;

&lt;p&gt;ちなみに、すごい広島のサイトの修正は半日ぐらい真面目にやったらできました。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:805d6ee8f9be4a8a874327ae75367d6e&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;すごい広島のプロセスの中にCIを加えてみました。
他にも、取り込めるものをみつけたらどんどん取り込みしていきたいですね。
なにか面白いものないかなー。&lt;/p&gt;

&lt;p&gt;sitespec のほうはウェブアプリ開発者であれば、は選択肢としてありだと思いました。&lt;/p&gt;

&lt;h3 id=&#34;関連:805d6ee8f9be4a8a874327ae75367d6e&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/02/18/jekyll-on-github/&#34;&gt;Github で Jekyll を使う時に調べたこと - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/06/19/jekyll-on-function/&#34;&gt;Jekyll を使ったGithub Pages で関数呼び出し的なことをする - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/02/17/github-pages/&#34;&gt;Github Pages について整理しておきます - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Travis-CI でコミットして GitHub にプッシュする - 公開鍵認証を利用してみる</title>
          <link>https://blog.eiel.info/blog/2014/02/18/github-push-from-travis/</link>
          <pubDate>Tue, 18 Feb 2014 20:25:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/02/18/github-push-from-travis/</guid>
          <description>

&lt;p&gt;静的サイトジェネレータとGitHub Pagesを使っていると、Travis-CIでHTMLを生成してコミットを行い、masterを自動で更新して欲しいですね。&lt;/p&gt;

&lt;p&gt;普通なら下記の記事の方法で充分でした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tricknotes.hateblo.jp/entry/2013/06/17/020229&#34;&gt;Middleman で作った web サイトを Travis + GitHub pages でお手軽に運用する - tricknotesのぼうけんのしょ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;しかし、 Organization のリポジトリに対してこの方法を使うとメンバーが私個人のリポジトリを操作ができる気がする。
仕方ないので別の方法を模索してみた。&lt;/p&gt;

&lt;p&gt;GitHub には、リポジトリごとに公開鍵を追加する機能があったのでこれを使ってみました。&lt;/p&gt;

&lt;p&gt;考えないといけないことは、秘密鍵をどうやってTarvisへもっていくかです。
秘密鍵を共通鍵で暗号化して、リポジトリに追加する方法を選んでみました。
共通鍵を &lt;code&gt;.travis.yml&lt;/code&gt; の中に暗号化してに保存しておきます。
この共通鍵の復号は Travis 側で自動的にされます。この共通鍵を使い Travis 側でリポジトリに含まれる秘密鍵を復号します。&lt;/p&gt;

&lt;p&gt;秘密鍵さえ手に入れば GitHub に push できます。&lt;/p&gt;

&lt;p&gt;やることを整理します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Travis-CI の設定&lt;/li&gt;
&lt;li&gt;秘密鍵と公開鍵の作成&lt;/li&gt;
&lt;li&gt;秘密鍵を暗号化するための共通鍵の生成&lt;/li&gt;
&lt;li&gt;秘密鍵の暗号化してリポジトリに追加&lt;/li&gt;
&lt;li&gt;GitHub のリポジトリに公開鍵を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.travis.yml&lt;/code&gt; へ暗号化した共通鍵を設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.travis.yml&lt;/code&gt; にGitHubへ pushする処理などを記述&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;travis-ciの設定:beb7c1e27c3b85c5669165bb894279a8&#34;&gt;Travis-CIの設定&lt;/h3&gt;

&lt;p&gt;割愛します。&lt;/p&gt;

&lt;p&gt;ログインして、設定したいリポジトリをONにします。&lt;/p&gt;

&lt;h2 id=&#34;秘密鍵と公開鍵の作成:beb7c1e27c3b85c5669165bb894279a8&#34;&gt;秘密鍵と公開鍵の作成&lt;/h2&gt;

&lt;p&gt;ssh-gen コマンドを使います。
作る鍵を &lt;code&gt;deploy_key&lt;/code&gt; として進めます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh-keygen -f deploy_key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;deploy_key&lt;/code&gt; と &lt;code&gt;deploy_key.pub&lt;/code&gt; が生成されます。&lt;/p&gt;

&lt;h3 id=&#34;秘密鍵を暗号化するための共通鍵の生成:beb7c1e27c3b85c5669165bb894279a8&#34;&gt;秘密鍵を暗号化するための共通鍵の生成&lt;/h3&gt;

&lt;p&gt;適当につくります。shell変数 password に保存しておく例を書いておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ password=`cat /dev/urandom | head -c 10000 | openssl sha1`
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;秘密鍵の暗号化してリポジトリに追加:beb7c1e27c3b85c5669165bb894279a8&#34;&gt;秘密鍵の暗号化してリポジトリに追加&lt;/h3&gt;

&lt;p&gt;さっき作成した共通鍵で &lt;code&gt;deploy_key&lt;/code&gt; を暗号化して &lt;code&gt;deploy_key.enc&lt;/code&gt;を作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ openssl aes-256-cbc -k &amp;quot;$password&amp;quot; -in deploy_key -out deploy_key.enc -a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとは適当にコミットします。 &lt;code&gt;deploy_key&lt;/code&gt; をコミットしないように気をつけてください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git add deploy_key.enc
$ git commit -m &#39;Add deploy key&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;github-のリポジトリに公開鍵を追加:beb7c1e27c3b85c5669165bb894279a8&#34;&gt;GitHub のリポジトリに公開鍵を追加&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;deploy_key.pub&lt;/code&gt; をGitHubに登録します。&lt;/p&gt;

&lt;p&gt;GitHubのリポジトリのページを表示して、&lt;code&gt;設定&lt;/code&gt; &amp;gt; &lt;code&gt;Deploy keys&lt;/code&gt; &amp;gt; &lt;code&gt;Add deploy key&lt;/code&gt; で登録できます。区別がつくように名前は好きにつけましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/2014-02-18-github-push.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;travis-yml-へ暗号化した共通鍵を設定:beb7c1e27c3b85c5669165bb894279a8&#34;&gt;&lt;code&gt;.travis.yml&lt;/code&gt; へ暗号化した共通鍵を設定&lt;/h3&gt;

&lt;p&gt;travis gem をインストールしていない場合はインストールしましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem install travis
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;travis encrypt&lt;/code&gt; コマンドを使用します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ travis encrypt -r [ユーザ名や組織名]/[リポジトリ名] &amp;quot;SERVER_KEY=$password&amp;quot; -a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.travis.yml の env.global へ情報が記録されます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/great-h/great-h.github.io&#34;&gt;すごい広島&lt;/a&gt;を例にすると、こんな感じになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ travis encrypt -r great-h/great-h.github.io &amp;quot;SERVER_KEY=$password&amp;quot; -a
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;travis-yml-にgithubへ-pushする処理などを記述:beb7c1e27c3b85c5669165bb894279a8&#34;&gt;&lt;code&gt;.travis.yml&lt;/code&gt; にGitHubへ pushする処理などを記述&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;.tarvis.yml&lt;/code&gt; の &lt;code&gt;after_success&lt;/code&gt; にやりたいことを書きましょう。&lt;/p&gt;

&lt;p&gt;鍵の設定の部分はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;after_success:
  - echo -e &amp;quot;Host github.com\n\tStrictHostKeyChecking no\nIdentityFile ~/.ssh/deploy.key\n&amp;quot; &amp;gt;&amp;gt; ~/.ssh/config
  - openssl aes-256-cbc -k &amp;quot;$SERVER_KEY&amp;quot; -in .travis/deploy_key.enc -d -a -out deploy.key
  - cp deploy.key ~/.ssh/
  - chmod 600 ~/.ssh/deploy.key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとは煮るなり焼くなり。&lt;/p&gt;

&lt;p&gt;すごい広島での例を上げておきます。
&lt;code&gt;_site&lt;/code&gt; にファイルが生成されているので、それを master ブランチにコミットしてプッシュしています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;language: ruby
rvm:
  - 2.1.0
after_success:
  - echo -e &amp;quot;Host github.com\n\tStrictHostKeyChecking no\nIdentityFile ~/.ssh/deploy.key\n&amp;quot; &amp;gt;&amp;gt; ~/.ssh/config
  - openssl aes-256-cbc -k &amp;quot;$secret&amp;quot; -in .travis/deploy_key.enc -d -a -out deploy.key
  - cp deploy.key ~/.ssh/
  - chmod 600 ~/.ssh/deploy.key
  - git clone git@github.com:great-h/great-h.github.io.git -b master
  - cd great-h.github.io
  - cp -a ../_site/ .
  - git add --all
  - &#39;git commit -m &amp;quot;Generate Travis JOB $TRAVIS_JOB_NUMBER

https://travis-ci.org/great-h/great-h.github.io/builds/$TRAVIS_BUILD_ID&amp;quot;&#39;
  - &#39;[ &amp;quot;x$TRAVIS_BRANCH&amp;quot; == &amp;quot;xsource&amp;quot; ] &amp;amp;&amp;amp; git push origin master&#39;
branches:
  except:
    - master
env:
  global:
    - secure: &amp;quot;gIC6PLCnYmO29FiGqA1ZpVFsGBWbbdkZJGcBwYL2kyav3fPwdxRe6+RG3WEUfY2qwFnI52Br7pQ4ZClaBD76abObmYFW8Qkd13bgxgYMHFFzDh6ACMoY/JvRu4SXZcqiSi2QzeDTRk8Q825kGNY3QJXb4NiZ9gj8uAR9bNpnqnc=&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;まとめ:beb7c1e27c3b85c5669165bb894279a8&#34;&gt;まとめ？&lt;/h3&gt;

&lt;p&gt;暗号の強度して十分なのか検証していない。復号できたとしても、できることは限られてるので、とりあえず、妥協している。&lt;/p&gt;

&lt;p&gt;そういえば、master に作成したファイルをコミットしているのですが、master を push した際に travis が走るというバグに悩まされました。
&lt;code&gt;.travis.yml&lt;/code&gt; には以下のように書いておけば master は無視されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;branches:
  except:
    - master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実は master には &lt;code&gt;.travis.yml&lt;/code&gt; を置いていないのが原因でした。&lt;/p&gt;

&lt;p&gt;Travisの設定で &lt;code&gt;.travis.yml&lt;/code&gt; が無ければ動かさないという設定もできますし、適当に master に .travis.yml を置いておくのも良いと思います。&lt;/p&gt;

&lt;p&gt;他にも &lt;code&gt;.travis.yml&lt;/code&gt; に秘密鍵を保存する手法をいくつかみかけました。
長さが足りないので分割して保存して、Travis側で結合して使うようです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/lukewpatterson/4242707&#34;&gt;squeezing private SSH key into .travis.yml file&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;参考文献:beb7c1e27c3b85c5669165bb894279a8&#34;&gt;参考文献&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://help.github.com/articles/managing-deploy-keys&#34;&gt;Managing deploy keys · GitHub Help&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.travis-ci.com/user/travis-pro/#How-can-I-encrypt-files-that-include-sensitive-data%3F&#34;&gt;Travis CI: Travis Pro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/travis-ci/travis/issues/41&#34;&gt;Getting &amp;ldquo;data too large for key size&amp;rdquo; for 128 character  length secret_key_base var · Issue #41 · travis-ci/travis · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nilfigo.hatenablog.com/entry/20130705/1373000104&#34;&gt;gitにsshで接続（ポートと秘密鍵を指定) - まじめにゆいがどくそん&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;関連:beb7c1e27c3b85c5669165bb894279a8&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/02/17/github-pages/&#34;&gt;Github Pages について整理しておきます - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/02/18/jekyll-on-github/&#34;&gt;Github で Jekyll を使う時に調べたこと - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2014/02/08/i-need-a-girlfriend/&#34;&gt;そういえば彼氏募集というネタリポジトリがありましたね。真似するならこんな感じかなぁ。 - そんなこと覚えてない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>手軽にHaskell できる hawk が楽しい</title>
          <link>https://blog.eiel.info/blog/2014/02/14/hawk/</link>
          <pubDate>Fri, 14 Feb 2014 21:34:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/02/14/hawk/</guid>
          <description>&lt;p&gt;コマンドラインで Haskell のワンライナーっぽいものが使える &lt;a href=&#34;https://github.com/gelisam/hawk&#34;&gt;hawk&lt;/a&gt; ってのがあるらしくて、awk に似ているから hawk っていうらしい。&lt;/p&gt;

&lt;p&gt;気軽に Haskell の練習できて楽しい。&lt;/p&gt;

&lt;p&gt;インストールは&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cabal install haskell-awk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;らしい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hoge:goro:mogu
goro:mogu:hoge
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という入力があって 2列目だけ取り出したーいとかなら&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo &amp;quot;hoge:goro:mogu\ngoro:mogu:hoge&amp;quot; | hawk -d: -m &#39;!!2&#39;
mogu
hoge
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という感じらしい。-m を使うと行ごとの処理がかけて -d を使うとデリミタを認識してあらかじめリストしておいてくれる。&lt;/p&gt;

&lt;p&gt;それ意外にも情報源にできる。&lt;/p&gt;

&lt;p&gt;奇数のリストを作って10個とりだしてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$  hawk &#39;take 10 [1,3..]&#39;
1
3
5
7
9
11
13
15
17
19
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もちろん無限リストだって作れる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hawk &#39;[1,3..]&#39; | head -n 10
1
3
5
7
9
11
13
15
17
19
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;~/.hawk/prelude.hs&lt;/code&gt; をいじれば、他のモジュールもインポートできる。&lt;/p&gt;

&lt;p&gt;Data.Ix でも追加して遊んでみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;{-# LANGUAGE ExtendedDefaultRules, OverloadedStrings #-}
import Prelude
import qualified Data.ByteString.Lazy.Char8 as B
import qualified Data.List as L
import Data.Ix
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ hawk &#39;range ((0,0,0),(2,2,2))&#39; | head -n 20
0 0 0
0 0 1
0 0 2
0 1 0
0 1 1
0 1 2
0 2 0
0 2 1
0 2 2
1 0 0
1 0 1
1 0 2
1 1 0
1 1 1
1 1 2
1 2 0
1 2 1
1 2 2
2 0 0
2 0 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ひっくくりかえして&lt;/code&gt;、 &lt;code&gt;3つとる&lt;/code&gt;とかを愚直にかくと、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ seq 10 | hawk -a &#39;take 3 . reverse&#39;
10
9
8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でやりたい順番と逆転してしまうので、 &lt;code&gt;~/.hawk/prelude.hs&lt;/code&gt; に &lt;code&gt;import Control.Arrow&lt;/code&gt; 追加しときました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ seq 10 | hawk -a &#39;reverse &amp;gt;&amp;gt;&amp;gt; take 3&#39;
10
9
8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なんとなく楽しい。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Route 53 の特定の Hosted Zone を IAM ユーザで設定できるようにしてみた</title>
          <link>https://blog.eiel.info/blog/2014/02/14/route53-iam/</link>
          <pubDate>Fri, 14 Feb 2014 15:55:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/02/14/route53-iam/</guid>
          <description>

&lt;p&gt;AWSの無料枠のうちにいろいろ遊ぼうと思っていたのに半年ぐらいなにもできてないユーザがこちらになります。こんにちは。&lt;/p&gt;

&lt;p&gt;そんなわけでAWS入門者です。がんばります。&lt;/p&gt;

&lt;p&gt;AWSへの入門するなら &lt;a href=&#34;http://aws.amazon.com/jp/route53/&#34;&gt;Route 53&lt;/a&gt; や &lt;a href=&#34;http://aws.amazon.com/jp/s3/&#34;&gt;S3&lt;/a&gt; あたりが良いと思います。EC2 とか SNS とかなかなかハードル高いです。あれ、そういえば9月ぐらいに試してる形跡が…。&lt;/p&gt;

&lt;p&gt;先日、eiel.info の管理を Route 53 に移してみたら、気持ち表示が速くなった気がします。たぶん、気のせいです。&lt;/p&gt;

&lt;p&gt;他にも代わりに管理してる zone があったので、移行してみました。
いままでレコードを追加するのは私がしてたのですが、「本人にも自由に編集できるといいなぁ」と試してみたらできました。&lt;a href=&#34;http://aws.amazon.com/jp/iam/&#34;&gt;IAM&lt;/a&gt; を使いました。まー、お金を払うのは自分ですが。+0.5$ 程度なので大したことではないです。&lt;/p&gt;

&lt;p&gt;管理コンソールで操作してもらうことを前提にした場合のやることは、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;管理する Hosted Zone を作成する(Route 53)&lt;/li&gt;
&lt;li&gt;操作者のためのユーザを作成する(IAM)&lt;/li&gt;
&lt;li&gt;ユーザに作成した Hosted Zone への編集をできるようにする。(IAM ポリシー設定)&lt;/li&gt;
&lt;li&gt;ログインページとログイン情報を伝える&lt;/li&gt;
&lt;li&gt;パスワードを変更して貰う&lt;/li&gt;
&lt;li&gt;編集ページのURLを伝える&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といった感じのようです。&lt;/p&gt;

&lt;h3 id=&#34;管理する-hosted-zone-を作成する-route-53:1b93694b147a36d0eb8075b5aafa2550&#34;&gt;管理する Hosted Zone を作成する(Route 53)&lt;/h3&gt;

&lt;p&gt;管理する Hosted Zone がないとはじまらないので、作成します。
Route 53 の管理コンソールで行えます。&lt;/p&gt;

&lt;p&gt;脱線しますが、Bind の zone ファイルからそのままインポートできるようになっていて、移行はとても簡単でした。&lt;/p&gt;

&lt;p&gt;作成した Zone  &lt;strong&gt;&lt;code&gt;Hosted Zone ID&lt;/code&gt;&lt;/strong&gt; を控えておきましょう。後で使います。&lt;/p&gt;

&lt;h3 id=&#34;操作者のためのユーザを作成する-iam:1b93694b147a36d0eb8075b5aafa2550&#34;&gt;操作者のためのユーザを作成する(IAM)&lt;/h3&gt;

&lt;p&gt;ログインしてもらうためのユーザが必要です。
IAMで作りましょう。&lt;/p&gt;

&lt;p&gt;管理コンソールへのログインはパスワードが必要になります。
デフォルトでは設定されてないので、パスワードを設定したいユーザを選択して、Security Credentials で Password の設定をしましょう。&lt;/p&gt;

&lt;p&gt;パスワードはあとで使用者に変更してもらえばよいです。
忘れたら作りなしましょう。&lt;/p&gt;

&lt;h3 id=&#34;ユーザに作成した-hosted-zone-への編集をできるようにする:1b93694b147a36d0eb8075b5aafa2550&#34;&gt;ユーザに作成した Hosted Zone への編集をできるようにする。&lt;/h3&gt;

&lt;p&gt;作成したユーザは基本的には何もできない状態です。
特定の zone だけ編集できるようにしてみます。&lt;/p&gt;

&lt;p&gt;zone の編集をする行動を許可する作業をします。&lt;/p&gt;

&lt;p&gt;IAM でユーザを選択して &lt;code&gt;permission&lt;/code&gt; &amp;gt; &lt;code&gt;Attach User Policy&lt;/code&gt; で設定できます。
JSONで指定できるのですが、ジェネレータがあるとでポチポチすれば作成できます。&lt;/p&gt;

&lt;p&gt;Policy Generator を選択して Select をするとフォームがでてきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Effect - Allow&lt;/li&gt;
&lt;li&gt;AWS Service - Route 53&lt;/li&gt;
&lt;li&gt;Actions - All Actions&lt;/li&gt;
&lt;li&gt;Amazon Resource Name (ARN) - 後述&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;と指定しました。&lt;/p&gt;

&lt;p&gt;ARN には Hosted Zone Id を使用して&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;arn:aws:route53:::hostedzone/[Hosted Zone ID]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;となります。&lt;/p&gt;

&lt;p&gt;このへんの情報は &lt;a href=&#34;http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/UsingWithIAM.html&#34;&gt;Using IAM to Control Access to Amazon Route 53 Resources - Amazon Route 53&lt;/a&gt; に記載されてます。Policy のサンプル JSON なんかものっています。&lt;/p&gt;

&lt;h3 id=&#34;ログインページとログイン情報を伝える:1b93694b147a36d0eb8075b5aafa2550&#34;&gt;ログインページとログイン情報を伝える&lt;/h3&gt;

&lt;p&gt;準備ができたら相手にユーザ情報を伝えましょう。
ログインするための URL を伝える必要もあります。&lt;/p&gt;

&lt;p&gt;ログインするための URL は IAM の Dashboard に IAM User sign-in URL が記載されてます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https://[Account ID].signin.aws.amazon.com/console&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;少々長く覚えにくいAccount ID が使用されています。
Alias を作成すると短いものを利用できます。&lt;/p&gt;

&lt;h3 id=&#34;パスワードを変更して貰う:1b93694b147a36d0eb8075b5aafa2550&#34;&gt;パスワードを変更して貰う&lt;/h3&gt;

&lt;p&gt;ログインしてもらったらパスワードを変えてもらいましょう。
暗号化された通信路を使用したのであれば気にしなくていいかもしれません。&lt;/p&gt;

&lt;h3 id=&#34;編集ページのurlを伝える:1b93694b147a36d0eb8075b5aafa2550&#34;&gt;編集ページのURLを伝える&lt;/h3&gt;

&lt;p&gt;早速、ログインして Route 53 のページにいっても何も表示されません。
&lt;strong&gt;Hosted Zone の一覧を取得する権限がないからです。&lt;/strong&gt;
直接アクセスすれば表示できるので気にしなくてもいいでしょう。&lt;/p&gt;

&lt;p&gt;Hosted Zone ID を使用して&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https://console.aws.amazon.com/route53/home#resource-record-sets:[Hosted Zone ID]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;にアクセスすれば編集できました。&lt;/p&gt;

&lt;h3 id=&#34;その他雑多なこと:1b93694b147a36d0eb8075b5aafa2550&#34;&gt;その他雑多なこと&lt;/h3&gt;

&lt;p&gt;Hosted Zone の一覧が表示されて構わないのであれば、 ListHostedZones Action に Resource &lt;code&gt;*&lt;/code&gt; でポリシーを追加してやれば表示できます。&lt;/p&gt;

&lt;p&gt;ListHostedZones には個別のリソースを許可することで表示内容を制限する機能はないようです。&lt;/p&gt;

&lt;p&gt;Zoneの設定するのに便利そうな &lt;a href=&#34;https://bitbucket.org/winebarrel/roadworker&#34;&gt;Roadworker&lt;/a&gt; などなど使う場合も設定しなきゃいけないんだろうか?
パッと見た感じでは Hosted Zone ID を指定する部分がないので入るのでしょうか。&lt;/p&gt;

&lt;p&gt;必要な部分だけ編集権限を他人に委譲できるので IAM の使いどころはそこそこありそうですね。
AWS はAPI経由の操作が前提設計な感じになってて最終的には自動化もさせやすくて楽しいですね。&lt;/p&gt;

&lt;p&gt;次は &lt;a href=&#34;http://aws.amazon.com/jp/sqs/&#34;&gt;SQS&lt;/a&gt; を試してみようかと思っていたりします。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>iOS でmtimeを設定する</title>
          <link>https://blog.eiel.info/blog/2014/02/10/set-mtime-in-ios/</link>
          <pubDate>Mon, 10 Feb 2014 19:05:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/02/10/set-mtime-in-ios/</guid>
          <description>

&lt;p&gt;iOS で ファイルの mtime を設定したい事態が発生した。
utimes(2) を利用してもよいのだけど、なるべく Cocoa の領域でコードは書いておきたい。&lt;/p&gt;

&lt;p&gt;書き込む前に取得。取得したいファイルパスはわかっているとします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSString* path = @&amp;quot;hoge.txt&amp;quot;;
NSFileManager* filemngr = [NSFileManager defaultManager];

NSDictionary* attributes = [filemngr attributesOfItemAtPath:path error:nil];

if (attributes) {
    NSDate *date = [attributes fileModificationDate]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;NSFileManager-attributesOfItemAtPath:error&lt;/code&gt; で 辞書型でファイルの情報を取得できます。
&lt;code&gt;NSDictionary-fileModificationDate&lt;/code&gt; は NSFileManager.h で拡張されたメソッドです。これを使えば取得できます。&lt;/p&gt;

&lt;p&gt;書き込みする際は拡張メソッドはないですが、取得した辞書型に値を設定してに書き込みすればできました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSString* path = @&amp;quot;hoge.txt&amp;quot;;
NSFileManager* filemngr = [NSFileManager defaultManager];

NSDictionary* attributes = [filemngr attributesOfItemAtPath:path error:nil];

if (attributes) {
    NSMutableDictionary* mattributes = [NSMutableDictionary dictionaryWithDictionary:attributes];
    NSDate *date = [NSDate new];
    [mattributes setObject:mtime forKey:NSFileModificationDate];
    [fileManager setAttributes:mattributes ofItemAtPath:path error:nil];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;NSFileManager-setAttributes:mattributes ofItemAtPath:error:&lt;/code&gt; に作成した attributes を使うだけでした。&lt;/p&gt;

&lt;h3 id=&#34;参考文献:2f7246ea5a7975a206bc40763904b381&#34;&gt;参考文献&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/13854993/get-document-directory-files-date-modified-time-in-iphone&#34;&gt;ios - Get document directory files date modified time in iphone - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>そういえば彼氏募集というネタリポジトリがありましたね。真似するならこんな感じかなぁ。</title>
          <link>https://blog.eiel.info/blog/2014/02/08/i-need-a-girlfriend/</link>
          <pubDate>Sat, 08 Feb 2014 17:19:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/02/08/i-need-a-girlfriend/</guid>
          <description>

&lt;p&gt;最近、C++界や、ひろし魔界で暴れているらしい&lt;a href=&#34;https://twitter.com/PG_nonen&#34;&gt;まさかず氏&lt;/a&gt;が&lt;a href=&#34;https://github.com/norinori2222/boyfriend_require&#34;&gt;彼氏募集のリポジトリ&lt;/a&gt;を真似して&lt;a href=&#34;https://github.com/minamiyama1994/girlfriend_require&#34;&gt;彼女募集のリポジトリ&lt;/a&gt;を作成してました。&lt;/p&gt;

&lt;p&gt;条件さえ揃えば真似してもよかったのですが、条件が揃ってなかったので真似してませんでした。
気がついたら条件が揃ってたので真似してみることにしてみました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eiel/need_a_girlfriend&#34;&gt;﻿eiel/need_a_girlfriend - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;やったこと&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fork したけど 空のブランチつくって、fork元とはコード的には関係をなくした&lt;/li&gt;
&lt;li&gt;Haskell で DSL したかった。結局、Writer モナドの上に構築した。&lt;/li&gt;
&lt;li&gt;source ブランチを push すると travis で &lt;code&gt;README.md&lt;/code&gt; を生成して master ブランチに自動で push する&lt;/li&gt;
&lt;li&gt;リポジトリの名前を変更した&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;fork-したけど-空のブランチつくって-fork元とはコード的には関係をなくした:a0a1f37e986eb43a89ced5b8b8d20f10&#34;&gt;fork したけど 空のブランチつくって、fork元とはコード的には関係をなくした&lt;/h3&gt;

&lt;p&gt;fork したので、その上から上書きしてもよかったのですが、だいぶ違うし、ゼロからつくりたいけど fork したことは残したいよね。&lt;/p&gt;

&lt;p&gt;ということで空のブランチをつくってから作りました。
&lt;code&gt;git checkout --orphan &amp;lt;branch名&amp;gt;&lt;/code&gt; で空のブランチが作れます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/2014-02-08-network.png&#34; alt=&#34;ネットワーク&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;haskell-で-dsl-したかった:a0a1f37e986eb43a89ced5b8b8d20f10&#34;&gt;Haskell で DSL したかった。&lt;/h3&gt;

&lt;p&gt;README.md は手書きせずにプログラムから生成するようにしてみました。
&lt;a href=&#34;https://twitter.com/PG_nonen&#34;&gt;まさかず氏&lt;/a&gt;を真似ただけである。&lt;/p&gt;

&lt;p&gt;Haskell で DSL 作るのにはどうしたらいいんだろうなぁ。たぶんモナド作ればいいんだろうと、コード書きはじめたけど、途中でよくわからなくなった。
それはそれで別に勉強すればいいやということから途中から Writer モナドでつくりました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;background = do
  h1 &#39;背景&#39;
  p &#39;ほげほげごろごろ&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;みたいに書きたかった。というか、このように書いてから h1 や p 関数を実装しました。&lt;/p&gt;

&lt;p&gt;Writer モナド は tell 関数を呼びだしておくと、 runWriter した時に最終結果と tell した内容が引き出せるようです。&lt;/p&gt;

&lt;p&gt;上記の例だと以下のような値が返るように作ってます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;((),[&amp;quot;# &amp;quot;,&amp;quot;背景&amp;quot;,&amp;quot;\n&amp;quot;,&amp;quot;\n&amp;quot;,&amp;quot;ほげほげごろごろ&amp;quot;,&amp;quot;\n&amp;quot;,&amp;quot;\n&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとはリストの内容を標準出力に書きだしました。
リストを後ろにくっつけていくからパフォーマンスがなんか気になるけどどうなんだろう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/need_a_girlfriend/blob/master/need_a_girlfriend.hs&#34;&gt;あとはコードでも見てください。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Writer モナド書き換える際、main関数は &lt;a href=&#34;https://github.com/eiel/need_a_girlfriend/blob/master/need_a_girlfriend.hs#L3&#34;&gt;&lt;code&gt;runWriter&lt;/code&gt;&lt;/a&gt; の部分をちょっと書き換えたかなーぐらいなものでモナドの使いやすさを感じたような気がします。&lt;/p&gt;

&lt;h3 id=&#34;source-ブランチを-push-すると-travis-で-reame-md-を生成して-master-ブランチに自動で-push-する:a0a1f37e986eb43a89ced5b8b8d20f10&#34;&gt;source ブランチを push すると travis で &lt;code&gt;REAME.md&lt;/code&gt; を生成して master ブランチに自動で push する&lt;/h3&gt;

&lt;p&gt;基本的には&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tricknotes.hateblo.jp/entry/2013/06/17/020229&#34;&gt;Middleman で作った web サイトを Travis + GitHub pages でお手軽に運用する - tricknotesのぼうけんのしょ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を参考にしました。他の方法も試したけどなかなか手強いので結局この方法にしました。&lt;/p&gt;

&lt;p&gt;手順的には travis 上でリポジトリを選択して、処理を &lt;code&gt;.travis.yml&lt;/code&gt;を記述します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.travis.yml&lt;/code&gt; に書いた処理の最後で push しますが、 &lt;code&gt;-q&lt;/code&gt; やら &lt;code&gt;2&amp;gt;/dev/null&lt;/code&gt; がついてるせいでなんで失敗してるのか気づきにくいのがちょっと難点でした。
つけないと TORKEN が漏れてしまう。&lt;/p&gt;

&lt;p&gt;参考程度に書いた yaml を貼っておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;language: haskell
install: cabal install mtl
script: ghc need_a_girlfriend.hs
after_success:
  - git remote add deploy https://$GH_TOKEN@github.com/eiel/need_a_girlfriend.git
  - git fetch deploy master
  - git checkout master
  - git merge source --no-edit
  - ./need_a_girlfriend &amp;gt; README.md
  - git add README.md
  - &#39;git commit -m &amp;quot;Generate Travis JOB $TRAVIS_JOB_NUMBER

https://travis-ci.org/eiel/need_a_girlfriend/builds/$TRAVIS_BUILD_ID&amp;quot;&#39;
  - &#39;[ &amp;quot;x$TRAVIS_BRANCH&amp;quot; == &amp;quot;xsource&amp;quot; ] &amp;amp;&amp;amp; git push -q deploy master 2&amp;gt;/dev/null&#39;
branches:
  except:
    - master
env:
  global:
    - secure: &amp;quot;KJG63ZK8zdEboimt/+UOVDUu+cECmvSgsCyEUEQVjMnazxpEaNQbP+lEQv9TWki6eRtr71+vt3LU7H4H8Wm/jURV2WiYe31ZeE7wvRcjjaHRWHYfeTJ5OyBJhCJoauKBAwL/jIFSTDt3IEgGIW42WPwagGexHKm+Vh/0ETK1CNc=&amp;quot;
    - GIT_COMMITTER_NAME=&amp;quot;name&amp;quot;
    - GIT_COMMITTER_EMAIL=&amp;quot;email@example.com&amp;quot;
    - GIT_AUTHOR_NAME=&amp;quot;name&amp;quot;
    - GIT_AUTHOR_EMAIL=&amp;quot;email@example.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;after_success が script の実行に成功した場合に実行されます。&lt;/p&gt;

&lt;p&gt;source ブランチの時にしか push しないような処理をいれてあります。
master ブランチの際は after_success がそもそも走らないようにしています。&lt;/p&gt;

&lt;p&gt;コミットメッセージを作るのに環境変数から情報を得ています。
どんな環境変数があるかは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.travis-ci.com/user/ci-environment/&#34;&gt;Travis CI: The Build Environment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;に書いてあります。
環境変数は travis の画面上では展開しない仕様になってるみたいです。&lt;/p&gt;

&lt;p&gt;その他の参考文献&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.travis-ci.com/user/languages/haskell/&#34;&gt;Travis CI: Building a Haskell Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.travis-ci.com/user/deployment/custom/&#34;&gt;Travis CI: Custom Deployment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;リポジトリの名前を変更した:a0a1f37e986eb43a89ced5b8b8d20f10&#34;&gt;リポジトリの名前を変更した&lt;/h3&gt;

&lt;p&gt;「require ってなんか違う気がするんだよなー」って感覚がしたので調べたら一般的には I need a boyfriend とか I need a girlfriend と書いてる例があったので、リポジトリ名は need_a_girlfriend にしました。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;eiel / need_a_girlfriend&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;となるので、なんか文法的にも良さげな気がします。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:a0a1f37e986eb43a89ced5b8b8d20f10&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;しかし、元のリポジトリの条件の多さにはびっくりする。
お互い悪いところは相性みながらちょっとづつ調整できないものなのでしょうか。
これだけは譲れないものはひとつかふたくぐらいあれば充分じゃないんでしょうか。
私にはよくわからないですけど。&lt;/p&gt;

&lt;p&gt;日々、成長するのを放棄した人間にはなりたくないかなぁ。&lt;/p&gt;

&lt;p&gt;そんなことはともかく&lt;a href=&#34;https://twitter.com/PG_nonen&#34;&gt;まさかず氏&lt;/a&gt;はすごくがんばっていると思うので素敵な彼女ができるように応援したいですね。&lt;/p&gt;

&lt;p&gt;ではでは。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>本当に障がい者でもオープンセミナー広島の実行委員長ができるのか？ - 答え: できた。</title>
          <link>https://blog.eiel.info/blog/2014/02/07/osh-2014/</link>
          <pubDate>Fri, 07 Feb 2014 01:56:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/02/07/osh-2014/</guid>
          <description>

&lt;p&gt;本記事のタイトルは&lt;a href=&#34;http://d.hatena.ne.jp/nisyu/&#34;&gt;尊敬できる人生の先輩のブログ名&lt;/a&gt;からインスパイアされました。&lt;/p&gt;

&lt;p&gt;どうしてこういうタイトルの記事を書こうかと思ったかというと、
オープンセミナー終わったし、「次の目標は？」とか「次のステップは？」と、問われた時に出た答えが&lt;/p&gt;

&lt;p&gt;「&lt;strong&gt;いままでやってきたことをいままでどおりやりつつも、少しだけ特殊な状況下にある自分を生かせることをしていきたいなぁ&lt;/strong&gt;」&lt;/p&gt;

&lt;p&gt;だっただけです。&lt;/p&gt;

&lt;p&gt;このタイトルを見て、&lt;strong&gt;「だから、どうした」&lt;/strong&gt;という感想を抱くのが普通であって欲しくて、
もし「裏切られた」という気分になった方がいたら、本当にごめんなさい。いないとは思っている。
これからはそういう風に扱えという話でもない。&lt;/p&gt;

&lt;p&gt;仕切り直します。&lt;/p&gt;

&lt;p&gt;「ブログ書くまでが勉強会らしい」ので、私自身の&lt;a href=&#34;http://osh-2014.github.io/&#34;&gt;オープンセミナー2014@広島&lt;/a&gt;に対する振り返り記事です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;懇親会でLTしました&lt;/li&gt;
&lt;li&gt;オープンセミナー2014@広島の目標と達成具合&lt;/li&gt;
&lt;li&gt;これからの目標とかまとめとか&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という構成です。&lt;/p&gt;

&lt;h3 id=&#34;懇親会でltしました:e2db7f27f16e78a93709829f0f8a4268&#34;&gt;懇親会でLTしました&lt;/h3&gt;

&lt;p&gt;「オープンセミナー2014@広島の実行委員長になったので…完全版」というタイトルでLTしました。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;d04a296071f801316b633e3e0c4ab66b&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;基本的には&lt;a href=&#34;http://bonenkaigi.doorkeeper.jp/events/5889&#34;&gt;忘年会議2013&lt;/a&gt;の際につかったスライドを修正しているだけです。&lt;/p&gt;

&lt;p&gt;変更点は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;前半の告知を削除して、オープンセミナーをやる上でやりたかったことを追加&lt;/li&gt;
&lt;li&gt;ブログなどのPV情報を 2013年1月1日 から 2013年12月31日 までのデータへ修正&lt;/li&gt;
&lt;li&gt;事前アンケートに差し込んだネタについての話を加筆&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;です。&lt;/p&gt;

&lt;p&gt;何をやるにもマネタイズを考えないと続かないという人もいらっしゃいますが、お客さんがいないと、どうしようもありません。
「広島でセミナーをやることが有用である」というのを示す必要があると思います。
実際に、「広島では人が集まらないから」という理由でいろんなイベントが広島を素通りされているという話を何度か耳にしています。
そういう意味では無料のセミナーを盛り上げるで、「広島は素通りできない」という状態に戻せるはずです。わからんけど。&lt;/p&gt;

&lt;p&gt;そういったことを考えながら普段はイベントをしているのですが、
それに加えてオープンセミナーをやる上で、運営のボランティアスタッフにメリットが出るようになったり、実行委員長をやることにメリットがあったり、企業とコミュニティの繋りがより良いものになったりするには、どういったことができればいいのかと考えて、その中で自分でできることをやってみました。&lt;/p&gt;

&lt;p&gt;あと、人を集めるには告知をしないといけないのだけど、現状ではもともと届いていた範囲にしか声が届かないのは他のイベントを手伝う上で感じていました。
だから、今まで自分が行かなかったところに顔を出したり、情報発信する際に意識するようにした2013年でした。
あと、オープンセミナーが終わったからといってやめるつもりはなく、同じようにやっていけたら良いと思っています。&lt;/p&gt;

&lt;p&gt;あとは完全版にするためにネタを削ってしまったので、事前アンケートは完全に趣味で作った質問があって、そこの紹介もしました。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Emacsは環境だと認識されていて、Vimはエディタだと認識されてる傾向がある&lt;/strong&gt;ことがわかったことが成果です。(根拠不充分)&lt;/p&gt;

&lt;h3 id=&#34;オープンセミナー2014-広島の目標と達成具合:e2db7f27f16e78a93709829f0f8a4268&#34;&gt;オープンセミナー2014@広島の目標と達成具合&lt;/h3&gt;

&lt;p&gt;オープンセミナーをやる上で立てた目標は表向きには、「参加者90名」です。&lt;/p&gt;

&lt;p&gt;事前参加希望者100名、参加者93名という結果になり、目標達成できました。
「本当に達成できるとは思わなかった」という声もあったり、スタッフや講師の協力のおかげであることは言うまでもないです。
ありがとうございます。&lt;/p&gt;

&lt;p&gt;話が逸れますが、こんなにたくさん「ありがとうございます」って言った日は他にないんじゃないかな、と思います。
「結婚式をした人もそんな感じなんだろうか？」とぼんやり思いました。&lt;/p&gt;

&lt;p&gt;話を戻します。&lt;/p&gt;

&lt;p&gt;スタッフ内で共有してた目標としては&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;懇親会は面白いLTするところ、という空気を作る&lt;/li&gt;
&lt;li&gt;企業に協賛をお願いする&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;のふたつがありました。&lt;/p&gt;

&lt;p&gt;懇親会は期待以上に盛り上がったと思います。
ドリンクの注文や配るのをみんなに手伝ってもらったり、ちょっと狭かったり、私がドリンクをこぼしたり(ごめんなさい、ごめんなさい)がありましたが、来年もこんな感じになればいいと思います。
LTもみんなにしてもらえるかどうかわからなかったので、私も立候補していましたが、しなくてよかった気がしますね。(逃げたいだけ)&lt;/p&gt;

&lt;p&gt;協賛に関しては、できているように見えますが、本当はスタッフとなんの関係もないところから協賛をひとつでも取りたかったです。ちょっとだけ達成できませんでした。
個人協賛枠も用意していましたが、最低限の赤字は防げることがわかったので、お断りしました。&lt;/p&gt;

&lt;p&gt;「エンジニアにメリットがあるイベントだからエンジニアが協賛をする」だと、限界があるような気がしていて、輪の外に見えている人たちに協賛してもらって、輪の外にいる人にお返しをする意識を持ちたかったのです。
参加できないから個人協賛したいとかであれば、今思えばありだったかと思います。
今は時間に余裕があったりして、コミュニティに参加して、盛り上げたりできている人もいますが、そうでなくなる人も必ず出てきます。
そのためにも、参加しなくてもできるコミュニティへの貢献方法も探していきたいですね。
自分がそうできるようにしておくためにも、探しておきたい。&lt;/p&gt;

&lt;p&gt;でも、協賛の最終形は地元企業からの協賛だと思っていて、コミュニティに協賛することへのメリットをそれぞれが見つけて欲しい、とも考えています。
「人事の点でメリットがある」とか、「情報拡散に効果がある」とか。
その程度しか思いつかないけど、それってこっちから提案するのはちょっと変な気がしていて、アイディアだしするのはできますが、企業側に受け身になられるのは少し嫌だなぁ。&lt;/p&gt;

&lt;p&gt;話は変わり、セミナーの内容ですが、全体の統制は全然調整できていなかったのですが、講師のみなさんがその場で臨機応変に対応していただいたみたいで、思ってた以上に綺麗にまとまってしまってビビってしまったのは秘密です。
みなさんすごい。&lt;/p&gt;

&lt;p&gt;あとかなりわがままいって司会業をしつつ受付サポートもしてました。
前日に「受付したい」っていったら。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://twitter.com/Toro_kun&#34;&gt;@Toro_kun&lt;/a&gt; 司会メインで受け付けサポで。&lt;/p&gt;&amp;mdash; えいる (@eielh) &lt;a href=&#34;https://twitter.com/eielh/statuses/429292638978572288&#34;&gt;2014, 1月 31&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;だって、参加者の名前と顔を一致させたいじゃん。個々に挨拶したいじゃん。というか、司会はやりたくない。(結局してたけど)&lt;/p&gt;

&lt;p&gt;そんなわけでトータルでみて、だいたい目標が達成できてよかったです。&lt;/p&gt;

&lt;p&gt;参加してくれたみんな、拡散してくれたみんな、講師のみなさん、スタッフのみなさん、ありがとうございます。&lt;/p&gt;

&lt;p&gt;やったぜ!&lt;/p&gt;

&lt;h3 id=&#34;これからの目標とかまとめとか:e2db7f27f16e78a93709829f0f8a4268&#34;&gt;これからの目標とかまとめとか&lt;/h3&gt;

&lt;p&gt;「ブログを書くまでが勉強会」ってのはどうなん？という話を Facebook でしたことがあったので、これを避けて「学んだことを何かに役立てるまでが勉強会」と言ってみたのだけど全然流行ってない。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p&gt;クロージング「何かに役立てるまでが勉強会」 &lt;a href=&#34;https://twitter.com/search?q=%23osh2014&amp;amp;src=hash&#34;&gt;#osh2014&lt;/a&gt;&lt;/p&gt;&amp;mdash; にしもつ (@24motz) &lt;a href=&#34;https://twitter.com/24motz/statuses/429533296322568192&#34;&gt;2014, 2月 1&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;冒頭から話が逸れた。&lt;/p&gt;

&lt;p&gt;これからも自分にできそうなこととか、思いついたことはどんどんやっていきたいと思います。&lt;/p&gt;

&lt;p&gt;まずは、3月からは第1土曜日は広島Ruby勉強会でやっていた「最近勉強したことを5分から20分ぐらいにまとめて発表する勉強会」をRubyというテーマを無くしてやってみたいと思います。
すでにRubyに関係ないことを喋っている人がいますが、(主に私)タイトルにRubyがついているが故に「Rubyやってないから」という意見がちらほらあるからそうすることにしました。
名前が決まらなくて募集ページがまだできてません。
しばしお待ちください。&lt;/p&gt;

&lt;p&gt;そんなわけで &lt;a href=&#34;http://hiroshimarb.github.io/&#34;&gt;Hiroshima.rb&lt;/a&gt; として活動がなくなってしまうので、Hiroshima.rbの活動は第3木曜日に引っ越しをして、 &lt;a href=&#34;http://www.circleaf.com/groups/15&#34;&gt;Okayama.rb&lt;/a&gt; とか &lt;a href=&#34;http://fukuokarb.github.io&#34;&gt;Fukuoka.rb&lt;/a&gt; にひっそり絡んでいこうという戦略になったそうです。
第一木曜日もやろうか悩んでるらしいです。
この辺は参加者次第だと思います。&lt;/p&gt;

&lt;h3 id=&#34;蛇足:e2db7f27f16e78a93709829f0f8a4268&#34;&gt;蛇足&lt;/h3&gt;

&lt;p&gt;多くは本記事で語るつもりはないのでさらっと。&lt;/p&gt;

&lt;p&gt;2009年の7月に心臓の病気が健康診断で見つかって、それから身体障害者手帳を所持しています。等級は3級です。
ざっくり言いかえると、普通の人より体力が&lt;strong&gt;ちょっと少ない&lt;/strong&gt;だけです。&lt;/p&gt;

&lt;p&gt;「ちょっと」ってどれくらいやねん。&lt;/p&gt;

&lt;p&gt;だから、働く時間を少なくしつつも他の人と同じくらいの収入を得るにはどうしたら良いか模索しています。
収入というのは「自分の行動によって動かせる人の数と相関がある」という話をどこかでみたことがあります。
そこで考えているのは、自分にとってのチームをなるべく広く考えて、チーム全体の生産性を上げることを考えることで、生活ができるようになるのではないかと考えてみたりしています。&lt;/p&gt;

&lt;p&gt;一日4時間働いて自立した生活できるだけの収入を得つつ、いろんなことができるのが理想的です。
一日8時間働いていたら、たぶんそれだけで、いっぱいいっぱいになってしまう。
いまの状態でやってみないと、わからんけど。&lt;/p&gt;

&lt;p&gt;現在はフリーランスのような無職ですが、それなりに仕事がある状態なので、この仕事が片づいたら週40時間働くサラリーマンももう一度試してみたかったりもします。(アンド ひとりぐらし)&lt;/p&gt;

&lt;p&gt;それとは別に、せっかく他の人にはあまりない難病持ちという特殊な状況下なので、このあたりを生かした活動したりや考え方を発信できたららいいなぁ。という決意表明を込めて、こんなタイトルの記事にしてみました。
公言することで、どうしてこのように考えるか説明しやすくなるのも目的のひとつではあります。&lt;/p&gt;

&lt;p&gt;難病と書いたけど、障害者手帳が交付されない難病の人たちもたくさんいるし、難病でも普通に企業で働いてる人もたくさんいます。(それ以前に30年ぐらい生きてたら誰でも持病のひとつやふたつ、みんなもってるのもわかってるつもりだし、それと比べると程度はどうなんだ。たいしたことじゃないんじゃないか？とも思っている)&lt;/p&gt;

&lt;p&gt;状況は人それぞれでどうなのかわかりませんが、コンピュータを使う方法を考えるという仕事は、何千人、何万人の仕事を楽にする可能性を秘めています。
体力のない人が仕事をするというのは短期的な生産性を見ると他の人より体力がない分落ちると言えますが、全体の生産性を考えると些細な問題ですね。
普通の人でもデスマ案件に投入されてありえない低賃金で働いていることがあります。
こういうのは根本的なところで何かを間違えているのではないかと思ったりするのですが、その中に体力がない人が紛れても不公平のないような職場環境を考える人が増えると、普通の人もありえない就業時間から開放されて「デスマも減るのかなぁ」となんとなくどこかで雑談をしたことを思い出しました。&lt;/p&gt;

&lt;p&gt;そんな感じで「これからは世の中を良くなっていく&lt;strong&gt;黄金の回転&lt;/strong&gt;を回す活動を考えながら活動できたら良いなぁ」と思います。&lt;/p&gt;

&lt;p&gt;あと悪循環を堰き止めて、良い循環に変えれるように仕事したいなぁ。&lt;/p&gt;

&lt;p&gt;Be Agile.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Rubyのオプション変数というグローバル変数</title>
          <link>https://blog.eiel.info/blog/2014/02/03/global-variable-with-option/</link>
          <pubDate>Mon, 03 Feb 2014 12:36:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/02/03/global-variable-with-option/</guid>
          <description>

&lt;p&gt;Rails のソースコードを読んでいたら&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;before = $-w
$-w = false
require &#39;action_dispatch/journey/parser&#39;
$-w = before
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/rails/rails/blob/v4.0.2/actionpack/lib/action_dispatch/journey/router.rb#L6-L9&#34;&gt;https://github.com/rails/rails/blob/v4.0.2/actionpack/lib/action_dispatch/journey/router.rb#L6-L9&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;というのがあって &lt;code&gt;$-w&lt;/code&gt; なんだろうと思って調べたら &lt;a href=&#34;http://docs.ruby-lang.org/ja/2.1.0/doc/spec=2fvariables.html#global&#34;&gt;オプション変数&lt;/a&gt;というグローバル変数があるそうな。&lt;/p&gt;

&lt;p&gt;どうやら -w が指定されているかどうかの判断に利用できる模様。&lt;/p&gt;

&lt;p&gt;つまり、このコードは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-w&lt;/code&gt; がついていたかどうかを保存しておいて&lt;/li&gt;
&lt;li&gt;requireをして&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-w&lt;/code&gt; をもとの状態にもどす&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ということをしているようです。&lt;/p&gt;

&lt;p&gt;-w は verbose レベルを設定する機能ですが、 ActiveSupportに一時的に変更する機能があったような気がしつつも、調べてない。&lt;/p&gt;

&lt;h3 id=&#34;もう少し詳しく:2f573207d4975a288ff84f7dec40d19e&#34;&gt;もう少し詳しく&lt;/h3&gt;

&lt;p&gt;こういうのは実際に試すのが大事だよね。&lt;/p&gt;

&lt;p&gt;指定しない場合&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ruby -e &#39;p $-w&#39;
false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;指定する場合&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ruby -w -e &#39;p $-w&#39;
true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに &lt;code&gt;-w&lt;/code&gt; は &lt;code&gt;-W2&lt;/code&gt; と等価らしいので、これも確認してみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ruby -e &#39;p $-W&#39;
1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ ruby -w -e &#39;p $-W&#39;
2
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Jekyll 使うときは exclude: vendor しとけって話らしい。</title>
          <link>https://blog.eiel.info/blog/2014/01/22/exclude-vendor-on-jekyll/</link>
          <pubDate>Wed, 22 Jan 2014 02:28:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/01/22/exclude-vendor-on-jekyll/</guid>
          <description>&lt;p&gt;素の&lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; なんて使う人はあまりいないと思うけど一応書いておこう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/great-h/great-h.github.io/issues/586&#34;&gt;以前から jekyll build が失敗するっていう話をしてる人がいて&lt;/a&gt;自分の環境じゃ、おきてなかったんだけど、&lt;code&gt;bundle install --path vendor/bundle&lt;/code&gt; してるのが原因だったらしい。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;_config.yml に exclude: [&#39;vendor&#39;]&lt;/code&gt; するのがよいでしょう。&lt;/p&gt;

&lt;p&gt;ついでに以下のような感じにした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exclude: [&#39;Gemfile&#39;,&#39;Gemfile.lock&#39;,&#39;Rakefile&#39;,&#39;vendor&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/great-h/great-h.github.io/commit/8c99dc2d0ae37289ce65270587636f3da7447366&#34;&gt;具体的なコミットはこちら&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;素のJekyllから拡張してる場合は注意。
&lt;a href=&#34;http://middlemanapp.com/&#34;&gt;middleman&lt;/a&gt; などなどを使うことをおすすめしとこう。&lt;/p&gt;

&lt;p&gt;自分が発見したネタじゃないけど記録しておいた。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>UIImage#initWithCGImage:scale:orientation で回転させる話</title>
          <link>https://blog.eiel.info/blog/2014/01/22/uiimage-orientation/</link>
          <pubDate>Wed, 22 Jan 2014 02:11:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/01/22/uiimage-orientation/</guid>
          <description>&lt;p&gt;iOS な作業をしていた。&lt;/p&gt;

&lt;p&gt;UImage な画像をてっとり早く回転する方法として、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;image = [[UIImage alloc] initWithCGImage:image.CGImage scale:image.scale orientation:UIImageOrientationRight];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というのがある。&lt;/p&gt;

&lt;p&gt;みたいなのがあるのですが、2度回転させようとして、下記のように2度呼んで回転しないなぁ、というハマり方をした。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;image = [[UIImage alloc] initWithCGImage:image.CGImage scale:image.scale orientation:UIImageOrientationRight];
image = [[UIImage alloc] initWithCGImage:image.CGImage scale:image.scale orientation:UIImageOrientationRight];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実際に並んでいれば気づくのだけど、違う場所で呼んでる場合は注意。&lt;/p&gt;

&lt;p&gt;CIImage の使う向きを変えてCGImageは使いまわしてるだけなので、右に回転させたものを使うだけになる。「右に方向にして使う」という機能なので当たり前なのだけど。&lt;/p&gt;

&lt;p&gt;どう対処したかというと、1回目の回転はちゃんと新しい画像をつくって対処した。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;CGContextRef context = UIGraphicsGetCurrentContext();
CGContextRotateCTM(context,M_PI);
CGContextTranslateCTM(context, -image.size.width, -image.size.height);
[image.layer renderInContext:context];
image = UIGraphicsGetImageFromCurrentImageContext();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちょっと無理矢理感。
移動させてるのは、(0,0) を中心に回転するので、画像が実際にかきこまれる位置が負の領域にいってしまってるから。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>CodeClimate のカバレッジは SimpleCovの設定がしてあるところだとうまくいかない</title>
          <link>https://blog.eiel.info/blog/2014/01/20/codeclimate-coverage/</link>
          <pubDate>Mon, 20 Jan 2014 14:42:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/01/20/codeclimate-coverage/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;https://codeclimate.com&#34;&gt;CodeClimate&lt;/a&gt; で、課金して利用しているとカバレッジを取得する機能がある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://codeclimate.com/docs#test-coverage&#34;&gt;設定方法はここに書かれてる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;中身は SimpleCov らしく SimpleCov の設定より先に書いていたらうまくうごかなかった。
仕方ないので削除してみたら、うまくうごきました。&lt;/p&gt;

&lt;p&gt;SimpleCov のフォーマッタを差し替えているらしく、両方使いたい場合は、MultiFormatter を使えばよいらしい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SimpleCov.formatter = SimpleCov::Formatter::MultiFormatter[
  SimpleCov::Formatter::HTMLFormatter,
  CodeClimate::TestReporter::Formatter
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;しかし、CodeClimate ではカバー率を表示するだけっぽいのであまり使いどころがない感じでした。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>C&#43;&#43;勉強会in広島でオープンセミナー2014@広島の告知を兼ねたLTしてきた</title>
          <link>https://blog.eiel.info/blog/2014/01/11/cpp-hiroshima/</link>
          <pubDate>Sat, 11 Jan 2014 23:54:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/01/11/cpp-hiroshima/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://partake.in/events/5ddde1fe-88b7-4541-9f37-02cf4fa0284c&#34;&gt;C++勉強会in広島&lt;/a&gt;に参加してLTしてきました。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;767eb2105c40013147cb72318cd7c772&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;テスト駆動開発が&lt;a href=&#34;http://osh-2014.github.io/&#34;&gt;オープンセミナー2014@広島&lt;/a&gt;のテーマのひとつなので、C++ のテスティングフレームワークである CppUTest を試しすことで告知するという手法をとりました。&lt;/p&gt;

&lt;p&gt;C++は大学生のころ勉強していたようなそうでもないような、&lt;a href=&#34;https://www.amazon.co.jp/dp/4621066064?tag=eiel-22&amp;amp;camp=1027&amp;amp;creative=7407&amp;amp;linkCode=as4&amp;amp;creativeASIN=4621066064&amp;amp;adid=1AD3439TTKC9VEHCJTFN&amp;amp;&#34;&gt;More Effective C++ &lt;/a&gt;ぐらいは読んだかなぁ。
そういえば丸善出版で再販されるそうですね。よかったよかった。&lt;/p&gt;

&lt;p&gt;冷静に考えると C++ で書いたプログラムをビルドするのに Makefile を書いたのは、はじめてな気がしたり、clang++ をコマンドから使うのがはじめてだったり、LT をしようとすることでいろいろ勉強になるなぁ、と感じました。
勉強会があるので、そのために勉強するのも良い方法だと思います。&lt;/p&gt;

&lt;p&gt;「まとめ」が「まとめ」じゃないって言われたので、今度から「いろいろ試した結果、最終的な結論」とかにしたいと思います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/cpphiroshima-1&#34;&gt;実際に動作確認するのに使用したソースコードは GitHub に置いています。&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;src/test_runner.cpp&lt;/code&gt; がテストを実行する部分です。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;src/factorial_test.cpp&lt;/code&gt; がテストコードです。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;src/factorial.hpp&lt;/code&gt; が階乗求めるプログラムの実装部分です。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;make を実行するとビルドしてテストを実行するようにしています。&lt;/p&gt;

&lt;p&gt;そういえば test というディレクトリを最初つくっていて、 make test した時に test ディレクトリがあるせいでうまく動かなかったりしました。
一般的にはどうするんだろうか。&lt;/p&gt;

&lt;h3 id=&#34;その他の発表:e79cd93b9ba3ea90bf0a61ed0d721705&#34;&gt;その他の発表&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/PG_nonen/&#34;&gt;南山まさかず氏&lt;/a&gt; の Template Meta Programming なんかは全く知らない世界でした。
シンタックスを気にしなきゃ、純粋関数型プログラミングと見なせるようだったので、がんばれば使えそうな気がしてきております。
ちょっとぐらいサンプルコードを書いてみたいと思いますが、コンパイルエラーの解読がきっとつらいんだろうなぁ、と想像してます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/masakazuminamiyama/cin-29888053&#34;&gt;スライドはここにあるらしい&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/uchan_nos&#34;&gt;uchan_nos&lt;/a&gt;さんのC++でできる!OSの自作入門は、知ってる範囲のこともあったりそうでないところもあったりでおもしろかったです。
プログラム書いてたらOSの仕組みやらブートシーケンスはやっぱり知りたくなりますよね。&lt;/p&gt;

&lt;p&gt;「フリースタンディング環境」という言葉は初めて知ったので、いろんな言語のそのあたりの状況もちょっと気になっております。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/uchan_nos/cppos&#34;&gt;スライドはここにあるらしい&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;その他、全体の雰囲気は&lt;a href=&#34;http://togetter.com/li/614849&#34;&gt;Togetterのまとめ&lt;/a&gt;をみるほうがわかりやすいかもしれない。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ActiveRecord のスコープを書くときは proc を使えよって話</title>
          <link>https://blog.eiel.info/blog/2014/01/09/scope-proc/</link>
          <pubDate>Thu, 09 Jan 2014 16:42:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/01/09/scope-proc/</guid>
          <description>

&lt;p&gt;ActiveRecord で scope を定義する時は、普通は以下のように書きますよね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;scope :hoge, -&amp;gt; { where(name: &#39;hoge&#39; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;歴史的背景で、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;scope :hoge, where(hname: &#39;hoge&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とか、書いてることがあるかもしれません。&lt;/p&gt;

&lt;p&gt;この場合、一応、問題なく動きますが、コンテキストに応じて値が変化するようなものを利用してる場合には問題が起きることがあるので、早めに修正したほうが良いかもしれません。(というか問題が起きた)&lt;/p&gt;

&lt;p&gt;前者で書きましょう。&lt;/p&gt;

&lt;h3 id=&#34;具体例:3f3fb1fc52b69b3dc3a2283746996ad0&#34;&gt;具体例&lt;/h3&gt;

&lt;p&gt;特に日付などを利用してると問題になりやすいかもしれません。
例えば、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;scope :this_month, where(month: Date.today.month)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というのは、月を跨ぐと問題になる可能性が高いです。
常にデプロイした月の結果を返すことになります。&lt;/p&gt;

&lt;p&gt;クラスをファイルを読み込みした際に Date.today.month が評価されてしまうので、そこの値が固定されてしまいます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;scope :this_month, -&amp;gt; { where(month: Date.today.month) }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という風に書き換えておいたほうが良いです。&lt;/p&gt;

&lt;p&gt;年とか使ってると気づかない可能性高そうですね。怖い怖い。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>cmigemoがインストールできない - openlab.ring.gr.jp が死んでるっぽい</title>
          <link>https://blog.eiel.info/blog/2014/01/09/cannot-install-cmigemo/</link>
          <pubDate>Thu, 09 Jan 2014 02:12:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/01/09/cannot-install-cmigemo/</guid>
          <description>

&lt;p&gt;Twitter に書いてもあまり反応がないので、blogにでも書いとくとなんとかなるかもしれないのでかいておくことにする。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://openlab.ring.gr.jp/&#34;&gt;http://openlab.ring.gr.jp/&lt;/a&gt; が死んでるっぽくて &lt;code&gt;$ brew install cmigemo&lt;/code&gt; が失敗してしまう。
もしかして ddskk とかも一部インストールできない状態なんだろうか…。ミラーとかないんだろうか。&lt;/p&gt;

&lt;h3 id=&#34;詳細:959c100b7ffd6cb9740587ce9205a645&#34;&gt;詳細&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ brew install cmigemo
==&amp;gt; Downloading http://cmigemo.googlecode.com/files/cmigemo-default-src-20110227
Already downloaded: /Library/Caches/Homebrew/cmigemo-20110227.zip
==&amp;gt; Patching
patching file src/wordbuf.c
==&amp;gt; chmod +x ./configure
==&amp;gt; ./configure --prefix=/usr/local/Cellar/cmigemo/20110227
==&amp;gt; make osx
==&amp;gt; make osx-dict
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
curl: (56) Recv failure: Connection reset by peer
make[2]: *** [SKK-JISYO.L] Error 56
make[1]: *** [dictionary] Error 2
make: *** [osx-dict] Error 2

READ THIS: https://github.com/Homebrew/homebrew/wiki/troubleshooting

These open issues may also help:
    https://github.com/Homebrew/homebrew/pull/7005
    https://github.com/Homebrew/homebrew/pull/15343
    https://github.com/Homebrew/homebrew/issues/10898
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となる。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ brew edit cmigemo&lt;/code&gt; で formula がひらける&lt;/p&gt;

&lt;p&gt;make osx-dict に失敗してる&lt;/p&gt;

&lt;p&gt;一時ファイルどっかにないんだろうか。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ find /usr/local -name cmigemo\*
/usr/local/bin/cmigemo
/usr/local/Library/Formula/cmigemo.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;特にみつからず。もしや &lt;code&gt;/tmp/&lt;/code&gt; 以下なんだろうか…と後でおもった。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ wget http://cmigemo.googlecode.com/files/cmigemo-default-src-20110227.zip
$ zip -u cmigemo-default-src-20110227.zip
$ cd cmigemo-default-src
$ chmod +x ./configure
$ ./configure
$ make osx
$ make osx-dict
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;curl -O &lt;a href=&#34;http://openlab.ring.gr.jp/skk/dic/SKK-JISYO.L.gz&#34;&gt;http://openlab.ring.gr.jp/skk/dic/SKK-JISYO.L.gz&lt;/a&gt;
が失敗してることがわかった。&lt;/p&gt;

&lt;p&gt;この辺の上手い調べ方とか知りたい。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>pandocのインストールに失敗する</title>
          <link>https://blog.eiel.info/blog/2014/01/06/failure-install-pandoc/</link>
          <pubDate>Mon, 06 Jan 2014 15:45:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/01/06/failure-install-pandoc/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;http://jaspervdj.be/hakyll/&#34;&gt;hakyll&lt;/a&gt; のアップデートしてたら pandoc のビルドにこけた。&lt;/p&gt;

&lt;p&gt;エラーの内容は下記のとおり。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;src/Text/Pandoc/Readers/Haddock/Lex.x:149:46:
    Couldn&#39;t match type `(AlexPosn, Char, String)&#39;
                  with `(AlexPosn, t0, t1, [Char])&#39;
    Expected type: (AlexPosn, t0, t1, [Char])
      Actual type: AlexInput
    In the first argument of `go&#39;, namely inp&#39;
    In the expression: go inp&#39; sc
    In a case alternative: AlexSkip inp&#39; len -&amp;gt; go inp&#39; sc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ぐぐったら以下が出てきた&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jgm/pandoc/issues/815&#34;&gt;https://github.com/jgm/pandoc/issues/815&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;というわけで下記を実行してみた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cabal install alex
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再度 install してみたら成功した。&lt;/p&gt;

&lt;p&gt;失敗したファイルが &lt;code&gt;*.x&lt;/code&gt; なファイルだけどコンパイル前に alex で処理されるんだろうか…よくわからない。そのうち調べたい。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>オープンセミナー広島は広島のITエンジニアが集う場所</title>
          <link>https://blog.eiel.info/blog/2014/01/04/lets-take-part-in-osh/</link>
          <pubDate>Sat, 04 Jan 2014 13:24:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2014/01/04/lets-take-part-in-osh/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://osh-2014.github.io/&#34;&gt;オープンセミナー2014@広島&lt;/a&gt;の実行委員長です。こんにちは。&lt;/p&gt;

&lt;p&gt;2014年2月1日(土)に&lt;a href=&#34;http://osh-2014.github.io/&#34;&gt;オープンセミナー2014@広島&lt;/a&gt;という参加費が無料のセミナーがあります。&lt;/p&gt;

&lt;p&gt;この記事の目的を平たく言うと、公式サイトとは違うアプローチでイベントの告知をすることです。&lt;/p&gt;

&lt;p&gt;ここに書いてあることは私個人の考えで、他のスタッフがどう考えているかも別ですし、イベントの主旨とも関係ない部分もあります。&lt;/p&gt;

&lt;p&gt;そんなわけで、アジェンダです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;テーマに興味なくても参加しようぜ&lt;/li&gt;
&lt;li&gt;やっぱり企業に協賛して欲しい&lt;/li&gt;
&lt;li&gt;行くのが怖いなら小さなイベントからどうだろう&lt;/li&gt;
&lt;li&gt;本番は懇親会らしい&lt;/li&gt;
&lt;li&gt;将来の委員長が会いたい人を呼べるイベントになればいいのに&lt;/li&gt;
&lt;li&gt;ほんの少しだけ主観での講師紹介&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;どんなイベントなのかをもっと知りたい場合は&lt;a href=&#34;http://osh-2014.github.io/&#34;&gt;ウェブサイト&lt;/a&gt;のほうをご覧ください。
そちらのほうが効率が良いでしょう。&lt;/p&gt;

&lt;p&gt;サイトのダメだし助かります。
&lt;a href=&#34;https://github.com/osh-2014/osh-2014.github.com&#34;&gt;Pull Request だともっと助かります。&lt;/a&gt;(まて&lt;/p&gt;

&lt;h3 id=&#34;テーマに興味なくても参加しようぜ:1f323e9607cddc6340c703f55b64dc70&#34;&gt;テーマに興味なくても参加しようぜ&lt;/h3&gt;

&lt;p&gt;もし、参加しない理由が「行ってもいいんだけどテーマとかセッションに興味がないんだよなぁ」という人に伝えたいことを書きます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;イベントに参加して周りに影響与えることが自分の興味のあるイベントを作ることになると思う&lt;/strong&gt;のだけど、どうだろうか。&lt;/p&gt;

&lt;p&gt;興味のあることに需要があることがわからないと大きなイベントで扱われるのは難しいです。
知られてないものであればあるほど、知ってもらわなければ興味を持つ人は増えないです。
ぜひ、参加者と話をしたり、懇親会でライトニングトークをしたりして興味のある人を増やしたり、詳しい人をみつけに来てください。
参加者の多いイベントで目立ってください。小さなことがはじめてよう。&lt;/p&gt;

&lt;p&gt;今回はTDDやアジャイルというテーマですが、それとは別にたくさんの興味をもった人が来ることで「面白い出会いがあるといいな」と期待して来る人が多いと嬉しいです。
テーマはセミナーを作る骨組みですが、この先オープンセミナーで継続していくだろうことを考えてみると大事な部分は出会いだと思います。
これは、懇親会が本番という話にも繋ると思います。&lt;/p&gt;

&lt;p&gt;「投票に行くか行かないか」みたいな話に似ている気がする。&lt;/p&gt;

&lt;p&gt;もちろんセッションも楽しめるほうが良いと思うので、その辺はがんばりたいです。事前アンケートも講師にも見てもらってできる範囲で内容を調整してもらったりしています。&lt;/p&gt;

&lt;h3 id=&#34;やっぱり企業に協賛して欲しい:1f323e9607cddc6340c703f55b64dc70&#34;&gt;やっぱり企業に協賛して欲しい&lt;/h3&gt;

&lt;p&gt;赤字になりそうであれば、個人協賛枠も考えているのだけど、私自身は企業協賛だけでなんとかしたい。&lt;/p&gt;

&lt;p&gt;無料のセミナーという性質上、予算がありません。
スポンサーを募ることになります。
スポンサーにとって価値のあるイベントにしなければなりません。
そうすると、自分達のやりたいことから妥協せざるを得ない点が出てきます。
スポンサーのメリットの中心は広告効果です。
集客効果がある選択をせざるを得ないのです。&lt;/p&gt;

&lt;p&gt;イベントの参加予定の人が個人協賛をしたいという声はいくつかあるのですが、なるべく企業協賛のみでなんとか黒字になるのが個人的には理想的です。&lt;/p&gt;

&lt;p&gt;個人協賛をやりたくない理由は、参加者がいろいろ学んだり、学ぶことを効率化することによってメリットを得るのが最終的には企業であって欲しいからです。
&lt;strong&gt;企業が技術者に投資することに価値があるようになって欲しいのです。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;技術者がお金を出して、技術者がメリットを得るような世界に先が見えないのです。
だって、お金を産み出しているのは経営者なのですから。
どんどん広島のIT企業を巻き込んでいきたい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;経営者にとって技術者が自ら進んで学ぶことが価値あることにしたいんだ。&lt;/li&gt;
&lt;li&gt;技術者が昇進していくために、技術者を辞めてくのも嫌なんだよなぁ。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://osh-web.doorkeeper.jp/contact/new&#34;&gt;そういうわけで、「広島のIT技術者を盛り上げる手伝いをしたいなぁ」って経営者さんからの連絡お待ちしてます!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;現時点での協賛を決めてくださった&lt;a href=&#34;http://www.orange.co.jp/&#34;&gt;オレンジシステム&lt;/a&gt;さんや&lt;a href=&#34;http://www.ate-mahoroba.jp/&#34;&gt;まほろば工房&lt;/a&gt;さんは本当に感謝しきれません。
この時点でもっとたくさんの企業を紹介したかった。ぐぬぬぬ。&lt;/p&gt;

&lt;h3 id=&#34;行くのが怖いなら小さなイベントからどうだろう:1f323e9607cddc6340c703f55b64dc70&#34;&gt;行くのが怖いなら小さなイベントからどうだろう&lt;/h3&gt;

&lt;p&gt;知らない人ばかりのところに行くのは怖くないですか？
怖くない人もいるでしょう。
ちなみに、私は怖いし、知り合いが少ないところへいくとたいていポツーンとしてます。
自慢ですが、ぼっちスキル高いです。かなりの孤立率です。&lt;/p&gt;

&lt;p&gt;話が逸れた。&lt;/p&gt;

&lt;p&gt;行ってみたいけど、ちょっと怖いなぁ、という方は、まずは小さなイベントから行ってみるのはどうでしょうか。
参加者が少ないイベントではお互い名前を覚えやすいですし、よくいろんなイベントへ顔を出す人が多かったりでアットホームです。
ゆるいです。
広島界隈では、&lt;a href=&#34;http://great-h.github.io/&#34;&gt;すごい広島&lt;/a&gt;が毎週やっていて、人数も少なくて気軽です。
事前に Twitter なんかで絡んでおくと少し楽だと思います。&lt;/p&gt;

&lt;p&gt;これで準備体操もしたので怖いものはないですね。
オープンセミナー2014@広島に行きましょう。(ちょっと無理矢理感ある)&lt;/p&gt;

&lt;h3 id=&#34;本番は懇親会らしい:1f323e9607cddc6340c703f55b64dc70&#34;&gt;本番は懇親会らしい&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;あれ?勉強会って懇親会が本番じゃないの?&lt;/p&gt;

&lt;p&gt;つくばに来てから，何度か勉強会に参加することがありました．&lt;/p&gt;

&lt;p&gt;そこでカルチャーショックだったのが「懇親会が地味」ということです．&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tokikane-tec.blogspot.jp/2013/12/9-etc.html&#34;&gt;時羽金也の技術帳: 岡山から離れて9ヶ月 〜岡山を離れて変わったこと，変わらなかったこと，etc〜&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;岡山の勉強会は懇親会が本番らしいです。
「ライトニングトークは5分間にどれだけ笑いをとるのかが大事」と言う人もいました。&lt;/p&gt;

&lt;p&gt;小さい勉強会は懇親会が本番じゃなくてもいいのですが、年に数回ある大きいイベントは&lt;strong&gt;懇親会も本番&lt;/strong&gt;だといいな、と思います。&lt;/p&gt;

&lt;p&gt;ちゃんと技術ネタで笑いを取れるLTをする人が何人もいるととても楽しいです。
楽しいと仲良くなるきっかけにも増えます。
秘蔵のネタをひっさげて遊びにきてください。
ヤジるだけでもきっと良いでしょう。&lt;/p&gt;

&lt;p&gt;今回の懇親会は40名までとなってますが、参加したい人が多い場合は立食に変更して増員も可能です。
開催ギリギリなると変更は難しいと思うので早めに&lt;a href=&#34;http://osh-web.doorkeeper.jp/events/7544&#34;&gt;登録お願いします&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;将来的には懇親会の中でもいろんな企画を用意できたらいいのにな。&lt;/p&gt;

&lt;h3 id=&#34;将来の委員長が会いたい人を呼べるイベントになればいいのに:1f323e9607cddc6340c703f55b64dc70&#34;&gt;将来の委員長が会いたい人を呼べるイベントになればいいのに&lt;/h3&gt;

&lt;p&gt;委員長は毎年交代するのがオープンセミナーの伝統となってるみたいです。
あまりその辺の伝統を私自身理解してないし、やりたいようにやってみていますが、
将来、委員長になった人がその時に広島で輝いてるエンジニアになってるといいと思います。
それだけじゃなくて「輝いたご褒美みたいになるといいな」って思っています。&lt;/p&gt;

&lt;p&gt;そのひとつが、「会ってみたいけどなかなか会えない人を呼ぶ機会を作れる」かなと思います。
他にもメリットを作れたらいいのですが、まずはここから。&lt;/p&gt;

&lt;h3 id=&#34;ほんの少しだけ主観での講師紹介:1f323e9607cddc6340c703f55b64dc70&#34;&gt;ほんの少しだけ主観での講師紹介&lt;/h3&gt;

&lt;p&gt;少しだけ私の主観で講師を紹介したいと思います。&lt;/p&gt;

&lt;p&gt;今回の目玉講師とも言える&lt;a href=&#34;https://twitter.com/t_wada&#34;&gt;和田さん&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;私が和田さんのことを知る機会となったのは以下の記事です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/t-wada/20100228/p1&#34;&gt;RSpec の入門とその一歩先へ - t-wadaの日記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RSpec というテスト駆動開発を行うために利用されるテスティングフレームワークを試している時に上記の記事に出会い、たいへん参考になりました。
基本的な使い方は抑えていましたが、実際の流れが見えて感動した記憶があります。&lt;/p&gt;

&lt;p&gt;はてなブックマークが647もついてるだけでのこの記事の素晴しさを物語っていると思います。&lt;/p&gt;

&lt;p&gt;テスト駆動開発という手動自体まだ模索する部分もたくさんあります。
ぜひそのエッセンスに触れてください。&lt;/p&gt;

&lt;p&gt;あと折角なので、この方も紹介しておきたいと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://favstar.fm/users/kakenavi&#34;&gt;@kakenavi’s (かけなび) Best Tweets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最高 1582 fav とか想像を絶する数字ですね。
ハードルあげてマジごめんなさい。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:1f323e9607cddc6340c703f55b64dc70&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;年の一度のお祭りみたいになって、内容問わずITエンジニアが集まる場所になれば良いと思っています。
そのために、2014年度は2015年、2016年に繋るような下地づくりに挑戦してみたつもりです。&lt;/p&gt;

&lt;p&gt;次年度の規模が小さくならないように下記の二つが達成できたらいいなぁ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;イベントの参加者を90人以上を達成したい&lt;/li&gt;
&lt;li&gt;懇親会を盛り上がる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;勉強会という観点でみると都会のほうがいろんな人がいて楽しいと思います。
(not 大都会)
でも、さまざまな理由で地方でがんばっている人たちがいます。
地方には地方で良いところがあり、距離があることによって違う文化が育って、都会の人たちが「遊びにいこうかなー」と思うようにしていきたいですね。異文化交流すてき。&lt;/p&gt;

&lt;p&gt;「都会に負けたくないなー、地方に負けたくないなー」って競争心がもっともっと楽しい世の中をつくることになると思います。
たぶん。いや知らんけど。でも、そう信じとく。&lt;/p&gt;

&lt;p&gt;この想いはどの辺りまで届くんだろうか。えいやっ!&lt;/p&gt;

&lt;h3 id=&#34;関連リンク:1f323e9607cddc6340c703f55b64dc70&#34;&gt;関連リンク&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://osh-2014.github.io/&#34;&gt;オープンセミナー2014@広島&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://osh-web.doorkeeper.jp/events/7534&#34;&gt;オープンセミナー2014@広島 - オープンセミナー広島 | Doorkeeper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://osh-web.doorkeeper.jp/events/7544&#34;&gt;オープンセミナー2014@広島 懇親会 - オープンセミナー広島 | Doorkeeper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>2013年のふりかえりをする</title>
          <link>https://blog.eiel.info/blog/2013/12/25/2013/</link>
          <pubDate>Wed, 25 Dec 2013 19:42:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/12/25/2013/</guid>
          <description>

&lt;p&gt;2013年も残り1週間なのでふりかえっておいて来年の目標を考える準備をする。&lt;/p&gt;

&lt;h3 id=&#34;1月:d86041b2f35c0e1e62030d707c60389f&#34;&gt;1月&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eiel/WTM-summary&#34;&gt;WTM-summary&lt;/a&gt;を作るustをした気がする。そういえば放置されている。はよ完成させたい。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/01/13/ios-autolayout/&#34;&gt;オンラインで Auto Layout の勉強会をした&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/tags/guan-shu-puroguraminguru-men/&#34;&gt;関数プログラミング入門 Haskellで学ぶ原理と技法の読書メモ&lt;/a&gt;を残したりしてみた。一章で終わってるので続きをしたい。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/01/21/github-spam/&#34;&gt;GitHub スパム判定される事故がおきた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2月:d86041b2f35c0e1e62030d707c60389f&#34;&gt;2月&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hiroshimarb.github.io/blog/2013/01/18/hiroshimarb-27/&#34;&gt;広島Ruby勉強会 #027&lt;/a&gt; で Fiber について簡単に紹介した。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/02/06/how-to-use-github/&#34;&gt;Git がわからなくても Github を使おう&lt;/a&gt; という記事を書いたらアクセスがいっぱいきた。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/02/12/gherkin/&#34;&gt;Cucumber のフィーチャの文法 - Gherkin&lt;/a&gt; とか書いてじわじわアクセスがある。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/02/17/github-pages/&#34;&gt;Github Pages について整理しておきます&lt;/a&gt; もそこそこアクセスがきてる&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3月:d86041b2f35c0e1e62030d707c60389f&#34;&gt;3月&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hiroshimarb.github.com/blog/2013/02/08/hiroshimarb-30/&#34;&gt;広島Ruby勉強会 #030&lt;/a&gt; で &lt;a href=&#34;http://blog.eiel.info/blog/2013/03/02/abc-liquid/&#34;&gt;Liquid について喋った&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;4月:d86041b2f35c0e1e62030d707c60389f&#34;&gt;4月&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;広島Ruby勉強会 #031で、&lt;a href=&#34;http://www.slideshare.net/TomohikoHimura/hakyll-18303056&#34;&gt;Hakyllの紹介をした&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cucumber/gherkin/pull/229&#34;&gt;gherkinに出した pull request が取り込まれた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eiel/railsdoc.eiel.info&#34;&gt;railsdoc.eiel.info&lt;/a&gt;の毎日更新をはじめた。最近ちょっとサボり気味。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.webtouchmeeting.com/meeting/2013/04/56web-touch-meeting.html&#34;&gt;Web Touch Meeting #56&lt;/a&gt;で軽量マークアップ言語について喋った&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rails/rails/pull/10339&#34;&gt;Ruby on Rails にいくつか Pull Request&lt;/a&gt; 出したりしてみた。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://atnd.org/events/36583&#34;&gt;広島マックユーザーグループ|4月28日(日曜日)の勉強会&lt;/a&gt; で「黒い画面入門 と その応用例」という話をした。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/04/16/writing-math-text-basic/&#34;&gt;「数学文章作法 基礎編」に感動していた&lt;/a&gt;。まだ持ち歩いている。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;5月:d86041b2f35c0e1e62030d707c60389f&#34;&gt;5月&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/05/13/how-to-enjoy-github/&#34;&gt;Githubの楽しみ方&lt;/a&gt;という記事を書いたら390はてぶついた。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qa.atmarkit.co.jp/users/eiel/activities&#34;&gt;OA@ITで遊んでたみたい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fourkanji.herokuapp.com/game&#34;&gt;ForKanji&lt;/a&gt;をつくってた形跡があるけどこれも完成してない気がする&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://great-h.github.io/&#34;&gt;すごい広島&lt;/a&gt;はじめた。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;6月:d86041b2f35c0e1e62030d707c60389f&#34;&gt;6月&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hiroshimarb.github.io/blog/2013/04/06/hiroshimarb-git-201306/&#34;&gt;広島Git勉強会 201306&lt;/a&gt;で「&lt;a href=&#34;http://www.slideshare.net/TomohikoHimura/git-22237343&#34;&gt;やりなおせるGit入門&lt;/a&gt;」というセッションをして、スライドを公開したら440はてぶとかいった&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;7月:d86041b2f35c0e1e62030d707c60389f&#34;&gt;7月&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;広島Ruby勉強会 #032 で &lt;a href=&#34;http://www.slideshare.net/TomohikoHimura/jenkins-23971945&#34;&gt;jenkins を cron 的に使ってみた話をした。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;8月:d86041b2f35c0e1e62030d707c60389f&#34;&gt;8月&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hiroshimarb.github.io/blog/2013/08/03/hiroshimarb-33/&#34;&gt;広島Ruby勉強会 #033&lt;/a&gt; で &lt;a href=&#34;http://www.slideshare.net/TomohikoHimura/rails-template&#34;&gt;Rails テンプレートの話をした&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/08/10/flaun/&#34;&gt;flaun&lt;/a&gt; という gem をつくった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://eielh-life.tumblr.com/post/59874413017/tdd-boot-camp-2-0&#34;&gt;TDD Boot Camp 岡山 2.0&lt;/a&gt;のスタッフっぽいことした&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;9月:d86041b2f35c0e1e62030d707c60389f&#34;&gt;9月&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hiroshimarb.github.io/blog/2013/09/07/hiroshimarb-34/&#34;&gt;広島Ruby勉強会 #034&lt;/a&gt; で &lt;a href=&#34;http://blog.eiel.info/blog/2013/09/07/autoload-rails/&#34;&gt;Rails の自動読み込みを支える技術&lt;/a&gt;というセッションをした。&lt;/li&gt;
&lt;li&gt;上記のセッションを記事にした&lt;a href=&#34;http://blog.eiel.info/blog/2013/09/07/autoload-rails/&#34;&gt;Rails の自動読み込みの話&lt;/a&gt; も70はてぶぐらいついた&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;10月:d86041b2f35c0e1e62030d707c60389f&#34;&gt;10月&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://local.aguuu.com/events/21550&#34;&gt;第二回　中国地方DB勉強会&lt;/a&gt; にて「&lt;a href=&#34;https://www.slideshare.net/TomohikoHimura/or-mapping-activerecord&#34;&gt;O/R Mapping の話をするよ。ActiveRecord の話をしたかった&lt;/a&gt;」というセッションをした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ospn.jp/osc2013-hiroshima/&#34;&gt;OSC 2013 HIROSHIMA&lt;/a&gt; で、Hirosihma.rb の枠でLTをした。LT大会でもLTをした。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;11月:d86041b2f35c0e1e62030d707c60389f&#34;&gt;11月&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hiroshimarb.github.io/blog/2013/11/02/hiroshimarb-35/&#34;&gt;広島 Ruby 勉強会 #035&lt;/a&gt; 内で「&lt;a href=&#34;http://www.slideshare.net/TomohikoHimura/active-supprt-notifications&#34;&gt;つながりをゆるふわにしよう ActiveSupport::Notifications&lt;/a&gt;」というセッションをした。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cssnite.webtouchmeeting.com/vol7/&#34;&gt;CSS Nite in HIROSHIMA Vol.7&lt;/a&gt;の副実行委員長を務めたらしい。大した仕事はしてないけど、実行委員長の仕事を軽減したはず。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;12月:d86041b2f35c0e1e62030d707c60389f&#34;&gt;12月&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;近畿大学 工学部 情報学科 IT交流勉強会 で 「&lt;a href=&#34;https://speakerdeck.com/eiel/raitoningutokuwosiyou-sositeraitoningutokuwosurukotoniyorusofalsexiao-guo&#34;&gt;ライトニングトークをしよう、そしてライトニングトークをすることによるその効果。&lt;/a&gt;」というセッションをした。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gbdaitokai.doorkeeper.jp/events/5725&#34;&gt;合同勉強会 in 大都会岡山 -2013 Winter-&lt;/a&gt; で「&lt;a href=&#34;http://blog.eiel.info/blog/2013/12/15/gbdaitokai-2013/&#34;&gt;流れるようにプログラミングしたい&lt;/a&gt;」というセッションをした。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;いった勉強会とか:d86041b2f35c0e1e62030d707c60389f&#34;&gt;いった勉強会とか&lt;/h3&gt;

&lt;p&gt;ブログにメモってるものだけ数えると70回ぐらい参加した模様。&lt;/p&gt;

&lt;h3 id=&#34;よく再生した曲:d86041b2f35c0e1e62030d707c60389f&#34;&gt;よく再生した曲&lt;/h3&gt;

&lt;p&gt;高橋優の「花のように」だった。
他には「夜明けを待っている」とか Ryu☆の 「kira kira」「Plan 8」など。&lt;/p&gt;

&lt;h3 id=&#34;よんだ本とか:d86041b2f35c0e1e62030d707c60389f&#34;&gt;よんだ本とか&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://booklog.jp/users/eiel&#34;&gt;ブクログ登録数&lt;/a&gt;が50冊ぐらい。漫画も含んでるので大して読めてない感。
「型システム入門」と「圏論の基礎」がなかなか読み進んでないのでなんとかしたい。&lt;/p&gt;

&lt;h3 id=&#34;音ゲーとか:d86041b2f35c0e1e62030d707c60389f&#34;&gt;音ゲーとか&lt;/h3&gt;

&lt;p&gt;弐寺がSPが5段からSP8段へ。DPが7段から伸びてない。
ポップンが42がちらちらクリアできる。
jubeat がレベル10がBランク残り3曲までになった。&lt;/p&gt;

&lt;p&gt;ゲームはほどほどにしましょう。&lt;/p&gt;

&lt;h3 id=&#34;見た映画とか:d86041b2f35c0e1e62030d707c60389f&#34;&gt;見た映画とか&lt;/h3&gt;

&lt;p&gt;17個ぐらいはどうやら見ている模様。
「かぐや姫の物語」が圧倒的だったと思う。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:d86041b2f35c0e1e62030d707c60389f&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;かなりの数のセッションをしている。月に2つはスライドをつくるのが当たり前な一年になってました。ブログ記事もかなり書いてました。
ツイートは増えすぎないように注意したい。&lt;/p&gt;

&lt;p&gt;なにかしらにログを残しておくといろいろふりかえることができて良いと思った。
サボり気味なのも増えてるのでがんばっていきたいところです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Wisper 試した</title>
          <link>https://blog.eiel.info/blog/2013/12/25/wisper/</link>
          <pubDate>Wed, 25 Dec 2013 01:11:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/12/25/wisper/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;https://github.com/krisleech/wisper&#34;&gt;Wisper&lt;/a&gt; を試した。&lt;/p&gt;

&lt;p&gt;Rails のプラグインで、依存性の管理や分離ができる。
ActiveRecord の callback だと依存の記述がモデル上になって、
Observer は本家から外れたような気がするし(うる覚え)、
ActiveSupport::Notification じゃ依存性がゆるすぎる。
でも、コントローラでかくにはちょっと処理が多すぎるし…って時に探してたらみつけたプラグイン。&lt;/p&gt;

&lt;p&gt;やってることはどれも大差ない気がするんだけど、とりあえず、公式のサンプルコードをみてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class BidsController &amp;lt; ApplicationController
  def new
    @bid = Bid.new
  end

  def create
    @bid = Bid.new(params[:bid])

    @bid.subscribe(PusherListener.new)
    @bid.subscribe(ActivityListener.new)
    @bid.subscribe(StatisticsListener.new)

    @bid.on(:create_bid_successful) { |bid| redirect_to bid }
    @bid.on(:create_bid_failed)     { |bid| render :action =&amp;gt; :new }

    @bid.commit
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;create_bid_successful が発生したときはリダイレクトして、create_bid_failed が発生した時は new を render するというのをアクションでかける。
ifの分岐がなくて、縦にコードが並んで複雑な分岐をする場合は読みやすい。
また、Listener を登録することで機能追加ができる。
create_bid_successful イベントがおきたときは、&lt;code&gt;PusherLister#create_bid_successful&lt;/code&gt; や &lt;code&gt;ActivityListener#create_bid_successful&lt;/code&gt;、&lt;code&gt;StatisticsListener#create_bid_successful&lt;/code&gt; なんかも呼ばれる。
Set で保存されてるようなので順番は保証されない&lt;/p&gt;

&lt;p&gt;メインの処理をモデルで集中できて少し脇道に逸れるようなものは Listener を書いて &lt;code&gt;subscribe&lt;/code&gt; していけばいいという感じである。&lt;/p&gt;

&lt;p&gt;また、 &lt;a href=&#34;https://github.com/krisleech/wisper-async&#34;&gt;wisper-async&lt;/a&gt; っていうのがあって、脇道に逸れるものは非同期に実行したりできそう。&lt;/p&gt;

&lt;p&gt;イベントを起こすには &lt;code&gt;Wisper::Publisher&lt;/code&gt; を &lt;code&gt;include&lt;/code&gt; しておいて &lt;code&gt;publish&lt;/code&gt; を呼ぶだけです。引数を渡したいときは一緒に渡します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;publish(:create_bid_successful, self)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;単体テストもしやすかったです。&lt;/p&gt;

&lt;p&gt;個人的にはオブジェクトを subscribe すると反応しないイベントがある場合は警告してくれたら嬉しいなぁ、と思いながらちらちら見ている。
メソッド名を間違えるとちょっとめんどくさい。&lt;/p&gt;

&lt;p&gt;エラーが発生したとき、わかりにくかったのもちょっと欠点か。&lt;/p&gt;

&lt;p&gt;規模が大きいアプリケーションには使えそうな感じがしました。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>設定画面で表示する値をアプリ側で設定する - iOS Second Stage Advent Calendar 2013</title>
          <link>https://blog.eiel.info/blog/2013/12/19/ios-second-stage-advent-calendar-2013/</link>
          <pubDate>Thu, 19 Dec 2013 00:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/12/19/ios-second-stage-advent-calendar-2013/</guid>
          <description>&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2013/ios-2&#34;&gt;iOS Second Stage Advent Calendar 2013&lt;/a&gt;の19日目の記事です。
Advent Calendar に参加したのはギャングである&lt;a href=&#34;http://qiita.com/aguuu&#34;&gt;aguuu&lt;/a&gt; の中の人に脅されたわけではありません。&lt;/p&gt;

&lt;p&gt;iOS のアプリケーションを iOS自体の設定画面で設定を行えるアプリケーション
があります。その画面内に稀にバージョン番号が表示されているようなものがあると思います。
これを行うには方法として紹介されているのはビルドする際に値を差し替える方法があります。
ググるとこればっかりでてきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/MasatoKONDO/20120410/1334045339&#34;&gt;参考: アプリのバージョン、ビルドを「設定」の初期値として設定する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回はそれをせずに、アプリ内で設定できたので紹介しておこうと思います。
動的設定とでも言えばいいのでしょうか。&lt;/p&gt;

&lt;p&gt;この設定画面を用意する方法は Settings.bundle を追加し Root.plist を作成することで作ることができます。&lt;/p&gt;

&lt;p&gt;今回のゴール&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/ios-second-stage-advent-calendar/setting.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;バージョンってタイトルには書いてますが、最終起動時刻のほうがわかりやすいので、最終起動時刻に焦点を当てます。
、設定画面に値を表示するには、Setting Bundle を追加します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/ios-second-stage-advent-calendar/SettingsBundle.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;root.plist に type を table のアイテムを追加し、DefaultValue を設定します。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DefaultValue を設定します。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;大事なことなので強調しておきます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/ios-second-stage-advent-calendar/root-plist.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;あとは &lt;code&gt;[NSUserDefaults standardUserDefaults]&lt;/code&gt; に値を書き込めばよいです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;NSUserDefaults* userDefaults = [NSUserDefaults standardUserDefaults];
NSDate* now = [[NSDate alloc] initWithTimeIntervalSinceNow:0];
[userDefaults setObject:[now descriptionWithLocale:[NSLocale currentLocale]]
                 forKey:@&amp;quot;lastLaunched&amp;quot;];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とっても簡単ですね。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/iOSAdventCal2013&#34;&gt;プロジェクトファイルはこちらにおいておきます&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;たまたま最初に思いつく方法を試したらうまくいきました。(最初は
Documents や Cache ディレクトリの中身を確認して plist を直接書き換えたなんて言えない…。しかも、何か勘違いをして UserDefaults を経由せずに書き換えたとか言えない…。)&lt;/p&gt;

&lt;p&gt;ざっくりと公式のドキュメントをみましたが、記述をみつけられなかったので、裏技的なテクニックなのかもしれません。&lt;/p&gt;

&lt;p&gt;明日はみんなのハーレムである &lt;a href=&#34;http://qiita.com/mako_wis&#34;&gt;makowis&lt;/a&gt; さんです。楽しみですね。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>knife のログレベルの設定</title>
          <link>https://blog.eiel.info/blog/2013/12/17/loglevel-knife/</link>
          <pubDate>Tue, 17 Dec 2013 23:46:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/12/17/loglevel-knife/</guid>
          <description>

&lt;p&gt;knife solo でエラーがでるけど、どこで起きてるかわからねぇ。&lt;/p&gt;

&lt;p&gt;というわけで、pry を差し込みして調べた。ぐぐってトップのほうにあるのは
「やり方がわからない!」って、なっていた。悲しい。&lt;/p&gt;

&lt;p&gt;結論としては、knifeの設定ファイルである &lt;code&gt;.chef/knife.rb&lt;/code&gt; や
&lt;code&gt;~/.chef/knife.rb&lt;/code&gt; に以下を追記すればいい&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;verbosity       :debug
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;:debug&lt;/code&gt; としてるのは分かりやすくかいただけで、 &lt;code&gt;nil&lt;/code&gt; や &lt;code&gt;0&lt;/code&gt; 、&lt;code&gt;1&lt;/code&gt; で
ない値であればいい。&lt;/p&gt;

&lt;p&gt;参考:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/opscode/chef/blob/11.8.2/lib/chef/knife.rb#L373-L380&#34;&gt;https://github.com/opscode/chef/blob/11.8.2/lib/chef/knife.rb#L373-L380&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;case Chef::Config[:verbosity]
when 0, nil
  Chef::Config[:log_level] = :error
when 1
  Chef::Config[:log_level] = :info
else
  Chef::Config[:log_level] = :debug
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これぐらいならドキュメントにかいてありそうだけどソースをみてしまった。&lt;/p&gt;

&lt;h3 id=&#34;追記:ef0725d72dcc6ef73a4cf89ba014bf31&#34;&gt;追記&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;-V&lt;/code&gt; でログレベルが変わる模様 &lt;code&gt;-VV&lt;/code&gt; で、さらに変化する。
&lt;code&gt;-V&lt;/code&gt; で出力がかわんなかったから油断した。(いいわけ)&lt;/p&gt;

&lt;h3 id=&#34;関連:ef0725d72dcc6ef73a4cf89ba014bf31&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/11/13/abc-chef-solo/&#34;&gt;やっと Chef Solo はじめた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>忘年会議2013 に参加して LT したり、表彰されたりした</title>
          <link>https://blog.eiel.info/blog/2013/12/16/bonenkaigi-2013/</link>
          <pubDate>Mon, 16 Dec 2013 15:08:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/12/16/bonenkaigi-2013/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://gbdaitokai.doorkeeper.jp/events/5725&#34;&gt;合同勉強会&lt;/a&gt;の懇親会ともいえる、&lt;a href=&#34;http://bonenkaigi.doorkeeper.jp/events/5889&#34;&gt;忘年会議2013&lt;/a&gt;に参加しました。
その中で告知メインの LT してきました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://osh-2014.github.io/&#34;&gt;オープンセミナー2014@広島&lt;/a&gt;の告知がメインで、その後に今年のアウトプットのふりかえりをしようと思ったのですが、余裕で時間が足りませんでした。
そもそも「8分ぐらい喋ってもいいよね」なんて甘い考えがよくありませんでした。&lt;/p&gt;

&lt;p&gt;スライドは喋ったところまで公開したいと思います。
完全版を&lt;a href=&#34;http://osh-web.doorkeeper.jp/events/7544&#34;&gt;オープンセミナー2014@広島 懇親会&lt;/a&gt;でやろうかと考えています。&lt;/p&gt;

&lt;p&gt;ほとんど告知なので大したことは書かれていません。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;279cc8b0484801313547029a9781450d&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;数値は12月10日時点のものです。&lt;/p&gt;

&lt;p&gt;この後は、アクセスの多かった記事の具体的なPVなどを紹介して、「&lt;strong&gt;量が質に転化&lt;/strong&gt;したかなぁ」という話をするつもりでした。
他にはざっくりとした広告収入の話とか。
あと、20枚ぐらいありました。&lt;/p&gt;

&lt;h3 id=&#34;大都会アワードの授与式:d70dd5db47055d8f9d6c30d0502f25a8&#34;&gt;大都会アワードの授与式&lt;/h3&gt;

&lt;p&gt;忘年会議では他には、「大都会アワードの授与式」なるものがあって10人以上表彰されていました。&lt;/p&gt;

&lt;p&gt;そういえば、私も表彰状頂きました。
本当にありがとうございます。
人生で表彰状なんてもらった記憶が他にない!!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/bonenkaigi-2013/award.jpg&#34; alt=&#34;表彰状&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ピントを合わせるところを間違えた気がする。
表彰するのは良いことだと思いました。どこかで真似していこう。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:d70dd5db47055d8f9d6c30d0502f25a8&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;こんなにたくさんの IT 技術者が集まり LT のある懇親会は広島にはないので、オープンセミナー2014@広島の懇親会で実現できたらいいなぁ。
といっても座れる定員の40が限界そうではあるのですが…。
もし、いっぱいになるようであれば、立食形式も検討したいと思います。&lt;/p&gt;

&lt;h3 id=&#34;関連:d70dd5db47055d8f9d6c30d0502f25a8&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/12/15/gbdaitokai-2013/&#34;&gt;流れるようにプログラミングしたい - 合同勉強会 in 大都会岡山 2013 Winter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>流れるようにプログラミングしたい - 合同勉強会 in 大都会岡山 2013 Winter</title>
          <link>https://blog.eiel.info/blog/2013/12/15/gbdaitokai-2013/</link>
          <pubDate>Sun, 15 Dec 2013 01:38:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/12/15/gbdaitokai-2013/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://gbdaitokai.doorkeeper.jp/events/5725&#34;&gt;合同勉強会 in 大都会岡山 -2013 Winter-&lt;/a&gt; でライトニングトークをしました。&lt;/p&gt;

&lt;p&gt;合同勉強会という名前からわかるように各勉強会からいろんなスピーカーがやってきて、セッションをします。
私は&lt;a href=&#34;http://hiroshimarb.github.io/&#34;&gt;Hiroshima.rb&lt;/a&gt;・&lt;a href=&#34;http://great-h.github.io/&#34;&gt;すごい広島&lt;/a&gt;・&lt;a href=&#34;http://webtouchmeeting.com/&#34;&gt;WEB TOUCH MEETING&lt;/a&gt; からやってきたという形でライトニングトークをしました。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;82c04820470b0131b3441e6594d9299f&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;「流れるようにプログラミングしたい」というタイトルです。
Ruby で読み書きしやすいプログラミングをしたときの問題点を紹介しつつ、Haskell の良いところを紹介するといった内容です。
内容も多かったのでかなりの早口で喋りました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/eiel/7956834&#34;&gt;コードはこちらら&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ruby で関数型の思考でプログラミングをすると自然と流れるようなコードになりますが、問題があり、データをすべて読み終えないとプログラムが実行されないという状態になります。&lt;/p&gt;

&lt;p&gt;その例が flow.rb のプログラムです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;puts ARGF.each_line
  .map(&amp;amp;:to_i)            # 数値に
  .map { |n| n * 5}       # 5倍する
  .select { |n| n &amp;gt; 10 }  # 10より大きいものだけに
  .first(5)               # 最初の5つ
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Haskell を使用した場合は、そのまま書いてもこの問題はおきず、現時点で処理できる時点まで処理してくれています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;main = do
  getContents &amp;gt;&amp;gt;= (
    return .
    take 5 .        -- 最初の5個
    filter (&amp;gt;10) .  -- 10より大きいものだけに
    map (*5) .      -- 5倍する
    map read .      -- 数値に
    lines
    ) &amp;gt;&amp;gt;= mapM_ print
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;しかし、Haskell の場合はコードの順番と実行の順番が逆転してしまいます。&lt;/p&gt;

&lt;p&gt;Haskell をつかわなくても ruby 2.0 以降標準添付された Enumerator::Lazy を使うとこの問題は解決できます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ARGF.each_line
  .lazy
  .map(&amp;amp;:to_i)             # 数値に
  .map { |n| n * 5 }       # 5倍する
  .select { |n| n &amp;gt; 10 }   # 10より大きいものだけに
  .map { |n| puts n }      # 出力
  .first(5)                # 最初の5個
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この lazy はなかなか一筋縄にはいかなくて、出力も map でやらなければならなく、純粋さを追求すると気持ち悪いです。&lt;/p&gt;

&lt;p&gt;Haskell の問題である順番が逆転してしまう問題は Control.Arrow を利用すると解決できます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;main = getContents &amp;gt;&amp;gt;= (
  lines
  &amp;gt;&amp;gt;&amp;gt; map read       -- 数値に変換
  &amp;gt;&amp;gt;&amp;gt; map (*5)       -- 5倍する
  &amp;gt;&amp;gt;&amp;gt; filter (&amp;gt;10)   -- 10より大きいものだけに
  &amp;gt;&amp;gt;&amp;gt; take 5         -- 最初の5個
  &amp;gt;&amp;gt;&amp;gt; return
  ) &amp;gt;&amp;gt;= mapM_ print
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでちゃんと、順番どおりによむことができます。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:d4aa6e878fc09181c48be7c1505e8838&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;Arrow の部分はおまけにすぎないですが、感動した部分であったり、関数型の思考で Ruby を書いた場合は効率という点で気になる部分もあり Haskell 面白いと思った部分です。&lt;/p&gt;

&lt;p&gt;その部分を無理矢理5分で話したのでかなり早口だったり、私自身の息が上がったりして少し迷惑をおかけしました。&lt;/p&gt;

&lt;p&gt;笑いもとれていたようなので、その点はよかったです。&lt;/p&gt;

&lt;p&gt;ByteString や Text をつかった場合、どうなるのか確認しておきたいなぁ。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>UIWebView の UserAgent を変更した時に気をつけたいたった1つのこと</title>
          <link>https://blog.eiel.info/blog/2013/12/10/change-user-agent-in-uiwebview/</link>
          <pubDate>Tue, 10 Dec 2013 02:04:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/12/10/change-user-agent-in-uiwebview/</guid>
          <description>&lt;p&gt;iOS SDK のUIWebView は UserAgent を変更することができます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.yoheim.net/blog.php?q=20121001&#34;&gt;[XCODE] UIWebViewを用いる際にUserAgentを独自に設定する方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;UserAgent を変更したときに気をつけておきたいことを書きたいと思います。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UserAgent によって条件分岐する JavaScript ライブラリがあることを忘れないようにしましょう。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;3時間以上たたかって、Google検索しても、なんにも情報ないし、「もうわからんわー」って投げ出したくなったところ JavaScript のライブラリのソースコード読み始めて、ようやく気付きました。
なるべくもとの UserAgent を尊重するほうが生きやすい世の中かもしれません。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>近畿大学のIT交流勉強会 2013 に参加してきた</title>
          <link>https://blog.eiel.info/blog/2013/12/08/it-newwork-event-2013-in-kinki-ac/</link>
          <pubDate>Sun, 08 Dec 2013 00:15:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/12/08/it-newwork-event-2013-in-kinki-ac/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://www.hiro.kindai.ac.jp/index.html&#34;&gt;近畿大学 工学部 情報学科&lt;/a&gt;の IT 交流勉強会に参加してきました。
2013年版。残念ながら固定リンクがない。&lt;/p&gt;

&lt;p&gt;オープンメディアラボ開設記念ということで学生に自分から学ぶきっかけをつくるための施設づくりをしているようです。
というわけで、その中で稲妻トークを一本してきました。
稲妻トークというのはライトニングという言葉から連想した、近畿大学オリジナルの名前です。10分のライトニングトーク風になるように挑戦してみました。&lt;/p&gt;

&lt;p&gt;&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;a5021fc0406c01311b314ac7d2690918&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;裏テーマは「ライトニングトークがどんなものか体感してもらう。へたくそでも大丈夫」というのでやりました。
速すぎると言われたので、「リハーサルをちゃんとやらないといけないなあ」と、思いました。あと事前にイメージトレーニングが足りなくて話そうとした内容をいくつか飛ばしてしまいました。
反省点が毎回あるのは良いことです。&lt;/p&gt;

&lt;p&gt;私より前の発表者でアウトプットの利点が説明されていて、その部分はちょうど省いていて、アウトプットの利点の部分はネタにしていたので、個人的にはラッキーでした。&lt;/p&gt;

&lt;p&gt;Speaker Deck 応援週間ということで Speaker Deck にアップしました。
Slide Share は PV とかわかって良いのですが、Ruby製を応援したくなる病。&lt;/p&gt;

&lt;h3 id=&#34;ちゃんと解説:5afb2def9a2b7337bea777dd26e20b9b&#34;&gt;ちゃんと解説&lt;/h3&gt;

&lt;p&gt;募集が「稲妻トークの募集」だったので、タイトルを「ライトニングトークをしよう」にすると非常に危険そうになって良さそう、ということでこれに決めました。
それだとストレートすぎるので、ターゲットは学生なので音ゲーネタから&lt;a href=&#34;http://p.eagate.573.jp/game/bemani/academy/p/profile/as96.html&#34;&gt;「お米の美味しい炊き方、そしてお米を食べることによるその効果。」&lt;/a&gt;を参考にタイトルをつけました。
しかし、知ってる人が誰もいませんでした。&lt;/p&gt;

&lt;p&gt;セッションの目的は「地方の勉強会は発表者が足りてないので、ライトニングトークの練習をして発表者になれる練習をして欲しい」というのが主なところです。&lt;/p&gt;

&lt;p&gt;そこで、発表者になることのメリット。もっと一般的にしてアウトプットすることのメリットについて前述のとおりざっくりと喋りました。&lt;/p&gt;

&lt;p&gt;「アウトプットすると情報が集まる」のは実際によくあって、アウトプットする人は自分の必要な情報をうまく集めます。そんな話はしわすれたけど。
うまく使うと効率よく勉強できます。&lt;/p&gt;

&lt;p&gt;あとは、これからライトニングトークができそうな勉強会を駆け足で紹介しました。
そこが速かったのかもしれませんが、スライドをアップロードしてるのでそっちを見て欲しいということでおまけをつけています。学生さんは見てくれるでしょうか。&lt;/p&gt;

&lt;p&gt;自己紹介の定番であるベストツイートが省略されたのは現地でネットが使えなかったからです。&lt;/p&gt;

&lt;p&gt;今回、自分の中で挑戦したことは10分というのはライトニングトークとしては長めなので、中盤に大きなネタを突っ込んだことです。
自分をネタにすると他人の誹謗中傷にならなくて使いやすいですが、自分で直視できない問題があります。&lt;/p&gt;

&lt;p&gt;ソーシャルの力を使うで、&lt;a href=&#34;http://www.ntv.co.jp/GATCHAMAN_Crowds/&#34;&gt;ガッチャマン クラウズ&lt;/a&gt; の話を入れたかったりしたのですが、時間の都合で入れませんでした。
最近は「一人でできることには限りがあるなぁ」と感じているので、みんなの力を借りれるようになりたいです。
そのためには、やることを「社会的価値あることにしたりしないといけない」というのを感じてます。&lt;/p&gt;

&lt;p&gt;まー、実際みんな、そんなにがんばる必要はないと思う。&lt;/p&gt;

&lt;h3 id=&#34;直近の勉強会リンク:5afb2def9a2b7337bea777dd26e20b9b&#34;&gt;直近の勉強会リンク&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://webtouchmeeting.com/&#34;&gt;WEB TOUCH MEETING&lt;/a&gt; (&lt;sup&gt;12&lt;/sup&gt;&amp;frasl;&lt;sub&gt;14&lt;/sub&gt; 土) Web界隈の勉強会。ジャンルが幅広く毎月。 発表に挑戦してみたい勉強会。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://gbdaitokai.doorkeeper.jp/events/5725&#34;&gt;岡山 合同勉強会&lt;/a&gt; (&lt;sup&gt;12&lt;/sup&gt;&amp;frasl;&lt;sub&gt;14&lt;/sub&gt; 土) 年に一度の岡山周辺のIT勉強会が集う。エンジニア向け。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://bonenkaigi.doorkeeper.jp/events/5889&#34;&gt;岡山 忘年会議2013 (&lt;sup&gt;12&lt;/sup&gt;&amp;frasl;&lt;sub&gt;14&lt;/sub&gt; 土)&lt;/a&gt; 合同勉強会の後のお祭。本当の戦いはここから。一度いってみるべき。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://partake.in/events/5ddde1fe-88b7-4541-9f37-02cf4fa0284c&#34;&gt;C++勉強会in広島&lt;/a&gt; (01/11 土) 大学生主催。もう定員いっぱい。部屋がひろくなったりしないんだろうか。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://osh-2014.github.io/&#34;&gt;オープンセミナー2014@広島&lt;/a&gt; (&lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;1&lt;/sub&gt; 土) 年に1度の大きな勉強会。懇親会LT可能！岡山に負けてられない &lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://hiroshimarb.github.io/&#34;&gt;Hiroshima.rb&lt;/a&gt; (&lt;sup&gt;3&lt;/sup&gt;&amp;frasl;&lt;sub&gt;1&lt;/sub&gt; 土) 毎月第一土曜日(1月と5月は除く)みんなセッションの練習をしにきてるので気楽に。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://great-h.github.io/&#34;&gt;すごい広島&lt;/a&gt; (&lt;sup&gt;12&lt;/sup&gt;&amp;frasl;&lt;sub&gt;11&lt;/sub&gt; 水) GitHubで遊ぼう！広島のすごい(？)人たちが集まって情報交換したり、作業したりしている&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>今すぐフォローしたい!?広島のすごいTwitterユーザを紹介</title>
          <link>https://blog.eiel.info/blog/2013/12/01/recommend-twitter-users/</link>
          <pubDate>Sun, 01 Dec 2013 00:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/12/01/recommend-twitter-users/</guid>
          <description>

&lt;p&gt;本記事は&lt;a href=&#34;http://www.adventar.org/calendars/74&#34;&gt;すごい広島 Advent Calendar 2013&lt;/a&gt;の1日目の記事となります。&lt;/p&gt;

&lt;p&gt;タイトルは釣りです。
個人的に紹介したい広島の人を紹介したいと思います。
紹介したい人はいっぱいいるのですが Twitter ユーザに限らせていただきます。&lt;/p&gt;

&lt;p&gt;基本的にITエンジニアの人ですが、一部例外があります。
また、すごい人なんだけど、ツイートがあまりない方も対象外にしてます。
明確な基準はありません。
といっても、フォローしている人を上から順に眺めて選んだだけという説もあります。
そして、すごい人なのにうっかり漏れた人もいるかもしれないですが、そこは本当にごめんなさい。(ガクガクブルブル)&lt;/p&gt;

&lt;p&gt;順番は意味がありそうで適当です。&lt;/p&gt;

&lt;h3 id=&#34;kakenavi-https-twitter-com-kakenavi:001820ec75feeaa012aaf20c94eb98e6&#34;&gt;&lt;a href=&#34;https://twitter.com/kakenavi&#34;&gt;kakenavi&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;外したくても外せない。
伝説の「デスマ神」と言われているがその真相は不明。
Twitter界でも普通に有名人。
リアルでは「おもったほどおもしろくないですね」と、言われることがあるそうな。
しかし、彼の本質はそこではない。
でも、これ以上語ると私がデスマになってしまうので、これ以上語ることができない。
噂によると彼のツイートのまとめたサイトがあるらしい。
その破壊力はあまり知られていない。&lt;/p&gt;

&lt;h3 id=&#34;nextstep2osx-https-twitter-com-nextstep2osx:001820ec75feeaa012aaf20c94eb98e6&#34;&gt;&lt;a href=&#34;https://twitter.com/NeXTSTEP2OSX&#34;&gt;NeXTSTEP2OSX&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;ITエンジニアではない。
どちらかというと広島弁で有名。
しかし、プログラミングスキルを有し、その辺のプログラマよりプログラムが書けるかもしれない。
Emacsユーザ。
あまり知られてないがキーボードも変態度もなかなか高い。
Cocoaの勉強会の主催もしている。&lt;/p&gt;

&lt;h3 id=&#34;24motz-https-twitter-com-24motz:001820ec75feeaa012aaf20c94eb98e6&#34;&gt;&lt;a href=&#34;https://twitter.com/24motz&#34;&gt;24motz&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://sourceforge.jp/projects/nvdajp/&#34;&gt;NVDAというスクリーンリーダの日本語版&lt;/a&gt;の開発者。
私の中で有識者という立ち位置を確立している。
いつも自分にない視点からの素敵なアドバイスが飛んでくる。
Git ネタをよくふぁぼられる。
バージョン管理システムに思い入れを感じる。&lt;/p&gt;

&lt;h3 id=&#34;moobay9-https-twitter-com-moobay9:001820ec75feeaa012aaf20c94eb98e6&#34;&gt;&lt;a href=&#34;https://twitter.com/moobay9&#34;&gt;moobay9&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;今、広島でもっとも売り出し中のインフラエンジニア。
広島の救世主として知られている。
ちょっと持ち上げすぎると怒られる。
すばらしいほどの広島愛を「広島のアニキ」といえばこの人！になるように仕向けているがあんまりうまくいってない。&lt;/p&gt;

&lt;h3 id=&#34;pecosantoyobe-https-twitter-com-pecosantoyobe:001820ec75feeaa012aaf20c94eb98e6&#34;&gt;&lt;a href=&#34;https://twitter.com/pecosantoyobe&#34;&gt;pecosantoyobe&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;次期エースと勝手に言ってて、いつも迷惑をかけている。
ネタ力が高い。
しかし、ネタ力が高すぎる故に理解されていない感がある。
たぶん、先を行きすぎているのだとおもう。
私より GitHub の Star がアクティブで参考になる。&lt;/p&gt;

&lt;h3 id=&#34;keiso-https-twitter-com-keiso:001820ec75feeaa012aaf20c94eb98e6&#34;&gt;&lt;a href=&#34;https://twitter.com/keiso&#34;&gt;keiso&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;広島のコミュニティを支えている人達の中でひとり。
かなりの存在感。
広島MacUGやAUGM広島の代表者。
「調べれば keiso」という異名があって、ブログの更新量が多く、質も高い。
それだけ引き出しもすごく多い。勉強になる。&lt;/p&gt;

&lt;h3 id=&#34;akira345-https-twitter-com-akira345:001820ec75feeaa012aaf20c94eb98e6&#34;&gt;&lt;a href=&#34;https://twitter.com/akira345&#34;&gt;akira345&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;今回紹介している人の中で明らかに違う方向に Geek。
ハードに強いのに、ハードっぽい仕事あまりしていない。
自分とは違う方向に知識の幅が広いので、参考になる話をたくさん聞ける。&lt;/p&gt;

&lt;h3 id=&#34;soudai1025-https-twitter-com-soudai1025:001820ec75feeaa012aaf20c94eb98e6&#34;&gt;&lt;a href=&#34;https://twitter.com/soudai1025&#34;&gt;soudai1025&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;「#た」 の人と言うと伝わるから不思議。
紹介してる人の中でも県外でもなかなか知名度が高いイメージ。(実際はよくわからない)
広島に入れていいのか謎の福山在中。
なぜか「残念」と言われている。
その真偽は自分で確かめて欲しい。
&lt;a href=&#34;NPO法人 日本PostgreSQLユーザ会&#34;&gt;日本PostgreSQLユーザ会&lt;/a&gt;の中国支部長。&lt;/p&gt;

&lt;h3 id=&#34;tsuda-ahr-https-twitter-com-tsuda-ahr:001820ec75feeaa012aaf20c94eb98e6&#34;&gt;&lt;a href=&#34;https://twitter.com/tsuda_ahr&#34;&gt;tsuda_ahr&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;広島の勉強会に参加していれば、だれでも知る人ランキング第２位にランクインする。(当社比)
Microsoft系のコミュニティへの出現率が高いけど、他のコミュニティにも出現する。
議論すると盛り上がるので、議論する時に必須です。
素朴な疑問を素朴にぶつかってくる。&lt;/p&gt;

&lt;h3 id=&#34;coelacanth-https-twitter-com-coelacanth:001820ec75feeaa012aaf20c94eb98e6&#34;&gt;&lt;a href=&#34;https://twitter.com/coelacanth&#34;&gt;coelacanth&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;きっと全国的にも知名度のある深海魚さん。
広島の代名詞にしたい。
もはや語る必要もなく Windows Phone の人でありながら Windows 8の人でもあり、Flashの人のイメージはすでにない。
つまり、何をやらせてもすごい人なのである。たぶん。&lt;/p&gt;

&lt;h3 id=&#34;toro-kun-https-twitter-com-toro-kun:001820ec75feeaa012aaf20c94eb98e6&#34;&gt;&lt;a href=&#34;https://twitter.com/Toro_kun&#34;&gt;Toro_kun&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://great-h.github.io/&#34;&gt;すごい広島&lt;/a&gt;発起人のひとりのはず。
現状、日本Androidの会 中国支部における広島の実質的なリーダーとも言えそう
ハードからWeb系まで幅広くカバーしていて、広島で node.js やってると公言している数少ないエンジニア。
音ゲークラスタ。&lt;/p&gt;

&lt;h3 id=&#34;hanapage-https-twitter-com-hanapage:001820ec75feeaa012aaf20c94eb98e6&#34;&gt;&lt;a href=&#34;https://twitter.com/hanapage&#34;&gt;hanapage&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;コミュニティ活動という点においては、時間さえあれば何かを起こしそうな雰囲気がある。
3Dプログラミングに詳しい。
iOSの開発がメインのエンジニア。
きっとそのうち何か大きいことをしてくれるはず。&lt;/p&gt;

&lt;h3 id=&#34;wotani-https-twitter-com-wotani:001820ec75feeaa012aaf20c94eb98e6&#34;&gt;&lt;a href=&#34;https://twitter.com/woTani&#34;&gt;woTani&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;広島の勉強会に参加している人に、「Macに詳しい人教えて？iOSに詳しい人教えて？」と聞いて返ってくる名前ランキングなら間違いなく1位にランクインする。
&lt;a href=&#34;http://ja.wikipedia.org/wiki/WebObjects&#34;&gt;Web Objects&lt;/a&gt; に詳しい。
iOS SDK 開発勉強会の運営もしている。&lt;/p&gt;

&lt;h3 id=&#34;yampuu-https-twitter-com-yampuu:001820ec75feeaa012aaf20c94eb98e6&#34;&gt;&lt;a href=&#34;https://twitter.com/yampuu&#34;&gt;yampuu&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;デザイナー。デザイナーというにはプログラムが書け過ぎる。というわけで、例外的に紹介する。
彼のファンは多数存在し、利用者の視点で面白いものをいつも構築している。
たくさんの人が一目置いていて、間違いなく広島の代表。&lt;/p&gt;

&lt;h3 id=&#34;ogatomo-https-twitter-com-ogatomo:001820ec75feeaa012aaf20c94eb98e6&#34;&gt;&lt;a href=&#34;https://twitter.com/ogatomo&#34;&gt;ogatomo&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;私の知る限りでは、NeXTSTEP2OSX に次ぐ変態。
彼の説明はいつも丁寧で非常にわかりやすい。
いつもどこかで練習しているような風景がないので天賦の才を持ってるのかもしれない。&lt;/p&gt;

&lt;h3 id=&#34;souitirou-https-twitter-com-souitirou:001820ec75feeaa012aaf20c94eb98e6&#34;&gt;&lt;a href=&#34;https://twitter.com/souitirou&#34;&gt;souitirou&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;デザイナーだけど例外的に紹介する。
広島のデザイナーとエンジニアの中心点にいるのは間違いない。
最近ネタツイートが減ってしまっていて、惜しまれている姿をときどきみかける。
&lt;a href=&#34;http://webtouchmeeting.com/&#34;&gt;WEB TOUCH MEETING&lt;/a&gt; 代表にして、&lt;a href=&#34;http://cssnite.webtouchmeeting.com/&#34;&gt;CSS Nite in HIROSHIMA&lt;/a&gt; の実行委員長。&lt;/p&gt;

&lt;h3 id=&#34;yukilab-https-twitter-com-yukilab:001820ec75feeaa012aaf20c94eb98e6&#34;&gt;&lt;a href=&#34;https://twitter.com/yukilab&#34;&gt;yukilab&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Windows Phone ハンズオンのエースらしい。
その正体は不明ということにしておく。
つまり、広島のエースといってしまってもいいのではないか。
最近デスマ気味のようであまり見かけなくて残念。
広島のエース決定戦をするころには復活していて欲しい。&lt;/p&gt;

&lt;h3 id=&#34;ykumano-https-twitter-com-ykumano:001820ec75feeaa012aaf20c94eb98e6&#34;&gt;&lt;a href=&#34;https://twitter.com/ykumano&#34;&gt;ykumano&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;最近は mruby をいじっていた印象。
組み込みエンジニアで、Haskellにも手を出したり(出させたが正しいかもしれない)幅広い見識を持つ。
ゲーム作るのが趣味と聞いてる。&lt;/p&gt;

&lt;h3 id=&#34;jmettraux-https-twitter-com-jmettraux:001820ec75feeaa012aaf20c94eb98e6&#34;&gt;&lt;a href=&#34;https://twitter.com/jmettraux&#34;&gt;jmettraux&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;プロのRuby使い。
けど仕事都合で最近はMS系をいじっているらしい。
とあるコワーキングスペースで最近よく会う。
たくさんの成果物があり、&lt;a href=&#34;http://ruote.rubyforge.org/&#34;&gt;ruote&lt;/a&gt;が有名。
実はスイス人。&lt;/p&gt;

&lt;h3 id=&#34;takatayoshitake-https-twitter-com-takatayoshitake:001820ec75feeaa012aaf20c94eb98e6&#34;&gt;&lt;a href=&#34;https://twitter.com/takatayoshitake&#34;&gt;takatayoshitake&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;広島で勉強会に参加していれば知らない人はいないっといっても過言ではない。
勉強会に行くと会える人ランキング第一位にランクイン。
広島の支える技術&amp;lt;ヒト&amp;gt;。
いろんなコミュニティが彼によって支えられています。&lt;/p&gt;

&lt;h3 id=&#34;eielh-https-twitter-com-eielh:001820ec75feeaa012aaf20c94eb98e6&#34;&gt;&lt;a href=&#34;https://twitter.com/eielh&#34;&gt;eielh&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;{ この部分はあなたが埋めてください }&lt;/p&gt;

&lt;h3 id=&#34;まとめ:001820ec75feeaa012aaf20c94eb98e6&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;ややネタも盛り込んで、ふざけた書き方をしているところもあるかもしれませんが、みんな素晴しい人です。
あと勝手に紹介しているので、「この紹介はちょっと…」とかあれば、石を投げてください。
甘んじて血だらけになります。ごめんなさい。(痛い痛い)&lt;/p&gt;

&lt;p&gt;学生も何人か書いてたのだけど、やっぱり削りました。
奴らは優秀なのでここで紹介しなくても勝手に有名になることでしょう。&lt;/p&gt;

&lt;p&gt;ざっと見直すと傾向として40代以下が多いです。
つまり、私の交流範囲がそうなっているからです。
もっともっと昔からいる&lt;strong&gt;すごい人&lt;/strong&gt;が広島には存在しているはずです。
なので、ぜひあなたの「今すぐフォローしたい！？すごい Twitter のユーザ」にチャレンジして、紹介してください。
結果、広島のコミュニティがもっと活発になると嬉しいよね。
楽しみにしてます。&lt;/p&gt;

&lt;p&gt;ちなみにこの Twitter ユーザを紹介するというのは安易に決めたわけですが、書いてみるとやめたくなります。
公開で人を評価するというのは怖いですね。
勇気と度胸がいります。&lt;/p&gt;

&lt;p&gt;明日のすごい広島 Advent Calendar の担当者は &lt;a href=&#34;http://www.adventar.org/users/327?year=2013&#34;&gt;Tama Eguchi&lt;/a&gt; さんです。
楽しみですね。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Dart で遊んだ</title>
          <link>https://blog.eiel.info/blog/2013/11/27/dart/</link>
          <pubDate>Wed, 27 Nov 2013 20:32:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/11/27/dart/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://www.dartlang.org&#34;&gt;Dart&lt;/a&gt; の 1.0 がリリースされたらしい。
ということで、2013年11月の&lt;a href=&#34;http://twitter.com/hwebsys&#34;&gt;広島Webシステム開発&lt;/a&gt;で遊びました。&lt;/p&gt;

&lt;p&gt;基本的には &lt;a href=&#34;https://www.dartlang.org/codelabs/darrrt/&#34;&gt;Try Dart&lt;/a&gt; を写経しました。&lt;/p&gt;

&lt;p&gt;ウェブサイトから「Dart Editor」や「dart VMを組み込んだ chromium」や「JavaScriptに変換する dart2js」などなど一式含んだファイルをダウンロードできます。
Dart Editor を使えばすぐに Dart をはじめることができます。
ウェブアプリケーションも作成できますし、コンソールアプリケーションも作成できます。
コンソールアプリケーションは &lt;code&gt;dart&lt;/code&gt; という実行ファイルが添付されているのでここから実行できます。&lt;/p&gt;

&lt;p&gt;また、添付されている chromium も Dart VM を組み込みした特別なものみたいなので、Dartがいろんなブラウザで動くようになるのもまだまだ先になりそうです。
JavaScript に変換できるので、Dartで作成したアプリケーション自体は動かすことができるようですが、試していません。&lt;/p&gt;

&lt;p&gt;あとは &lt;a href=&#34;https://www.dartlang.org/codelabs/darrrt/&#34;&gt;Try Dart&lt;/a&gt; を試していて気づいたこと書いていきたいと思います。&lt;/p&gt;

&lt;h3 id=&#34;セミコロンは必須:16516880e9718d93ea0009140735fe71&#34;&gt;セミコロンは必須&lt;/h3&gt;

&lt;p&gt;セミコロンかくのめんどくさい。&lt;/p&gt;

&lt;h3 id=&#34;dart-editor:16516880e9718d93ea0009140735fe71&#34;&gt;Dart Editor&lt;/h3&gt;

&lt;p&gt;括弧とか「閉じ括弧」が補完されるようなものは入力が終わったときに TAB を押すと良い感じになるのを知った。
たぶん、eclipse はだいたいこのような挙動なのだろう。&lt;/p&gt;

&lt;h3 id=&#34;添付chromium-でも-bootstrap-に-javascript-が必要:16516880e9718d93ea0009140735fe71&#34;&gt;添付chromium でも bootstrap に JavaScript が必要&lt;/h3&gt;

&lt;p&gt;Dartでつくったウェブアプリケーションは HTML に packages/browser/dart.js という JavaScript を読み込んでいて JavaScript から Dart エントリポイントが呼び出されるようです。「なんだって!」って気分でした。&lt;/p&gt;

&lt;h3 id=&#34;他の-google-技術との親和性:16516880e9718d93ea0009140735fe71&#34;&gt;他の Google 技術との親和性&lt;/h3&gt;

&lt;p&gt;例えば &lt;a href=&#34;http://www.polymer-project.org&#34;&gt;Polymer&lt;/a&gt; がすでに &lt;a href=&#34;https://www.dartlang.org/polymer-dart/&#34;&gt;Polymer.dart&lt;/a&gt; としてポーティングされてたりする。
Polymer はチュートリアルにも登場する勢い。
&lt;a href=&#34;https://github.com/angular/angular.dart.tutorial/wiki&#34;&gt;Angular&lt;/a&gt;もすでに利用できるみたい。&lt;/p&gt;

&lt;h3 id=&#34;演算子:16516880e9718d93ea0009140735fe71&#34;&gt;&lt;code&gt;..&lt;/code&gt; 演算子&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;..&lt;/code&gt; という演算子がいる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;genButton..disabled = false
         ..text = &#39;Aye! Gimme a name!&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;.&lt;/code&gt; とほとんど同じなのだけど、&lt;code&gt;..&lt;/code&gt; を使うとメソッドの戻り値を無視して &lt;code&gt;genButton&lt;/code&gt; を返す感じになるようです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;genButton.disabled = false;
genButton.text = &#39;Aye! Gimme a name!&#39;;
genButton
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と書いているのとほとんど同じ状態のようです。&lt;/p&gt;

&lt;p&gt;代入するメソッドは void を返すのでメソッドチェーンできませんが、&lt;code&gt;..&lt;/code&gt; があればメソッドチェーンできるようです。&lt;/p&gt;

&lt;h3 id=&#34;import-show:16516880e9718d93ea0009140735fe71&#34;&gt;import show&lt;/h3&gt;

&lt;p&gt;import する時に名前空間をちらかさないようにできるみたいです。&lt;/p&gt;

&lt;p&gt;具体例&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import &#39;dart:math&#39; show Random;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;dart:math から Random というクラスかなにか知らないけど、そこだけ取り出せるようです。
Haskell にも同様の機能がありましたね。&lt;/p&gt;

&lt;h3 id=&#34;ファクトリメソッドが書きやすいらしい:16516880e9718d93ea0009140735fe71&#34;&gt;ファクトリメソッドが書きやすいらしい。&lt;/h3&gt;

&lt;p&gt;写経した中に、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PirateName.fromJSON(String jsonString) {
  Map storedName = JSON.decode(jsonString);
  _firstName = storedName[&#39;f&#39;];
  _appellation = storedName[&#39;a&#39;];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という部分があってクラスメソッドのように見えるんだけど、これから作成するインスタンスのフィールドにアクセスできてる。
別のサンプルで factory というキーワードをみかけたので、そういった機能なのだと思いつつ眺めていた。&lt;/p&gt;

&lt;h3 id=&#34;ローカルストレージがあつかいやすい:16516880e9718d93ea0009140735fe71&#34;&gt;ローカルストレージがあつかいやすい？&lt;/h3&gt;

&lt;p&gt;言われるがままに写経してたけども、ローカルストレージを使うサンプルがあっさりと実装できた。JavaScriptでかくとどうなるのか調べて比較したいけど、そんな余裕はなかった。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:16516880e9718d93ea0009140735fe71&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;まだまだ実際には使いづらいですが、外堀は着々と進んでいる印象を持ちました。&lt;/p&gt;

&lt;h3 id=&#34;関連:16516880e9718d93ea0009140735fe71&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/05/31/polymer/&#34;&gt;Polymer という Web Componets のラッパーを試した&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2012/07/26/angularjs-abc/&#34;&gt;AngularJSで遊んだときのメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>RubyKaja 2013 に選ばれたんだ</title>
          <link>https://blog.eiel.info/blog/2013/11/22/rubykaja-2013/</link>
          <pubDate>Fri, 22 Nov 2013 00:44:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/11/22/rubykaja-2013/</guid>
          <description>

&lt;p&gt;そういえば &lt;a href=&#34;http://kaja.rubyist.net/2013/kaja&#34;&gt;RubyKaja 2013&lt;/a&gt; に選ばれました。&lt;/p&gt;

&lt;p&gt;RubyKaja はコミュニティごとに選出されます。
選出したコミュニティは&lt;a href=&#34;http://hiroshimarb.github.io/&#34;&gt;Hiroshima.rb&lt;/a&gt;さんです。
「&lt;strong&gt;なぜ選ばれたのかわからない!!&lt;/strong&gt;」なんてことはなく、コミュニティの会場準備係(言いだしっぺ)だからでしょう。
そんなわけで選出の際にあえて自分が選ばれにくい方法考えたのですが、&lt;strong&gt;見事に失敗しました。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ということで、2014年も RubyKaja の選出があるはずです。
私がやるべきことは、** RubyKaja に選ばれたい人を増やすということでしょう。**
盛り上げていこう。&lt;/p&gt;

&lt;p&gt;2013年の Ruby Kaja はなんと &lt;a href=&#34;http://rubykaigi.org/2013&#34;&gt;RubyKaigi2013&lt;/a&gt; で授賞式が行われました。
たくさんの Rubylist がいるなかで祝われます。&lt;small&gt;(行けなかったので雰囲気はよく知らないし、岡山を除くと県外にほとんど知り合いがいないので私の紹介の時は静かだったという噂もありますが。)&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;ちなみに、RubyKaigi 2013 は5月末にありました。なぜ今頃、私は記事を書いているのでしょうか。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;答えはノベルティが届いたからです。&lt;/strong&gt;
&lt;del&gt;&lt;small&gt;いやだってなんかないと実感湧かないし、記事だって書けないじゃん&lt;/small&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;刮目せよ。このカッコイイ扇子とカッコイイステッカーを!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/rubykaja/rubykaja.jpg&#34; alt=&#34;RubyKaja&#34; /&gt;&lt;/p&gt;

&lt;p&gt;扇子のほうのRubyKaja という文字が見えづらい…。&lt;/p&gt;

&lt;p&gt;まあいいや、MacBook に貼りつけてみよう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/rubykaja/seal.jpg&#34; alt=&#34;RubyKaja&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;読みかけの「プログラマのためのSQL」が眩しいですね。&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;どうでしょうか、皆様。たぶん13枚しかないRubyKaja2013と&lt;a href=&#34;https://twitter.com/kakenavi&#34;&gt;かけなび&lt;/a&gt;シールです。&lt;/p&gt;

&lt;p&gt;そう、今ここに「&lt;strong&gt;私だけの Mac子さんが今誕生した&lt;/strong&gt;」&lt;/p&gt;

&lt;p&gt;しばらくは&lt;strong&gt;扇子の自慢をすることで RubyKaja 2014 を盛り上げて&lt;/strong&gt;いきたいと思います。
あと RubyKaigi に行く方法も考えたい。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:587d70d8302ea75f5e2cd1286859ee17&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Ruby 盛り上げようぜ。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;small&gt;ちなみにわかると思いますが、ステッカーは乗せてるだけで、まだ貼ってない。&lt;/small&gt;&lt;/del&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>GitHub からの通知が迷惑メールになった - 見ないリポジトリは unwatch しよう</title>
          <link>https://blog.eiel.info/blog/2013/11/21/github-notifications-is-not-spam/</link>
          <pubDate>Thu, 21 Nov 2013 12:11:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/11/21/github-notifications-is-not-spam/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://great-h.github.io/&#34;&gt;すごい広島&lt;/a&gt;での出来事である。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://f.cloud.github.com/assets/118150/1581675/5df81d52-51db-11e3-846a-64bcfc0ad0f7.png&#34; alt=&#34;すごい広島のIssueの通知メールが迷惑メールに&#34; /&gt;&lt;/p&gt;

&lt;p&gt;いつかなる気がしていた。
GitHub からの通知のメールが迷惑メールとして判定された。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;多数のユーザが同様のメッセージを迷惑メールとして報告しています。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;迷惑ならそもそも通知が来ないようにするか、単に自動でアーカイブするようにして欲しいですね。&lt;strong&gt;迷惑メール報告すること自体が迷惑になります。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;私が知る限りの通知の設定方法を紹介しておきます。
GitHub は常に進化しているので、動作や画面はいずれ変わってしまうかもしれません。&lt;/p&gt;

&lt;h3 id=&#34;そもそもの通知設定:54d721771d76678b55dcd7bae2530e64&#34;&gt;そもそもの通知設定&lt;/h3&gt;

&lt;p&gt;「GitHub からメールに通知して欲しくないよ!」という人は基本的な設定を見直しましょう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/settings/notifications&#34;&gt;Noticification Center&lt;/a&gt;にアクセスをします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/2013-11-21/notification_center.png&#34; alt=&#34;Notification Center&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;設定&lt;/code&gt; &amp;gt; &lt;code&gt;Notification Center&lt;/code&gt; でアクセスすることができます。
&lt;small&gt;自分が参加しているグループがだだ漏れですが、特に隠しません。&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;How you receive notifications&lt;/code&gt; に注目してください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/2013-11-21/how_you_receive_notifications.png&#34; alt=&#34;どのように通知をうけとるか設定する画面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;「通知をどのように受信するか」を設定します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Participating&lt;/li&gt;
&lt;li&gt;Watching&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の二種類があります。&lt;/p&gt;

&lt;p&gt;Participating のほうは &lt;code&gt;@自分のGitHub ID&lt;/code&gt; が付いているような「自分が参加しているところに変化があった時」にどこに通知するかを設定できます。&lt;/p&gt;

&lt;p&gt;Watching のほうは GitHub にリポジトリを &lt;code&gt;watch&lt;/code&gt;する機能があり、「&lt;code&gt;watch&lt;/code&gt; してるものに変化があった時」にどこに通知するかを設定できます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Email&lt;/code&gt; のチェックを外せばメールは届かなくなるでしょう。そうではなくて、一部のリポジトリが活発すぎてついていけない場合もあります。
そのリポジトリを &lt;code&gt;unwatch&lt;/code&gt; することで調整できます。これについては後述します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Email&lt;/code&gt; という項目の他にも &lt;code&gt;Web&lt;/code&gt; という項目があります。Web での通知は画面左上にあります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/2013-11-21/web_notification.png&#34; alt=&#34;通知場所&#34; /&gt;&lt;/p&gt;

&lt;p&gt;クリックすれば通知内容を確認できます。&lt;/p&gt;

&lt;h3 id=&#34;リポジトリのウォッチ:54d721771d76678b55dcd7bae2530e64&#34;&gt;リポジトリのウォッチ&lt;/h3&gt;

&lt;p&gt;リポジトリが活発すぎて、そのリポジトリの通知はちょっと見てる余裕がない場合はリポジトリを &lt;code&gt;unwatch&lt;/code&gt; しましょう。
あるチームにいつの間にか入れらたしまった場合、自動的に &lt;code&gt;watch&lt;/code&gt; されてしますので、こういうことがあります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/2013-11-21/repository_watch.png&#34; alt=&#34;リポジトリのウォッチ&#34; /&gt;&lt;/p&gt;

&lt;p&gt;これは &lt;code&gt;watch&lt;/code&gt; している状態です。
外す場合は、&lt;code&gt;Unwatch&lt;/code&gt; を選択して &lt;code&gt;Not watching&lt;/code&gt; を選びます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/2013-11-21/not_watching.png&#34; alt=&#34;ウォッチしない画面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;自分のGitHub IDが登場しない限りは通知がこなくなります。
自分が呼ばれていれば通知がきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not watching&lt;/li&gt;
&lt;li&gt;Watching&lt;/li&gt;
&lt;li&gt;Ignoring&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の三種類あります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Watching&lt;/code&gt; は push した情報が自分の news feed (Twitter のタイムラインのようなもの)に push されたことが表示されたりもするようになります。
誰かが面白いことを始めたらすかさず &lt;code&gt;Watch&lt;/code&gt; することオススメしたいです。
開発な活発リポジトリを追うのは大変なので、ほどほどに調整したほうが良いでしょう。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Ignoring&lt;/code&gt; は自分のIDが書かれても無視されるようになります。
迷惑行為にされない限りはしなくて良いように思います。&lt;/p&gt;

&lt;h3 id=&#34;issue-ごとの設定:54d721771d76678b55dcd7bae2530e64&#34;&gt;Issue ごとの設定&lt;/h3&gt;

&lt;p&gt;別にそのリポジトリを追うこと自体は問題ないんだけど、自分には関係ない話題だとはっきりわかっている Issue の通知を止めることができます。&lt;/p&gt;

&lt;p&gt;Issue の下部にいくと下図のようなものがあります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/2013-11-21/issue_mute.png&#34; alt=&#34;Isuue のミュート&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mute&lt;/code&gt; をクリックすると通知が来なくなります。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:54d721771d76678b55dcd7bae2530e64&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;本来は必要としている人がいるメールが迷惑メールとして判定されてしまうことがあります。これは「迷惑メールでないものを迷惑メールとする迷惑行為」が存在するからです。
GitHub には柔軟とは言えるか難しいですが、迷惑行為をしないように、最適な通知設定を模索してみましょう。&lt;/p&gt;

&lt;h3 id=&#34;関連記事:54d721771d76678b55dcd7bae2530e64&#34;&gt;関連記事&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/05/13/how-to-enjoy-github/&#34;&gt;Github の楽しみ方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/02/06/how-to-use-github/&#34;&gt;Git がわからなくても Github を利用しよう&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>やっと Chef Solo はじめた</title>
          <link>https://blog.eiel.info/blog/2013/11/13/abc-chef-solo/</link>
          <pubDate>Wed, 13 Nov 2013 18:28:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/11/13/abc-chef-solo/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://great-h.github.io/events/event-026.html&#34;&gt;すごい広島 #26&lt;/a&gt; にて、書いている。&lt;/p&gt;

&lt;p&gt;すこし前に chef-solo で遊んだので、その時思ったことを書いておく。
自分が考えたことが書いてあるだけなので、不正確な内容も含むかもしれません。&lt;/p&gt;

&lt;p&gt;主な参考文献は以下。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B00BSPH158/ref=as_li_ss_til?tag=eiel-22&amp;amp;camp=1027&amp;amp;creative=7407&amp;amp;linkCode=as4&amp;amp;creativeASIN=B00BSPH158&amp;amp;adid=153X49YMKHPZN8FFFA70&amp;amp;&#34;&gt;入門 Chef Solo - Infrastructure as Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/taiki45/items/b46a2f32248720ec2bae&#34;&gt;今っぽい Vagrant + Chef Solo チュートリアル - Qiita - taiki45&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「今っぽい Vagrant + Chef Solo チュートリアル」は「入門 Chef Solo」の内容を踏まえた上で、最近の動向も押えてて参考になりました。&lt;/p&gt;

&lt;h3 id=&#34;目的:f97c7bc8b16df0444fa9136284c4aad4&#34;&gt;目的&lt;/h3&gt;

&lt;p&gt;chef-solo を試す上で、
一番の目的は「リモートサーバの設定反映をコマンドを一つ実行すれば済むようにしたい」ということでした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ knife solo cook ホスト名
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このコマンドをローカルマシンで実行すると、「ホスト名」が示すサーバの設定をできるようにしました。&lt;/p&gt;

&lt;p&gt;また、「入門 Chef Solo」では、ローカルマシンでテストするにも &lt;code&gt;knife solo&lt;/code&gt; を利用していた点が気になっていました。そこは別にしたかったので、&lt;code&gt;vagrant&lt;/code&gt; の機能を利用して、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant provision
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、済むようにしました。&lt;/p&gt;

&lt;h3 id=&#34;成果物:f97c7bc8b16df0444fa9136284c4aad4&#34;&gt;成果物&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/cookbook-munin-example&#34;&gt;GitHub の eiel/cookbook-munin-example&lt;/a&gt; に置いています。
使い方も README.md に書いています。&lt;/p&gt;

&lt;p&gt;なぜ munin かというと、munin のインストールが必要だったからです。&lt;/p&gt;

&lt;p&gt;上記のリポジトリは必要なツールがそろっていれば &lt;code&gt;git clone&lt;/code&gt; して &lt;code&gt;vagrant up&lt;/code&gt; すれば、&lt;code&gt;chef-solo&lt;/code&gt; が走り、設定の終わった仮想マシンが立ち上がります。&lt;/p&gt;

&lt;p&gt;Cookbook を修正して、再実行する際には &lt;code&gt;vagrant provision&lt;/code&gt; とすれば反映できます。&lt;/p&gt;

&lt;h3 id=&#34;chef-solo-を実行について:f97c7bc8b16df0444fa9136284c4aad4&#34;&gt;chef-solo を実行について&lt;/h3&gt;

&lt;p&gt;chef-solo の実行には、固有情報を記述した「JSONファイル」が必要になります。
「JSONファイル」はエントリーポイントのような位置づけで、実行するレシピの記述ができます。
Cookbook は汎用的なライブラリのようなもので、プログラミングに例えると「引数を与える必要があったり、呼び出すメソッドを指定する」必要があり、そういった指定するためのものが、「JSONファイル」になります。
設定ファイルとも言えます。&lt;/p&gt;

&lt;h3 id=&#34;cookbook-について:f97c7bc8b16df0444fa9136284c4aad4&#34;&gt;Cookbook について&lt;/h3&gt;

&lt;p&gt;以下は Chef 使ってみた結果で構築された個人のイメージを記述します。&lt;/p&gt;

&lt;p&gt;Chef を Ruby におきかえると Cookbook に相当するのが gem です。
Rubygems ではなく、ひとつの gem です。&lt;/p&gt;

&lt;p&gt;Chef を試すときに最初に作成する &lt;code&gt;Cookbooks&lt;/code&gt; (複数形のほう)  は gem を保存しておく場所と考えると良いと思いました。
Chef を使う場合は、トップレベルのスクリプトを書くところがなく、いきなりディレクトリ構造の整理した場所にコードを書かされます。&lt;/p&gt;

&lt;p&gt;別の誰かが書いた Cookbook を使う場合は、「JSONファイル」の run_list にレシピを指定するだけで chef を利用できるわけです。
Cookbook はいろんなレシピをまとめていて、Chef を Ruby に置き換えると「レシピはクラスのようなもの」です。
gem 添付されているクラスを使うかどうかは、コードを書くときに決めることです。
chef だと run_list にかくことで使われます。&lt;/p&gt;

&lt;p&gt;つまり Cookbook を書くというのは、いきなり gem を作るような感じになります。&lt;br&gt;
なるほど、これは難しい。&lt;/p&gt;

&lt;h3 id=&#34;knife-solo-について:f97c7bc8b16df0444fa9136284c4aad4&#34;&gt;knife solo について&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;knife solo&lt;/code&gt; は &lt;code&gt;chef solo&lt;/code&gt; を外部サーバで実行するためのツールです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;chef solo&lt;/code&gt; を実行するには、設定したいサーバにログインして、利用する Cookbook をダウンロードして、jsonファイルを用意します。
これはめんどくさいので、リモートサーバを指定して、用意している Cookbook をアップロードして、リモートサーバで &lt;code&gt;chef solo&lt;/code&gt; を実行します。&lt;/p&gt;

&lt;h3 id=&#34;なぜ-knife-solo-でテストの実行をしたくないか:f97c7bc8b16df0444fa9136284c4aad4&#34;&gt;なぜ knife solo でテストの実行をしたくないか&lt;/h3&gt;

&lt;p&gt;Vagrant にIPアドレスを設定する必要があり、「JSONファイル」をコミットしなければならなかったからです。
&lt;code&gt;IPアドレス.json&lt;/code&gt; ファイルをgitリポジトリにコミットするのが嫌でした。&lt;/p&gt;

&lt;p&gt;vagrant の box に chef がインストールしなければいけない問題は &lt;a href=&#34;https://github.com/schisamo/vagrant-omnibus&#34;&gt;vagrant-omnibus&lt;/a&gt; プラグインで解決しました。
このプラグインは &lt;code&gt;vagrant up&lt;/code&gt; した際に、chef がインストールされていない場合にインストールしてくれます。&lt;/p&gt;

&lt;h3 id=&#34;provider:f97c7bc8b16df0444fa9136284c4aad4&#34;&gt;provider&lt;/h3&gt;

&lt;p&gt;レシピで使える命令を追加できる Chef の機能です。
名前空間が Cookbook ごとに閉じているようで、利用したいクックブックの &lt;code&gt;metadata.rb&lt;/code&gt; に記述しておかなければ、追加命令が使えません。
ちなみに、事前にそのクックブックのレシピを実行していれば、利用できました。はまる原因になりそうなので、&lt;code&gt;metadata.rb&lt;/code&gt;には、ちゃんと書いたほうが良いと思います。&lt;/p&gt;

&lt;h3 id=&#34;vagrant-ssh:f97c7bc8b16df0444fa9136284c4aad4&#34;&gt;vagrant ssh&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;vagrant ssh&lt;/code&gt; には &lt;code&gt;--&lt;/code&gt; につづいて ssh の引数を追加できます。&lt;/p&gt;

&lt;p&gt;vagrant にホストオンリーアクセスできるように指定してないので、とりあえず、これを利用してサーバのサービスにアクセスしてます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant ssh -- -L 4000:localhost:80
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としておけば、 &lt;code&gt;https://localhost:4000/&lt;/code&gt; で、Webサーバにアクセスできます。
若干めんどくさい…。&lt;/p&gt;

&lt;h3 id=&#34;vgrant-provision:f97c7bc8b16df0444fa9136284c4aad4&#34;&gt;vgrant provision&lt;/h3&gt;

&lt;p&gt;vgrant provision で使う「JSONファイル」は用意する必要がなく、Vagrantfile に同等の記述を行います。&lt;/p&gt;

&lt;p&gt;以下の風に書いている。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config.vm.provision :chef_solo do |chef|
  chef.cookbooks_path = [&amp;quot;cookbooks&amp;quot;, &amp;quot;site-cookbooks&amp;quot;]
  chef.add_recipe &amp;quot;munin&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;knife-solo をベースしたリポジトリになっているので &lt;code&gt;site-cookbooks&lt;/code&gt; を追加しています。
ひとつの cookbook を書くためのリボジトリであれば、不必要でしょう。&lt;/p&gt;

&lt;p&gt;site-cookbooks にあるファイルを汎用化してきたら、個別のリポジトリをつくると良さそうです。&lt;/p&gt;

&lt;h3 id=&#34;その他:f97c7bc8b16df0444fa9136284c4aad4&#34;&gt;その他&lt;/h3&gt;

&lt;p&gt;Databags や Attributes, librarian-chef も試したけど記憶からすでにない…。
serverspec はまだ試せてない。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>GitHub で SSH 接続できなくなった。SSH をつかった場合に高速化する設定が原因だった。</title>
          <link>https://blog.eiel.info/blog/2013/11/09/no-mathcing-cipher-found-on-github/</link>
          <pubDate>Sat, 09 Nov 2013 14:05:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/11/09/no-mathcing-cipher-found-on-github/</guid>
          <description>&lt;p&gt;さっき、GitHub に push しようとしたら下記のエラーが発生した。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;no matching cipher found: client arcfour256 server aes128-ctr,aes192-ctr,aes256-ctr,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;「&lt;code&gt;arcfour256&lt;/code&gt; に対応してねーよ」ってことが書かれている。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;~/.ssh/config&lt;/code&gt; を確認したら&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Host github.com
  Compression yes
  Ciphers arcfour256
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;思いっきり自分で指定しています。&lt;/p&gt;

&lt;p&gt;設定した記憶もないし、&lt;code&gt;arcfour256&lt;/code&gt; ってなんだっけなとググると「GitHub で ssh をつかっていると遅くなるから、こういう設定したら速くなるよ」という記事がでてきた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tech.nitoyon.com/ja/blog/2013/01/11/github-clone-http/&#34;&gt;GitHub で clone するときは SSH じゃなく HTTP を使ったほうが高速 - てっく煮ブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「なるほど、設定をコピペしたから記憶に残ってないんだ」と、思った。
コピペした設定は、ちゃんと勉強した上で使わないとダメですね。&lt;/p&gt;

&lt;p&gt;そんな感想を抱いた。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>広島Ruby勉強会 #035 に参加したり、喋ったりした。</title>
          <link>https://blog.eiel.info/blog/2013/11/03/hiroshimarb-35/</link>
          <pubDate>Sun, 03 Nov 2013 01:01:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/11/03/hiroshimarb-35/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://hiroshimarb.github.io/blog/2013/11/02/hiroshimarb-35/&#34;&gt;広島Ruby勉強会 #035&lt;/a&gt;に参加してきました。&lt;/p&gt;

&lt;p&gt;リンク貼っておいてあれですが&lt;a href=&#34;https://github.com/hiroshimarb/hiroshimarb.github.com/wiki/2013年11月の活動&#34;&gt;GitHubのWiki&lt;/a&gt;のほうが情報が多いです。&lt;/p&gt;

&lt;p&gt;さて、今回は3つスライドを作るという暴挙に出ました。ひとつひとつに時間を割けられないので、たくさん作るのはよくないと思いました。&lt;/p&gt;

&lt;h3 id=&#34;hiroshima-rb-について:654ec645fbf39db60b2aae5b3ed35a6f&#34;&gt;Hiroshima.rb について&lt;/h3&gt;

&lt;p&gt;Hiroshima.rb の説明もだんだん何をしていいのか忘れてきそうなので、誰か作れよ。ということで作りました。
現在の広島Ruby勉強会が大事にしていることも付け足しておきました。&lt;/p&gt;

&lt;iframe src=&#34;http://www.slideshare.net/slideshow/embed_code/27836277&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;https://www.slideshare.net/TomohikoHimura/hiroshimarb&#34; title=&#34;Hiroshimarbについて&#34; target=&#34;_blank&#34;&gt;Hiroshimarbについて&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/TomohikoHimura&#34; target=&#34;_blank&#34;&gt;Tomohiko Himura&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

数学文章作法を取り上げていますが、情報発信をする上で **数学の文章でなくても** 参考になる部分があると思います。

または、「数学ガールの誕生」という本があって、これは結城浩さんの講演を本にしたものです。これもたくさん大事なことが書かれていておすすめです。
その場で結城浩さんがセッションしているかのように感じてしまう丁寧な作りの本です。

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=eiel-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=448009525X&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=eiel-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4797373253&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;ちなみに、&lt;a href=&#34;https://gist.github.com/eiel/7234071&#34;&gt;スライドにする前の原稿がGistにあります。&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;コンピュータをもっと使おう:654ec645fbf39db60b2aae5b3ed35a6f&#34;&gt;コンピュータをもっと使おう&lt;/h3&gt;

&lt;p&gt;これは広島Ruby勉強会はやや難しいという意見が多いので、プログラミング初心者が気軽に聞ける話をしようと試みてみました。
何をやろうか悩んでるうちにどんどん対象者のレベルが下がってこんな形になりました。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;http://www.slideshare.net/slideshow/embed_code/27830820&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;https://www.slideshare.net/TomohikoHimura/ss-27830820&#34; title=&#34;コンピュータをもっと使おう&#34; target=&#34;_blank&#34;&gt;コンピュータをもっと使おう&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/TomohikoHimura&#34; target=&#34;_blank&#34;&gt;Tomohiko Himura&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;個人的には、「どんな人でも簡単なプログラミングをするような世界になると良いなぁ」と、思ってたので、その辺りを伝えてみました。
Ver 0.1 なのはブラッシュアップしてもうちょっとちゃんとした形にしたいという考えです。毎月バージョンアップしていきたい。&lt;/p&gt;

&lt;p&gt;あまり時間をかけていないので、聞き手のことをしっかりと考えられてない感がまだまだあります。
もっと修行します。&lt;/p&gt;

&lt;h3 id=&#34;つながりをゆるふわにしよう-activesupprt-nnotifications:654ec645fbf39db60b2aae5b3ed35a6f&#34;&gt;つながりをゆるふわにしよう ActiveSupprt::Nnotifications&lt;/h3&gt;

&lt;p&gt;Rails のソースコードをちょっとづつ読んでいるので、その成果発表を毎月やっています。
今回は AcitveSupport::Notifications を取り上げました。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;http://www.slideshare.net/slideshow/embed_code/27836483&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;https://www.slideshare.net/TomohikoHimura/active-supprt-notifications&#34; title=&#34;つながりをゆるふわにしよう Active supprt notifications&#34; target=&#34;_blank&#34;&gt;つながりをゆるふわにしよう Active supprt notifications&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/TomohikoHimura&#34; target=&#34;_blank&#34;&gt;Tomohiko Himura&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;これも&lt;a href=&#34;https://gist.github.com/eiel/7177959&#34;&gt;スライドにした原稿をGistに公開しています。&lt;/a&gt;スライドではかなり修正しているし、typoも結構あってなおさないといけないですが、まだなおしていない。
喋らなかったこともあるし、そもそもかなり早口で喋ったのでも再確認したい場合にどうぞ。&lt;/p&gt;

&lt;h3 id=&#34;その他のセッション:654ec645fbf39db60b2aae5b3ed35a6f&#34;&gt;その他のセッション&lt;/h3&gt;

&lt;p&gt;今回はいつもより参加者が多くて19人でいつもより盛り上がりを見せていたと思います。
僕のテンションは暴走しないように低めでした。むしろ、低すぎた感。&lt;/p&gt;

&lt;h4 id=&#34;railsとawsで業務システムを構築してみた:654ec645fbf39db60b2aae5b3ed35a6f&#34;&gt;RailsとAWSで業務システムを構築してみた&lt;/h4&gt;

&lt;p&gt;Rails, AWS, CI モダンな開発手法を試しつつ、毎月どのような感じになっているか報告されてます。ナイスジョブ。
リリースが近いということで実務的な問題への対処が出てきていました。
capistrano ではまる人が多いのはそれだけドキュメントがそろってないってことだと、これを書いてる時に思いました。&lt;/p&gt;

&lt;p&gt;気になった点はスライドのどこ部分を話してるか強調すると良いな、と思いました。&lt;/p&gt;

&lt;h4 id=&#34;時代はmiddleman:654ec645fbf39db60b2aae5b3ed35a6f&#34;&gt;時代はMiddleman&lt;/h4&gt;

&lt;p&gt;Jekyll や Octopress を試してそこから Middleman に移行したらすごくよかった。という話でした。
しかし、あえて厳しいことをいうと、どのあたりが他よりよかったのかよくわからなかった。ちゃんと聞いてなかっただけかもしれないけど。&lt;/p&gt;

&lt;p&gt;jekyll と比べると silm やら sass やらが使いやすいし、自動更新あたりも便利らしいですね。(よくしらない)
あと「すごい広島」などの固有名詞が唐突に出てきすぎなのでその辺は気をつけたほうがよいと思います。&lt;/p&gt;

&lt;h4 id=&#34;chefについてなんか話そうかな:654ec645fbf39db60b2aae5b3ed35a6f&#34;&gt;Chefについてなんか話そうかな&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/ogatomo&#34;&gt;ogatomo&lt;/a&gt; さんのセッションわかりやすい。
素晴しい。chef まだつかってないけど、自分の中でモヤっとしてた部分がはっきりしました。お仕事大変な時期なのにありがとうございます。&lt;/p&gt;

&lt;h4 id=&#34;ruby-on-railsで自サバを立ててみた-仮:654ec645fbf39db60b2aae5b3ed35a6f&#34;&gt;Ruby on Railsで自サバを立ててみた。(仮）&lt;/h4&gt;

&lt;p&gt;初心者の見本セッションとしては素晴しいけど、主張したいところが曖昧な感じがするので、そこをうまくやるとなおよくなりそうです。&lt;/p&gt;

&lt;h4 id=&#34;身近で実際に起きているセキュリティの話:654ec645fbf39db60b2aae5b3ed35a6f&#34;&gt;身近で実際に起きているセキュリティの話&lt;/h4&gt;

&lt;p&gt;セキュリティに対する危機感がみんな足りてるのか足りてないのかよくわからない状況を最近おもしろくブログにしています。
その人とこのセッションはまったく関係ありません。
ついつい、リテラシーが高くない人には「ああ、うん、それでいいです」となりがちなので注意したいところ。サービスごとにパスワードは変えましょう。&lt;/p&gt;

&lt;h4 id=&#34;12月について:654ec645fbf39db60b2aae5b3ed35a6f&#34;&gt;12月について&lt;/h4&gt;

&lt;p&gt;今年もはじまったぜ Advent Calendar な時期らしいです。
&lt;a href=&#34;http://www.adventar.org/calendars/74&#34;&gt;今年も広島のAdevent Calendar があるらしいです。&lt;/a&gt;
個人的にはこういう緩めのセッションばかり聞いていたい。&lt;/p&gt;

&lt;h4 id=&#34;akira345-さん:654ec645fbf39db60b2aae5b3ed35a6f&#34;&gt;@akira345 さん&lt;/h4&gt;

&lt;p&gt;セッションの名前が思い出せない。ここ最近のクラウドまわりのツールの実験報告です。
ここを押えてる人がまわりに少ないので参考になりますです。
忙しい中ありがとうございます。
しかし、みんな日々スキルアップしている。&lt;/p&gt;

&lt;h4 id=&#34;railsのよいところとか:654ec645fbf39db60b2aae5b3ed35a6f&#34;&gt;Railsのよいところとか&lt;/h4&gt;

&lt;p&gt;正式なタイトルは全然違うけど、Railsの良いと思ってるところの話が聞けました。
スライドの作り込みが安定していたし、次回も挑戦していただけるのでとても楽しみです。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:654ec645fbf39db60b2aae5b3ed35a6f&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;来月も参加しようと思うので、来月も準備をがんばってください。
いつもありがとうございます。Hiroshima.rbの中の人。&lt;/p&gt;

&lt;p&gt;広島がもう少し盛り上がると良いですね。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Rubyで次の水曜日の18時を取得する</title>
          <link>https://blog.eiel.info/blog/2013/10/31/next-wednesday-at-18-hour/</link>
          <pubDate>Thu, 31 Oct 2013 16:45:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/10/31/next-wednesday-at-18-hour/</guid>
          <description>&lt;p&gt;日付処理って意外と面倒である。次の水曜日の18時を取りたい。&lt;/p&gt;

&lt;p&gt;ActiveSupport を使っていいのであれば、このように書けた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;active_support/core_ext&#39;
Date.today.beginning_of_week(:wednesday) + 1.week + 18.hours
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.0.0 だと &lt;code&gt;beginning_of_week&lt;/code&gt; は引数が取れないので注意。3.0 と 4.0 でしか確認してない。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Circle CI を試した</title>
          <link>https://blog.eiel.info/blog/2013/10/30/circle-ci/</link>
          <pubDate>Wed, 30 Oct 2013 11:55:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/10/30/circle-ci/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;https://twitter.com/hwebsys&#34;&gt;2013年10月の広島Webシステム開発勉強会&lt;/a&gt;内で&lt;a href=&#34;https://circleci.com&#34;&gt;Cicle CI&lt;/a&gt; を試していた。&lt;/p&gt;

&lt;p&gt;最安値が19ドルで、この場合プライベートリポジトリがひとつ使える。&lt;/p&gt;

&lt;p&gt;Rails プロジェクトで試しました。設定した内容はわずかで、&lt;code&gt;.ruby-version&lt;/code&gt; の指定をしただけで、テストの実行することができました。
これはこのプロジェクトが ruby 2.0 以上である必要があるからです。
リポジトリの選択も Github から一覧が取得されているので、一覧から選択するだけでした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;config/database.yml&lt;/code&gt; は自動で生成されました。&lt;/li&gt;
&lt;li&gt;デフォルトでは並列ビルドされず、20分ぐらい実行にかかりました&lt;/li&gt;
&lt;li&gt;Edit settings から 6つに分けて並列に実行できました。4分ぐらいで終了するようになりました&lt;/li&gt;
&lt;li&gt;GitHub に Pull Request があれば merge するときにビルド実行結果がわかります
現在、タイムゾーンの影響で失敗してテストがあるので修正方法を模索しているところです。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;並列ビルドは rspec、 cucumber それぞれ、自動で6分割して実行されていました。
一部のcucumberがかなり素早く終了したのでファイル単位で分割しているのだと思います。
&lt;a href=&#34;https://circleci.com/docs/parallel-manual-setup&#34;&gt;その辺のカスタマイズ方法はここに書いてある&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;結局 &lt;code&gt;circle.yml&lt;/code&gt; は、これだけしか書いていない状態。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;machine:
  ruby:
    version: 2.0.0-p247
  timezone: Asia/Tokyo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;導入がとても簡単で維持費が EC2 のマイクロを立ち上げっぱなし程度です。
コンテナの数ではなくて、プライベートリポジトリの数での課金なのでアクティブなプロジェクトでのみ使用する使い方になりそうです。
そんな使い方が可能なのかはまだよくわからない。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>config/database.yml の情報にアクセスする。</title>
          <link>https://blog.eiel.info/blog/2013/10/26/config-database/</link>
          <pubDate>Sat, 26 Oct 2013 00:34:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/10/26/config-database/</guid>
          <description>&lt;p&gt;Rails の config/database.yml の情報にアクセスしたかった。&lt;/p&gt;

&lt;p&gt;別に open して read して YAML.parse するだけなのですが、
もしかすると、 config/database.yml じゃないところを読むように設定を変えてる場合もありますからね。(ねーよ)&lt;/p&gt;

&lt;p&gt;ということで適当にリポジトリを検索したら、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Rails.application.config.database_configuration
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、取り出せました。
&lt;a href=&#34;https://github.com/rails/rails/search?q=database.yml&amp;amp;ref=cmdform&#34;&gt;この辺りはバージョンよって違うかもしれないので、GitHub で検索するのが良いかもしれないです。&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ruby-end マイナーモード - emacs</title>
          <link>https://blog.eiel.info/blog/2013/10/22/ruby-end-mode/</link>
          <pubDate>Tue, 22 Oct 2013 14:41:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/10/22/ruby-end-mode/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/rejeep/ruby-end&#34;&gt;ruby-end&lt;/a&gt; モードをいれました。&lt;/p&gt;

&lt;p&gt;ruby で end を自動挿入してくれるマイナーモードです。&lt;/p&gt;

&lt;p&gt;似たようなマイナーモードとしては ruby-elecric-mode があります。
この子は他にもいろいろ機能をもっています。end の補完も機能のひとつです。
個人的にはかなか挙動が使いづらく end の補完の処理だけ利用していました。&lt;/p&gt;

&lt;p&gt;また、emacs24 では微妙な挙動をしたりするそうです。 - [参考: Emacs24 で ruby-electric的なruby-modeを実現するには - メモとか]&lt;/p&gt;

&lt;p&gt;ruby-end は end が挿入されるタイミングが心地良いので試してみています。&lt;/p&gt;

&lt;h3 id=&#34;インストール:40b03ca96c39703533b1ea468c4edae2&#34;&gt;インストール&lt;/h3&gt;

&lt;p&gt;epel でインストールできるので &lt;code&gt;M-x package-install&lt;/code&gt; で &lt;code&gt;ruby-end&lt;/code&gt; で入力でインストールできます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://emacs-jp.github.io/packages/package-management/package-el.html&#34;&gt;参考: package.el - EmacsJP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;普通は package.el で充分かと思いますが、私は el-get を利用してるので &lt;code&gt;(el-get &#39;sync &#39;ruby-end)&lt;/code&gt; を設定ファイルに書いて評価しました。&lt;/p&gt;

&lt;h3 id=&#34;関連:40b03ca96c39703533b1ea468c4edae2&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/08/07/el-get/&#34;&gt;自分の el-get のワークフローについて整理する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>コミュニティに GitHub に使ってみて - すごい広島</title>
          <link>https://blog.eiel.info/blog/2013/10/21/operation-great-h/</link>
          <pubDate>Mon, 21 Oct 2013 16:44:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/10/21/operation-great-h/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://great-h.github.io/&#34;&gt;すごい広島&lt;/a&gt; も20回を越えて、そろそろ半年経とうとしています。
&lt;strong&gt;すごい&lt;/strong&gt;ですね。 #知らんけど&lt;/p&gt;

&lt;p&gt;そんなわけでコミュニティのとして &lt;a href=&#34;https://github.com/great-h/great-h.github.io&#34;&gt;GitHub&lt;/a&gt; を使ってみた感想を自分の中でまとめてみようと思います。&lt;/p&gt;

&lt;p&gt;簡単に「すごい広島」について書いておくと、毎週やっている勉強会もどきでミートアップです。ITエンジニアが集まって雑談してたり作業していたりします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;思ってたより人が集まってる&lt;/li&gt;
&lt;li&gt;みんな GitHub になれてきた?&lt;/li&gt;
&lt;li&gt;マージされない Pull Request&lt;/li&gt;
&lt;li&gt;もっと Issue が作成されてもいいんじゃないか&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;思ってたより人が集まってる:287f871f69f9c9a3326aa8caa3258075&#34;&gt;思ってたより人が集まってる&lt;/h3&gt;

&lt;p&gt;自分が想像していたよりも人が集まっています。
みなさんありがとうございます。&lt;/p&gt;

&lt;p&gt;どうせ「すぐ一人二人でもくもくーってなる」と、思ってたのですが、3人以下になったのは1回ぐらいしかないように思います。&lt;/p&gt;

&lt;p&gt;参加条件は徐々に緩くしているのもあるかもしれません。&lt;/p&gt;

&lt;p&gt;未参加の人からよくあった意見は、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;行ってみたい&lt;/li&gt;
&lt;li&gt;ブログを書くのは無理&lt;/li&gt;
&lt;li&gt;敷居が高そう&lt;/li&gt;
&lt;li&gt;目的がよくわからない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;です。&lt;/p&gt;

&lt;p&gt;「行ってみたい」の人は来れない場合の話がありますが、来れる人が言ってる場合はお世辞なんですかね。(煽り&lt;/p&gt;

&lt;p&gt;ブログを書くのは必須ではなくしたので、代わりに GitHub を思う存分試してみて欲しいです。
&lt;a href=&#34;https://github.com/great-h/great-h.github.io/issues/340&#34;&gt;最近は Issue に作業をメモをとったりしています。&lt;/a&gt; 参考にしてください。&lt;/p&gt;

&lt;p&gt;敷居が高くみえてしまうのは、変態扱いされない人のアウトプットが鍵になる気がしています。
&lt;strong&gt;期待したい。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;「目的がよくわからない」の一番の理由は名称のせいかな。
やっぱり情報が読まれるかどうかはタイトル次第というのを改めて感じました。&lt;/p&gt;

&lt;p&gt;それでも 「Web を見て参加しました!」が登場したので個人的には満足です。
目的のひとつが達成されました。&lt;/p&gt;

&lt;p&gt;改めて「広島 勉強会」で Google で検索しましたが、ちょっと SEO 的にはまだまだです。その辺の工夫が必要そうでした。&lt;/p&gt;

&lt;h3 id=&#34;みんな-github-に馴れてきた:287f871f69f9c9a3326aa8caa3258075&#34;&gt;みんな GitHub に馴れてきた?&lt;/h3&gt;

&lt;p&gt;参加者のほとんどが GitHub に馴れてない人です。
それだけ GitHub を使う環境がまだまだないのだと思います。
説明せずに Pull Request した人は僅かです。
そういう意味では効果があったと思います。&lt;/p&gt;

&lt;p&gt;また、「非プログラマでも Pull Request はできているので難しくないよ」と言いたいのですが、なかなか良い方法がないです。(チラリ&lt;/p&gt;

&lt;p&gt;ちなみに、半分以上の人が Web からのコミット機能を利用しています。
プログラマでも、黒い画面が怖かったり、GUIのクライアントツールを使えてないことを示しているように思います。
自分が使ってないので説明できないのもありますが、デザイナでも BitBucket を使ってる人も増えてる印象なのでもうちょっと情報が増えてもいいのではないかなと思います。&lt;/p&gt;

&lt;p&gt;あと、コンフリクトのマージの仕方を忘れた!という人もいました。
量をこなして、自分の知識へと消化して欲しいです。&lt;/p&gt;

&lt;h3 id=&#34;マージされない-pull-request:287f871f69f9c9a3326aa8caa3258075&#34;&gt;マージされない Pull Request&lt;/h3&gt;

&lt;p&gt;たいした内容でなくてもなかなか Pull Request がマージされません。
マージポリシーとして、二人以上のレビューを必須にしています。
なかなかレビューするコストが高いようです。&lt;/p&gt;

&lt;p&gt;コードではないので、本来の Pull Request よりは楽なレビューになるので、数をこなして馴れてもらいたいですね。&lt;/p&gt;

&lt;h3 id=&#34;もっと-issue-が作成されてもいいんじゃないか:287f871f69f9c9a3326aa8caa3258075&#34;&gt;もっと Issue が作成されてもいいんじゃないか&lt;/h3&gt;

&lt;p&gt;あえてコミュニティとして活動できる場所をつくってないです。
Twitterですんでしまうのもあります。
Issue はタスクを管理するだけのものではないような使い方をしているけど、アピール不足のようです。&lt;/p&gt;

&lt;p&gt;ラベルも知らないものが、いつの間にか増えていたりしないだろうか。(ちらり&lt;/p&gt;

&lt;h3 id=&#34;せっかくなので:287f871f69f9c9a3326aa8caa3258075&#34;&gt;せっかくなので&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/great-h/great-h.github.io/graphs/contributors?from=2013-05-19&amp;amp;to=2013-10-20&amp;amp;type=c&#34;&gt;コミットランキング&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eiel&#34;&gt;eiel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/moriC&#34;&gt;moriC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Torokun&#34;&gt;Torokun&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Nyoho&#34;&gt;Nyoho&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tsuda-a&#34;&gt;tsuda-a&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/furu&#34;&gt;furu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fujioenoki&#34;&gt;fujioenoki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yukilabo&#34;&gt;yukilabo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nishimotz&#34;&gt;nishimotz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hanapage&#34;&gt;hanapage&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/great-h/great-h.github.io/graphs/contributors?from=2013-05-19&amp;amp;to=2013-10-20&amp;amp;type=d&#34;&gt;コード削除ランキング&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eiel&#34;&gt;eiel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Torokun&#34;&gt;Torokun&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/moriC&#34;&gt;moriC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Nyoho&#34;&gt;Nyoho&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/great-h/great-h.github.io/graphs/punch-card&#34;&gt;Punchcard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;コミットランキングを取り上げたのは理由はともかく、削除ランキングというのも上げてみました。
削除は変更力を示している気がしたのでつけました。&lt;/p&gt;

&lt;p&gt;Punchcard は行動パターンを把握しやすいのでつけてみました。
深読みしないでください。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:287f871f69f9c9a3326aa8caa3258075&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;量が質に転化するらしいです。
つまり、結局自分が一番勉強になっている。
あと別にモテません。いや、ここは嘘でもモテるって書いておくところだったかも。&lt;/p&gt;

&lt;p&gt;「言い出しっぺのの法則」は&lt;strong&gt;すごい&lt;/strong&gt;です。
&lt;strong&gt;言い出しっぺをやると良い&lt;/strong&gt;と思います。 #違う&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;言ったもん勝ちです。やったもん勝ちです。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
      
    
      
        <item>
          <title>OSC 2013 HIROSHIMA に参加した。</title>
          <link>https://blog.eiel.info/blog/2013/10/06/osc-2013-hiroshima/</link>
          <pubDate>Sun, 06 Oct 2013 23:53:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/10/06/osc-2013-hiroshima/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://www.ospn.jp/osc2013-hiroshima/&#34;&gt;OSC 2013 HIROSHIMA&lt;/a&gt; に参加しました。
200名以上の参加があったらしいです。正確な情報が待ちどおしいです。&lt;/p&gt;

&lt;p&gt;私も実行委員会に所属したり(あんまり手伝えてなくてごめんなさい)、&lt;a href=&#34;https://www.ospn.jp/osc2013-hiroshima/modules/eguide/event.php?eid=10&#34;&gt;Hiroshima.rb の枠でライトリングトーク&lt;/a&gt;をしたり、&lt;a href=&#34;http://great-h.github.io/&#34;&gt;すごい広島&lt;/a&gt; と &lt;a href=&#34;http://hiroshimarb.github.io/&#34;&gt;Hiroshima.rb&lt;/a&gt; の展示ブースで説明をしたりしました。あと、&lt;a href=&#34;https://www.ospn.jp/osc2013-hiroshima/modules/eguide/event.php?eid=21&#34;&gt;ライトニングトーク&amp;amp;じゃんけん大会&lt;/a&gt; でライトニングトークをしてきました。&lt;a href=&#34;https://blog.eiel.info/blog/2013/10/05/chugokudb-02/&#34;&gt;前日の DB 勉強会&lt;/a&gt; を含めると計3セッションをするという状況になりました。&lt;/p&gt;

&lt;h3 id=&#34;hiroshima-rb-広島でrubyが流行らないのはどう考えても俺たちが悪い:a60ceb5425a2c3f1eea18613d003dc07&#34;&gt;Hiroshima.rb 広島でRubyが流行らないのはどう考えても俺たちが悪い&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hiroshimarb/hiroshimarb.github.com/wiki/2013%E5%B9%B410%E6%9C%88%E3%81%AE%E6%B4%BB%E5%8B%95&#34;&gt;Hiroshima.rbの発表については wiki に整理してあります。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;というわけで、僕は毎年前座を務めているので、「Hiroshima.rb の紹介」と「広島でRubyが流行しているか調べた」のでその話をしました。
本当は僕も成果発表したかったのですが、時間が足りそうにないので諦めました。
&lt;a href=&#34;https://github.com/hiroshimarb/hiroshimarb.github.com/wiki&#34;&gt;その他のHiroshima.rb の活動は wiki にもまとめています。&lt;/a&gt;興味があれば覗いてみてください。
スライドは以下の感じなのですが、実際に使ったものとは違う完全版になっています。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;http://www.slideshare.net/slideshow/embed_code/26900494&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;https://www.slideshare.net/TomohikoHimura/ruby-26900494&#34; title=&#34;広島で Ruby が流行らないのはどう考えても俺たちが悪い&#34; target=&#34;_blank&#34;&gt;広島で Ruby が流行らないのはどう考えても俺たちが悪い&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/TomohikoHimura&#34; target=&#34;_blank&#34;&gt;Tomohiko Himura&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;セッションを見にきてくれた方は20人以上いたと思うのですが数えてないのでわかりません。
セッションの元ネタは&lt;a href=&#34;http://www.ganganonline.com/comic/watashiga/&#34;&gt;私がモテないのはどう考えてもお前らが悪い!&lt;/a&gt;でした。
セッションにはどこにもこのネタは入れてないので注意してください。&lt;/p&gt;

&lt;p&gt;勝手にみんなのセッションをざっくり感想書いてしまいます。&lt;/p&gt;

&lt;h4 id=&#34;岡山のruby勉強会:a60ceb5425a2c3f1eea18613d003dc07&#34;&gt;岡山のRuby勉強会&lt;/h4&gt;

&lt;p&gt;岡山勢 &lt;a href=&#34;http://twitter.com/mako_wis&#34;&gt;まこぴー&lt;/a&gt; の LT です。&lt;/p&gt;

&lt;p&gt;僕が「広島」と「岡山」の比較をしたので岡山の状況について喋ってくれました。
本人はもっとネタをいれればよかったといってましたが、もちろんいれるとよかったですが、岡山勢の牽制としては充分なトークだったと思います。&lt;/p&gt;

&lt;h4 id=&#34;youtube動画の再生回数がわし-気になります-きゅふぃーん:a60ceb5425a2c3f1eea18613d003dc07&#34;&gt;YouTube動画の再生回数がわし…気になります!! (きゅふぃーん&lt;/h4&gt;

&lt;p&gt;うちの OSC でしか使えない秘密兵器 &lt;a href=&#34;https://twitter.com/NeXTSTEP2OSX/&#34;&gt;にょほう&lt;/a&gt;(にょ砲) の LT です。&lt;/p&gt;

&lt;p&gt;4分超過の打ち切り御免のLTなら死んでいた。
息子さんの支援により笑いだけでなく、癒しも追加されたため、圧倒的に一番人気な LT になりました。
しかし、一番アニメ色があるセッションになっていた気がするのは言ってはいけない。&lt;/p&gt;

&lt;h4 id=&#34;paasで簡単-railsアプリを公開しよう-もあぐれっしぶ-rubyを体験しよう:a60ceb5425a2c3f1eea18613d003dc07&#34;&gt;PaaSで簡単 Railsアプリを公開しよう！ ～もあぐれっしぶ～ ＆ Rubyを体験しよう！&lt;/h4&gt;

&lt;p&gt;広島の基盤 &lt;a href=&#34;https://twitter.com/takatayoshitake&#34;&gt;たかた&lt;/a&gt; さんの LT です。&lt;/p&gt;

&lt;p&gt;タイトル的にはもっともアニメ色の強いセッションですが、去年にひきつづきPaaSの紹介になりました。
ぶっちゃけると、僕も知らない PaaS の話でおもしろかったです。
Gitの説明を求められたけど 「clone するだけだよ!」 (それがわからんと言われる罠)&lt;/p&gt;

&lt;h3 id=&#34;repostar:a60ceb5425a2c3f1eea18613d003dc07&#34;&gt;RepoStar&lt;/h3&gt;

&lt;p&gt;うちの裏エース &lt;a href=&#34;https://twitter.com/pecosantoyobe&#34;&gt;ふる&lt;/a&gt; の LT です。&lt;/p&gt;

&lt;p&gt;JavaScript をつかったスライドをつっこんできたのでこのあたりの解説もそのうち聞きたいですね。彼はもっと評価されるべき。
「GitHubのスターがコンテンツになる!」なかなかの目の付け所です。&lt;/p&gt;

&lt;h3 id=&#34;raspberry-piでlチカしてみた:a60ceb5425a2c3f1eea18613d003dc07&#34;&gt;Raspberry PiでLチカしてみた&lt;/h3&gt;

&lt;p&gt;うちの期待の新人にして、はやくも関東行きが確定している &lt;a href=&#34;https://twitter.com/CentBoss&#34;&gt;もりしー&lt;/a&gt; の LT です。&lt;/p&gt;

&lt;p&gt;最近レイヤー下位に落ちている彼です。もりしーは評価されすぎなので、残念にならないようにみんなマサカリを投げて血だらけにしましょう。(冗談です)
事前にスライドみたときにフォントは変更することをおすすめすればよかった。&lt;/p&gt;

&lt;p&gt;やってることは面白いのけど、身内ネタになりすぎないように注意しましょう。&lt;/p&gt;

&lt;h3 id=&#34;電光掲示板を作ってみた:a60ceb5425a2c3f1eea18613d003dc07&#34;&gt;電光掲示板を作ってみた&lt;/h3&gt;

&lt;p&gt;うちの常連 かつ 遊撃兵(何それ)の &lt;a href=&#34;https://twitter.com/akira345&#34;&gt;あきら&lt;/a&gt; さんのLTです。&lt;/p&gt;

&lt;p&gt;電光掲示板とガチ組み込み系という mruby かと見せかけて処理はPCでやっているという技術的にもたくさん挑戦している制作発表です。
展示にはこの子に助けられまくりの掲示板くんです。
たぶん、いっぱい脱線したい部分があったはずなので、展示で話を聞けた人はラッキーです。&lt;/p&gt;

&lt;h1 id=&#34;すごい広島-展示ブース:a60ceb5425a2c3f1eea18613d003dc07&#34;&gt;すごい広島 展示ブース&lt;/h1&gt;

&lt;p&gt;もうひとつの活動ですごい広島というグループの展示をやっていました。
カンバンという手法をパクッて来場者に OSC の時間内にやることを宣言してもらいました。どう考えても終わるわけがない「プラモを作成する」とかありました。
二次元からやってきた&lt;a href=&#34;http://sakuraha-blog.jp/&#34;&gt;桜葉愛&lt;/a&gt; と握手したり、記念撮影したりなどもありました。
非常にたくさんの人にやること宣言してもらいました。ありがとうございます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://great-h.github.io/events/event-osc-2013.html&#34;&gt;すごい広島 in OSC 2013 HIROSHIMA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ライトニングトーク-じゃんけん大会-閉会式:a60ceb5425a2c3f1eea18613d003dc07&#34;&gt;ライトニングトーク＆じゃんけん大会＆閉会式&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://osh-2014.github.io/&#34;&gt;OSH2014@広島&lt;/a&gt;の告知とすごい広島の話をしてきました。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;http://www.slideshare.net/slideshow/embed_code/26941852&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;https://www.slideshare.net/TomohikoHimura/osc-26941852&#34; title=&#34;OSC2013 HIROSHIMA ライトニングトーク すごい広島&#34; target=&#34;_blank&#34;&gt;OSC2013 HIROSHIMA ライトニングトーク すごい広島&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/TomohikoHimura&#34; target=&#34;_blank&#34;&gt;Tomohiko Himura&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;もっとネタをつっこめばよかった。少しは笑いをとれたのでよかった点はよかったです。最初のほう緊張してたり、最後のほうは冷静さが欠けてたりしたので、もうちょっと冷静にネタをやればよかった。&lt;/p&gt;

&lt;p&gt;他の方のライトニングトークも感銘を受けるレベルの高いものでした。&lt;/p&gt;

&lt;p&gt;特に &lt;a href=&#34;http://takashi-yokoyama.blogspot.jp/2013/10/osc2013.html&#34;&gt;よこやまさん&lt;/a&gt;はOSCや広島を盛り上げるために岡山からこの10分のためにやってきてくれました。感謝の言葉では足りないです。&lt;/p&gt;

&lt;p&gt;他のLT職人のセッションはとてもすごかったです。
今年参加できなかった人は来年ぜひ参加して欲しい。
できれば若い子にはライトニングトークして欲しいですね。&lt;/p&gt;

&lt;p&gt;あ、ライトニングトークの練習をしたくなったら広島Ruby勉強会へ行きましょう。大歓迎です。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:a60ceb5425a2c3f1eea18613d003dc07&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;OSC 2013 HIROSHIMA は懸念していた参加者数をゆうゆうと目標人数を達成しました。コミュニティ同士の横の繋りが深まったという話もちらほら聞きました。とてもよかったです。
来年がもっともっと盛り上がるように積極的に参加してくれる人が増えると嬉しいですね。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;あなたの一票が日本を変える&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p&gt;昨日はOSCから帰ったら息子が「ひむひむ (&lt;a href=&#34;https://twitter.com/eielh&#34;&gt;@eielh&lt;/a&gt;) いなくなっちゃったー」などとひむひむを連呼していた。今朝は起きて開口一番「ひむひむどこにいるの?」であった。&lt;/p&gt;&amp;mdash; Nyoho (@NeXTSTEP2OSX) &lt;a href=&#34;https://twitter.com/NeXTSTEP2OSX/statuses/386996764147843072&#34;&gt;October 6, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>第２回 中国地方DB勉強会に参加したり、喋ったり。</title>
          <link>https://blog.eiel.info/blog/2013/10/05/chugokudb-02/</link>
          <pubDate>Sat, 05 Oct 2013 18:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/10/05/chugokudb-02/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://local.aguuu.com/events/21550&#34;&gt;第２回 中国地方DB勉強会&lt;/a&gt; に参加しました。&lt;/p&gt;

&lt;h3 id=&#34;o-r-mapping-の話をするよ-特にactiverecordの話をしたかった:c6e38ba68398cfb85b49db71f6fea302&#34;&gt;O/R Mapping の話をするよ。特にActiveRecordの話をしたかった。&lt;/h3&gt;

&lt;p&gt;セッションしました。準備不足はいいわけにはできないけど、ぶっちゃけ準備不足で、対象者が詰め切れていませんでした。&lt;/p&gt;

&lt;p&gt;とはいえ、スライドはアップロードしておきます。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;http://www.slideshare.net/slideshow/embed_code/26883805&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;https://www.slideshare.net/TomohikoHimura/or-mapping-activerecord&#34; title=&#34;O/R Mapping の話をするよ。ActiveRecord の話をしたかった。&#34; target=&#34;_blank&#34;&gt;O/R Mapping の話をするよ。ActiveRecord の話をしたかった。&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/TomohikoHimura&#34; target=&#34;_blank&#34;&gt;Tomohiko Himura&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;h3 id=&#34;よろしい-ならばmicro-ormだ:c6e38ba68398cfb85b49db71f6fea302&#34;&gt;よろしい、ならばMicro-ORMだ&lt;/h3&gt;

&lt;p&gt;ORM の利点を長所もわかったんだけど、 ORM が使えない場面で ORM がもつ機能の一部を使いたい。そんなときに Micro-ORM が便利だよ。という話がつづきました。&lt;/p&gt;

&lt;p&gt;特にデータのマッピングを操作する部分の機能を持っているようでした。
たしかに、普段のプログラミング生活では表現力の高いクエリビルダと値のマッピングができれば充分な感じは最近していたりもします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/kiyokura/microorm&#34;&gt;スライド&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;mysql-cluster-解説-mysql-cluster-7-3-最新情報:c6e38ba68398cfb85b49db71f6fea302&#34;&gt;MySQL Cluster 解説 ＆ MySQL Cluster 7.3 最新情報&lt;/h3&gt;

&lt;p&gt;MySQL と MySQL Cluster 異なる製品で、MySQLのストレージとして MySQL Clusterを利用したりできるようです。
単体でも使えるっぽいですが、よくわかっていません。
安価なマシンを並べて性能を出しつつ、高い可用性を実現します。&lt;/p&gt;

&lt;p&gt;使われてる箇所としては、「艦コレ」で使われていたのが最近の話題っぽいです。&lt;/p&gt;

&lt;p&gt;MySQLのストレージとして使えるので、InnoDBの互換性向上とかもやってるそうです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/yoyamasaki/mysql-cluster-mysql-cluster-73&#34;&gt;スライド&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;awsで始めるpostgresql-mysql:c6e38ba68398cfb85b49db71f6fea302&#34;&gt;AWSで始めるPostgreSQL/MySQL&lt;/h3&gt;

&lt;p&gt;AWS で MySQL や PostgreSQL をいれる話でした。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://myhome.munetika.mydns.jp/ossdbwiki/index.php/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91DB%E5%85%A5%E9%96%80&#34;&gt;Wiki に内容がまとめられてます。&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;さくらインターネットにおけるデータベース提供の実際:c6e38ba68398cfb85b49db71f6fea302&#34;&gt;さくらインターネットにおけるデータベース提供の実際&lt;/h3&gt;

&lt;p&gt;特にレンタルサーバの話が印象的でした。&lt;/p&gt;

&lt;p&gt;データベース不慣れな人が多く、そういった一部の人が共用サーバに不可をかけてしまったりするということは予想通り多いみたいです。
コントロールパネルが書籍との違いが出てしまうので、なかなかUIを変更できなっかたりもするそうです。&lt;/p&gt;

&lt;p&gt;DBはIOがボトルネックになるので仮想化は向いてないのかなあ。なんて話もしてでていました。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>そうだ OSC2013 Hiroshima へ行こう</title>
          <link>https://blog.eiel.info/blog/2013/10/04/osc2013-hiroshima/</link>
          <pubDate>Fri, 04 Oct 2013 15:15:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/10/04/osc2013-hiroshima/</guid>
          <description>

&lt;p&gt;2013年10月6日 (日) に &lt;a href=&#34;http://www.ospn.jp/osc2013-hiroshima/&#34;&gt;オープンソースカンファレンス 2013 Hiroshima&lt;/a&gt; が開催されます。
私はここでひとつお願いをしておきたい。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;広島の人でほんの少しでも興味があれば足を運んで欲しい&lt;/strong&gt;ということである。
10分ぐらい顔を出すぐらいで構わない。&lt;/p&gt;

&lt;p&gt;今から書くことは「懇親会の受付が終わる前」に書きかったけど、間に合わなかったのです。
これは僕の怠惰が原因で言い訳にしかならないのだけど、
もしかしたら当日に空きが出るかもしれないので、興味があれば早めに参加してスタッフの方に聞いてみるのも良いと思う。&lt;/p&gt;

&lt;p&gt;さて、&lt;a href=&#34;http://ja.wikipedia.org/wiki/%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%AB%E3%83%B3%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9&#34;&gt;オープンソースカンファレンス&lt;/a&gt;とは、なんだろうか。&lt;/p&gt;

&lt;p&gt;正直、私も県外のオープンソースカンファレンスには一度も参加したことがなくてよくわからないのです。
しかし、今年で3度目となる広島のオープンソースカンファレンスについては毎年参加しています。
そこで感じていることを言葉にしてみようと思う。&lt;/p&gt;

&lt;p&gt;オープンソースカンファレンスの参加者の目的には、いろいろあると思う。
「企業の展示に興味があったり」「県外からの講師のセミナーの話を聞きたかったり」である。ここは表向きにもわかりやすい部分だと思う。
実際、すでに参加登録している人の多くはこちらかなと思う。
もうひとつ参加者の層は、県外のオープンソースカンファレンスの常連者だと思う。
この人たちの多くは、IT系のコミュニティの人だ。&lt;/p&gt;

&lt;p&gt;参加者として増えて欲しいのは IT系コミュニティの人とIT系コミュニティの人になる可能性のある潜在者だ。
県外に足を運ぶには億劫だけど、「地元なら参加しようかな」と思う人たちなのです。&lt;/p&gt;

&lt;p&gt;私の感じているオープンソースカンファレンスはIT系コミュニティのお祭りなので、
ひとつのコミュニティでは作れない大きなイベントを一緒に作る機会で、合同勉強会みたいなものだと思う。
お互いに協力して何かを作れる人達が集る機会なのである。
横の繋りを育む唯一無二とは言えないけでも、貴重な機会なのである。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;そこに「オープンソースじゃないんだけど…」はたぶん関係ない。&lt;/li&gt;
&lt;li&gt;そこに「最近活動してないんだけど…」はたぶん関係ない。&lt;/li&gt;
&lt;li&gt;そこに「Webデザイナなんだけど…」はたぶん関係ない。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大事なのはコミュティの活性化のはずだ。 「オープンソース」はとりあえず今は置いておいていいはずだ。 #知らんけど&lt;/p&gt;

&lt;p&gt;そこに「面白いものがない」のであれば、どうすれば面白くなるか考えるところなのだ。
他にもIT系のイベントはありますが、ちょっとの努力で大きなリターンが得られ可能性を秘めているイベントなのだ。たぶん。&lt;/p&gt;

&lt;p&gt;そんなイベントなのだけど、開催するたびに参加者が減るのが最も怖いことである。
負の連鎖がはじまる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;「人がこない」といって出展を止める企業や遠方のコミュニティ。&lt;/li&gt;
&lt;li&gt;「大したことない」といって出展を止める地元コミュニティ。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;だから、ちょっと興味がある人が足を運ぶことは、運営側にとってはとても嬉しい行動で、
セミナーに興味があればセミナーに参加して、
そうでないなら展示に集る人達と雑談していくと良いと思う。
ついでに酷評していくと良いと思う。&lt;/p&gt;

&lt;p&gt;来年には、他のコミュニティよりクールで馬鹿なことをする人達が登場するのを期待している。負けるつもりはたぶんない。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;「&lt;a href=&#34;http://ja.wikipedia.org/wiki/%E8%A8%80%E3%81%84%E5%87%BA%E3%81%97%E3%81%A3%E3%81%BA%E3%81%AE%E6%B3%95%E5%89%87&#34;&gt;言い出しっぺの法則&lt;/a&gt;」というものがあって、言葉にしたもの勝ちで、早いもの勝ちなのである。決して、口は災いの元ではない。 #知らんけど&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;ついでに:3a4c72c2b5ea09a3011c2e2c62601382&#34;&gt;ついでに&lt;/h3&gt;

&lt;p&gt;私の今週末の予定です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://local.aguuu.com/events/21550&#34;&gt;第二回　中国地方DB勉強会 一番目にセッション&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;第二回　中国地方DB勉強会 懇親会&lt;br&gt;OSCのスタッフも来られます。少人数であれば飛び入りできるはず。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ospn.jp/osc2013-hiroshima/modules/eguide/event.php?eid=10&#34;&gt;OSC 2013 Hiroshima - 10:00 - 広島でRubyが流行らないのはどう考えても俺たちが悪い - 一番目にLT予定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://great-h.github.io/events/event-osc-2013.html&#34;&gt;OSC 2013 Hiroshima - すごい広島&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ospn.jp/osc2013-hiroshima/modules/eguide/event.php?eid=21&#34;&gt;OSC 2013 Hiroshima - 17:30 ライトニングトーク＆閉会式 - LT予定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ospn.jp/osc2013-hiroshima/modules/eguide/event.php?eid=22&#34;&gt;OSC 2013 HIroshima - 懇親会&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という感じになっています。&lt;/p&gt;

&lt;p&gt;DB勉強会で喋ることを考えてる最中に横道に逸れてこれを書いてることになりますね。そんな言い訳はするつもりないよ。たぶん。&lt;/p&gt;

&lt;p&gt;さらについでに OSC 2013 Hiroshima のセッションで行う LT は、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;広島で Ruby が流行らないのはどう考えても俺たちが悪い - &lt;a href=&#34;https://twitter.com/eielh&#34;&gt;@eielh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;岡山のRuby勉強会 - &lt;a href=&#34;https://twitter.com/mako_wis&#34;&gt;@mako_wis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Raspberry PiでLチカしてみた - &lt;a href=&#34;https://twitter.com/CentBoss&#34;&gt;@CentBoss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;電光掲示板を作ってみた @akira345&lt;/li&gt;
&lt;li&gt;YouTube動画の再生回数がわし…気になります！！(きゃふいーん - &lt;a href=&#34;https://twitter.com/NeXTSTEP2OSX&#34;&gt;@NeXTSTEP2OSX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;未定 - &lt;a href=&#34;https://twitter.com/takatayoshitake&#34;&gt;@takatayoshitaka&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;未定 - &lt;a href=&#34;https://twitter.com/pecosantoyobe&#34;&gt;@pecosantoyobe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を予定しています。
「私を除くと曲者揃いなので、ご期待ください」とは、言えるかどうかわからないですが、ご期待ください。&lt;/p&gt;

&lt;p&gt;閉会式のライトニングトークは抽選になりそうなのでどうなることやら。(実はあんまり人前で喋りたくない)&lt;/p&gt;

&lt;p&gt;というわけで、後は言わなくてもわかると思う。そう Happy Hacking。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>GitHub に課金した</title>
          <link>https://blog.eiel.info/blog/2013/10/03/billing-github/</link>
          <pubDate>Thu, 03 Oct 2013 16:48:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/10/03/billing-github/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; に課金した。月7ドル。&lt;/p&gt;

&lt;p&gt;課金した理由は「プライベートリポジトリが欲しくなった」で充分だろうか。
いや、充分ではない。&lt;/p&gt;

&lt;p&gt;「プライベートリポジトリが欲しいなら&lt;a href=&#34;https://bitbucket.org/&#34;&gt;BitbBucket&lt;/a&gt;を使えばいいじゃない」と、言われてしまうのである。
BitBucket は日本語化されているし、プライベートリポジトリは制限なく作れる。&lt;/p&gt;

&lt;p&gt;しかし、チームの人数は5人という制限がある。
というわけで、「チーム人数が5人越えそうだ」
というわけでもあるけど、本当の理由は別のところにある。&lt;/p&gt;

&lt;p&gt;Github と BitBucket 両方使っていますが、どちらを使いたいかと言われると GitHub なのである。
GitHub も BitBucket も、日々変化している。
変化に対応するためにも毎日利用したい。
というわけで、毎日使いたい GitHub に課金したのである。&lt;/p&gt;

&lt;p&gt;しかし、主な利用法が Wiki になりそうというのは秘密である。
最近 iPhone のパケットプランをフラットプランに変更したので、Macローカルにある固有のデータをなるべく減らして情報はどの端末からも参照したくなってきた。
Wikiのデータは Gitリポジトリアクセスできるので、好きなエディタでも編集しやすい。
Dropbox となるとハイパーリンクの利用は HTML となりそうだし、HTML の編集はしたくない。&lt;/p&gt;

&lt;p&gt;話は戻るけど、もちろん、チームメンバー5人を越えそうなプライベートリポジトリが必要になりそうなところであった。
しかし、プライベートなリポジトリが欲しいのであれば自分で作ればよく、いままでそうしてきた。今回は GitHub のサービスを利用したいのである。
コードレビューするための Pull Request 機能、課題を管理のための Issues機能である。&lt;/p&gt;

&lt;p&gt;BitBucket は自分に書き込み権限があるリポジトリへのプルリクエストができませんでした。
また、Issues で画像をつかいたい場合、自分でどこかにアップロードしないといけないみたいでした。
そのあたりが、「コードレビューのする際の不便さを感じそうだった」というのもあります。&lt;/p&gt;

&lt;p&gt;そんなわけで、お世話になりっぱなしの GitHub さんに課金を決めたという話でした。&lt;/p&gt;

&lt;h3 id=&#34;課金までの流れ:340439db01554a836d5e56091c04ab85&#34;&gt;課金までの流れ&lt;/h3&gt;

&lt;p&gt;折角なので、課金までの流れを紹介しておきます。&lt;/p&gt;

&lt;p&gt;まず、GitHub にサインインした状態で &lt;code&gt;http://github.com/&lt;/code&gt; へアクセスします。
そこから、設定画面に移動します。(下記画像参照)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/github-bill-001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;つづいて、左のメニューから &lt;code&gt;Billing&lt;/code&gt;を選択します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/github-bill-002.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;次にお好みのプランをクリックします。Micro を選択しました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/github-bill-003.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;するとクレジットカードの入力を要求されます。適当に入力します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/github-bill-004.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;これで終わりです。こんな表示になりました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/github-bill-005.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;料金を考えると1リポジトリあたり月100円だと思うことにしております。&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=eiel-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=477416366X&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Raphaelで遊んでみた。</title>
          <link>https://blog.eiel.info/blog/2013/09/11/raphaeljs/</link>
          <pubDate>Wed, 11 Sep 2013 18:42:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/09/11/raphaeljs/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://great-h.github.io/events/event-17.html&#34;&gt;すごい広島 #17&lt;/a&gt; でやったこと。
&lt;a href=&#34;http://raphaeljs.com/&#34;&gt;Raphael.js&lt;/a&gt; で遊んでみました。
Raphael.js は JavaScript で SVG を作成できるライブラリ。&lt;/p&gt;

&lt;p&gt;今日作成した&lt;a href=&#34;https://github.com/eiel/raphael-sample&#34;&gt;サンプルコードはGitHub&lt;/a&gt;にup してます。stepごとに タグを作成しているので、STEP1 のコードがみたい時は &lt;code&gt;git checkout step-1&lt;/code&gt; としてください。
&lt;code&gt;step-5&lt;/code&gt; まであります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;checkout&lt;/code&gt; したタグで &lt;code&gt;rake server&lt;/code&gt; を実行すると、ローカルサーバが起動します。
&lt;a href=&#34;http://localhost.com:8000&#34;&gt;http://localhost.com:8000&lt;/a&gt; にアクセスしてみてください。&lt;/p&gt;

&lt;h3 id=&#34;step1-とりあえず試す:51116917c9be36d7ead5eccdc6eac9da&#34;&gt;STEP1 とりあえず試す。&lt;/h3&gt;

&lt;p&gt;Raphael オブジェクトを作成すると自動的にSVGオブジェクトが挿入される。
絶対座標で挿入されるので、DOMの構築を待つ必要はなかった。&lt;/p&gt;

&lt;p&gt;まずは円を描いてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var paper = Raphael(10, 50, 320, 200);

// 円を書く at x = 50, y = 40,  半径 10
var circle = paper.circle(50, 40, 10);
// 赤色でぬりつぶす
circle.attr(&amp;quot;fill&amp;quot;, &amp;quot;#e00&amp;quot;);

// 黒で境界線をかく
circle.attr(&amp;quot;stroke&amp;quot;, &amp;quot;#000&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step2-svg-を二つ作成してみる:51116917c9be36d7ead5eccdc6eac9da&#34;&gt;STEP2 SVG を二つ作成してみる。&lt;/h3&gt;

&lt;p&gt;Rahael を二度呼べば構築できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var paper = Raphael(10, 50, 320, 200);

// 円を書く at x = 50, y = 40,  半径 10
var circle = paper.circle(50, 40, 10);
// 赤色でぬりつぶす
circle.attr(&amp;quot;fill&amp;quot;, &amp;quot;#e00&amp;quot;);

// 黒で境界線をかく
circle.attr(&amp;quot;stroke&amp;quot;, &amp;quot;#000&amp;quot;);

paper = Raphael(10, 240, 320, 200);

circle = paper.circle(50, 40, 40);
circle.attr(&amp;quot;fill&amp;quot;, &amp;quot;#00e&amp;quot;);
circle.attr(&amp;quot;stroke&amp;quot;, &amp;quot;#000&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step3-アニメーションしてみる:51116917c9be36d7ead5eccdc6eac9da&#34;&gt;STEP3 アニメーションしてみる&lt;/h3&gt;

&lt;p&gt;2秒かけて移動させてみる&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var paper = Raphael(10, 50, 320, 200);

var circle = paper.circle(50, 40, 10);
circle.attr(&amp;quot;fill&amp;quot;, &amp;quot;#e00&amp;quot;);
circle.attr(&amp;quot;stroke&amp;quot;, &amp;quot;#000&amp;quot;);

// 2000ms かけて x座標 320 まで移動
circle.animate({&#39;cx&#39;: 320}, 2000);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;element に対し animate メソッドでアニメーションできた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://raphaeljs.com/reference.html#Element.animate&#34;&gt;Element.animate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第1引数にはアニメーション後の element の情報を指定する。&lt;/p&gt;

&lt;p&gt;第2引数には アニメーションの実行時間を設定できる。
設定しないと 0 になり、一瞬で移動してしまう。&lt;/p&gt;

&lt;p&gt;第1引数に指定できるパラメータは Element.attr を見ればよさそう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://raphaeljs.com/reference.html#Element.attr&#34;&gt;Element.attr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;step4-クリックイベントでアニメーションしてみる:51116917c9be36d7ead5eccdc6eac9da&#34;&gt;STEP4 クリックイベントでアニメーションしてみる&lt;/h3&gt;

&lt;p&gt;円をクリックでアニメーションしてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var paper = Raphael(10, 50, 320, 200);

var circle = paper.circle(50, 40, 10);
circle.attr(&amp;quot;fill&amp;quot;, &amp;quot;#e00&amp;quot;);
circle.attr(&amp;quot;stroke&amp;quot;, &amp;quot;#000&amp;quot;);

circle.click(function () {
  circle.animate({&#39;cx&#39;: 320}, 2000);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step5-パスでも使ってみる:51116917c9be36d7ead5eccdc6eac9da&#34;&gt;STEP5 パスでも使ってみる。&lt;/h3&gt;

&lt;p&gt;好きな図形を書きたいので、パスをつかってみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var paper = Raphael(10, 50, 320, 200);

// (10, 20) へ移動
// (30, 40) へ線をひく
// (10, 40) へ線をひく
// (10, 20) へ線をひく
var path = paper.path(&amp;quot;M 10 20  L 30 40  L 10 40  L 10 20&amp;quot;);
path.attr(&#39;stroke&#39;,&amp;quot;#000&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Paper.path を利用すると描けた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://raphaeljs.com/reference.html#Paper.path&#34;&gt;Paper.path&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;文字列で指定する。
&lt;a href=&#34;http://www.w3.org/TR/SVG/paths.html#PathData&#34;&gt;SVG path string Format&lt;/a&gt; というルールに従う。&lt;/p&gt;

&lt;h3 id=&#34;感想:51116917c9be36d7ead5eccdc6eac9da&#34;&gt;感想&lt;/h3&gt;

&lt;p&gt;リファレンスだけでもプログラミングが充分できるほどインターフェースがシンプルでした。動的に走査できるので、ちょっと遊べそうです。とても簡単。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Rails の自動読み込みの話</title>
          <link>https://blog.eiel.info/blog/2013/09/07/autoload-rails/</link>
          <pubDate>Sat, 07 Sep 2013 22:38:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/09/07/autoload-rails/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;http://hiroshimarb.github.io/blog/2013/09/07/hiroshimarb-34/&#34;&gt;広島Ruby勉強会 #034&lt;/a&gt;で使用したネタの文に書きなおしました。&lt;/p&gt;

&lt;p&gt;「Rails の自動読み込み規約を支える技術」と若干煽っておりますが
以下の内容はソースコードを読んで判断したことですべて正しいとは保証できないので参考にする程度にお願いします。&lt;/p&gt;

&lt;p&gt;というわけで、Rails の自動読み込みの話をしたいと思います。&lt;/p&gt;

&lt;iframe src=&#34;http://www.slideshare.net/slideshow/embed_code/25983089&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&#34; allowfullscreen webkitallowfullscreen mozallowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;https://www.slideshare.net/TomohikoHimura/rails-25983089&#34; title=&#34;Rails の自動読み込みを支える技術&#34; target=&#34;_blank&#34;&gt;Rails の自動読み込みを支える技術&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/TomohikoHimura&#34; target=&#34;_blank&#34;&gt;Tomohiko Himura&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

### Rails のファイル読み込みの規約

Rails には[設定より規約](http://ja.wikipedia.org/wiki/%E8%A8%AD%E5%AE%9A%E3%82%88%E3%82%8A%E8%A6%8F%E7%B4%84) という設計パラダイムが採用されています。
ファイルの自動読み込みの規約は

&gt; 読み込みされていないクラス/モジュールがあった場合、名前から読み込みするファイルを判断できる

というような規約があります。

例えば

```
Hoge       -&gt; &#39;hoge.rb&#39; を読み込む
Hoge::Mogu -&gt; &#39;hoge/mogu.rb&#39; を読み込む
HogeMogu   -&gt; &#39;hoge_mogu.rb&#39; を読み込む
```

といった感じになっています。
この時、クラス名からファイル名の変換は `ActiveSupport::Inflector.underscore` が利用されます。

Rails では、自動読み込みは `RAILS_ROOT/app/models` のような `RAILS_ROOT/app/` の中のディレクトリに対し行われます。
`RAILS_ROOT/lib` とかに配置しても自動読み込みされません。

これを実現しているモジュールは [ActiveSupport::Dependencies](https://github.com/rails/rails/blob/master/activesupport/lib/active_support/dependencies.rb) になります。

### ActiveSupport::Dependencies

Rails を使わない場合の使い方を紹介します。

```ruby
require &#39;active_support/dependencies.rb&#39;
ActiveSupport::Dependencies.autoload_paths &lt;&lt; &#39;lib&#39;
```

このようにしておくとクラスやモジュールがない場合 `lib` の中から規約に沿ったファイルを読み込みします。
`autoload_paths` に読み込みの対象となるディレクトリを指定します。
実際に自作ライブラリで利用しないほうが良いです。
こういった用途の場合は後述の `ActiveSupport::Autoload` などで読み込みするのが一般的なようです。
Rails の`app` の中のように DSLを使った記述をシンプルにする場合に使うような印象を浮けました。

Rails での `autoload_paths` の初期値は

* &#34;RAILS_ROOT/app/assets&#34;
* &#34;RAILS_ROOT/app/controllers&#34;
* &#34;RAILS_ROOT/app/helpers&#34;
* &#34;RAILS_ROOT/app/mailers&#34;
* &#34;RAILS_ROOT/app/models&#34;
* &#34;RAILS_ROOT/app/controllers/concerns&#34;
* &#34;RAILS_ROOT/app/models/concerns&#34;

また、自動再読込もこの `autoload_paths` の path のみに適用さます。

#### 仕組み

簡単に仕組みをメモしておきます。

読み込みされていないクラスを使用すると ConstMissing という例外が発生します。
この部分に介入して autoload_paths の中に規約に合うファイルがあるか確認します。
存在する場合は読み込みします。
存在しない場合は `ConstMissing` を発生させます。

この自動読み込みの機能の動きを確認をする場合 Loggerを設定すると便利です。

```ruby
require &#39;active_support/dependencies.rb&#39;
require &#39;logger&#39;
ActiveSupport::Dependencies.logger = Logger.new($stderr)
ActiveSupport::Dependencies.log_activity = true
```

とすれば標準エラー出力にログが出力されます。
Rails の場合は Logger の設定がされているので、`log_activety` を設定するだけで大丈夫です。

この自動読み込み機能は、
`require &#39;active_support/dependencies.rb&#39;` しただけで有効になりますが、
これは `ActiveSupport::Dependencies.hook!` が呼ばれるようになっているためです。

停止したい場合は `ActiveSupport::Dependencies.unhook!` を呼ぶことで停止させることができます。

#### その他知っていると便利かもしれないこと

* ActiveSupport::Dependencies.warnings_on_first_load

この値をtrue にするとはじめて読み込みしたクラスが log レベル warn でメッセージを書き込まみます。
もう一度読まれた場合は Log には出力されません。

* ActiveSupport::Dependencies.history

この機能を使い読み込みしたクラスの一覧が入ります。
Set で保存されているので順番は分かりません。

* ActiveSupport::Dependencies.loaded

この機能を使い読み込みしたクラスの一覧が入ります。
history と違うのは clear されることがあることです。

* ActiveSupport::Dependencies.mechanism

ファイルを読み込みする際に load を利用するか require を利用するかを切り替えできます。
デフォルトは load になっています。シンボルで設定します。
また、環境変数 `NO_RELOAD` を設定しておくと `require` に切り替えられます。
* ActiveSupport::Dependencies.explicitly_unloadable_constants

自動読み込みを行わない定数名を設定できます。

### ActiveSupport::Autoload

`ActiveSupport::Dependencies` はライブラリ上では使われないようです。
似たような機能を持つものとしては [ActiveSupport::Autoload](https://github.com/rails/rails/blob/master/activesupport/lib/active_support/dependencies/autoload.rb) があります。

`lib/active_support.rb` や `lib/active_record.rb` など上げるとキリがありませんが、これらのファイルではたくさんの `autoload` が利用されています。

そもそも ruby には `autoload` が実装されています。
ただし、引数がふたつ必要になります。
この `autoload` を `ActiveSupport::Autoload` で拡張されたものです。

* Kernel.autoload(module, filename)
* Module.autoload(module, filename)
* ActiveSupport::Autoload#autoload(const_name, path = @@at_path)


`autoload` は自動読み込みするきっかけになる名前と読み込みするファイルを渡します。そうです。Rails の規約に添えば2番目の引数が省略できるのです。

ちなみに、Kernel のほうの `autoload` は変化しません。
Module のほうが差し替えられ第2引数が省略できます。

例:

```ruby
require &#39;active_support/dependencies/autoload&#39;

module Hoge
  extend ActiveSupport::Autoload
  autoload :Mogu
end

Hoge::Mogu
# &gt; LoadError: cannot load such file -- hoge/mogu
```

#### eager_autoload と auto_load!

Rails のソースコードをみていると

```ruby
eager_autoload do
  autoload :Hoge
  autoload :Mogu
end
```

のようになってることがあります。

eager_autoload のブロックにかいておくと `auto_load!` メソッドで一括読み込みができます。
どのような利点があるのかよくわかってません。

しかも、`ActiveSupport::Autoload` って `active_support/dependencies/autload.rb` に定義されてるんですよね。なんでなんだろう。


&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=eiel-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=B00P0UR1RU&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
</description>
        </item>
      
    
      
        <item>
          <title>AbstractController を継承して遊ぶ</title>
          <link>https://blog.eiel.info/blog/2013/09/04/extend-abstract-controller/</link>
          <pubDate>Wed, 04 Sep 2013 19:03:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/09/04/extend-abstract-controller/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://great-h.github.io/events/event-016.html&#34;&gt;すごい広島 #16&lt;/a&gt; で遊んだこと&lt;/p&gt;

&lt;p&gt;Rails で AbstractContrller::Base を継承して &lt;strong&gt;オレオレ コントローラ&lt;/strong&gt; を作りたいと思います。&lt;/p&gt;

&lt;p&gt;どうしてこれをしたいかというと View です。
コントローラ名とアクションに対応した View がレンダリングできるのが魅力的です。&lt;/p&gt;

&lt;p&gt;状況としてはメールを送るわけではないので ActionMailer 使えないし、すぐに画面に表示するわけではないので ActionController はちょっと…という感じなわけです。
どんな状況かというとDBに保存する長文を作成したい時です。&lt;/p&gt;

&lt;p&gt;書いたビューはこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;こんにちは &amp;lt;%= @user %&amp;gt;さん

&amp;lt;%= goodbye_helper @user %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ヘルパーも使えるようにしてみます。
ファイル名は &lt;code&gt;app/views/hoge_template/goro.text.erb&lt;/code&gt; でコントローラ名が &lt;code&gt;hoge_template&lt;/code&gt; アクション名 &lt;code&gt;goro&lt;/code&gt; テンプレートエンジンは &lt;code&gt;erb&lt;/code&gt; です。&lt;/p&gt;

&lt;p&gt;利用には以下のように使います。
&lt;code&gt;rails c&lt;/code&gt; の中でやったり、モデルの中で使えます。
もちろんコントローラ上でも。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;template = HogeTemplate.new
template.process(:goro)
template.render
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;renderの戻り値がテンプレートの出力結果になります。&lt;/p&gt;

&lt;p&gt;最終的な出力目標は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;こんにちは  おなまえさん

おなまえさん、おやすみ
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を目指します。
&lt;code&gt;@uesr&lt;/code&gt; には &lt;code&gt;おなまえ&lt;/code&gt; が入っています。
&lt;code&gt;goobye_helper&lt;/code&gt; はお別れのあいさつをしてくれるように実装します。&lt;/p&gt;

&lt;p&gt;作成するコントローラ的な役割をする HogeTemplate はこのように書きたいはずです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class HogeTemplate &amp;lt; ActionTemplate
  def goro
    @user = &amp;quot;おなまえ&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Helper は以下のように書きたいです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module ApplicationHelper
  def goodbye_helper(user)
    &amp;quot;#{user}さん、おやすみ&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このようにできる ActionTemplate クラスを作るのが目的です。&lt;/p&gt;

&lt;p&gt;その ActienTemplate クラスは下記で動作させることができました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ActionTemplate &amp;lt; AbstractController::Base
  include AbstractController::Rendering
  include ActionController::Helpers

  helpers_path &amp;lt;&amp;lt; &#39;app/helpers&#39;
  helper :all

  view_paths &amp;lt;&amp;lt; &#39;app/views&#39;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;helpers_path&lt;/code&gt; や &lt;code&gt;view_paths&lt;/code&gt; で読み込み場所を調整できます。
これはうまくやれば省略できそうなのですがそこまでまだいけていません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eiel/ActienTemplate&#34;&gt;サンプルリポジトリはこちら。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;ActionTemplate&lt;/code&gt; を &lt;code&gt;app/models&lt;/code&gt; に保存していますが、これは説明用です。
専用のディレクトリを作成して autoload_path へ追加したいですが、複雑になるので省略しました。&lt;/p&gt;

&lt;p&gt;使い道があるかどうかわかりませんが、試したので整理してみました。&lt;/p&gt;

&lt;h3 id=&#34;関連リンク:bcb28a1437c95f61b27873bb44edcf92&#34;&gt;関連リンク&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2014/07/18/action-view/&#34;&gt;ActionView を単体で使ってみる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Cucumber-js を試した。</title>
          <link>https://blog.eiel.info/blog/2013/09/03/cucumber-js/</link>
          <pubDate>Tue, 03 Sep 2013 15:49:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/09/03/cucumber-js/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://twitter.com/hwebsys&#34;&gt;広島Webシステム開発勉強会&lt;/a&gt; で &lt;a href=&#34;https://github.com/cucumber/cucumber-js&#34;&gt;Cucumber-js&lt;/a&gt; を試してました。&lt;/p&gt;

&lt;p&gt;先に雑感をかきます。&lt;/p&gt;

&lt;p&gt;まだ完成度が高くない感じです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;アサーションが用意されてないので、使いやすくするには自分でなんとかしないといけないような感じでした。&lt;/li&gt;
&lt;li&gt;step_definision が Ruby版より難しそうでした。&lt;/li&gt;
&lt;li&gt;日本語への対応がまだできていませんでした。&lt;/li&gt;
&lt;li&gt;色がまだつきません&lt;/li&gt;
&lt;li&gt;コマンドラインオプションをまちがえるとコールスタックが表示されます。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;インストール:fc7f48da2ead1135f726a192fe868739&#34;&gt;インストール&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;npm install -g cucumber
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;cucumber.js&lt;/code&gt; というコマンドがインストールされます。&lt;/p&gt;

&lt;h3 id=&#34;試してみる:fc7f48da2ead1135f726a192fe868739&#34;&gt;試してみる&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;Feature: hogehoge

  Scenario: hogehoge
    Given hoge
    Then goro
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;試しにこんな feature を書いてみました。&lt;/p&gt;

&lt;p&gt;他に作成したのは &lt;code&gt;features/step_defnition/myStepDefinitions.js&lt;/code&gt; と &lt;code&gt;features/support/world.js&lt;/code&gt; です。&lt;/p&gt;

&lt;p&gt;world.js で step で使える DSL を強化できますが今回は特になにもしていません。&lt;/p&gt;

&lt;p&gt;Stepの定義は以下のように書きました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var myStepDefinitionsWrapper = function () {
  this.World = require(&amp;quot;../support/world.js&amp;quot;).World;

  this.Given(/^hoge$/, function(callback) {
  // express the regexp above with the code you wish you had
     callback();
  });
  this.Then(/^goro$/, function(callback) {
  // express the regexp above with the code you wish you had
     callback.fail(&amp;quot;gorogoro&amp;quot;);
     callback();
  });
};

module.exports = myStepDefinitionsWrapper;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ruby版に比べるとthisが目立ちやや不恰好です。
&lt;code&gt;Then goro&lt;/code&gt; はわざと失敗するようにしています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cucumber.js&lt;/code&gt; を実行すると下記のような出力になります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.F

(::) failed steps (::)

gorogoro

Failing scenarios:
/Users/eiel/Programming/cucumber-js/features/myFeature.feature:3 # Scenario: hogehoge

1 scenario (1 failed)
2 steps (1 failed, 1 passed)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;callback が重要で 成功、失敗、ペンディングのどれにするとしても利用します。
if で状態をチェック。問題があれば &lt;code&gt;callback.fail()&lt;/code&gt; 問題がなければ&lt;code&gt;callback()&lt;/code&gt; という流れになります。rsapec の &lt;code&gt;should&lt;/code&gt; のようなものが用意されてません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eiel/cucumber-js-Sample&#34;&gt;作成したサンプルリポジトリはGithubにupしてきました&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;まとめ:fc7f48da2ead1135f726a192fe868739&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;というわけでなかなか扱いづらそうでした。
今度は mocha と chai あたりを試してみようと思います。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>pygements を利用してると jekyll serve --watch のファイル生成が遅いらしい</title>
          <link>https://blog.eiel.info/blog/2013/08/30/jekyll-watch-very-slow/</link>
          <pubDate>Fri, 30 Aug 2013 22:25:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/08/30/jekyll-watch-very-slow/</guid>
          <description>

&lt;p&gt;以下の質問を受けた。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p&gt;反映されるのに、なんでこんなに時間がかかるのじゃ。&amp;#10;Jekyll on Vimeo&amp;#10;&lt;a href=&#34;https://t.co/RrU2ABliHw&#34;&gt;https://t.co/RrU2ABliHw&lt;/a&gt;&lt;/p&gt;&amp;mdash; Terasawa Shuuhei (@shuuheyhey) &lt;a href=&#34;https://twitter.com/shuuheyhey/statuses/373403280669294593&#34;&gt;August 30, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--watch&lt;/code&gt; を使うと &lt;code&gt;jekyll build&lt;/code&gt; の部分が異常に遅くなるらしい。
初回は遅くないのですが、ファイル変更を検知した時が遅い。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://twitter.com/shuuheyhey&#34;&gt;@shuuheyhey&lt;/a&gt; pygments: falseにすると速いんですけど、それだとシンタックスハイライトが効かないという…。&lt;/p&gt;&amp;mdash; Hideki Abe (@_hideki_a) &lt;a href=&#34;https://twitter.com/_hideki_a/statuses/373420587772694530&#34;&gt;August 30, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;pygments を有効にしていると遅くなるらしい。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--watch&lt;/code&gt; を使うとファイルの生成する部分がメインスレッドでないのがあやしい。pygements は &lt;code&gt;popen&lt;/code&gt; とかつかって実行されるっぽいし。
とはいえ、原因を特定するまではいけなかった。&lt;/p&gt;

&lt;p&gt;仕方ないので無理矢理ごまかす方法を考えた。&lt;/p&gt;

&lt;p&gt;以下のような &lt;code&gt;Rakefile&lt;/code&gt; を用意してみた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;directory_watcher&#39;
require &#39;jekyll&#39;

desc &#39;preview&#39;
task preview: [:watch]  do
  sh &#39;bundle exec jekyll serve&#39;
end

task :watch do
  options = Jekyll.configuration({})
  source = options[&#39;source&#39;]
  destination = options[&#39;destination&#39;]

  dw = DirectoryWatcher.new(source, :glob =&amp;gt; Jekyll::Command.globs(source, destination), :pre_load =&amp;gt; true)
  dw.interval = 1

  dw.add_observer do |*args|
    t = Time.now.strftime(&amp;quot;%Y-%m-%d %H:%M:%S&amp;quot;)
    print Jekyll.logger.formatted_topic(&amp;quot;Regenerating:&amp;quot;) + &amp;quot;#{args.size} files at #{t} &amp;quot;
    sh &#39;bundle exec jekyll build&#39;
    puts  &amp;quot;...done.&amp;quot;
  end
  dw.start
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ほとんど &lt;code&gt;Jekyll::Commands::Build&lt;/code&gt; からもってきた。
ファイルの変更を検知して &lt;code&gt;jekyll build&lt;/code&gt; を実行しています。&lt;/p&gt;

&lt;p&gt;問題が起きる最小セットをつくってのJekyll 本家に Issue を作成したいと思う。&lt;/p&gt;

&lt;h3 id=&#34;おまけ:2f906389397dca6d2d858ca1a1a72161&#34;&gt;おまけ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/08/28/browse-open-when-rake-preview/&#34;&gt;ローカルサーバ起動と同時にブラウザで開く。 - Jekyll とかで。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;で紹介したのを組み合せるとにこんな感じになります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;bundler/setup&#39;
require &#39;thread&#39;
require &#39;launchy&#39;
require &#39;directory_watcher&#39;
require &#39;jekyll&#39;

desc &#39;preview&#39;
task preview: [:watch]  do

  Thread.new do
    sleep 2
    Launchy.open &#39;http://localhost:4000/&#39;
  end

  sh &#39;bundle exec jekyll serve&#39;
end

task :watch do
  options = Jekyll.configuration({})
  source = options[&#39;source&#39;]
  destination = options[&#39;destination&#39;]

  dw = DirectoryWatcher.new(source, :glob =&amp;gt; Jekyll::Command.globs(source, destination), :pre_load =&amp;gt; true)
  dw.interval = 1

  dw.add_observer do |*args|
    t = Time.now.strftime(&amp;quot;%Y-%m-%d %H:%M:%S&amp;quot;)
    print Jekyll.logger.formatted_topic(&amp;quot;Regenerating:&amp;quot;) + &amp;quot;#{args.size} files at #{t} &amp;quot;
    sh &#39;bundle exec jekyll build&#39;
    puts  &amp;quot;...done.&amp;quot;
  end
  dw.start
end
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ローカルサーバ起動と同時にブラウザで開く。 - Jekyll とかで。</title>
          <link>https://blog.eiel.info/blog/2013/08/28/browse-open-when-rake-preview/</link>
          <pubDate>Wed, 28 Aug 2013 20:01:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/08/28/browse-open-when-rake-preview/</guid>
          <description>

&lt;p&gt;この記事は &lt;a href=&#34;http://great-h.github.io/events/event-015.html&#34;&gt;すごい広島 #015&lt;/a&gt; で書いております。&lt;/p&gt;

&lt;p&gt;GitHub Pages などを使っていて、プッシュする前に ローカルサーバで確認すると思います。以前、&lt;a href=&#34;https://blog.eiel.info/blog/2013/05/29/jekyll-preview/&#34;&gt;Github Page で公開する サイトを ローカルで Preview するのに使ってる方法&lt;/a&gt; で、その方法を紹介しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rake preview
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、ローカルサーバを起動するようにしています。&lt;/p&gt;

&lt;p&gt;今回は、この &lt;code&gt;rake preview&lt;/code&gt; コマンドを実行した時に自動的にブラウザを起動して &lt;code&gt;http://localhost:4000/&lt;/code&gt; へアクセスするようにしてみました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Rakefile&lt;/code&gt; をこんな風に書きました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;bundler/setup&#39;
require &#39;thread&#39;
require &#39;launchy&#39;

desc &#39;preview&#39;
task :preview do
  Thread.new do
    sleep 1
    Launchy.open &#39;http://localhost:4000/&#39;
  end

  sh &#39;bundle exec jekyll serve --watch&#39;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;別のスレッドで &lt;a href=&#34;https://github.com/copiousfreetime/launchy&#34;&gt;Launchy&lt;/a&gt; を使って起動しているだけです。&lt;/p&gt;

&lt;p&gt;ちなみに &lt;code&gt;Gemfile&lt;/code&gt; はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;source &#39;https://rubygems.org&#39;

gem &#39;github-pages&#39;
gem &#39;launchy&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;関連:0da6321b28ab0d8a5a7f568b5d652d98&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/05/29/jekyll-preview/&#34;&gt;Github Page で公開する サイトを ローカルで Preview するのに使ってる方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/08/13/github-pages-gem/&#34;&gt;Github-pages Gem というのが用意された - Github Page で使う Gem のバージョンをあわせてくれる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/08/30/jekyll-watch-very-slow/&#34;&gt;Pygements を利用してると Jekyll Serve &amp;ndash;watch のファイル生成が遅いらしい&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>最近やった Ruby でのミス - rspec の expect で 空白に括弧</title>
          <link>https://blog.eiel.info/blog/2013/08/26/recent-mistake-on-ruby/</link>
          <pubDate>Mon, 26 Aug 2013 01:32:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/08/26/recent-mistake-on-ruby/</guid>
          <description>

&lt;p&gt;Ruby かいてて些細なミスでハマったことを書いておきます。その2。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;describe &#39;Hoge&#39; do
  it do
    expect (&#39;hoge&#39;).to eq(&#39;hoge&#39;)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;expect (&#39;hoge&#39;)&lt;/code&gt; のところの括弧の前にスペースが入っているのが問題です。
正しくは&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;describe &#39;Hoge&#39; do
  it do
    expect(&#39;hoge&#39;).to eq(&#39;hoge&#39;)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&#39;hoge&#39;に&lt;/code&gt;&lt;code&gt;to&lt;/code&gt; というメソッドがない、というエラーが出るので気づくのですが &lt;code&gt;+&lt;/code&gt; がないというエラーになっててハマった。&lt;/p&gt;

&lt;h3 id=&#34;解説:0607d719ea245c269409c96da156e7b2&#34;&gt;解説&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;expect(&#39;hoge&#39;).to eq(&#39;hoge&#39;)&lt;/code&gt; は &lt;code&gt;expect(&#39;hoge&#39;).to(eq(&#39;hoge&#39;))&lt;/code&gt; と等価です。
&lt;code&gt;expect (&#39;hoge&#39;).to eq(&#39;hoge&#39;)&lt;/code&gt; は &lt;code&gt;expect(&#39;hoge&#39;.to(eq(&#39;hoge&#39;)))&lt;/code&gt; と等価です。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;to&lt;/code&gt; は expect の戻り値に対して使うメソッドです。
空白をいれてしまうと、expect ではなく &amp;lsquo;hoge&amp;rsquo; に対し &lt;code&gt;to&lt;/code&gt; を呼んでしまいます。&lt;/p&gt;

&lt;h3 id=&#34;関連記事:0607d719ea245c269409c96da156e7b2&#34;&gt;関連記事&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/24/recent-mistake-on-ruby/&#34;&gt;最近やった Ruby でのミス - カンマで改行&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>scalaz に入門する</title>
          <link>https://blog.eiel.info/blog/2013/08/23/scalaz/</link>
          <pubDate>Fri, 23 Aug 2013 23:06:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/08/23/scalaz/</guid>
          <description>

&lt;p&gt;Scalaz をおすすめされた。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p&gt;ひむひむはScalazでいいと思うの&lt;/p&gt;&amp;mdash; 航空母艦 (@razon) &lt;a href=&#34;https://twitter.com/razon/statuses/370906437104324608&#34;&gt;August 23, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;とりあえず、入門してみよう。&lt;/p&gt;

&lt;h3 id=&#34;scalaz-って何:c1d3bef59e022a41d7645a62fbc82815&#34;&gt;scalaz って何&lt;/h3&gt;

&lt;p&gt;Scala がより関数型言語の力を得るらしい。よくわからん。
モナドとか使える。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/scalaz/scalaz&#34;&gt;https://github.com/scalaz/scalaz&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;sbt-を入れる:c1d3bef59e022a41d7645a62fbc82815&#34;&gt;sbt を入れる&lt;/h3&gt;

&lt;p&gt;sbt ってのを使っていれば…、て記述がたくさんある。
ruby でいうと bundler に近いものなのでしょうか。ちょっと違うけど。
makefile みたいなもんだろうか。これもちょっと違うよーな。&lt;/p&gt;

&lt;p&gt;インストールですが、Gentoo Prefix で入れたい。
Gentoo なら Overlay がある。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/whiter4bbit/overlays]&#34;&gt;https://github.com/whiter4bbit/overlays&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;layman します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;layman -f --overlays https://github.com/whiter4bbit/overlays/raw/master/layman.xml --add gentoo-scala-tools
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;設定できたら、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;emerge sbt-bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でいけた。&lt;/p&gt;

&lt;h3 id=&#34;sbt-をつかって-scalaz:c1d3bef59e022a41d7645a62fbc82815&#34;&gt;sbt をつかって scalaz&lt;/h3&gt;

&lt;p&gt;プロジェクトフォルダを用意して build.sbt を作成する。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://scalajp.github.io/sbt-getting-started-guide-ja/hello/&#34;&gt;Hello, World - はじめる sbt&lt;/a&gt; を参考にした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;name := &amp;quot;scalaz-helloworld&amp;quot;

version := &amp;quot;1.0&amp;quot;

scalaVersion := &amp;quot;2.9.2&amp;quot;

libraryDependencies += &amp;quot;org.scalaz&amp;quot; %% &amp;quot;scalaz-core&amp;quot; % &amp;quot;7.0.3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;name は プロジェクトの名前。 version はプロジェクトの成果物のバージョン番号。
scalaVersion は利用する scala のバージョン。
最後のは scalaz のための設定。&lt;/p&gt;

&lt;p&gt;ここまできたら scala の対話環境を起動できるみたい&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sbt
console
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;scalaz-遊んでみる:c1d3bef59e022a41d7645a62fbc82815&#34;&gt;scalaz 遊んでみる。&lt;/h3&gt;

&lt;p&gt;どこから手をつけたらいいのかさっぱりわからない。
なにをすればいいかわからない。&lt;/p&gt;

&lt;p&gt;最近 Haskell してないので、なにをしたらいいのかも浮かばない。
仕方ないので Listモナド で遊ぶことにした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scala&amp;gt; import scalaz._
scala&amp;gt; import std.list._

sacala&amp;gt; List(1,2,3) &amp;gt;&amp;gt; List(1,2,3)
res0 List[Int] = List(1, 2, 3, 1, 2, 3, 1, 2, 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Haskell でかくと以下と等価。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;[1..3] &amp;gt;&amp;gt; [1..3] -- =&amp;gt; [1,2,3,1,2,3,1,2,3] :: [Intger]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;まとめ:c1d3bef59e022a41d7645a62fbc82815&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;とりあえずインストールして、Hello Worlrd 的なことができた。&lt;/p&gt;

&lt;p&gt;Scala の文法がそもそもわからなので暗号だらけである。
やっぱり先に基本文法を抑えないとどうしようもないような気がします。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>gitolite で tag への権限付与</title>
          <link>https://blog.eiel.info/blog/2013/08/23/gitolite-tag/</link>
          <pubDate>Fri, 23 Aug 2013 22:32:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/08/23/gitolite-tag/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/sitaramc/gitolite&#34;&gt;gitolite&lt;/a&gt; でリポジトリを管理しております。
git の使い方わかってない子もいるのでわりと push できるブランチを制限してるリポジトリがあります。
タグを push しようとしたら拒否された。&lt;/p&gt;

&lt;p&gt;というわけで許可を与える方法を調べた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RW+    refs/tags/    = eiel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;refs/tags/&lt;/code&gt; にたいして行えばよいみたいです。&lt;/p&gt;

&lt;p&gt;補足しとくと形式は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[許可属性]  [ブランチなど正規表現]  = [ユーザまたはグループ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という感じです。&lt;/p&gt;

&lt;h3 id=&#34;参考:1d395e4416c83d54a5193b36dbaab320&#34;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sitaramc/gitolite&#34;&gt;gitolite - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Scala 入門しとく</title>
          <link>https://blog.eiel.info/blog/2013/08/17/scala-hello-world/</link>
          <pubDate>Sat, 17 Aug 2013 13:48:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/08/17/scala-hello-world/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://www.scala-lang.org/&#34;&gt;Scala&lt;/a&gt; はじめるはじめる詐欺をしていたので、はじめることにしました。&lt;/p&gt;

&lt;h3 id=&#34;インストール:fcc07b011dff7e26a22268b2233c4b02&#34;&gt;インストール&lt;/h3&gt;

&lt;p&gt;Gentoo Prefix で&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;emerge dev-lang/scala
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と、しましたが、ビルドに失敗しました。
ドキュメントまわりでエラーのようなのでちょっと工夫すればビルドできそうですが、諦めてバイナリインストールを試みました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$EPREFIX/etc/partoge/pacakeg.use&lt;/code&gt; に以下を加えました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;=dev-lang/scala-2.9.2 binary
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;はじめてみる:fcc07b011dff7e26a22268b2233c4b02&#34;&gt;はじめてみる&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.scala-lang.org/documentation/getting-started.html&#34;&gt;Getting Started - Scala&lt;/a&gt; を参考にはじめてみました。
基本のハローワールドです。ようこそ Scala の世界へ。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scala&lt;/code&gt; コマンドで対話環境が起動できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ scala
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そこに以下のコードを打ち込んでみました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;object HelloWorld {
  def main(args: Array[String]) {
    println(&amp;quot;Hello, world!&amp;quot;)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;僕の Ruby 的な感覚では HelloWorld というオブジェクトを作り特異メソッド main を定義している感じに見えます。
このあたりは、Java のエントリポイントが static な main メソッドになるのを知っていれば、納得感はあります。&lt;/p&gt;

&lt;p&gt;対話環境には&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;defined module HelloWorld
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と表示されているのが気になります。
「オブジェクトは別にメソッドが集めるところが用意されてるのかな？」という印象を受けました。&lt;/p&gt;

&lt;p&gt;その後、追加で、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;HelloWorld.main(null)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と入力しますと、&lt;code&gt;Hello, World&lt;/code&gt; と出力されました。&lt;/p&gt;

&lt;p&gt;Haskell を学習してる感覚からいくと 第1引数は null より空のリストを渡したいですね。
「null が渡せて気持ち悪い。」的な感じがしました。
オブジェクトは null をはじめから許容していると考えれば、大丈夫そうです。
リストではなく配列という種類のオブジェクトなのでしょう。&lt;/p&gt;

&lt;p&gt;終了するには &lt;code&gt;:q&lt;/code&gt; を入力するようです。 &lt;code&gt;C-d&lt;/code&gt; も終了できました。&lt;/p&gt;

&lt;h3 id=&#34;コンパイルしてみる:fcc07b011dff7e26a22268b2233c4b02&#34;&gt;コンパイルしてみる&lt;/h3&gt;

&lt;p&gt;さきほどは、対話環境で入力して確認してみましたが、次はコンパイルしてみるようです。
プログラムのソースコードの拡張子は &lt;code&gt;scala&lt;/code&gt; を使うようです。
&lt;code&gt;scalac&lt;/code&gt; コマンドでコンパイルできるそうです。&lt;/p&gt;

&lt;p&gt;なので、&lt;code&gt;HelloWorld.scala&lt;/code&gt; というファイルを作成してさきほどのソースコードを貼りつけて、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scalac HelloWorld.scala
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としました。&lt;/p&gt;

&lt;p&gt;作成されたファイルは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HelloWorld$.class&lt;/li&gt;
&lt;li&gt;HelloWorld.class&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;でした。&lt;/p&gt;

&lt;p&gt;実行には&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scala HelloWorld
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とするようです。&lt;/p&gt;

&lt;p&gt;試しに、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;java HelloWorld
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすると &lt;code&gt;scala/ScalaQbject がみつからない&lt;/code&gt; というエラーになりました。
上手いこと 指定してやれば実行できるそうですね。
そもそも &lt;code&gt;scala&lt;/code&gt; コマンドはシェルスクリプトで java を上手いこと起動してる感じのようでした。&lt;/p&gt;

&lt;p&gt;あと &lt;code&gt;Hello.scala&lt;/code&gt; でも問題なくコンパイルできるようです。
こういうことをしていると余計なトラブルに巻き込まれる感がありそうです。
ついでに、&lt;code&gt;sacala Hello.scala&lt;/code&gt; としても実行できました。しかし、遅い。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:fcc07b011dff7e26a22268b2233c4b02&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;Scala で遊ぶ準備ができました。
次はエディタ環境を整えたいです。&lt;/p&gt;

&lt;p&gt;sacala と typo しやすい。
対策を練りたい。&lt;/p&gt;

&lt;p&gt;もうちょっと遊びたい。次は何を読みながら試すのがよいのだろうか。&lt;/p&gt;

&lt;h3 id=&#34;追記:fcc07b011dff7e26a22268b2233c4b02&#34;&gt;追記&lt;/h3&gt;

&lt;p&gt;謎の暗号が飛んできた。&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p&gt;App traitやでひむひむ&lt;/p&gt;&amp;mdash; 航空母艦 (@razon) &lt;a href=&#34;https://twitter.com/razon/statuses/368746540321361922&#34;&gt;August 17, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;


```scala
object HelloWorld extends App {
  println(&#34;Hello, world!&#34;)
}
HelloWorld.main(null)
```

とかいても良いらしい。

Ruby 脳で考えると、クラスコンテキストに書いた部分がまるまる main メソッドの中にはいっている感。
どういう仕組みになっているのか調べるのには何を見ればいいのだろうか。

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p&gt;&lt;a href=&#34;http://t.co/bqr5OaJoIt&#34;&gt;http://t.co/bqr5OaJoIt&lt;/a&gt;&lt;/p&gt;&amp;mdash; 航空母艦 (@razon) &lt;a href=&#34;https://twitter.com/razon/statuses/368747744162086912&#34;&gt;August 17, 2013&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;的確なヒントが飛んでくる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.scala-lang.org/api/current/index.html#scala.App&#34;&gt;http://www.scala-lang.org/api/current/index.html#scala.App&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/scala/scala/blob/v2.10.2/src/library/scala/App.scala#L59-L61&#34;&gt;https://github.com/scala/scala/blob/v2.10.2/src/library/scala/App.scala#L59-L61&lt;/a&gt;
&lt;a href=&#34;https://github.com/scala/scala/blob/v2.10.2/src/library/scala/App.scala#L71&#34;&gt;https://github.com/scala/scala/blob/v2.10.2/src/library/scala/App.scala#L71&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;あたりが怪しい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;  override def delayedInit(body: =&amp;gt; Unit) {
    initCode += (() =&amp;gt; body)
  }

  def main(args: Array[String]) = {
    this._args = args
    for (proc &amp;lt;- initCode) proc()
    if (util.Properties.propIsSet(&amp;quot;scala.time&amp;quot;)) {
      val total = currentTime - executionStart
      Console.println(&amp;quot;[total &amp;quot; + total + &amp;quot;ms]&amp;quot;)
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あらかじめ main メソッドを定義しておいて、処理を追加できる感じがします。&lt;/p&gt;

&lt;p&gt;delayedInit がどうやって hook されるかは DelayedInit を追えばなにか分かる臭がしますね。&lt;/p&gt;

&lt;p&gt;引数は args で取れそう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;object HelloWorld extends App {
  println(args(0))
}
HelloWorld.main(Array(&amp;quot;hoge&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まだまだ、わからないことがたくさんあるけど、魔法みたいなことができることを知る。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ReVIEW を試してみる</title>
          <link>https://blog.eiel.info/blog/2013/08/14/review-setup/</link>
          <pubDate>Wed, 14 Aug 2013 18:47:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/08/14/review-setup/</guid>
          <description>

&lt;p&gt;毎週のアレ、&lt;a href=&#34;http://great-h.github.io/events/event-013.html&#34;&gt;すごい広島 #013&lt;/a&gt;で試したこと。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kmuto/review&#34;&gt;ReVIEW&lt;/a&gt; という軽量マークアップ言語に属すると思われる電子書籍を作成するのを主眼に置いてるものみたいです。先週TLでやたらみかけました。&lt;/p&gt;

&lt;p&gt;というわけで、&lt;a href=&#34;https://github.com/kmuto/review/blob/master/doc/quickstart.rdoc&#34;&gt;QuicqStart&lt;/a&gt; を参考に試してみました。&lt;/p&gt;

&lt;h3 id=&#34;インストール:ffabb28e726b63b18f52a144113bf1d5&#34;&gt;インストール&lt;/h3&gt;

&lt;p&gt;まずは、gem でインストールしました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install review
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ruby使いにはとても簡単。&lt;/p&gt;

&lt;h3 id=&#34;とりあえず-epub-をつくってみる:ffabb28e726b63b18f52a144113bf1d5&#34;&gt;とりあえず epub をつくってみる&lt;/h3&gt;

&lt;p&gt;epub 作るのに作成したファイルは以下の通り。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sample.re&lt;/li&gt;
&lt;li&gt;sample.yaml&lt;/li&gt;
&lt;li&gt;CHAPS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最後に&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;review-epubmaker sample.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、epub が作成されました。&lt;/p&gt;

&lt;p&gt;それぞれのファイルの中身ですが、&lt;code&gt;sample.re&lt;/code&gt; が、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;= はじめてのReVIEW

//lead{
「Hello, ReVIEW.」
//}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;sample.yml&lt;/code&gt; は &lt;a href=&#34;https://raw.github.com/kmuto/review/master/doc/sample.yaml&#34;&gt;https://raw.github.com/kmuto/review/master/doc/sample.yaml&lt;/a&gt; からダウンロードしました。&lt;/p&gt;

&lt;p&gt;最後に &lt;code&gt;CHAPS&lt;/code&gt; が、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sample.re
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;です。&lt;/p&gt;

&lt;p&gt;そして、iPhone で動作確認してみました。
iPhone に送るには iTuens からの同期するのが良さそうですが、メールで送信しました。
Message で送るとなぜだか認識しませんでした。Dropbox もありだと思います。&lt;/p&gt;

&lt;p&gt;PDF作成するためには TeX環境がいるのでまた別の機会にします。&lt;/p&gt;

&lt;h3 id=&#34;reファイル:ffabb28e726b63b18f52a144113bf1d5&#34;&gt;reファイル&lt;/h3&gt;

&lt;p&gt;内容を書くファイルみたいです。RDに近い文法です。&lt;/p&gt;

&lt;p&gt;詳しい文法は &lt;a href=&#34;https://github.com/kmuto/review/blob/master/doc/format.rdoc&#34;&gt;ReVIEW フォーット&lt;/a&gt; を参考にしてください。&lt;/p&gt;

&lt;p&gt;ちらっとみてみるると、コラム専用のものがあって、書籍用って感じがして良いですね。RDに近いと書きましたが、むしろ LaTeX に近いようにも思います。&lt;/p&gt;

&lt;h3 id=&#34;chaps:ffabb28e726b63b18f52a144113bf1d5&#34;&gt;CHAPS&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;CHAPS&lt;/code&gt; ファイルは章を記述するファイルで、1章につき1ファイルになるようです。似たようなファイル&lt;code&gt;PREDEF&lt;/code&gt;、 &lt;code&gt;POSTDEF&lt;/code&gt; があってこれは、本文ではない前書きの部分や後書きの部分を定義するようです。
前付け、後付けというものに該当するようですが、専門家でないのでよくわかりません。&lt;/p&gt;

&lt;h3 id=&#34;sample-yml:ffabb28e726b63b18f52a144113bf1d5&#34;&gt;sample.yml&lt;/h3&gt;

&lt;p&gt;書籍の情報を記述するものみたいです。
コマンドの引数に渡すので好きなファイル名にできます。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:ffabb28e726b63b18f52a144113bf1d5&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kmuto/review/wiki&#34;&gt;Wiki&lt;/a&gt; にもいろいろ情報があります。
ReVIEWの&lt;a href=&#34;https://github.com/kmuto/review-el&#34;&gt;Emacsのメジャーモード&lt;/a&gt;もあるみたいです。
折角なので、&lt;a href=&#34;https://gist.github.com/eiel/6230068&#34;&gt;el-get の レシピ&lt;/a&gt; を適当に書いてみました。
el-get-recipe-path にディレクトリを追加して &lt;code&gt;reiview-mode.rcp&lt;/code&gt; とい名前で保存して、&lt;code&gt;(el-get &#39;sync &#39;review-mode)&lt;/code&gt; を評価すれば設定できます。デフォルトのカラー設定が背景が暗い場合つらいので、 face を変更しないと使いづらそうでした。&lt;/p&gt;

&lt;p&gt;せっかく設定したのでなにか電子書籍を書いてみたいですね。何かないかなー。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>github-pages Gem というのが用意された - Github Page で使う gem のバージョンをあわせてくれる</title>
          <link>https://blog.eiel.info/blog/2013/08/13/github-pages-gem/</link>
          <pubDate>Tue, 13 Aug 2013 00:54:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/08/13/github-pages-gem/</guid>
          <description>

&lt;p&gt;Github Page は Jekyll プロジェクトを push すれば HTML に変換してくれます。
これを使う場合、Github 側とローカルで確認するときの Gem のバージョンを揃えておきたいです。
そのために Gemfile を記述しますが、&lt;code&gt;github-pages&lt;/code&gt; という gem が用意されました。
というわけで、試してみた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;source &#39;https://rubygems.org&#39;

gem &#39;github-pages&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;bundle install&lt;/code&gt; とか実行せばあ必要な &lt;code&gt;gem&lt;/code&gt; が手に入ります。
以前は、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;source &#39;https://rubygems.org&#39;
ruby &#39;1.9.3&#39;

gem &#39;jekyll&#39;,     &#39;=1.1.2&#39;
gem &#39;liquid&#39;,     &#39;=2.5.1&#39;
gem &#39;redcarpet&#39;,  &#39;=2.2.2&#39;
gem &#39;maruku&#39;,     &#39;=0.6.1&#39;
gem &#39;rdiscount&#39;,  &#39;=1.6.8&#39;
gem &#39;RedCloth&#39;,   &#39;=4.2.9&#39;
gem &#39;kramdown&#39;,   &#39;=1.0.2&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように書く必要ありました。
とてもすっきりしています。
利用する gem が更新されても &lt;code&gt;bundle update&lt;/code&gt; ですむので、とても嬉しいですね。&lt;/p&gt;

&lt;h3 id=&#34;もっと具体的に:5a8456fbdbb2111216d0f99b4a903cbf&#34;&gt;もっと具体的に&lt;/h3&gt;

&lt;p&gt;依存している Gem の情報は gemspec にあります。
github-pages gem をインストールに必要な gem が記載されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/github/pages-gem/blob/master/github-pages.gemspec#L17-L24&#34;&gt;github/pages-gem/github-pages.gemspec&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この github-pages gem に依存関係を記述されているので、利用者は Gemfile に記述する必要がなくなりました。
Ruby 1.9.3 で使用することになっています。
2.0 で実行すると失敗するので注意しましょう。&lt;/p&gt;

&lt;h3 id=&#34;関連:5a8456fbdbb2111216d0f99b4a903cbf&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/02/18/jekyll-on-github/&#34;&gt;Github で Jekyll を使う時に調べたこと&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/02/17/github-pages/&#34;&gt;Github Pages について整理しておきます&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;blog/2013/08/28/browse-open-when-rake-preview/&#34;&gt;ローカルサーバ起動と同時にブラウザで開く。 - Jekyll とかで。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ssh でポートフォワーディングしてブラウザで開くだけの gemを作った</title>
          <link>https://blog.eiel.info/blog/2013/08/10/flaun/</link>
          <pubDate>Sat, 10 Aug 2013 01:57:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/08/10/flaun/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/flaun&#34;&gt;flaun&lt;/a&gt; という gem つくって公開してみた。
インストールするには &lt;code&gt;$ gem install flaun&lt;/code&gt; でできます。&lt;/p&gt;

&lt;p&gt;何をするgemかというと&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh example.jp -L 8000:localhost:80
open http://localhost:8000/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようなことをするだけの gem です。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;~/.flaun&lt;/code&gt; ファイルに設定を書いておくと &lt;code&gt;flaun [target名]&lt;/code&gt; で該当サイトが開けます。
[target名] は ID みたいなものでどれを開くか指定するためのものです。
設定はRubyで作った DSL でかけます。&lt;/p&gt;

&lt;p&gt;sample という target名の設定は以下のようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;port 8000

target :target do
  host &#39;example.jp&#39;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;はじめから &lt;code&gt;http://localhost:8000/foobarr&lt;/code&gt; のようにディレクトリなどpathを指定したい場合は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;port 8000

target :target do
  host &#39;example.jp&#39;
  path &#39;foobar&#39;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように書けます。&lt;/p&gt;

&lt;h3 id=&#34;どんな時に使うの:13b091f75b2b5e92c0e3114c2df6836a&#34;&gt;どんな時に使うの&lt;/h3&gt;

&lt;p&gt;アクセス制限かけたいけど固定IPがない。BASIC認証はちょっと…。
そんな時は &lt;code&gt;localhost&lt;/code&gt; からのみアクセスしたいサーバがあることがあります。&lt;/p&gt;

&lt;p&gt;Apache だと以下のように書いてるページですね。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Order allow,deny
Allow from localhost
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こうなるとサーバからアクセスしないと表示することができません。
こんな時にポートフォワーディングを使います。
これを簡単に開きたい。そういう時に普段からコマンドライン操作をしていれば便利です。&lt;/p&gt;

&lt;h3 id=&#34;中身の話:13b091f75b2b5e92c0e3114c2df6836a&#34;&gt;中身の話&lt;/h3&gt;

&lt;p&gt;ホスト名などの設定値を固定値でやるのは簡単だったけど、設定を DSL でかけるようにしました。
DSLは BasicObject クラスを継承してそこにメソッドを定義しておき ファイルをread した文字列を クラスのインスタンスで instance_eval することで実現しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eiel/flaun/blob/v0.0.2/lib/flaun/dsl.rb&#34;&gt;ソースコード&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DSLクラスがトップレベル用の DSL を定義していて DSLTarget が target ブロック内でのDSL を定義しています。
このメソッドが呼ばれた際にconfigオブジェクトを構築していき、実行終了に config オブジェクトを取り出して使うようになっています。&lt;/p&gt;

&lt;p&gt;DSLクラスは&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def port(port)
  @config.port = port
end

def target(name, &amp;amp;block)
  target = DSLTarget.new(@config)
  target.instance_exec &amp;amp;block
  @config.targets[name] = target.config
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となっているので &lt;code&gt;port&lt;/code&gt; と &lt;code&gt;target&lt;/code&gt; という命令があります。
target ブロックの中で使えるものは DSLTarget のメソッドを見ればわかります。そうして最終的には&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config
  port
  targets:
    [target名1]:
	  port:
	  host:
	  path:
	[target名2]:
	  port:
	  host:
	  path:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という感じのデータ構造のオブジェクトが生成されます。&lt;/p&gt;

&lt;p&gt;コマンドの第1引数に指定された target名を取得して命令を作成者し、実行するようになっています。
オプションを追加したいのであればこの辺をいじれば可能です。&lt;/p&gt;

&lt;p&gt;他には ssh のセッションは別のスレッドで実行し、実行しつつ入力を受けつけるようにしてみました。
スレッドを使うとデバッグがしづらいですね。
pryで止めると入力がプログラムに食われたりしてめんどくさかったです。&lt;/p&gt;

&lt;p&gt;cucumber でシナリオをひとつだけ書いて、作成してみましたが、なかなかかゆいところに届きませんね。
最初は &lt;a href=&#34;https://github.com/cucumber/aruba&#34;&gt;aruba&lt;/a&gt; という コマンドラインツールのためのcucumber拡張を試していましたが、スタブがかけづらくてつらいのではずしました。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:13b091f75b2b5e92c0e3114c2df6836a&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;「具体的なパラメータが入っていて公開できないけど、ちょっとしたスクリプトかく」ということは、よくありますがうまく分離できなくてなかなか公開できないです。
積極的に公開して解説を書いておくことで、忘れたことに治したい場合、とても便利です。&lt;/p&gt;

&lt;p&gt;自分のためにつくってるので予想してない使い方などするとエラーが出ると思います。
&lt;a href=&#34;https://github.com/eiel/flaun/issues&#34;&gt;Issue&lt;/a&gt;などに書いていただければ対応するかもしれません。もちろん Pull Request もお待ちしています。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>自分の el-get のワークフローについて整理する</title>
          <link>https://blog.eiel.info/blog/2013/08/07/el-get/</link>
          <pubDate>Wed, 07 Aug 2013 19:07:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/08/07/el-get/</guid>
          <description>

&lt;p&gt;この記事は &lt;a href=&#34;http://great-h.github.io/events/event-012.html&#34;&gt;すごい広島 #12&lt;/a&gt; で書きました。&lt;/p&gt;

&lt;p&gt;Emacs のパッケージ管理に &lt;code&gt;el-get&lt;/code&gt; を利用しています。
他にもいろいろありますが、どれもしっかりと使いこなせないまま &lt;code&gt;el-get&lt;/code&gt; におちついています。
ぶっちゃけ、&lt;code&gt;el-get&lt;/code&gt; 使いこなせていません。
使いこなせてないので不安な箇所があったので確認してまとめました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;el-get&lt;/code&gt; を使いこなせてないのに、これに落ち着いている理由は&lt;code&gt;Distributed Setup&lt;/code&gt; という機能を利用しているからです。
これを使うと インストールしているパッケージがない場合自動でインストールしてくれます。&lt;/p&gt;

&lt;p&gt;例えば、&lt;code&gt;helm&lt;/code&gt; というパッケージを利用していて、emacsの設定ファイルを git などで共有しているとします。普段利用していない別のマシンで設定ファイルをコピーしてきます。
これで Emacs を起動すると、起動時にエラーが出てしまいます。
もし el-get の &lt;code&gt;Distributed Setup&lt;/code&gt; の機能を利用していればインストールしていないパッケージをダウンロードしてくれます。
ドロップボックスで共有している場合は不要なのですが、そういった使い方をしていない場合は有効です。&lt;/p&gt;

&lt;p&gt;この方法を使っている場合の設定方法とパッケージの更新方法について書いておきます。&lt;/p&gt;

&lt;h3 id=&#34;設定方法:22ead55274344014ce95e0770135fcd9&#34;&gt;設定方法&lt;/h3&gt;

&lt;p&gt;その設定方法は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(el-get &#39;sync &#39;helm)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と、書いておきます。
基本的にはこれでOKです。&lt;/p&gt;

&lt;p&gt;一緒に yasnippet をインストールしたいのであれば リストにすればよいです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(el-get &#39;sync &#39;(helm yasnippet))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;たぶんリストにしなくても大丈夫。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(el-get &#39;sync &#39;helm &#39;yasnippet)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;別々にやっても大丈夫。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(el-get &#39;sync &#39;yasnippet)
(el-get &#39;sync &#39;helm)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すでにインストールしてしまっていて、動作を確認したい場合は &lt;code&gt;el-get-remove&lt;/code&gt;コマンドで削除して、再評価することで動作確認できます。
&lt;code&gt;rm&lt;/code&gt; コマンドなどで削除してしまった場合は el-get から見ると削除したことになっていないので注意してください。
その場合でも &lt;code&gt;el-get-remove&lt;/code&gt; を呼べば大丈夫です。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;el-get&lt;/code&gt; 関数はダウンロードしていないパッケージの場合はダウンロードするという動作をします。
第1引数の &amp;lsquo;sync というを付けておくと同期実行になります。
ファイルのダウンロードを待つことになります。
nil にすることで非同期にも実行できます。
設定を el-getの hook に書いたりする必要がでてくると考えられますが試してません。同期実行するほうが設定しやすいと思います。&lt;/p&gt;

&lt;p&gt;第2引数以降にはパッケージ名を指定することになります。
パッケージ名&lt;code&gt;el-get-list-package&lt;/code&gt;コマンドなどで確認できます。
パッケージ名を省略した場合は インストール済のパッケージのリストが入るようです。
&lt;code&gt;el-get&lt;/code&gt; 関数は他にも load-path を通したりもするようです。&lt;/p&gt;

&lt;p&gt;あとは &lt;code&gt;el-get&lt;/code&gt; の自動でインストールするコードを加えて&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(add-to-list &#39;load-path &amp;quot;~/.emacs.d/el-get/el-get&amp;quot;)
(unless (require &#39;el-get nil &#39;noerror)
  (with-current-buffer
      (url-retrieve-synchronously
       &amp;quot;https://raw.github.com/dimitri/el-get/master/el-get-install.el&amp;quot;)
    (goto-char (point-max))
    (eval-print-last-sexp)))
(el-get &#39;sync &#39;helm)
;; helm の設定
(el-get &#39;sync &#39;yasnippet)
;; yasnippet の設定
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という感じにしておくと設定ファイルをコピーするだけで設定が完了します。
&lt;small&gt;とはいえ、だいたいなにかがトラブりますが。&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;この方法を使っている場合は &lt;code&gt;el-get-install&lt;/code&gt; はとりあえず試してみたいパッケージをインストールするという感じで使えます。
「他の環境でも使いたいなぁ」とか、設定いじりたいなぁ。となれば追記すれば良いのではないかと思います。
パッケージを更新をした場合は hook により設定が上書きされるんじゃないかと気になっていたりもしますが、未確認です。&lt;/p&gt;

&lt;h3 id=&#34;パッケージの更新:22ead55274344014ce95e0770135fcd9&#34;&gt;パッケージの更新&lt;/h3&gt;

&lt;p&gt;パッケージの更新するには &lt;code&gt;el-get-update&lt;/code&gt; でパッケージごとに更新するか、
&lt;code&gt;el-get-update-all&lt;/code&gt; でまとめて更新できます。
適当な頻度で実行すればよいと思います。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:22ead55274344014ce95e0770135fcd9&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;よくわかってないけど、自分が最低限必要なことはできているという使い方をしています。
&lt;code&gt;(el-get &#39;sync)&lt;/code&gt; まわりの部分について確認したので、記事にしました。
もうちょっと使いこなしたい。&lt;/p&gt;

&lt;p&gt;もっと詳しいことは info などを読むのが良いと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dimitri/el-get/blob/4.stable/el-get.info&#34;&gt;github elget/elget.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>参考にならないモチベーション維持方法</title>
          <link>https://blog.eiel.info/blog/2013/08/05/motivation-maintenance/</link>
          <pubDate>Mon, 05 Aug 2013 23:32:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/08/05/motivation-maintenance/</guid>
          <description>

&lt;p&gt;ネタです。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://twitter.com/search?q=%23%E5%A4%9C%E3%81%A0%E3%81%8B%E3%82%89RT%E3%81%95%E3%82%8C%E3%81%9F%E6%95%B0%E3%81%A0%E3%81%91%E6%9C%AC%E9%9F%B3%E8%A8%80%E3%81%86&amp;amp;src=hash&#34;&gt;#夜だからRTされた数だけ本音言う&lt;/a&gt;&lt;/p&gt;&amp;mdash; えいる (@eielh) &lt;a href=&#34;https://twitter.com/eielh/statuses/364386097633050625&#34;&gt;August 5, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;この記事を書き始めた時点では5RTされていました。&lt;/p&gt;

&lt;p&gt;ということで、私のモチベーション維持の方法を適当に書いてみる。
きっと、なんの参考にならないことを書いてしまいそうです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;死ぬのは最後の楽しみ&lt;/li&gt;
&lt;li&gt;楽しいと感じる心を信じる&lt;/li&gt;
&lt;li&gt;楽しいと思い込む&lt;/li&gt;
&lt;li&gt;小さな幸せを楽しめ&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;死ぬのは最後の楽しみ:7723167f28eb6d9cdaca27c90550b170&#34;&gt;死ぬのは最後の楽しみ&lt;/h3&gt;

&lt;p&gt;どんなつらいことがあったとしても人間はいつか死にます。
つらいこと、嫌なことがあれば死んでしまえば終わりです。
とても楽チンな道が用意されています。
ただし、これは最終秘密兵器なのは言うまでもありません。
しかし、救いとしては充分です。
必ず楽になれるのです。&lt;/p&gt;

&lt;p&gt;世の中的には「自分で死を選択する」は良いことではないのはご存知の通りです。
ならば、他人に殺して欲しいかもしれません。
これも同様に大変悪いことで、「他人」の人生がぐちゃぐちゃになってしまいます。
これが認められる世の中はあまり想像したくありません。&lt;/p&gt;

&lt;p&gt;ならばどうするのか。
生きないといけません。
どんなつらいことがあっても生きないのいけません。&lt;/p&gt;

&lt;p&gt;ならばどうするのか。
生きるのを楽しむしかないのです。
いつかやってくる死を楽しみにして生きるしかないのです。&lt;/p&gt;

&lt;p&gt;はい、生きることになってしまいました。
どうせならつらいより楽しいほうがいいです。
毎日が楽しくなるように考えましょう。&lt;/p&gt;

&lt;p&gt;ほら楽しく生きられそうな気がしてきました。
モチベーションが維持できました。&lt;/p&gt;

&lt;p&gt;最近の好きな言葉は 「&lt;strong&gt;老衰で死ね&lt;/strong&gt;」です。&lt;/p&gt;

&lt;h3 id=&#34;楽しいと感じる心を信じる:7723167f28eb6d9cdaca27c90550b170&#34;&gt;楽しいと感じる心を信じる&lt;/h3&gt;

&lt;p&gt;楽しい、嬉しい、楽しくなりそう。
そういうものにはマークをつけておきましょう。
tumblr にまとめるもよし、Twitter でふぁぼるのもよいでしょう。
すかさずネタにしたり、わざと盛り上げてみましょう。
たぶん、楽しくなります。&lt;/p&gt;

&lt;p&gt;ぼっちでも、「この空気が楽しい/楽しくなりそう」と思うところが居座ってみましょう。
気がついたら仲間がいるかもしれません。
気がついたら常連かもしれません。
半年ROMれとはたぶんそういうことです。
居場所ができてるかもしれません。&lt;/p&gt;

&lt;p&gt;世の中に楽しいことがあることに気づけばモチベーションは上がります。
この場所にずっといたいと思うなら、いるための努力ができます。モチベーションが上がります。&lt;/p&gt;

&lt;h3 id=&#34;楽しいと思い込む:7723167f28eb6d9cdaca27c90550b170&#34;&gt;楽しいと思い込む&lt;/h3&gt;

&lt;p&gt;最終手段です。&lt;br&gt;
仕事へ行くのはつらいです。
仕方ないので仕事へ行くのは楽しいと思い込みましょう。&lt;/p&gt;

&lt;p&gt;そういえば社会人一年目、なかなか起きれない朝は以下のことを考えていたように思います。&lt;/p&gt;

&lt;p&gt;仕事へ行けば&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;いつか幸せで楽しい未来作れる。(と信じます)&lt;/li&gt;
&lt;li&gt;あの子と共同生活ができる。(と信じます)&lt;/li&gt;
&lt;li&gt;帰ってくると我が子のかわいい寝顔が見れる。(と信じます)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;イメージは具体的であればあるほど有効です。
ただし、現実からは目を背けましょう。
妄想と現実をごちゃまぜにするのは危険です。
現実には起きないことを認識しつつ現実から目を背けましょう。&lt;/p&gt;

&lt;p&gt;慣れてるくると部屋にムカデがいても眠れるようになります。
良い子は真似をせず、つかまえてから眠りましょう。
ムカデに噛まれたことがきっかけで就職活動が開始できたというレアケースもありますが、ここでは話しません。&lt;/p&gt;

&lt;h3 id=&#34;小さな幸せを楽しめ:7723167f28eb6d9cdaca27c90550b170&#34;&gt;小さな幸せを楽しめ&lt;/h3&gt;

&lt;p&gt;どんな些細なことでも楽しむことができるようになればモチベーションなんて維持する必要なんてないです。
このあたりは「&lt;a href=&#34;http://ja.wikipedia.org/wiki/ARIA_(%E6%BC%AB%E7%94%BB&#34;&gt;AQUA&lt;/a&gt;)」や「&lt;a href=&#34;http://ja.wikipedia.org/wiki/ARIA_(%E6%BC%AB%E7%94%BB&#34;&gt;ARIA&lt;/a&gt;」、「&lt;a href=&#34;http://ja.wikipedia.org/wiki/%E3%81%82%E3%81%BE%E3%82%93%E3%81%A1%E3%82%85!&#34;&gt;あまんちゅ&lt;/a&gt;」あたりを読んで参考にするのも良いでしょう。&lt;/p&gt;

&lt;p&gt;適当に例を上げます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;コンビニで見たことないドリンクをみかけたらテンションを上げて即買いましょう。迷うなら疲れています。&lt;/li&gt;
&lt;li&gt;足の小指をドアにぶつけたら、宝くじが当たるぐらいのミスをしたことにしましょう。これで宝くじが当たる。&lt;/li&gt;
&lt;li&gt;ふぁぼられたら喜びましょう。普通に嬉しいですけどね。&lt;/li&gt;
&lt;li&gt;流れた曲の曲名を当てて遊びましょう。はずれても当らなくても楽しいです。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらは楽しんでるのを悟られないように気をつけましょう。
心に刺さる突っ込みが飛んで来ることでしょう。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:7723167f28eb6d9cdaca27c90550b170&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;要するにどれだけ楽しめるかどうかだと思います。
できれば、周りの人も笑わせてあげてください。
楽しさがスパイラルするはずです。&lt;/p&gt;

&lt;p&gt;「単にネタ記事が書いてみたかっただけだろ？」なんて突っ込みは無粋です。
突発で書いたので中身も適当です。&lt;/p&gt;

&lt;p&gt;書き終えるころには 9件のRT がありました。
9件も本音書いてるかは確認していません。ごめんなさい。
僕のことをよく知る人はだいたいわかると思いますが、いつも言ってることばかりですね。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>広島Ruby勉強会 #033 でやったこと - ActiveSupport CoreExt &amp; Rails Template</title>
          <link>https://blog.eiel.info/blog/2013/08/04/hiroshimarb-33/</link>
          <pubDate>Sun, 04 Aug 2013 12:22:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/08/04/hiroshimarb-33/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;http://partake.in/events/9dacdbfc-8acf-4968-a0eb-5327a6937b7d&#34;&gt;広島Ruby勉強会 #033&lt;/a&gt; に参加しました。&lt;/p&gt;

&lt;p&gt;前回に引き続き ActiveSupport のCoreExt のソースコードを読んだので、面白そうなところをざっくりと紹介しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://railsdoc.eiel.info/hiroshimarb/33/&#34;&gt;資料 - Rails のソースコード読んだので面白そうなところを紹介する &amp;ndash; ActiveSupport CoreExt編 その2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あと LT しました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rails new&lt;/code&gt; には &lt;code&gt;--template&lt;/code&gt; という引数があるのでこれについて調べました。&lt;/p&gt;

&lt;p&gt;まずはスライド。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;http://www.slideshare.net/slideshow/embed_code/24887855&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&#34; allowfullscreen webkitallowfullscreen mozallowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;http://www.slideshare.net/TomohikoHimura/rails-template&#34; title=&#34;Rails プロジェクトでスタートダッシュを決める&#34; target=&#34;_blank&#34;&gt;Rails プロジェクトでスタートダッシュを決める&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/TomohikoHimura&#34; target=&#34;_blank&#34;&gt;Tomohiko Himura&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;このスライドを作る前に調べものした時のメモは前回の記事を&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/08/03/rails-new-template/&#34;&gt;Rails New した時の追加処理をかく&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;参加者の &lt;a href=&#34;https://twitter.com/CentBoss&#34;&gt;もりしー こと @CentBoss&lt;/a&gt; が 「&lt;a href=&#34;http://blog.mori-theta.net/?p=238&#34;&gt;広島Ruby勉強会 #033に遊びに行ってrails newでのtemplateを作った&lt;/a&gt;」 早速試してみてくれました。
&lt;code&gt;rails new&lt;/code&gt; する時のデフォルトの引数を指定できる &lt;code&gt;~/.railsrc&lt;/code&gt; というものがありますが、そのなかで &amp;ndash;template が使えるのを試してくれています。
上手くいったようです。
ここでテンプレートファイルを指定しておくと、とても楽ができます。&lt;/p&gt;

&lt;p&gt;次回の 広島Ruby勉強会は 9月7日を予定しているそうです。
発表の練習したい方募集中だそうです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>rails new した時の追加処理をかく</title>
          <link>https://blog.eiel.info/blog/2013/08/01/rails-new-template/</link>
          <pubDate>Thu, 01 Aug 2013 18:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/08/01/rails-new-template/</guid>
          <description>

&lt;p&gt;この記事はメモです。
&lt;a href=&#34;http://hiroshimarb.github.io/blog/2013/08/03/hiroshimarb-33/&#34;&gt;広島Ruby勉強会 #33&lt;/a&gt; で LT するのに下調べしたことを書いてるだけです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rails new&lt;/code&gt; した時に &lt;code&gt;--template file_or_url&lt;/code&gt; というオプションがあります。省略形は &lt;code&gt;-m&lt;/code&gt;。
これを使うと、&lt;code&gt;rails new&lt;/code&gt; した時に追加処理ができます。
「テンプレート機能」と呼びたいと思います。&lt;/p&gt;

&lt;p&gt;何がしたいかというと rails new した時点で &lt;code&gt;pry&lt;/code&gt; とか &lt;code&gt;rspec&lt;/code&gt; とか &lt;code&gt;cucumber&lt;/code&gt; とかいつも使うのを設定した状態にしたいのです。
ウェブサービスが思いついたら直ちに開発をしたいのです。&lt;/p&gt;

&lt;p&gt;このテンプレート機能を使うものとしては &lt;a href=&#34;https://github.com/RailsApps/rails-composer&#34;&gt;Rails Composer&lt;/a&gt; というものがあります。
これを使うと、どのライブラリを利用するか質問されるので、回答していくと、雛形ができます。&lt;/p&gt;

&lt;p&gt;これを自分でカスタマイズしたいので、いろいろ調べました。&lt;/p&gt;

&lt;p&gt;役に立つかもしれないウェブページ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://guides.rubyonrails.org/rails_application_templates.html&#34;&gt;Rails Application Templates - Rails Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://guides.rubyonrails.org/generators.html&#34;&gt;Creating and Customizing Rails Generators &amp;amp; Templates - Rails Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tachiba@github/items/26b2e9dc271bd8e6907d&#34;&gt;RailsのApplication templateを使って開発の初速をあげよう！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ひとつめの「Rails Application Templates」は Rails Guide ですが、Rails Guide のトップにリンクがありません。
だいぶ調べた後に気づきました。泣きたい。&lt;/p&gt;

&lt;p&gt;ふたつめも Rails Guide ですが、機能的には Generator と同じなので参考になります。&lt;/p&gt;

&lt;p&gt;みっつめは日本語記事。面白くまとめてあります。このメモを書いてLTをつくった後にみつけた。&lt;/p&gt;

&lt;p&gt;つづいて、関係してきそうなクラスやモジュールを整理します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rails::AppBuilder&lt;/li&gt;
&lt;li&gt;Rails::Generators::AppGenerator&lt;/li&gt;
&lt;li&gt;Rails::Generators::AppBase&lt;/li&gt;
&lt;li&gt;Rails::Generators::Base&lt;/li&gt;
&lt;li&gt;Rails::Generators::Actions&lt;/li&gt;
&lt;li&gt;Thor::Actions&lt;/li&gt;
&lt;li&gt;Thor::Group&lt;/li&gt;
&lt;li&gt;Thor::Shell&lt;/li&gt;
&lt;li&gt;Thor::Invocation&lt;/li&gt;
&lt;li&gt;Thor::Base&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;--template&lt;/code&gt; に指定したファイルは &lt;code&gt;Rails::Generators::AppGenerator&lt;/code&gt; インスタンスのコンテキストで実行されます。
Rails::Generators::AppGenerator が継承してるクラスやミックスインしているモジュールのメソッドが使えると考えてください。
「&lt;code&gt;instance_eval&lt;/code&gt; される」と書いたほうがわかりやすい人もいるとかもしれません。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rails new&lt;/code&gt; や &lt;code&gt;rails generator&lt;/code&gt; には、&lt;a href=&#34;http://whatisthor.com/&#34;&gt;Thor&lt;/a&gt; というライブリが使用されています。
bundler や Vagrant でも利用されているそうです。
もっと詳しいことを知りたいのであれば、
&lt;a href=&#34;https://github.com/erikhuda/thor&#34;&gt;Github のリボジトリ&lt;/a&gt;や&lt;a href=&#34;https://github.com/erikhuda/thor/wiki&#34;&gt;Wiki&lt;/a&gt;をみるとよさそうです。
Thor についてはまだ勉強中でまだよくわかりませんが、コマンドラインから実行するプログラムを作成するのを支援するようです。&lt;/p&gt;

&lt;p&gt;継承関係は、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Rails::Generators::AppGenerator
  &amp;lt; Rails::Generators::AppBase
    &amp;lt; Rails::Generators::Base - [Thor::Actions, Rails::Generators::Actions]
      &amp;lt; Thor::Group - [Thor::Base, Thor::Shell, Thor::Invocation]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となっていて、 &lt;code&gt;&amp;lt;&lt;/code&gt; は継承しているところで &lt;code&gt;-&lt;/code&gt; はミックスインしているところです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Rails::AppBuilder&lt;/code&gt; には &lt;code&gt;Rails::Generators::AppGenerator&lt;/code&gt; で使用するレシピが書いてある感じになっています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Rails::Generators::AppGenerator&lt;/code&gt;に定義されているメソッドは &lt;code&gt;Thor::Group&lt;/code&gt; の規約により、定義された順番に実行されるようになっています。
&lt;code&gt;--template&lt;/code&gt;に指定したファイルが実行されるのは最後から二番目になります。
最後は&lt;code&gt;run_bundle&lt;/code&gt; が実行されます。これは &lt;code&gt;bundle install&lt;/code&gt; が実行されます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rails generator&lt;/code&gt; に対応したクラスのを多くは &lt;code&gt;Rails::Generators::NamedBase&lt;/code&gt; を継承しています。
継承関係は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Rails::Generators::NamedBase &amp;lt; Rails::Generators::Base
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となっているので、両者に共通するものが &lt;code&gt;Rails::Generators::Base&lt;/code&gt; になることがわかりました。
&lt;code&gt;rails new&lt;/code&gt; する時の処理をまるまる変更したいのであれば &lt;code&gt;Rails::AppBuilder&lt;/code&gt; を継承して&lt;code&gt;::AppBuilder&lt;/code&gt; を作成すればできそうな感じでした。&lt;/p&gt;

&lt;p&gt;ベースになるクラスは &lt;code&gt;railties/lib/rails/generators&lt;/code&gt; にあります。
generatorとして利用できるものは、ここに配置されているディレクトリに配置されています。
ないものもありますが、&lt;code&gt;rails g --help&lt;/code&gt; に表示されるものと概ね対応しています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;find -maxdepth 2 -type d
.
./css
./css/assets
./css/scaffold
./erb
./erb/controller
./erb/mailer
./erb/scaffold
./js
./js/assets
./rails
./rails/app
./rails/assets
./rails/controller
./rails/generator
./rails/helper
./rails/integration_test
./rails/migration
./rails/model
./rails/plugin_new
./rails/resource
./rails/resource_route
./rails/scaffold
./rails/scaffold_controller
./rails/task
./test_unit
./test_unit/controller
./test_unit/helper
./test_unit/integration
./test_unit/mailer
./test_unit/model
./test_unit/plugin
./test_unit/scaffold
./testing
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ rails g --help
(中略)
Rails:
  assets
  controller
  generator
  helper
  integration_test
  jbuilder
  mailer
  migration
  model
  resource
  scaffold
  scaffold_controller
  task

Coffee:
  coffee:assets

Jquery:
  jquery:install

Js:
  js:assets

TestUnit:
  test_unit:controller
  test_unit:helper
  test_unit:integration
  test_unit:mailer
  test_unit:model
  test_unit:plugin
  test_unit:scaffold
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;試してみる:6e7e0eab36b2e5b334925a8641b4649e&#34;&gt;試してみる&lt;/h3&gt;

&lt;p&gt;あまり面白い例ではないですが &lt;code&gt;rspec&lt;/code&gt; と &lt;code&gt;pry-byebug&lt;/code&gt; がインストールされた状態になるように挑戦してみました。
折角なので、`rails g scaffold user name:string\ も実行してみました。&lt;/p&gt;

&lt;p&gt;スクリプトはこんな感じになりました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem_group :development, :test do
  gem &#39;rspec-rails&#39;, &#39;~&amp;gt; 2.0&#39;
  gem &#39;pry-rails&#39;
  gem &#39;pry-byebug&#39;
end

run_bundle

git :init
git add: &#39;.&#39;
git commit: &amp;quot;-m &#39;initial commit&#39;&amp;quot;

generate &#39;rspec:install&#39;

git add: &#39;.&#39;
git commit: &amp;quot;-m &#39;rspec install&#39;&amp;quot;

generate :scaffold, &#39;user name:string&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;手順としては、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;rspec-rails の gem 追加&lt;/li&gt;
&lt;li&gt;pry-byebug の gem 追加&lt;/li&gt;
&lt;li&gt;bundle install&lt;/li&gt;
&lt;li&gt;コミット&lt;/li&gt;
&lt;li&gt;rspec の設定&lt;/li&gt;
&lt;li&gt;コミット&lt;/li&gt;
&lt;li&gt;scaffold&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;となります。&lt;/p&gt;

&lt;p&gt;動作確認は &lt;code&gt;rake db:migrate&lt;/code&gt; 後に&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;rake spec&lt;/li&gt;
&lt;li&gt;rails c&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;など確認してみてください。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bundle install&lt;/code&gt; は時間がかかりそうなので、できるだけ回数を減らしたいのです。
なので、gem を設定してから &lt;code&gt;bundle install&lt;/code&gt; することで2回に抑えました。
コミットの部分はメソッドを用意しても良さそうですね。&lt;/p&gt;

&lt;p&gt;これをうまく使っていくと初期設定が楽できそうです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>GnuPG で遊ぶ - 暗号化してみる</title>
          <link>https://blog.eiel.info/blog/2013/07/31/gpg/</link>
          <pubDate>Wed, 31 Jul 2013 19:26:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/07/31/gpg/</guid>
          <description>

&lt;p&gt;GnuPG 使う機会が無い。無さすぎるよ。使わないと忘れそうなので、たまには遊ぶ。ついでに広まればいいな。ということで、整理しながら試す。&lt;/p&gt;

&lt;p&gt;そうそう、これは &lt;a href=&#34;http://great-h.github.io/events/event-011.html&#34;&gt;すごい広島 #011&lt;/a&gt; で遊んだことです。&lt;/p&gt;

&lt;h3 id=&#34;gpgとは:57bbd94ea7d6f1e7f7f5c97174866510&#34;&gt;GPGとは&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.gnupg.org/&#34;&gt;GNU Privacy Guard&lt;/a&gt; という暗号化ソフト。ざっくりとは &lt;a href=&#34;http://ja.wikipedia.org/wiki/GNU_Privacy_Guard&#34;&gt;Wikipedia の GPG&lt;/a&gt;とかみてみると良いかも。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ja.wikipedia.org/wiki/Pretty_Good_Privacy&#34;&gt;PGPの実装のひとつ&lt;/a&gt;です。
これを使うと暗号化とか署名とかできる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;暗号化すると特定の人しか解読できないファイルが作成できる&lt;/li&gt;
&lt;li&gt;署名すると特定の人が作成したことを示せる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;メールの暗号化にも使える。しかし、私は暗号化されたメールを受信したことがない。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gnupg.hclippr.com/howto.html&#34;&gt;GnuPGの使い方&lt;/a&gt; あたりを見ながら復習。&lt;/p&gt;

&lt;h3 id=&#34;gpg-がインストールされているか確認する:57bbd94ea7d6f1e7f7f5c97174866510&#34;&gt;GPG がインストールされているか確認する&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ gpg --version
gpg (GnuPG) 2.0.20
libgcrypt 1.5.3
Copyright (C) 2013 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Home: xxxx
サポートしているアルゴリズム:
公開鍵: RSA, ELG, DSA
暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256,
      TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256
ハッシュ: MD5, SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
圧縮: 無圧縮, ZIP, ZLIB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;入ってるとこんな感じ。&lt;/p&gt;

&lt;h3 id=&#34;暗号化してみる:57bbd94ea7d6f1e7f7f5c97174866510&#34;&gt;暗号化してみる&lt;/h3&gt;

&lt;p&gt;暗号化する場合&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;暗号化するための鍵を取得する&lt;/li&gt;
&lt;li&gt;暗号化する&lt;/li&gt;
&lt;li&gt;読みたい人に送りつける&lt;/li&gt;
&lt;li&gt;読む人が自分の鍵で複合する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;暗号化するための鍵が必要になります。
暗号化してメールを送って欲しい人は「公開鍵」という種類の鍵を鍵を公開しています。なので、これを取得すれば暗号化できます。&lt;/p&gt;

&lt;p&gt;復号化するほうは「公開鍵」とペアになっている「秘密鍵」を使います。
これは復号化する人しか持っていないので、メールの暗号化が成立するわけです。&lt;/p&gt;

&lt;h3 id=&#34;実際にやってみる:57bbd94ea7d6f1e7f7f5c97174866510&#34;&gt;実際にやってみる&lt;/h3&gt;

&lt;p&gt;実際にやってみたいと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;メインのコンピュータで自分の鍵を作成する&lt;/li&gt;
&lt;li&gt;自分の公開鍵を公開する&lt;/li&gt;
&lt;li&gt;別のコンピュータで、公開鍵を取得する&lt;/li&gt;
&lt;li&gt;別のコンピュータで暗号化したファイルを作成する&lt;/li&gt;
&lt;li&gt;メインのコンピュータにファイルを送る&lt;/li&gt;
&lt;li&gt;メインのコンピュータで復号する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というシナリオでやります。&lt;/p&gt;

&lt;p&gt;メインのコンピュータでの実行は &lt;code&gt;main $&lt;/code&gt; をつけて、別のマシンの場合は &lt;code&gt;sub $&lt;/code&gt; をつけて明示しておきます。
サブのコンピュータを用意する簡単な方法は仮想マシンでしょうか。&lt;/p&gt;

&lt;h4 id=&#34;メインのコンピュータで自分の鍵を作成する:57bbd94ea7d6f1e7f7f5c97174866510&#34;&gt;メインのコンピュータで自分の鍵を作成する&lt;/h4&gt;

&lt;p&gt;鍵がないことには始まらないので作成します。&lt;code&gt;--key-gen&lt;/code&gt; オプションを使用します。&lt;/p&gt;

&lt;p&gt;すでに作成しているので、実際には使用しない鍵で例をあげます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;main $ gpg --gen-key
ご希望の鍵の種類を選択してください:
   (1) RSA and RSA (default)
   (2) DSA and Elgamal
   (3) DSA (署名のみ)
   (4) RSA (署名のみ)
選択? 1

SA keys may be between 1024 and 4096 bits long.
What keysize do you want? (2048)
要求された鍵長は2048ビット
鍵の有効期限を指定してください。
         0 = 鍵は無期限
      &amp;lt;n&amp;gt;  = 鍵は n 日間で満了
      &amp;lt;n&amp;gt;w = 鍵は n 週間で満了
      &amp;lt;n&amp;gt;m = 鍵は n か月間で満了
      &amp;lt;n&amp;gt;y = 鍵は n 年間で満了
鍵の有効期間は? (0)
これで正しいですか? (y/N) y
あなたの鍵を同定するためにユーザーIDが必要です。
このソフトは本名、コメント、電子メール・アドレスから
次の書式でユーザーIDを構成します:
    &amp;quot;Heinrich Heine (Der Dichter) &amp;lt;heinrichh@duesseldorf.de&amp;gt;&amp;quot;

本名: Tomohiko Himura
電子メール・アドレス: eiel at eiel.info
コメント: eiel
次のユーザーIDを選択しました:
    “Tomohiko Himura (eiel) &amp;lt;eiel at eiel.inof&amp;gt;”
名前(N)、コメント(C)、電子メール(E)の変更、またはOK(O)か終了(Q)? O
秘密鍵を保護するためにパスフレーズがいります。

今から長い乱数を生成します。キーボードを打つとか、マウスを動かす
とか、ディスクにアクセスするとかの他のことをすると、乱数生成子で
乱雑さの大きないい乱数を生成しやすくなるので、お勧めいたします。
......+++++
.+++++
今から長い乱数を生成します。キーボードを打つとか、マウスを動かす
とか、ディスクにアクセスするとかの他のことをすると、乱数生成子で
乱雑さの大きないい乱数を生成しやすくなるので、お勧めいたします。
.+++++
十分な長さの乱数が得られません。OSがもっと乱雑さを収集
できるよう、何かしてください! (あと75バイトいります)
.gpg: 鍵CB547A37を絶対的に信用するよう記録しました
公開鍵と秘密鍵を作成し、署名しました。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例に使用したメールアドレスは存在しません。あと &lt;code&gt;@&lt;/code&gt; を &lt;code&gt;at&lt;/code&gt; に置き換えてます。&lt;/p&gt;

&lt;p&gt;作成した「公開鍵」があることを確認します。&lt;code&gt;--list-keys&lt;/code&gt; オプションを使用します。鍵IDは &lt;code&gt;CB547A37&lt;/code&gt; になります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;main $ gpg --list-keys
pub   2048R/CB547A37 2013-07-31
uid                  Tomohiko Himura (eiel) &amp;lt;eiel@eiel.info&amp;gt;
sub   2048R/C2A0FFF5 2013-07-31
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;秘密鍵があることを確認します。&lt;code&gt;--list-secret-keys&lt;/code&gt; オプションを使用します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;main $ gpg --list-secret-keys
/home/eiel/.gnupg/secring.gpg
-----------------------------
sec   2048R/CB547A37 2013-07-31
uid                  Tomohiko Himura (eiel) &amp;lt;eiel@eiel.info&amp;gt;
ssb   2048R/C2A0FFF5 2013-07-31
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;みたいな出力がでました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sec   2048R/CA566D81 2009-11-21&lt;/code&gt;
 というのは 秘密鍵で 2048 の RSA の鍵で、 鍵ID が &lt;code&gt;CA566D81&lt;/code&gt; というように読めそうです。
公開鍵の場合は pub がついているようです。
ssb や sub はなんなのでしょうか。
どこを見ればわかるのか知りたいです。&lt;/p&gt;

&lt;h4 id=&#34;自分の公開鍵を公開する:57bbd94ea7d6f1e7f7f5c97174866510&#34;&gt;自分の公開鍵を公開する&lt;/h4&gt;

&lt;p&gt;鍵を公開するのには 鍵サーバというものが提供されています。
&lt;code&gt;--send-keys&lt;/code&gt; オプションを使うと簡単に登録できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;main $ gpg --send-keys CB547A37
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;間違えて送ってしまったものを削除するには &lt;code&gt;--gen-revoke&lt;/code&gt; で執行証明書を作成して、&lt;code&gt;revoke.asc&lt;/code&gt; に保存している場合は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;main $ gpg --send-keys CB547A37 &amp;lt; revoke.asc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で削除できました。
正しいやりかたかどうかよくわからないので、ざっくりと書いておきます。&lt;/p&gt;

&lt;p&gt;公開されている鍵を探してみます。
相手のメールアドレスがだいたいわかれば検索できます。
以下は以前公開したものを利用してます。
都合によりさきほど作成したものと違います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub $ gpg --search-keys eiel.hal
gpg: “eiel.hal”をhkpサーバーkeys.gnupg.netから検索
(1)	Tomohiko Himura &amp;lt;eiel.hal@gmail.com&amp;gt;
	Tomohiko Himura &amp;lt;tomohiko.himura@gmail.com&amp;gt;
	  2048 bit RSA key CA566D81, 作成: 2009-11-21
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;--search-keys&lt;/code&gt; オプションで鍵サーバから検索できます。鍵のID は &lt;code&gt;CA566D81&lt;/code&gt;です。
検索で見つけられない場合は、Webサイトなどで公開している場合があります。
鍵を見つけたので、鍵を取得します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub $ gpg --recv-keys CA566D81
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで鍵が取得できました。確認してみます。
&lt;code&gt;--list-keys&lt;/code&gt; オプション` を使用します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pub   2048R/CA566D81 2009-11-21
uid                  Tomohiko Himura &amp;lt;eiel.hal at gmail.com&amp;gt;
uid                  Tomohiko Himura &amp;lt;tomohiko.himura at gmail.com&amp;gt;
sub   2048R/72D733CE 2009-11-21
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;間違えた時のために消す方法も確認します。
&lt;code&gt;--delete-keys&lt;/code&gt; を使います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub $ gpg --delete-keys CA566D81
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;別のコンピュータで暗号化したファイルを作成する:57bbd94ea7d6f1e7f7f5c97174866510&#34;&gt;別のコンピュータで暗号化したファイルを作成する&lt;/h4&gt;

&lt;p&gt;暗号化してみます。
まずは、暗号化するファイルを用意します。
&lt;code&gt;hoge.txt&lt;/code&gt; としたことにします。次に &lt;code&gt;-e&lt;/code&gt; 使うことで暗号化を示し、&lt;code&gt;-r&lt;/code&gt; で、どの鍵を使うか設定します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub $ gpg -e -r CA566D81 hoge.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすると、&lt;code&gt;hoge.txt.gpg&lt;/code&gt; というファイルが作成されました。
中身を見て確認すると暗号されていると思います。&lt;/p&gt;

&lt;p&gt;信用できてない鍵を使用している旨が出ます。
鍵の信頼性を上げる方法は宿題にしました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-r&lt;/code&gt; には メールアドレスでもOKでした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg -e -r eiel.hal@gmail.com hoge.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;メインのコンピュータにファイルを送る:57bbd94ea7d6f1e7f7f5c97174866510&#34;&gt;メインのコンピュータにファイルを送る&lt;/h4&gt;

&lt;p&gt;なんとかして取得しましょう。
私は scp で取得しました。&lt;/p&gt;

&lt;h4 id=&#34;メインのコンピュータで復号する:57bbd94ea7d6f1e7f7f5c97174866510&#34;&gt;メインのコンピュータで復号する&lt;/h4&gt;

&lt;p&gt;復号します。
オプションはいりません。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;main $ gpg hoge.txt.gpg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;hoge.txt&lt;/code&gt; が作成されています。&lt;/p&gt;

&lt;p&gt;試しに、別のコンピュータで復号してみました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg hoge.txt.gpg
gpg: 2048-ビットRSA鍵, ID 72D733CE, 日付2009-11-21に暗号化されました
      “Tomohiko Himura &amp;lt;eiel.hal@gmail.com&amp;gt;”
gpg: 復号に失敗しました: 秘密鍵が得られません
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;見事に失敗しました。&lt;/p&gt;

&lt;p&gt;署名も似たような感じにできると思います。&lt;/p&gt;

&lt;h3 id=&#34;複数人が復号できるファイルを作ってみる:57bbd94ea7d6f1e7f7f5c97174866510&#34;&gt;複数人が復号できるファイルを作ってみる&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;-r&lt;/code&gt; を複数指定すればできた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gpg -e -r メールアドレス -r メールアドレス2 hoge.txt

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;まとめ:57bbd94ea7d6f1e7f7f5c97174866510&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;暗号化したいなら相手の公開鍵が必要です。公開鍵を公開しないと暗号メールも届くことはないでしょう。たぶん。&lt;/p&gt;

&lt;p&gt;自分で暗号化して、自分だけ復号化したい場合は、ひとつのコンピュータだけでできます。
今回は復号できないのを確認できるように、別々のコンピュータで確認しました。&lt;/p&gt;

&lt;p&gt;メールで使う場合はメールクライアントが自動でやってくれるようにできると思います。流れがわかっているほうが安心して使えると思います。
今度は鍵の信頼性を上げる方法や署名の方法を試してみたいです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Mac で WMA ファイル MP3 に変換するのに wavePad を利用した</title>
          <link>https://blog.eiel.info/blog/2013/07/29/wavepad/</link>
          <pubDate>Mon, 29 Jul 2013 16:32:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/07/29/wavepad/</guid>
          <description>&lt;p&gt;Mac で WMA ファイル編集して MP3 に変換するのに &lt;a href=&#34;http://www.nch.com.au/wavepad/jp/index.html&#34;&gt;wavePad&lt;/a&gt; を利用しました。
営利目的でなければ無料で利用できます。&lt;/p&gt;

&lt;p&gt;QuickTime で WMV を再生可能にする Flik4Mac だと Flip4Macを使用している旨が音声に追加されてしまいますので、これを使いました。&lt;/p&gt;

&lt;p&gt;トリミングなど編集もできて出力形式も指定できるのでとても助かりました。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Github の Feed が溜りすぎてやばい。ついでに気になるのをメモっとく - すごい広島 010</title>
          <link>https://blog.eiel.info/blog/2013/07/24/github-feed-in-these-days/</link>
          <pubDate>Wed, 24 Jul 2013 19:18:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/07/24/github-feed-in-these-days/</guid>
          <description>

&lt;p&gt;この記事は &lt;a href=&#34;http://great-h.github.io/events/event-010.html&#34;&gt;すごい広島 #010&lt;/a&gt; でやったこと。&lt;/p&gt;

&lt;p&gt;GitHub の News Feed が読めてない、ヤバイ。6月17日から溜まってる!
この時間を使って眺めて気になったのを簡単にまとめる。
ようするに、頭の中を垂れ流すだけの記事です。&lt;/p&gt;

&lt;h3 id=&#34;one-hundred-ideas-for-computing:9e6bb027dfef1ba27a4cf9db9fa8aa66&#34;&gt;One Hundred Ideas for Computing&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/samsquire/ideas&#34;&gt;One Hundred Ideas for Computing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「クラウドコンピューティングでやりたい100のこと」といったころなのでしょうか。本当に100個あってびびった。ネタがないときのインプットにしたい。&lt;/p&gt;

&lt;p&gt;あと、すでに存在しているものや、似ているものにリンクが貼られていて面白いです。100個あるとタイトルを読むだけで精一杯でした。&lt;/p&gt;

&lt;h3 id=&#34;http-configuration:9e6bb027dfef1ba27a4cf9db9fa8aa66&#34;&gt;http_configuration&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/bdurand/http_configuration&#34;&gt;http_configuration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ruby の gem。Rails の plugin としても利用可能らしい。&lt;/p&gt;

&lt;p&gt;NET::HTTP のグローバル設定が可能らしい。タイムアウトする時間やプロキシを登録しておけば、自動で引き継ぐ感じなのでしょうか。試してないから知らない。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config = Net::HTTP::Configuration.new(:proxy =&amp;gt; :environment, :read_timeout =&amp;gt; 10, :open_timeout =&amp;gt; 5)
config.apply(:read_timeout =&amp;gt; 5) do
  Net::HTTP.get(&#39;http://example.com/&#39;)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;pjaxメモ:9e6bb027dfef1ba27a4cf9db9fa8aa66&#34;&gt;pjaxメモ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/furu/6006109&#34;&gt;pjaxメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ブラウザの履歴操作のメモのようだ。整然としていてナイスである。
まだまだ充実していくんだろうか。&lt;/p&gt;

&lt;h3 id=&#34;glim:9e6bb027dfef1ba27a4cf9db9fa8aa66&#34;&gt;glim&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/thias/glim&#34;&gt;GRUB2 Live ISO Multiboot - glim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;いろんなOS Live CD をブートできる USB メモリや CD を作成できるみたい。
CDイメージを用意する必要があるのか気になったけど、そこまでは見ませんでした。&lt;/p&gt;

&lt;h3 id=&#34;boris:9e6bb027dfef1ba27a4cf9db9fa8aa66&#34;&gt;boris&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/d11wtq/boris&#34;&gt;boris&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PHP の REPLのようだ。Read Eval Print Loop。対話環境というやつか。&lt;/p&gt;

&lt;h3 id=&#34;reform-example:9e6bb027dfef1ba27a4cf9db9fa8aa66&#34;&gt;reform example&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gogogarrett/reform_example/tree/master/app&#34;&gt;reform example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/apotonick/reform&#34;&gt;reform&lt;/a&gt; という フォームを作成するための gem の利用例のようです。
reform を知らないので、そっちも見てみた。&lt;/p&gt;

&lt;p&gt;Rails でも利用できるし単体でも利用できるみたい。
ネストしたモデルが扱いやすいような感じなのでしょうか。わかりません。&lt;/p&gt;

&lt;p&gt;サンプルの中に&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;app/services&lt;/li&gt;
&lt;li&gt;app/forms&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というディレクトリがあって、モデルにはバリデーションが全く書かれていないのが興味深いです。&lt;/p&gt;

&lt;h3 id=&#34;i18n-for-javascirpt:9e6bb027dfef1ba27a4cf9db9fa8aa66&#34;&gt;I18n for Javascirpt&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fnando/i18n-js&#34;&gt;i18n-js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rails の i18n を JavaScirpt 上でも利用するためのライブラリのようです。
JavaScript 側でやることが増えてきてるので気になるところ。&lt;/p&gt;

&lt;h3 id=&#34;bower:9e6bb027dfef1ba27a4cf9db9fa8aa66&#34;&gt;Bower&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/bower/bower&#34;&gt;Bower&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最近よくみかける JavaScirpt の Bundler 的なやつ。
Rails でも使う人が増えてるらしいけど、私はまだ使えてない。&lt;/p&gt;

&lt;h3 id=&#34;rspec-style-guide:9e6bb027dfef1ba27a4cf9db9fa8aa66&#34;&gt;Rspec Style Guide&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/howaboutwe/rspec-style-guide&#34;&gt;Rspec Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あとで 10回 読む。中はまだ見てない。watch する。しばらく毎日読む。&lt;/p&gt;

&lt;h3 id=&#34;rspec-best-practices:9e6bb027dfef1ba27a4cf9db9fa8aa66&#34;&gt;Rspec Best Practices&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/crible/rspec-best-practices&#34;&gt;Rspec Best Practices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あとで 10回 読む。中はまだ見てない。watch する。
11ヶ月まえなので最近の傾向が取り入れられてるのが気になる。&lt;/p&gt;

&lt;h3 id=&#34;kawaiiemailaddress:9e6bb027dfef1ba27a4cf9db9fa8aa66&#34;&gt;KawaiiEmailAddress&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/esminc/kawaii_email_address&#34;&gt;KawaiiEmailAddress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Railsで docomoやらauやらの Email アドレスのバリデーションができるようだ。&lt;/p&gt;

&lt;h3 id=&#34;byebug:9e6bb027dfef1ba27a4cf9db9fa8aa66&#34;&gt;byebug&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/deivid-rodriguez/byebug&#34;&gt;byebug&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;バグとさようなら。Ruby のデバッガのようです。
特徴は…読む元気がなかった。pryが起動できるとかは見えた。
気になる。&lt;/p&gt;

&lt;h3 id=&#34;phantomflow:9e6bb027dfef1ba27a4cf9db9fa8aa66&#34;&gt;PhantomFlow&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Huddle/PhantomFlow&#34;&gt;PhantomFLow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;すごく気になる。ウェブユーザインターフェースのテストをするために、フローを視覚化してるツールのように見える。
シナリオを分岐させられる感じなのでしょうか。気になります。&lt;/p&gt;

&lt;h3 id=&#34;cssecss:9e6bb027dfef1ba27a4cf9db9fa8aa66&#34;&gt;CSSeCSS&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zmoazeni/csscss&#34;&gt;CSSCSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CSSを解析して、重複してるコードを見つけてくれる模様。&lt;/p&gt;

&lt;h3 id=&#34;default-value-for:9e6bb027dfef1ba27a4cf9db9fa8aa66&#34;&gt;default_value_for&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/FooBarWidget/default_value_for&#34;&gt;default_value_for&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;rails のプラグイン。モデルのデフォルト値を簡単に設定できるようです。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:9e6bb027dfef1ba27a4cf9db9fa8aa66&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;50件ぐらいは消化した。まだ140件ぐらいある。もうちょっと消化したかった。&lt;/p&gt;

&lt;p&gt;メモしながらなのでペースは落ちますが「メモを残すぐらいは確認しないといけない」と意識できます。
読んだ気にならず、しっかり読めて良いかもしれません。
実際に試す時間をどう取るのかというのが悩みどころです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Exception Notification の 4.x 系へのアップグレード</title>
          <link>https://blog.eiel.info/blog/2013/07/24/upgrade-exception-notification-4-dot-x/</link>
          <pubDate>Wed, 24 Jul 2013 10:47:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/07/24/upgrade-exception-notification-4-dot-x/</guid>
          <description>&lt;p&gt;Rails のプラグインである &lt;a href=&#34;http://smartinez87.github.io/exception_notification/&#34;&gt;Exception Notification&lt;/a&gt; を gem upgrade したらエラーが起きた。
例外が発生したらメールを送信してくれるやつです。
最近は &lt;a href=&#34;http://errbit.github.io/errbit/&#34;&gt;Errbit&lt;/a&gt; とかが流行りらしいです。
ブルジョワ層は &lt;a href=&#34;https://airbrake.io/pages/home&#34;&gt;Airbrake&lt;/a&gt; とか使うらしいです。&lt;/p&gt;

&lt;p&gt;話が剃れた。起きたエラーは以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;undefined method `new&#39; for ExceptionNotifier:Module
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;対処方法は公式に書いてある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://smartinez87.github.io/exception_notification/#getting-started/upgrading-to-4-x-version&#34;&gt;Upgrading to 4.x version - Exception Notification&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ミドルウェアの名前が &lt;code&gt;ExceptionNotification::Rack&lt;/code&gt; に変更された&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第2引数に &lt;code&gt;:email&lt;/code&gt; という上位にキーが必要になった&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;production モードじゃないと発生しないので、Jenkins などで &lt;code&gt;rake assets:precompile&lt;/code&gt; して置かないと発見が deploy するまで遅れそうです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Mac で jenkins</title>
          <link>https://blog.eiel.info/blog/2013/07/23/jenkins-on-mac/</link>
          <pubDate>Tue, 23 Jul 2013 11:45:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/07/23/jenkins-on-mac/</guid>
          <description>

&lt;p&gt;Mac で ローカルに「すごい cron」的に使うために Jenkins を入れて遊んでいます。
その辺の理由は &lt;a href=&#34;https://blog.eiel.info/blog/2013/07/08/hiroshimarb-32/&#34;&gt;広島Ruby勉強会 #32&lt;/a&gt; でも話しました。&lt;/p&gt;

&lt;p&gt;特に動作に関連する点で気になった部分をメモしておきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;アップデートの方法&lt;/li&gt;
&lt;li&gt;再起動する方法&lt;/li&gt;
&lt;li&gt;Jenkins を止める方法&lt;/li&gt;
&lt;li&gt;日本語が化けるのを直す&lt;/li&gt;
&lt;li&gt;127.0.0.1 でのみアクセス可能にする&lt;/li&gt;
&lt;li&gt;実行ユーザの変更&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;インストールには Native Package を利用しました。
&lt;a href=&#34;http://jenkins-ci.org/&#34;&gt;http://jenkins-ci.org/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;アップデートの方法:6356b0d1136fba0dd76a225c8face55d&#34;&gt;アップデートの方法&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;/Applacations/Jenkins/jenkins.war&lt;/code&gt; を差し替えて、再起動すればOK。
最新版がある場合は「Jenkinsの管理」の画面にリンクがあるので簡単にダウンロードできます。&lt;/p&gt;

&lt;h3 id=&#34;jenkins-を再起動する:6356b0d1136fba0dd76a225c8face55d&#34;&gt;Jenkins を再起動する&lt;/h3&gt;

&lt;p&gt;プラグインのインストールした時に再起動するを選択できるけど再起動しない。これは私の環境なのかもしれませんが、よくわかりません。&lt;/p&gt;

&lt;p&gt;仕方ないのでシャットダウンの準備ができてる状態にして、プロセスを kill しています。
あとは &lt;code&gt;launchd&lt;/code&gt; が自動的に起動してくれます。
「Activity Moniter」で java を検索して kill するのが一般的でしょうか。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;launchd&lt;/code&gt; をunload して loadしてもよいです。
その場合は以下のようにします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist
sudo launchctl   load /Library/LaunchDaemons/org.jenkins-ci.plist
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;jenkins-を止める方法:6356b0d1136fba0dd76a225c8face55d&#34;&gt;Jenkins を止める方法&lt;/h3&gt;

&lt;p&gt;Native Package でインストールすると launchd に登録され、起動時に自動的に起動するようになります。&lt;/p&gt;

&lt;p&gt;これを止めるには以下のコマンドを使います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;アンインストールしようとして &lt;code&gt;/Applications/Jenkins&lt;/code&gt; を捨ててしまうと、launchd が jenkins を起動しようとするため、エラーが黙々とログに溜まります。&lt;/p&gt;

&lt;h3 id=&#34;日本語が化けるのを直す:6356b0d1136fba0dd76a225c8face55d&#34;&gt;日本語が化けるのを直す&lt;/h3&gt;

&lt;p&gt;出力にある日本語が化けてたので、 file.encoding=UTF-8 を設定しました。
&lt;code&gt;/Library/Application Support/Jenkins/jenkins-runner.sh&lt;/code&gt; を編集します。
javaArgs の初期値に追加しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;javaArgs=&amp;quot;-Dfile.encoding=UTF-8&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;本当はこのファイルを書き換えたくないけど、妙案が浮かばなかった。
アップデートする際に書き換えるファイルが &lt;code&gt;jenkins.war&lt;/code&gt; なので気にしないことにした。&lt;/p&gt;

&lt;h3 id=&#34;127-0-0-1-でのみアクセス可能にする:6356b0d1136fba0dd76a225c8face55d&#34;&gt;127.0.0.1 でのみアクセス可能にする&lt;/h3&gt;

&lt;p&gt;このままだと 同じネットワーク上にいる人がアクセスできてしまう。
セキュリティ設定しないと、Jenkinsの性質上、相手に好きなようにローカルPC を操作されてしまいます。&lt;/p&gt;

&lt;p&gt;自分だけアクセスできるようにします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo touch /Library/Preferences/org.jenkins-ci
sudo defaults write /Library/Preferences/org.jenkins-ci httpListenAddress -string 127.0.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;起動スクリプトが httpListenAddress を defaults で設定しておくと読むようになっています。他にも ポート変更などができます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/Thanks+for+using+OSX+Installer&#34;&gt;参考: Jenkins Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;認証を付けるという手もあると思いますが、こちらのほうが安全だし、ログインの手間がありません。&lt;/p&gt;

&lt;h3 id=&#34;実行ユーザの変更:6356b0d1136fba0dd76a225c8face55d&#34;&gt;実行ユーザの変更&lt;/h3&gt;

&lt;p&gt;cron の代わりに利用しているため、自分の権限で仕事してくれないと困る場面があります。
あまり良くはないですが、仕方なく変更しています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;launchd&lt;/code&gt; で実行ユーザを指定できるので、&lt;code&gt;/Library/LaunchDaemons/org.jenkins-ci.plist&lt;/code&gt; を編集します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;UserName&amp;lt;/key&amp;gt;
&amp;lt;string&amp;gt;ユーザ名&amp;lt;/string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;の部分を編集します。&lt;/p&gt;

&lt;p&gt;あとは &lt;code&gt;JENKINS_HOME&lt;/code&gt; に設定しているディレクトリの所有者が違うのであれば、変更しておきましょう。&lt;/p&gt;

&lt;p&gt;「日本語が化けるのを直す」のところと同様にあまりいじりたくないですが、気にしないことにしました。&lt;/p&gt;

&lt;h3 id=&#34;まとめ的な:6356b0d1136fba0dd76a225c8face55d&#34;&gt;まとめ的な&lt;/h3&gt;

&lt;p&gt;メモリやらCPUパワーがあまってないマシンではおすすめできませんが、それなりに便利です。
とりあえず試しておくのに、知っておきたくなりそうな情報を混じえながら個人的なメモをまとめてみました。
使い方がわかってきたらチームのワークフローに混ぜていきたいところですね。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Ruby on Rails で NOT IN な SQL をかく。</title>
          <link>https://blog.eiel.info/blog/2013/07/20/not-in-on-rails/</link>
          <pubDate>Sat, 20 Jul 2013 15:53:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/07/20/not-in-on-rails/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://guides.rubyonrails.org/active_record_querying.html#not-conditions&#34;&gt;Rails 4 で NOT な条件をもつ WHERE 句 が非常に書きやすくなりました。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rails 4 なら NOT IN な SQL も簡単に書けます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.where.not( name: [&amp;quot;hoge&amp;quot;,&amp;quot;goro&amp;quot;] )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;条件にリストを渡せばよいです。SQLは以下のようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT &amp;quot;users&amp;quot;.* FROM &amp;quot;users&amp;quot;
  WHERE (&amp;quot;users&amp;quot;.&amp;quot;name&amp;quot; NOT IN (&#39;hoge&#39;, &#39;goro&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;サブクエリも使えます。これが便利すぎて困る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;query = User.select(:name)
User.where.not name: query
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT &amp;quot;users&amp;quot;.* FROM &amp;quot;users&amp;quot;
  WHERE (&amp;quot;users&amp;quot;.&amp;quot;name&amp;quot; NOT IN (SELECT name FROM &amp;quot;users&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;rails-3-の話:d52174ed3f9dfee46acae1194d43608e&#34;&gt;Rails 3 の話&lt;/h3&gt;

&lt;p&gt;そうはいっても、Rails 4 にすぐには更新できないプロジェクトがあるので、これに慣れてしまうと非常につらい。折角なのでメモしておく。&lt;/p&gt;

&lt;h4 id=&#34;where-に文字列を渡す:d52174ed3f9dfee46acae1194d43608e&#34;&gt;where に文字列を渡す&lt;/h4&gt;

&lt;p&gt;格好悪いけど、とりあえずごまかす場合はこれを使う。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.where(&amp;quot;name NOT IN (&#39;hoge&#39;, &#39;goro&#39;)&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;文字列で渡す。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;?&lt;/code&gt; を使うとエスケープで泣きたくなるので、手軽には使えない。右辺も文字列で逃げます。&lt;/p&gt;

&lt;p&gt;サブクエリを使うときは、こんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;query = User.select(:name)
User.where(&amp;quot;name NOT IN (#{query.to_sql})&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SQLを直接書くしかない。複雑な query だとつらいので &lt;code&gt;to_sql&lt;/code&gt; メソッドで逃げます。&lt;/p&gt;

&lt;h4 id=&#34;squeel-を使う:d52174ed3f9dfee46acae1194d43608e&#34;&gt;squeel を使う&lt;/h4&gt;

&lt;p&gt;Rails 3 だと NOT なSQL を書きづらいので、 &lt;a href=&#34;https://github.com/ernie/squeel&#34;&gt;squeel&lt;/a&gt; をよく使っています。&lt;/p&gt;

&lt;p&gt;squeel を使っていればこんな風に書けます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.where { name &amp;lt;&amp;lt; [&amp;quot;hoge&amp;quot;,&amp;quot;mogu&amp;quot;] }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where に ブロックで引数が渡せるようになって &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; という演算子を使うと NOT IN になります。&lt;code&gt;name&lt;/code&gt; はシンボルではないのも ポイントです。&lt;/p&gt;

&lt;p&gt;ブロックで渡すので、スコープ内で name に値が束縛されているとそちらを参照してしまうので注意。&lt;/p&gt;

&lt;p&gt;サブクエリも使える。素晴らしい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;query = User.select(:name)
User.where { name &amp;lt;&amp;lt; query }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;squeel を使うと LIKE やら OUTER JOIN やらもできます。便利。&lt;/p&gt;

&lt;h4 id=&#34;arel-の世界へ行く:d52174ed3f9dfee46acae1194d43608e&#34;&gt;arel の世界へ行く&lt;/h4&gt;

&lt;p&gt;arel で構築した sql を where に渡す方法がある。
squeel をインストールしたくない時に。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;users = User.arel_table
User.where( users[:name].not_in([&#39;hoge&#39;,&#39;mogu&#39;]) )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;arel 自体あまり解説してる人がいないのでなかなか勉強しにくいのが欠点。
わかってくるとなんとなくでも書けます。&lt;/p&gt;

&lt;p&gt;サブクエリもいけます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;query = User.select(:name)
users = User.arel_table
User.where( users[:name].not_in(query.arel) )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ActiveRecord::Relation&lt;/code&gt; はそのまま渡せませんが &lt;code&gt;arel&lt;/code&gt; メソッドで変換可能です。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:d52174ed3f9dfee46acae1194d43608e&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;Rails 4 の &lt;code&gt;not&lt;/code&gt; 便利です。&lt;/p&gt;

&lt;p&gt;squeel も良いです.
私は最初は仕組みがわからなくて、気持ち悪かったです。
ところが、 &lt;code&gt;where&lt;/code&gt; メソッドの実装を見たら察しがつきました。
利用する場合は、一度目に目にすることをおすすめします。&lt;/p&gt;

&lt;p&gt;Rails3 からの &lt;code&gt;ActiveRecord::Relation&lt;/code&gt; になれると元の世界に帰れる気がしません。&lt;/p&gt;

&lt;p&gt;この記事のタイトルに悩んだけど、「書きはじめた理由でいいや」と、結局考えるのを放棄した。&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=eiel-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=B00P0UR1RU&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
</description>
        </item>
      
    
      
        <item>
          <title>シンプルなプロンプトを提供する zsh pure を試してみた</title>
          <link>https://blog.eiel.info/blog/2013/07/17/zsh-pure/</link>
          <pubDate>Wed, 17 Jul 2013 21:04:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/07/17/zsh-pure/</guid>
          <description>

&lt;p&gt;この記事は &lt;a href=&#34;http://great-h.github.io/events/event-009.html&#34;&gt;すごい広島 #9&lt;/a&gt; で行なったことです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/sindresorhus/pure&#34;&gt;Pure&lt;/a&gt; という シンプルなプロンプトを提供する zshスクリプト を導入してみました。&lt;/p&gt;

&lt;p&gt;機能としては&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;バージョン管理システムのブランチを表示&lt;/li&gt;
&lt;li&gt;git の管理下で、ワークツリーに変更がある場合は &lt;code&gt;*&lt;/code&gt; が表示される&lt;/li&gt;
&lt;li&gt;実行の長いコマンドを実行した時に実行時間が表示される&lt;/li&gt;
&lt;li&gt;デフォルトのユーザと違う場合は &lt;code&gt;ユーザ名@ホスト名&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といった機能があります。&lt;/p&gt;

&lt;p&gt;カレントパス と ブランチ名を表示している部分は print を使い出力していて、PROMPT は &lt;code&gt;&amp;gt;&lt;/code&gt; だけの表示となってます。
そのため &lt;code&gt;Ctrl+l&lt;/code&gt; を入力すると非常にすっきりした画面になります。&lt;/p&gt;

&lt;h1 id=&#34;設定方法:e8d749eee26e5f97e74e361cc90b92ff&#34;&gt;設定方法&lt;/h1&gt;

&lt;p&gt;私は &lt;code&gt;~/zsh.d/&lt;/code&gt; に zsh のスクリプトを集めていますので、それを前提に書きます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget https://raw.github.com/sindresorhus/pure/master/prompt.zsh -O ~/.zsh.d/prompt.zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そして &lt;code&gt;~/.zshrc&lt;/code&gt; を編集します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# wget https://raw.github.com/sindresorhus/pure/master/prompt.zsh -O ~/.zsh.d/prompt.zsh
local username=&#39;&#39;
DEFAULT_USERNAME=&#39;eiel&#39;
[ $USER != $DEFAULT_USERNAME ] &amp;amp;&amp;amp; local username=&#39;%n@%m &#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ダウンロードした &lt;code&gt;prompt.zsh&lt;/code&gt; をいじらなくて済むように、少しだけ細工しています。&lt;/p&gt;

&lt;p&gt;DEFAULT_USERNAME には自分の ユーザ名を入れます。&lt;/p&gt;

&lt;p&gt;導入するとこんな感じになりました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/pure-prompt.png&#34; alt=&#34;pure prompt&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;まとめ:e8d749eee26e5f97e74e361cc90b92ff&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;バージョン管理の情報は PROMPT3 に表示していたのですが、コピペするとき邪魔になるので変えたかったので、試しました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git submodule&lt;/code&gt; や &lt;code&gt;zsh のパッケージ管理システム&lt;/code&gt;を使って管理したいですが、今回は wget を使う方法をとりました。
zsh のパッケージ管理システムってあるんだろうか。&lt;/p&gt;

&lt;p&gt;特に プロンプトをいじっていない場合は、ここからカスタマイズしていくのも良いのではないでしょうか。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Funtoo から Gentoo に戻してみた</title>
          <link>https://blog.eiel.info/blog/2013/07/10/from-funtoo-to-gentoo/</link>
          <pubDate>Wed, 10 Jul 2013 19:29:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/07/10/from-funtoo-to-gentoo/</guid>
          <description>

&lt;p&gt;この記事は &lt;a href=&#34;http://great-h.github.io/events/event-008.html&#34;&gt;すごい広島 #008&lt;/a&gt; に参加中に書きました。&lt;/p&gt;

&lt;p&gt;この間、我が家の Funtoo を Gentoo に戻してみた。&lt;/p&gt;

&lt;p&gt;戻した理由 OpenRC のバージョン違いで munin が新しいのにできなかったから。
Gentooからの乖離が大きくなってきてるみたいですね。 #知らんけど&lt;/p&gt;

&lt;p&gt;折角なので、戻す際に新規インストールせずに、そのまま移行できないか試みてみた。バックアップとるのがめんどくさかったとかでは決してない。たぶん。&lt;/p&gt;

&lt;p&gt;Gentoo に関しては勉強不足なので、ここに書いてあることは&lt;strong&gt;鵜呑みにせず参考にするぐらい&lt;/strong&gt;にしてください。
そういうこともできるだろうということでやってみたかった。&lt;/p&gt;

&lt;h2 id=&#34;手順を考える:3d78432f4ed171a16fc0f70a54aa9292&#34;&gt;手順を考える&lt;/h2&gt;

&lt;p&gt;最初どうすればいいのかなぁ。考えてみた結果。
以下のとおりになりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;portage tree を Gentoo のものに変える&lt;/li&gt;
&lt;li&gt;emerge -e @system を実行する&lt;/li&gt;
&lt;li&gt;meerge -e @world を実行する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;結論からいうと概ね予定通りできましたが、それなりにはトラブルがありました。&lt;/p&gt;

&lt;h3 id=&#34;portage-tree-を-gentoo-のものに変える:3d78432f4ed171a16fc0f70a54aa9292&#34;&gt;portage tree を Gentoo のものに変える&lt;/h3&gt;

&lt;p&gt;一番苦戦したところです。&lt;/p&gt;

&lt;p&gt;Funtoo は git を利用して portage tree を更新するので、参照先の Gentoo の rsync のものするだけでは &lt;code&gt;emerge --sync&lt;/code&gt; がエラーになってしまいました。具体的には &lt;code&gt;/etc/make.conf&lt;/code&gt; の SYNC です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/funtoo/portage&#34;&gt;Gentoo の portage tree も Git を使う&lt;/a&gt; という手もあるのですが、これ最近 コミットされてないように見えます。
どこかに更新されてるのがあるのかもしれませんが、よくわからなかったのでこの方法は諦めました。&lt;/p&gt;

&lt;p&gt;ということで、既存の portage tree である &lt;code&gt;/usr/portage&lt;/code&gt; を一旦 &lt;code&gt;mv&lt;/code&gt; で退避しておいて、 &lt;a href=&#34;http://rsync1.jp.gentoo.org/snapshots/portage-latest.tar.bz2&#34;&gt;http://rsync1.jp.gentoo.org/snapshots/portage-latest.tar.bz2&lt;/a&gt; を取得して展開することにしました。&lt;/p&gt;

&lt;p&gt;差し替えたのはよいのですが、 &lt;code&gt;/etc/portage/make.pryfole&lt;/code&gt; の形式が Funtoo と Gentoo で違いました。&lt;/p&gt;

&lt;p&gt;Gentoo はシンボリックリンクなのですが、Funtoo は複数の profile が選択できるので、ファイルになっていました。
というわけで、手作業でなんとかしました。&lt;/p&gt;

&lt;h3 id=&#34;emerge-e-system:3d78432f4ed171a16fc0f70a54aa9292&#34;&gt;emerge -e @system&lt;/h3&gt;

&lt;p&gt;これで Gentoo のパッケージを参照できるようになったので、基本的なパッケージを差し替えていきます。
「一発でいけばいいなぁ」、と思いなが適当に回したところ、何度か失敗しました。&lt;/p&gt;

&lt;p&gt;収録されているファイルが違うパッケージのものがあったみたいで、コンフリクトが起きました。
コンフリクトした先のパッケージを先にインストールして、再開すると無事に インストールできました。&lt;/p&gt;

&lt;h3 id=&#34;emerge-e-world:3d78432f4ed171a16fc0f70a54aa9292&#34;&gt;emerge -e @world&lt;/h3&gt;

&lt;p&gt;ここまでくるとほとんど Gentoo です。たぶん。
&lt;code&gt;emereg -e @world&lt;/code&gt; は特に問題なく実行できました。
Gentooにないパッケージは &lt;code&gt;/var/lib/portage/world&lt;/code&gt; を適当にいじりました。
具体的には、いらない行を削除しただけです。&lt;/p&gt;

&lt;h3 id=&#34;あと雑多な作業:3d78432f4ed171a16fc0f70a54aa9292&#34;&gt;あと雑多な作業&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;/etc/make.conf&lt;/code&gt; の &lt;code&gt;SYNC&lt;/code&gt; と &lt;code&gt;PORTAGE_MIRROR&lt;/code&gt; を mirrorselect を使って設定しておきました。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:3d78432f4ed171a16fc0f70a54aa9292&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;適当に挑戦してみましたが、うまくいきました。
もしかすると何か不具合があるかもしれませんが、あればまた報告したいと思います。&lt;/p&gt;

&lt;p&gt;何かの参考になるかもしれないと思ったので書き残すことにしましたが間違えてることも多々あるような気がします。
試すときはしっかりバックアップをとってから失敗しても良いようにして挑戦しましょう。&lt;/p&gt;

&lt;p&gt;そういえば カーネル を変更していない。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Mac で使える git mergetool をいろいろ試してみる - Araxis</title>
          <link>https://blog.eiel.info/blog/2013/07/10/git-mergetool-araxis/</link>
          <pubDate>Wed, 10 Jul 2013 01:54:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/07/10/git-mergetool-araxis/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt; の続きです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.araxis.com/merge_mac/index.html&#34;&gt;Araxis Merge&lt;/a&gt; を紹介します。&lt;/p&gt;

&lt;p&gt;Cocoaアプリで表現も操作性も良いです。
だけど、値段を考えるとすこし残念な感じでした。&lt;/p&gt;

&lt;p&gt;値段は 120ドルと &lt;a href=&#34;https://blog.eiel.info/blog/2013/06/29/git-mergetool-kaleidoscope/&#34;&gt;Kaleidscope&lt;/a&gt;の2倍近い値段です。
ちょっと高い。&lt;/p&gt;

&lt;p&gt;マージモードなのに3カラムではなく、2カラムでどのようにマージされるのかわかりにくかったり、キーボードショートカット が fn + ↓ とかになっていて効かなかったりと、そのあたりが残念でした。&lt;/p&gt;

&lt;p&gt;設定方法ですが、git にあらかじめ設定がもりこまれているため、インストールして、環境変数PATHを設定してやれば利用できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export PATH=/Applications/Araxis\ Merge.app/Contents/Utilities:$PATH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここもまた残念で、compare というコマンドで起動するようですが、 他にもcompareというコマンドがあると、これより先にコマンドがみつかるように PATH を設定する必要があります。&lt;/p&gt;

&lt;p&gt;公式の設定だと &lt;code&gt;PATH=$PATH:/Applications/Araxis\ Merge.app/Contents/Utilities&lt;/code&gt;とかかれていてハマりました。&lt;/p&gt;

&lt;p&gt;あとは&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git mergetool -t araxis
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と、実行すると起動することができます。&lt;/p&gt;

&lt;p&gt;常に Araxis を利用したい場合は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global merge.tool araxis
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としておくと &lt;code&gt;-t  araxis&lt;/code&gt; を省略できます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/araxis.png&#34; alt=&#34;araxis の画面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;画面左が現在のファイル内容で、画面右がマージしようとするブランチのファイルの内容になります。保存して画面を閉じれば左側の内容に決定したことになります。
左側がデフォルトで選択されていて、右側を採用したい場合は選んでいくという使い方になります。&lt;/p&gt;

&lt;p&gt;TimeMachine との連携などもでき多機能で優秀なのですが、&lt;code&gt;git mergetool&lt;/code&gt;として使うにはちょっと悩む感じでした。
有料だけあって、無料ツールよりはずっと使いやすいです。&lt;/p&gt;

&lt;h1 id=&#34;関連:1c998e69ffcc0a3e9f14d9053baa18d3&#34;&gt;関連&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>広島Ruby勉強会 #32 で 発表したこと - ActiveSupport, jenkins</title>
          <link>https://blog.eiel.info/blog/2013/07/08/hiroshimarb-32/</link>
          <pubDate>Mon, 08 Jul 2013 01:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/07/08/hiroshimarb-32/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://hiroshimarb.github.io/blog/2013/07/06/hiroshimarb-32/&#34;&gt;広島Ruby勉強会 #032&lt;/a&gt; で、紹介したこととか、喋ったこととかまとめときます。&lt;/p&gt;

&lt;p&gt;広島Ruby勉強会の各発表は &lt;a href=&#34;https://github.com/hiroshimarb/hiroshimarb.github.com/wiki/2013%E5%B9%B47%E6%9C%88%E3%81%AE%E6%B4%BB%E5%8B%95&#34;&gt;Github の Wiki&lt;/a&gt; に整理されてます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rails のソースコード読んでるので面白そうなメソッドを紹介する - ActiveSupport Core Ext&lt;/li&gt;
&lt;li&gt;すごい cron - Jenkins を試した&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://eielh-life.tumblr.com/post/54757403133/ruby-032&#34;&gt;勉強会自体の感想は別のところに書きました。&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;rails-のソースコード読んでるので面白そうなメソッドを紹介する-activesupport:bfbd4dd489d31bf77dd16b4d8e7e3033&#34;&gt;Rails のソースコード読んでるので面白そうなメソッドを紹介する - ActiveSupport&lt;/h2&gt;

&lt;p&gt;ここ最近は&lt;a href=&#34;https://github.com/eiel/railsdoc.eiel.info/commits/master&#34;&gt;ほぼ毎日 Rails のソースコードを読んで簡単にメモをとっています。&lt;/a&gt;います。
概ね毎日サボらずやれております。&lt;/p&gt;

&lt;p&gt;この内容は &lt;a href=&#34;http://railsdoc.eiel.info/&#34;&gt;railsdoc.eiel.info&lt;/a&gt; で垂れ流しています。&lt;/p&gt;

&lt;p&gt;まずは、ActiveSupport から攻めています。特に Core Ext の部分を読んでいます。ということで、4月から6月の間に読んだものの中で、適当に抜粋して紹介しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://railsdoc.eiel.info/hiroshimarb/32/&#34;&gt;内容はこちら&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;その他には読んでいて気がついたことを残しています。&lt;/p&gt;

&lt;h2 id=&#34;すごい-cron-jenkins-を試した:bfbd4dd489d31bf77dd16b4d8e7e3033&#34;&gt;すごい cron - Jenkins を試した&lt;/h2&gt;

&lt;p&gt;ローカルに Jenkins インストールして、これ cron の代わりに使えることに気づいたので、使用してみました。
その中で気づいたことや問題点についてお話をしました。
おまけで ruby 関連の Jenkins の Plugin についてわかったことを話しました。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;http://www.slideshare.net/slideshow/embed_code/23971945&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&#34; allowfullscreen webkitallowfullscreen mozallowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;http://www.slideshare.net/TomohikoHimura/jenkins-23971945&#34; title=&#34;すごい cron ? - Jenkins 試した&#34; target=&#34;_blank&#34;&gt;すごい cron ? - Jenkins 試した&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/TomohikoHimura&#34; target=&#34;_blank&#34;&gt;Tomohiko Himura&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;具体的な設定方法は まだ公開してないです。ごめんなさい。
また時間をとって書きたいと思います。&lt;/p&gt;

&lt;p&gt;しかし、cron として使うにはメモリを食いすぎるので、Local に Jenkins が欲しくなったら…ぐらいで丁度いいかもしれません。&lt;/p&gt;

&lt;p&gt;そもそも Jenkins を導入した動機ですが、実行に10分ぐらいかかるテストがあって、これを独立して実行したかったからです。
あと、失敗したテストの一覧を残しておきかったからです。&lt;/p&gt;

&lt;p&gt;というわけで、広島Ruby勉強会 は自由に発表の練習するところになりつつあります。気軽に何か発表しにいきましょう。&lt;/p&gt;

&lt;p&gt;次回は &lt;a href=&#34;http://partake.in/events/9dacdbfc-8acf-4968-a0eb-5327a6937b7d#&#34;&gt;8月3日&lt;/a&gt; だそうです。&lt;/p&gt;

&lt;h2 id=&#34;蛇足:bfbd4dd489d31bf77dd16b4d8e7e3033&#34;&gt;蛇足&lt;/h2&gt;

&lt;p&gt;そういえば cron は 「クーロン」 って読むんじゃないの？ って聞かれたんですが、僕は 「クロン」 と読む派です。
何が正しいの読み方なのでしょうか。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Mac で使える git mergetool をいろいろ試してみる - xxdiff</title>
          <link>https://blog.eiel.info/blog/2013/07/03/git-mergetool-xxdiff/</link>
          <pubDate>Wed, 03 Jul 2013 21:27:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/07/03/git-mergetool-xxdiff/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt; の続きです。&lt;/p&gt;

&lt;p&gt;つづいて &lt;a href=&#34;http://furius.ca/xxdiff/&#34;&gt;xxdiff&lt;/a&gt; を紹介したいと思います。&lt;/p&gt;

&lt;p&gt;Ot で実装されているっぽいです。
マージ結果が常に表示されないため扱いにくいです。
また、Retina に対応していないみたいで、文字が読めませんでした。
あと、日本語が文字化けしました。&lt;/p&gt;

&lt;p&gt;設定は不要で、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git mergetool -t xxdiff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすると起動できます。&lt;/p&gt;

&lt;p&gt;また、常に xxdiff を利用したい場合は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global merge.tool xxdiff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としておけばよいです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/xxdiff.png&#34; alt=&#34;xxdiffの画面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;画面左に現在のブランチのファイル、画面右にマージするブランチのファイルの内容が表示されます。&lt;/p&gt;

&lt;p&gt;キーボードショーットカットは充実しているようですが、マージ結果をみる方法がわかりませんでした。&lt;/p&gt;

&lt;p&gt;日本語はでないし、マージ結果の出し方がわからないということで利用は難しそうでした。&lt;/p&gt;

&lt;h1 id=&#34;関連:1d171718914462b98b256fe2eaffa740&#34;&gt;関連&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Mac で使える git mergetool をいろいろ試してみる - tkdiff</title>
          <link>https://blog.eiel.info/blog/2013/07/03/git-mergetool-tkdiff/</link>
          <pubDate>Wed, 03 Jul 2013 21:07:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/07/03/git-mergetool-tkdiff/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt; の続きです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tkdiff.sourceforge.net/&#34;&gt;tkdiff&lt;/a&gt; を紹介します。
名前のとおりツールキットは tk なのでマルチプラットフォームのアプリケーションです。&lt;/p&gt;

&lt;p&gt;マージ結果が同時に表示されないので非常に使いにくいです。
最近は Mac で tk のアプリケーションの起動速度が早くなってるのに少し残念です。
ツールキットの都合、表示も他に比べると綺麗ではありません。&lt;/p&gt;

&lt;p&gt;設定は不要で、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git mergetool -t tkdiff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすると起動できます。&lt;/p&gt;

&lt;p&gt;また、常に tkdiff を利用したい場合は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global merge.tool tkdiff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としておけばよいです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/tkdiff.png&#34; alt=&#34;tkdiff の画面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;画面左に現在のブランチのファイル、画面右にマージするブランチのファイルの内容が表示されます。&lt;/p&gt;

&lt;p&gt;マージされる内容を表示するには、画面上部の緑の部分をクリックするとみることができます。
左や右やじるしをクリックすることで、変更を選択できます。&lt;/p&gt;

&lt;p&gt;ツールキットの都合、使いにくいです。常用には耐えそうにありまんでした。&lt;/p&gt;

&lt;h1 id=&#34;関連:3f03899ba88bb9c2a531c74a68b1b3db&#34;&gt;関連&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Mac で使える git mergetool をいろいろ試してみる - Vimdiff2</title>
          <link>https://blog.eiel.info/blog/2013/07/03/git-mergetool-vimdiff2/</link>
          <pubDate>Wed, 03 Jul 2013 20:08:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/07/03/git-mergetool-vimdiff2/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt; の続きです。&lt;/p&gt;

&lt;p&gt;Vimdiff2を紹介してみます。
emacs使いですが、
vimさえ入っていれば、設定不要で、「気軽に使えるかなぁ。」という目論見です。
vimdiff2 とかいてみましたか、vim の起動方法が違うだけのような感じでした。
よくわかりません。
vimdiff でも起動できます。&lt;/p&gt;

&lt;p&gt;設定は不要で、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git mergetool -t vimdiff2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすると起動できます。&lt;/p&gt;

&lt;p&gt;また、常に vimdiff2 を利用したい場合は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global --global merge.tool vimdiff2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としておけばよいです。&lt;/p&gt;

&lt;p&gt;ヘルプを見るには vim を起動した状態で&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;
:h vimdiff
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;で help が出せました。
&lt;a href=&#34;http://twitter.com/pecosantoyobe&#34;&gt;pecosantoyobe&lt;/a&gt;に教えてもらいました。
ありがとうございます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/vimdiff2.png&#34; alt=&#34;vimdiff の画面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;画面左が現在のブランチのファイルの内容で、画面右がマージするブランチのファイル内容です。
中央にはコンフリクトしたファイルの内容がでており、修正することができます。&lt;/p&gt;

&lt;p&gt;次のコンフリクト場所に移動するには &lt;code&gt;]c&lt;/code&gt; で移動することができます。
前のコンフリクト場所に移動するには &lt;code&gt;[c&lt;/code&gt; で移動することができます。&lt;/p&gt;

&lt;p&gt;コンフリクト場所に移動して、&lt;code&gt;:diffget L&lt;/code&gt; と入力すると 左の内容を取り込むことができ、&lt;code&gt;:diffget R&lt;/code&gt; と入力すると右の内容を取り込むことができます。&lt;/p&gt;

&lt;p&gt;移動も含めてショートカットを用意すると、とても便利そうです。&lt;/p&gt;

&lt;p&gt;終了の仕方がよくわかりませんでした。
&lt;code&gt;ZZZZZZ&lt;/code&gt; として終了しました。
もっとよい方法があるような気がします。&lt;/p&gt;

&lt;p&gt;終了すると次のファイルが自動的に開きました。
とても便利でした。&lt;/p&gt;

&lt;p&gt;なんとなく emacs に渡せないときに使いたいと思います。&lt;/p&gt;

&lt;h1 id=&#34;関連:770eec7d0b144f9190270d0a703e4a58&#34;&gt;関連&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Mac で使える git mergetool をいろいろ試してみる - DeltaWalker</title>
          <link>https://blog.eiel.info/blog/2013/07/03/git-mergetool-deltawalker/</link>
          <pubDate>Wed, 03 Jul 2013 19:16:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/07/03/git-mergetool-deltawalker/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt; の続きです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.deltopia.com/&#34;&gt;DeltaWalker&lt;/a&gt; を紹介します。&lt;/p&gt;

&lt;p&gt;DeltaWalker 49ドル の有料アプリケーションで、見た感じ Eclipse と同じツールキットのようで、マルチプラットフォームを実現しているようです。
しかし、購入する際はOSを指定するので、OSごとにライセンスがいるのでしょうか。試用ができるので試してみました。&lt;/p&gt;

&lt;p&gt;有料ツールの中では値段が安く、日本語を使用していても問題はおきてないです。&lt;/p&gt;

&lt;p&gt;設定するには &lt;code&gt;/Applications&lt;/code&gt; にインストールした場合は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;git config --global --add mergetool.dw.cmd &#39;&amp;quot;/Applications/DeltaWalker.app/Contents/MacOS/git-merge&amp;quot; &amp;quot;$LOCAL&amp;quot; &amp;quot;$REMOTE&amp;quot; &amp;quot;$BASE&amp;quot; &amp;quot;$MERGED&amp;quot;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で設定できます。&lt;/p&gt;

&lt;p&gt;起動するには&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git mergetool -t dw
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とするとできます。&lt;/p&gt;

&lt;p&gt;デフォルトで起動するツールに設定したい場合は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global merge.tool dw
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、設定することができます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/deltawalker.png&#34; alt=&#34;deltawalker の画面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;画面左にもとのブランチのファイル、画面右にマージするブランチのファイルが表示されます。中央にマージ結果が表示されています。&lt;/p&gt;

&lt;p&gt;マージ方式は emacs の ediffと同じように、先にベースしたいほうを選びます。&lt;/p&gt;

&lt;p&gt;そうすると細かいコンフリクト箇所が表示されるので、どちらを選択するか選ぶことができます
。
左を選ぶか、右を選ぶかを選択するための状態にもっていくのが少し扱いづらかったです。
なぜだかわからないですが、左しか選べない状態になったりしました。マウスクリックですることで直りました。&lt;/p&gt;

&lt;p&gt;コンフリクトの修正後は、ウィンドウ閉じれば次へ勧みます。
他にコンフリクトするファイルがあれば続けて表示されます。&lt;/p&gt;

&lt;p&gt;修正が終了するとコンフリクトしたときのファイルは &lt;code&gt;.orig&lt;/code&gt; が末尾について保存されます。&lt;/p&gt;

&lt;p&gt;気になる点は Java で実行するため、起動が少し遅いです。&lt;/p&gt;

&lt;h1 id=&#34;関連:e2222856aecf02415ae2282b2b3ed87f&#34;&gt;関連&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Mac で使える git mergetool をいろいろ試してみる - kaleidoscope</title>
          <link>https://blog.eiel.info/blog/2013/06/29/git-mergetool-kaleidoscope/</link>
          <pubDate>Sat, 29 Jun 2013 22:58:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/06/29/git-mergetool-kaleidoscope/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt; の続きです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.kaleidoscopeapp.com/&#34;&gt;Kaleidoscope&lt;/a&gt; を紹介します。&lt;/p&gt;

&lt;p&gt;Cocoaアプリということで、万人にに勧めたいという理由で一番注目しております。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://click.linksynergy.com/fs-bin/click?id=TMdpJ425IWk&amp;subid=&amp;offerid=94348.1&amp;type=10&amp;tmpid=3910&amp;RD_PARM1=https%3A%2F%2Fitunes.apple.com%2Fjp%2Fapp%2Fkaleidoscope%2Fid587512244%3Fmt%3D12%2526uo%3D4&#34;&gt;Mac App Store で開く&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;有料アプリで金額は App Store では 6100円 です。&lt;/p&gt;

&lt;p&gt;画面は圧倒的に綺麗でMacとの親和性が非常に高いです。
画像の差分も見れたりするので difftool としても気になります。&lt;/p&gt;

&lt;p&gt;&lt;del&gt;ただし、私の環境のせいなのか、トライアルバージョンで試しているのかわかりませんが&lt;code&gt;git mergetool&lt;/code&gt; から上手く扱えない。
製品版なら上手いこといくのか確認したいのです。&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;追記: 2013-07-10&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;tmux 上で実行していたら発生することがわかりました。
値段的にも、インターフェイス的にも一番デザイナーさんに勧められるツールです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;追記終了&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;設定はとても簡単です。
ダウンロードして、起動後に メニューから integration&amp;hellip; を選択して設定します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/kaleidoscope-config1.png&#34; alt=&#34;Kaleidscope 設定1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/kaleidoscope-config2.png&#34; alt=&#34;Kaleidscope 設定2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;install と configure をクリックすれば完了です。&lt;/p&gt;

&lt;p&gt;ここからが問題なのですが、&lt;code&gt;git mergetool&lt;/code&gt; で起動しても画面が出ません。
起動はするのですが、起動していた状態でないと画面がでませんでした。&lt;/p&gt;

&lt;p&gt;起動をすれば下記のような画面が出ます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/kaleidoscope.png&#34; alt=&#34;Kaleidoscope&#34; /&gt;&lt;/p&gt;

&lt;p&gt;画面も3種類あり自由に切り替えたりすることができます。&lt;/p&gt;

&lt;p&gt;左側がマージ前のファイルのもので、中央がマージ結果で、右がマージに指定したブランチのファイルの内容になります。&lt;/p&gt;

&lt;p&gt;下部の右下のボタンで 競合場所を移動でき、下部中央のボタンでどちらを採用するか選択できます。&lt;/p&gt;

&lt;p&gt;これらはキーボードショートカットで、コマンド + ↓、コマンド + ↑、で、コンフリクト箇所を移動することができ、コマンド + ←、コマンド→ でどちらを採用するか選択できます。
カーソルキーを普段使う人であれば使いやすいと思います。&lt;/p&gt;

&lt;p&gt;&lt;del&gt;修正を終了するには終了すれば、プロンプトが書いてきますが、失敗しているような挙動をしていてちょっと困っております。トライアルだからなるのか、バグなのか。
タブになっているのでコンフリクトしているファイルをまとめて開いて欲しいところです。&lt;del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;使い勝手はよさそうなので、購入してみて、バグレポートするか悩んでいるところです。
一番期待できるだけにちょっと残念です。&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;追記。直せたので再度試しました。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;コンフリクト修正後は保存して、ウィンドウを閉じれば次に進めます。&lt;/p&gt;

&lt;p&gt;見た目、操作性を考えると、さすが有料アプリといったクオリティだと思いました。周りに薦めていけるツールでした。&lt;/p&gt;

&lt;h1 id=&#34;関連:d1278cc32e05e08c83f993aa4a0aca71&#34;&gt;関連&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Mac で使える git mergetool をいろいろ試してみる - ediff</title>
          <link>https://blog.eiel.info/blog/2013/06/29/git-mergetool-ediff/</link>
          <pubDate>Sat, 29 Jun 2013 19:27:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/06/29/git-mergetool-ediff/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt; の続きです。&lt;/p&gt;

&lt;p&gt;ediff は &lt;a href=&#34;http://www.gnu.org/software/emacs/&#34;&gt;Emacs&lt;/a&gt; に添付されているマージツールです。
いつから添付されているのか調べてないですが最近のEmacsであれば標準で使えるはずです。&lt;/p&gt;

&lt;p&gt;個人的には一番使いやすいと感じています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git mergetool&lt;/code&gt; から ediff を起動するのはややめんどくさいです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/magit/magit&#34;&gt;magit&lt;/a&gt;を使用していれば、コンフリクトしているファイルにカーソルを合わせて &lt;code&gt;e&lt;/code&gt; を押すと起動できます。こちらのほうは設定いらずで楽ちんでした。&lt;/p&gt;

&lt;p&gt;どうしても &lt;code&gt;git mergetool&lt;/code&gt; から使いたい場合は &lt;a href=&#34;http://d.akinori.org/2012/07/23/git-mergetool%E3%81%A7emacs%E3%81%AEediff-merge-files-with-ancestor%E3%82%92%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%99/&#34;&gt;git mergetoolでEmacsのediff-merge-files-with-ancestorを呼び出す - 工夫と趣向と分別と。&lt;/a&gt; を参考にするとできました。&lt;/p&gt;

&lt;p&gt;具体的には上記の記事で紹介されてる &lt;a href=&#34;https://github.com/knu/emacsc&#34;&gt;emacsc&lt;/a&gt; をclone してきて設定しました。
個人的な使い方の問題で emacsclient への引数を付加したかったので少しいじりました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/ediff.png&#34; alt=&#34;ediff の画面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ediff を起動するとこのような画面になります。
配色設定を細かくやってないのでみづらいのは気にしないでください。&lt;/p&gt;

&lt;p&gt;左が現在のブランチのファイルで、右がマージしようとするブランチのファイルになります。
下部がマージ結果になります。下部は直接編集することもできます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;a&lt;/code&gt; を入力すると 左側を選択できて、 &lt;code&gt;b&lt;/code&gt; を入力すると右側を選択できて、下部に反映されます。&lt;/p&gt;

&lt;p&gt;差分は2行あるのに、まとまってしまって不便に感じますが、どちらをベースするかという選択だと考えると良いことがわかりました。
その後 &lt;code&gt;!&lt;/code&gt; を入力すると細かく差分が表示され &lt;code&gt;n&lt;/code&gt; や &lt;code&gt;p&lt;/code&gt; で競合箇所を移動して &lt;code&gt;a&lt;/code&gt; や &lt;code&gt;b&lt;/code&gt; で選ぶことができます。&lt;/p&gt;

&lt;p&gt;編集が終了したら &lt;code&gt;q&lt;/code&gt; で終了できます。 magit から起動した場合は ステージングされないので注意してください。
再度 &lt;code&gt;e&lt;/code&gt; を入力するとやりなおすこともできます。&lt;/p&gt;

&lt;p&gt;emacs 上で動くとカスタマイズが気軽にできるところも嬉しいし、なによりキーボードで操作しやすいです。
あえて問題を上げるなら ediff の設定がしてある配色を使わないと見にくいのと、emacs ユーザでない場合は覚えることが多すぎるということでしょう。&lt;/p&gt;

&lt;h1 id=&#34;関連:7a9f455065511ac41f1329f68dde90ab&#34;&gt;関連&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Mac で使える git mergetool をいろいろ試してみる - p4merge</title>
          <link>https://blog.eiel.info/blog/2013/06/29/git-mergetool-p4merge/</link>
          <pubDate>Sat, 29 Jun 2013 18:58:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/06/29/git-mergetool-p4merge/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt; の続きです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.perforce.com/product/components/perforce-visual-merge-and-diff-tools&#34;&gt;p4Merge&lt;/a&gt; を紹介します。&lt;/p&gt;

&lt;p&gt;先に問題点などを書いておくと、日本語が利用されていると表示がずれてしまいます。
Qt が利用されているので Cocoa アプリに比べると動きは悪いですが、インターフェイスは使いやすいです。&lt;/p&gt;

&lt;p&gt;インストールには、サイト下部の Download now をクリック後にOSなどを選択してダウンロードします。
ダウンロード後は&lt;code&gt;/Application&lt;/code&gt; に配置します。&lt;/p&gt;

&lt;p&gt;設定は以下のコマンドでできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global mergetool.p4merge.path /Applications/p4merge.app/Contents/MacOS/p4merge
git config --global mergetool.p4merge.keepTemporaries false
git config --global mergetool.p4merge.trustExitCode false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとはコンフリクトした際に&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git mergetool -t p4merge
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と入力すると利用できます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git mergetool&lt;/code&gt; だけで起動できるようにしたい場合は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global merge.tool p4merge
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としておくとよいです。&lt;/p&gt;

&lt;p&gt;起動すると下記のような画面です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/p4merge.png&#34; alt=&#34;p4merge画面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;画面中部に 左から&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;マージしたいブランチのファイルの内容&lt;/li&gt;
&lt;li&gt;枝わかれした時のファイルの内容&lt;/li&gt;
&lt;li&gt;現在のファイルの内容&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;になってます。他とは左右が逆なので注意が必要です。&lt;/p&gt;

&lt;p&gt;画面下部にはマージ結果の情報が出ています。
下部の右側のボタンを押すことでどちらの変更を使うか選択できます。
両方を選ぶことはできませんでした。
また、選択後に編集することもでき、アンドゥもすることができます。&lt;/p&gt;

&lt;p&gt;ツールバー一番端で最初からやりなおすこともできて、良いと思いました。&lt;/p&gt;

&lt;p&gt;編集後は p4merge を終了することで、次のファイルへ移行として同じ作業を繰返します。&lt;/p&gt;

&lt;p&gt;マージする前のファイルが .ファイル名に &lt;code&gt;.orig&lt;/code&gt; という文字が付加されて残っています。&lt;/p&gt;

&lt;p&gt;日本語を使うと表示がずれてしまうので、日本語さえさえ使わなければ使いやすいツールでした。&lt;/p&gt;

&lt;h1 id=&#34;関連:4619e1504aeccce1e809c001d0b784b8&#34;&gt;関連&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Mac で使える git mergetool をいろいろ試してみる - OpenDiff</title>
          <link>https://blog.eiel.info/blog/2013/06/26/git-mergetool-opendiff/</link>
          <pubDate>Wed, 26 Jun 2013 21:10:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/06/26/git-mergetool-opendiff/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt; の続きです。&lt;/p&gt;

&lt;p&gt;Xcode に標準添付されていた opendiff を紹介します。
&lt;a href=&#34;http://www.sourcetreeapp.com/&#34;&gt;Source Tree&lt;/a&gt; にもついてきていましたが、挙動が微妙に違いました。&lt;/p&gt;

&lt;p&gt;設定は不要で&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git mergetool -t opendiff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と入力すると利用できます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git mergetool&lt;/code&gt; だけで起動できるようにしたい場合は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global merge.tool opendiff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としておくとよいです。&lt;/p&gt;

&lt;p&gt;日本語がまざっていると、  &lt;code&gt;file are not ascii&lt;/code&gt; と メッセージ がでますが、 proceed anyway をクリックすると問題なく動きます。&lt;/p&gt;

&lt;p&gt;opendiff で起動しますが FileMerge というアプリケーションのようです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/opendiff.png&#34; alt=&#34;OpenDiff の画面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;左側に checkout しているブランチのファイル、
右側に merge しようとするブランチのファイルが表示されます。
下側に マージ結果が表示されます。&lt;/p&gt;

&lt;p&gt;デフォルトで 右側のものが選択されていました。&lt;/p&gt;

&lt;p&gt;競合箇所をクリックして、画面右下の actions から選択することで、どちらの変更を使うか、両方を使うかなどが選べます。&lt;/p&gt;

&lt;p&gt;競合箇所は真ん中の矢印がでている部分ではないと機能しないようでした。&lt;/p&gt;

&lt;p&gt;キーボードで移動したい場合は &lt;code&gt;command + d&lt;/code&gt; で次へ進み、 &lt;code&gt;command + shift + d&lt;/code&gt; で前へ戻ります。&lt;/p&gt;

&lt;p&gt;下部の部分は 編集可能で、修正を加えることもできます。&lt;/p&gt;

&lt;p&gt;修正が修正したら、閉じてコマンラインに&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Was the merge successful? [y/n]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と表示されているので、&lt;code&gt;y&lt;/code&gt; を入力して Enter です。なにか間違えた場合は、&lt;code&gt;n&lt;/code&gt;にすることでなかったことにできます。
他にも競合するファイルがあれば、次のファイルがでてきます。&lt;/p&gt;

&lt;p&gt;マージする前のファイルが .ファイル名に &lt;code&gt;.orig&lt;/code&gt; という文字が付加されて残っています。&lt;/p&gt;

&lt;p&gt;日本語が使えているので、設定するのが面倒であればこれでもいいかなと思いますが、Action の選択がめんどくさかったです。&lt;/p&gt;

&lt;h1 id=&#34;関連:20fe10435c754341b7e10155192d5928&#34;&gt;関連&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool/&#34;&gt;Mac で使える git mergetool をいろいろ試してみる - 準備編&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Mac で使える git mergetool をいろいろ試してみる - 準備編</title>
          <link>https://blog.eiel.info/blog/2013/06/26/git-mergetool/</link>
          <pubDate>Wed, 26 Jun 2013 19:08:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/06/26/git-mergetool/</guid>
          <description>

&lt;p&gt;この記事は &lt;a href=&#34;http://great-h.github.io/events/event-006.html&#34;&gt;すごい広島 #6&lt;/a&gt; での活動の一部です。&lt;/p&gt;

&lt;p&gt;Git で branch をマージしたときにコンフリクトが起きると、これを解消する必要があります。テキストエディタでがんばるのはつらいこともありますよね。&lt;/p&gt;

&lt;p&gt;そんなとき、マージするためのツールを使いたい場合もあります。
Git に &lt;code&gt;git mergetool&lt;/code&gt; というコマンドがあって、設定しておいたツールを起動することができます。
同様に 差分を見るのにGUIツールを使いたい場合などには &lt;code&gt;git difftool&lt;/code&gt;というコマンドもあります。&lt;/p&gt;

&lt;p&gt;基本的には Mac で使えるものを紹介しますが、マルチプラットフォームのもあるので、別の環境でも使えるものもあります。&lt;/p&gt;

&lt;h2 id=&#34;試したツール:865a5e8734814e82ece91a6cda95f1f8&#34;&gt;試したツール&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/26/git-mergetool-opendiff/&#34;&gt;opendiff - 無料 Xcode に添付されている&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/29/git-mergetool-p4merge/&#34;&gt;p4merge - 無料 Qt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/29/git-mergetool-ediff/&#34;&gt;ediff(emacs) - 無料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/29/git-mergetool-kaleidoscope/&#34;&gt;Kaleidoscope - 有料 - Cocoa アプリ (Mac Only)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/07/03/git-mergetool-deltawalker/&#34;&gt;deltawalker - 有料 マルチプラットフォーム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/07/03/git-mergetool-vimdiff2/&#34;&gt;vimdiff2(vim) - 無料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/07/03/git-mergetool-tkdiff/&#34;&gt;tkdiff - 無料 マルチプラットフォーム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/07/03/git-mergetool-xxdiff/&#34;&gt;xxdiff - 無料 マルチプラットフォーム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/07/10/git-mergetool-araxis/&#34;&gt;Araxis Merge - 有料 (Winあり)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;いろいろ試すために用意したもの:865a5e8734814e82ece91a6cda95f1f8&#34;&gt;いろいろ試すために用意したもの&lt;/h1&gt;

&lt;p&gt;いろいろ試すのになるべく楽をしたいので以下のリポジトリを用意しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eiel/git-merge-sandbox&#34;&gt;Github eiel/git-merge-sandbox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このリポジトリを clone して &lt;code&gt;$ bin/restart&lt;/code&gt; を実行するとそのまま &lt;code&gt;$ git mergetool&lt;/code&gt; 実行できる状態で、すでにコンフリクトした状態になるようにしています。&lt;/p&gt;

&lt;p&gt;試すのに&lt;strong&gt;簡単にやりなおせる&lt;/strong&gt;様にするのは大事だな、と最近感じています。&lt;/p&gt;

&lt;p&gt;コンフリクトするファイルは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sample.txt&lt;/li&gt;
&lt;li&gt;sample2.txt&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;です。&lt;/p&gt;

&lt;p&gt;コンフリクトを解消する練習に利用してみてください。&lt;/p&gt;

&lt;h1 id=&#34;試すツールを探した方法:865a5e8734814e82ece91a6cda95f1f8&#34;&gt;試すツールを探した方法&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;$ git mergetool --tool-help&lt;/code&gt; の実行結果に使えるツールの一覧が出てくるので、片っ端に調べました。&lt;/p&gt;

&lt;p&gt;次に google さんに聞いて、いくつか探しました。&lt;/p&gt;

&lt;p&gt;以下のツールは環境作るがめんどくさいので試しませんでした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;meld&lt;/li&gt;
&lt;li&gt;gvimdiff2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;meld は GTK がいるので試してませんでした。&lt;/p&gt;

&lt;p&gt;gvimdiff2 は 実質 vimdiff2 と同じなので試しませんでした。&lt;/p&gt;

&lt;p&gt;各ツールの詳細に続く&lt;/p&gt;

&lt;h1 id=&#34;まとめ:865a5e8734814e82ece91a6cda95f1f8&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;一通り試した感想を。&lt;/p&gt;

&lt;p&gt;Emacs や Vim を使いなれているのであれば、 ediff,vimdiff2 が第一候補になるでしょう。&lt;/p&gt;

&lt;p&gt;お金があるなら Kaleidscope が表示が綺麗でよさそうです。
デザイナーさんに薦めるならこれが一番だと思います。&lt;/p&gt;

&lt;p&gt;フリーのGUIツールでは p4merge がよさそうでした。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>最近やった Ruby でのミス - カンマで改行</title>
          <link>https://blog.eiel.info/blog/2013/06/24/recent-mistake-on-ruby-conma/</link>
          <pubDate>Mon, 24 Jun 2013 00:58:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/06/24/recent-mistake-on-ruby-conma/</guid>
          <description>

&lt;p&gt;Ruby かいてて些細なミスでハマったことを書いておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;goro = &amp;quot;gorogoro&amp;quot;,
hoge = &amp;quot;hogehoge&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1行目の最後に カンマ が入っているのがポイントです。&lt;/p&gt;

&lt;p&gt;期待した結果は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;goro # =&amp;gt; &amp;quot;gorogoro&amp;quot;
hoge # =&amp;gt; &amp;quot;hogehoge&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;です。&lt;/p&gt;

&lt;p&gt;実際には&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;goro # =&amp;gt; [&amp;quot;gorogoro&amp;quot;, &amp;quot;hogehoge&amp;quot;]
hoge # =&amp;gt; &amp;quot;hogehoge&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となりました。&lt;/p&gt;

&lt;p&gt;1行目の最後にある カンマ を削除すれば期待した結果になります。&lt;/p&gt;

&lt;p&gt;このミスは hash で値を渡していたところを 代入に書き換えたときに発生しました。異常はテストコードのおかげで直ちに検知できました。(ちらちら)&lt;/p&gt;

&lt;h1 id=&#34;解説:1fdf994e63eb426f526fc4e1eb52df44&#34;&gt;解説&lt;/h1&gt;

&lt;p&gt;カンマのあとの改行なので、 式が完結していないので以下と等価です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;goro = &amp;quot;gorogoro&amp;quot;, hoge = &amp;quot;hogehoge&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;括弧をつけてわかりやすくします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;goro = (&amp;quot;gorogoro&amp;quot;, (hoge = &amp;quot;hogehoge&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もうちょっとわかりやすくします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;hoge = &amp;quot;hogehoge&amp;quot;
goro = &amp;quot;gorogoro&amp;quot;, hoge
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hoge が上にきているのに注意してください。&lt;/p&gt;

&lt;p&gt;もう必要ないと思いますが、以下と等価です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;hoge = &amp;quot;hogehoge&amp;quot;
goro = [&amp;quot;gorogoro&amp;quot;, hoge]
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Microdata を使ってイベント情報をページに埋め込む。</title>
          <link>https://blog.eiel.info/blog/2013/06/23/microdata-on-great-h/</link>
          <pubDate>Sun, 23 Jun 2013 23:44:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/06/23/microdata-on-great-h/</guid>
          <description>

&lt;p&gt;この記事は &lt;a href=&#34;http://great-h.github.io/events/event-005.html&#34;&gt;すごい広島 #005&lt;/a&gt; で調べたこととかです。その2。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://great-h.github.io&#34;&gt;すごい広島&lt;/a&gt; は個人的な思惑として、「広島にいる表に出てこないエンジニアを発掘する。」という裏の目的があったりなかったりします。&lt;/p&gt;

&lt;p&gt;そのためには、SEOとして効果のありそうな技術もいろいろ試してみよう。&lt;/p&gt;

&lt;p&gt;ということで、&lt;a href=&#34;http://microformats.org/&#34;&gt;Microformats&lt;/a&gt;を使ってウェブページにイベント情報を付与してみようと思いました。
以前、ブラウザの拡張を使えば、「カレンダーアプリケーションへイベント登録が簡単にできる。」という噂を聞いたことがあったからです。&lt;/p&gt;

&lt;p&gt;調べてみると、HTML5 には Microdata というものがあるみたいなので、Microdataを試すことにしました。&lt;/p&gt;

&lt;p&gt;しかし、結局カレンダーに簡単に登録する方法はわかっておりません。&lt;/p&gt;

&lt;h1 id=&#34;microdata:8eed65b5f665b211efb4546c78efe13a&#34;&gt;Microdata&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://kojika17.com/2011/06/summary-of-microdata.html&#34;&gt;コーディングとSEOの概念が変わるかもしれない、Microdataについての概要 - Web Design KOJIKA17&lt;/a&gt; より引用&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Microdataとは何か？&lt;/p&gt;

&lt;p&gt;マークアップ言語であるHTMLは「見出し(h1,h2,h3&amp;hellip; )」「段落(p)」「リスト(ul,ol,li)」などの文章構造を示すことができても、「人の名前」「肩書き」「地域」などを示すことができません。
それらをHTMLでメタデータとして追加する方法のひとつとして、HTML5の仕様からMicrodataというものができました。&lt;/p&gt;

&lt;p&gt;類似の技術には、MicroformatsやRDFaなどがあります。
これらMicrodata,Microformats, RDFaを指す言葉として「Semantic HTML」などと呼ばれています。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;一応自分の理解で説明してみます。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;人間はページを読んでこれは「イベント情報だ」とか、「会社の情報だ」とか認識する能力がありますが、コンピュータにはわかりません。
なので、コンピュータがわかるようにするためのルールを用意しました。
このルールに従ってHTMLを書いてください。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;というものだと思います。&lt;/p&gt;

&lt;p&gt;仕様とかは下記をみてください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.w3.org/TR/microdata/&#34;&gt;Microdata Working Draft&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;microdata-と-microformats:8eed65b5f665b211efb4546c78efe13a&#34;&gt;Microdata と Microformats&lt;/h1&gt;

&lt;p&gt;せっかく  Microfrmats の話もしたので、比較ページとしては下記のものが面白っかたです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/m-hiyama/20100412/1271032800&#34;&gt;マイクロフォーマット(microformats) vs. マイクロデータ(microdata) - 檜山正幸のキマイラ飼育記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;実際に使ってみた:8eed65b5f665b211efb4546c78efe13a&#34;&gt;実際に使ってみた&lt;/h1&gt;

&lt;p&gt;すごい広島のイベントページに使ってみました。
イベントの情報として、場所や日時、名前を設定しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.google.com/webmasters/tools/richsnippets?q=http%3A%2F%2Fgreat-h.github.io%2Fevents%2Fevent-004.html&#34;&gt;Google ウェブマスターツールの構造化データ テストツール&lt;/a&gt;を使うと内容や、Google検索での結果を確認することができます。
&lt;img src=&#34;https://blog.eiel.info/images/20130623-sample.png&#34; alt=&#34;構造化データテストツールの結果&#34; /&gt;&lt;/p&gt;

&lt;p&gt;赤枠の部分に日付や場所が表示されています。&lt;/p&gt;

&lt;p&gt;具体的な読取した結果も確認できます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/20130623-result.png&#34; alt=&#34;サイトプロパティ&#34; /&gt;&lt;/p&gt;

&lt;p&gt;この部分のHTMLは下記のようにしました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div itemscope itemtype=&amp;quot;http://schema.org/Event&amp;quot;&amp;gt;
  &amp;lt;h1&amp;gt;日時&amp;lt;/h1&amp;gt;
  &amp;lt;span itemprop=&amp;quot;startDate&amp;quot; content=&amp;quot;2013-06-26T19:00&amp;quot;&amp;gt;2013年06月26日 19:00&amp;lt;/span&amp;gt;
  &amp;lt;h1&amp;gt;開催場所&amp;lt;/h1&amp;gt;
  &amp;lt;div itemprop=&amp;quot;location&amp;quot; itemscope itemtype=&amp;quot;http://schema.org/Place&amp;quot;&amp;gt;
    &amp;lt;span itemprop=&amp;quot;name&amp;quot;&amp;gt;タリーズコーヒー広島本通店&amp;lt;/span&amp;gt;
    &amp;lt;div itemprop=&amp;quot;address&amp;quot; itemscope itemtype=&amp;quot;http://schema.org/PostalAddress&amp;quot;&amp;gt;
      &amp;lt;span itemprop=&amp;quot;addressLocality&amp;quot;&amp;gt;広島市&amp;lt;/span&amp;gt;
      &amp;lt;span itemprop=&amp;quot;streetAddress&amp;quot;&amp;gt;中区本通３−９&amp;lt;/span&amp;gt;
      &amp;lt;meta itemprop=&amp;quot;addressRegion&amp;quot; content=&amp;quot;広島県&amp;quot;&amp;gt;
      &amp;lt;meta itemprop=&amp;quot;addressCountry&amp;quot; content=&amp;quot;日本&amp;quot;&amp;gt;
      &amp;lt;meta itemprop=&amp;quot;postalCode&amp;quot; content=&amp;quot;7300035&amp;quot;&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;meta itemprop=&amp;quot;name&amp;quot; content=&amp;quot;すごい広島 #6&amp;quot;&amp;gt;
  &amp;lt;meta itemprop=&amp;quot;image&amp;quot; content=&amp;quot;https://raw.github.com/great-h/great-h_logo/master/logo.png&amp;quot;&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実際には &lt;a href=&#34;https://blog.eiel.info/blog/2013/06/19/jekyll-on-function/&#34;&gt;Jekyll を使ったGithub Pages で関数呼び出し的なことをする&lt;/a&gt; で書いたテクニックを使っています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/great-h/great-h.github.io/blob/e264ccad9733ec534ef63f43b2aa551943173afc/_layouts/event.html&#34;&gt;具体的にはこの辺に&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;書き方とか:8eed65b5f665b211efb4546c78efe13a&#34;&gt;書き方とか&lt;/h1&gt;

&lt;p&gt;書き方などは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://terkel.jp/archives/2011/08/microdata-and-schema-org/&#34;&gt;Microdata + schema.org を実際に使ってみる - terkel.jp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://schema-ja.appspot.com/docs/gs.html&#34;&gt;schema.org 日本語訳 - 始めましょう！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などが参考になりました。&lt;/p&gt;

&lt;p&gt;埋め込みする情報の構造は &lt;a href=&#34;http://schema.org/&#34;&gt;schema.org&lt;/a&gt; に集められているようです。
このあたりは LDAP を仕様したことあるとわかりやすいように思いました。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Jekyll を使ったGithub Pages で関数呼び出し的なことをする</title>
          <link>https://blog.eiel.info/blog/2013/06/19/jekyll-on-function/</link>
          <pubDate>Wed, 19 Jun 2013 21:32:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/06/19/jekyll-on-function/</guid>
          <description>

&lt;p&gt;この記事は &lt;a href=&#34;http://great-h.github.io/events/event-005.html&#34;&gt;すごい広島 #005&lt;/a&gt; で試したことです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt; で Jekyll を使う場合は機能拡張などすることが基本的にできません。&lt;/p&gt;

&lt;p&gt;関数のように汎用のHTMLを作成して、引数で動作を変えるようなことがしたい。
本来ではあれば &lt;a href=&#34;http://liquidmarkup.org/&#34;&gt;Liquid&lt;/a&gt; のカスタムタグなどが使えるのですが、&lt;a href=&#34;http://jekyllrb.com/&#34;&gt;jekyll&lt;/a&gt; が safe モードで動いているので、カスタムタグを作成することができません。&lt;/p&gt;

&lt;p&gt;しかし、 liquid の &lt;code&gt;includeタグ&lt;/code&gt; を利用することでそれっぽいことができます。&lt;/p&gt;

&lt;p&gt;流れは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;あらかじめ変数をセットしておく&lt;/li&gt;
&lt;li&gt;include を使う

&lt;ul&gt;
&lt;li&gt;セットしておいた変数で分岐したり、表示内容として利用する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;となります。&lt;/p&gt;

&lt;h1 id=&#34;変数:79fe50412cbb3e59f64ffd395b234641&#34;&gt;変数&lt;/h1&gt;

&lt;p&gt;変数をセットするには FrontFormatter を利用するか、liquidの &lt;code&gt;assignタグ&lt;/code&gt; か &lt;code&gt;caputerタグ&lt;/code&gt;を利用することになります。&lt;/p&gt;

&lt;h2 id=&#34;frontformatterを使う:79fe50412cbb3e59f64ffd395b234641&#34;&gt;FrontFormatterを使う&lt;/h2&gt;

&lt;p&gt;FrontFormatter は ページの先頭に書く yaml の部分です。&lt;/p&gt;

&lt;p&gt;例:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;title:  &amp;quot;すごい広島 #5&amp;quot;
date:   2013-06-19 19:00:00
place: tullys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;page.place&lt;/code&gt; という変数を追加して &lt;code&gt;tullys&lt;/code&gt; という文字列をセットできます。&lt;/p&gt;

&lt;h2 id=&#34;assign-を使う:79fe50412cbb3e59f64ffd395b234641&#34;&gt;assign を使う&lt;/h2&gt;

&lt;p&gt;Liquid の assign タグを利用して&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{ % assign place = tullys % }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;place&lt;/code&gt; という変数を追加して &lt;code&gt;tullys&lt;/code&gt; という文字列をセットできます。
FrontFormatter には page のメンバになっていましたが、こちらは直接参照できます。&lt;/p&gt;

&lt;h2 id=&#34;capture-を使う:79fe50412cbb3e59f64ffd395b234641&#34;&gt;capture を使う&lt;/h2&gt;

&lt;p&gt;capture を用いると長い文字列を変数にセットするのに便利です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{ % capture place % }
tullys
{ % endcapture % }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これも同様に place という変数を追加して &lt;code&gt;\ntullys\n&lt;/code&gt; という文字列をセットできます。(改行を含みます)&lt;/p&gt;

&lt;h1 id=&#34;include-タグ:79fe50412cbb3e59f64ffd395b234641&#34;&gt;include タグ&lt;/h1&gt;

&lt;p&gt;これは SSI の include のように外部のファイルを読込みして、その場に挿入できる liquid のタグです。
同様の機能が PHP なんかにもありますね。&lt;/p&gt;

&lt;p&gt;include するためのファイルは &lt;code&gt;_includes&lt;/code&gt; におくことになります。
&lt;code&gt;PROJECT_ROOT/_includes/place/go&lt;/code&gt;というファイルを作成して、中身を作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;b&amp;gt;ある場所に行きます。&amp;lt;/b&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これをあるページで&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{ % include place/go % }
{ % include place/go % }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と記述すれば&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;b&amp;gt;ある場所に行きます。&amp;lt;/b&amp;gt;
&amp;lt;b&amp;gt;ある場所に行きます。&amp;lt;/b&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と、出力されます。&lt;/p&gt;

&lt;h1 id=&#34;変数と-include-を組み合わせる:79fe50412cbb3e59f64ffd395b234641&#34;&gt;変数と include を組み合わせる&lt;/h1&gt;

&lt;p&gt;includeを無理矢理関数のように利用してみます。&lt;/p&gt;

&lt;p&gt;上記の &lt;code&gt;PROJECT_ROOT/_includes/go&lt;/code&gt; を以下のようにします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;b&amp;gt;{{ place }}に行きます。&amp;lt;/b&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そして、assign で値をセットしてから include します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{ % assign place = &amp;quot;広島&amp;quot; % }
{ % include place/go % }
{ % include place/go % }
{ % assign place = &amp;quot;日本&amp;quot; % }
{ % include place/go % }
{ % include place/go % }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;結果は以下のようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;b&amp;gt;広島に行きます。&amp;lt;/b&amp;gt;
&amp;lt;b&amp;gt;広島に行きます。&amp;lt;/b&amp;gt;

&amp;lt;b&amp;gt;日本に行きます。&amp;lt;/b&amp;gt;
&amp;lt;b&amp;gt;日本に行きます。&amp;lt;/b&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こうすることで繰返し項目を少しだけ DRY に記述できます。&lt;/p&gt;

&lt;h1 id=&#34;注意点:79fe50412cbb3e59f64ffd395b234641&#34;&gt;注意点&lt;/h1&gt;

&lt;p&gt;レイアウトで include する場合、ページから変数を設定するには、FrontFormmater を使用しないとうまくいきません。&lt;/p&gt;

&lt;p&gt;レイアウト -&amp;gt; ページ内部 という順番で処理されるためです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;includeする&lt;/li&gt;
&lt;li&gt;変数を設定する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という動作になるため、期待した動作になりません。&lt;/p&gt;

&lt;p&gt;また、 include の引数に変数を使う方法はみつけることができませんでした。
代わりに &lt;code&gt;caseタグ&lt;/code&gt; や &lt;code&gt;ifタグ&lt;/code&gt; で地道にがんばることになります。&lt;/p&gt;

&lt;p&gt;Github  Pages を共同編集するわけではないなら、ローカルでHTMLを生成してから push するほうがいろいろ便利そうです。
プログラマ的には slim なども利用できる &lt;a href=&#34;http://middlemanapp.com/&#34;&gt;Middleman&lt;/a&gt; などが注目を浴びていきそうですね。&lt;/p&gt;

&lt;h1 id=&#34;参考文献:79fe50412cbb3e59f64ffd395b234641&#34;&gt;参考文献&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Shopify/liquid/wiki/Liquid-for-Designers&#34;&gt;Liquid for Designers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;関連記事:79fe50412cbb3e59f64ffd395b234641&#34;&gt;関連記事&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/02/17/github-pages/&#34;&gt;Github Pages について整理しておきます&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/02/18/jekyll-on-github/&#34;&gt;Github で Jekyll を使う時に調べたこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>「Github をつかったコミュニティ すごい広島」というタイトルでLTしてきた</title>
          <link>https://blog.eiel.info/blog/2013/06/15/great-h/</link>
          <pubDate>Sat, 15 Jun 2013 19:39:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/06/15/great-h/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://www.webtouchmeeting.com/meeting/2013/06/58web-touch-meeting.html&#34;&gt;WEB TOUCH MEETING #58&lt;/a&gt; の LT 枠で&lt;a href=&#34;http://great-h.github.io/&#34;&gt;すごい広島&lt;/a&gt;について LT をしました。&lt;/p&gt;

&lt;p&gt;Githubの話はほとんどしていない。最近、隔週で何か喋ってる気がする。&lt;/p&gt;

&lt;p&gt;主な目的は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;みんな広島を盛り上げようぜ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;です。&lt;/p&gt;

&lt;p&gt;表面的には&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;みんなもっとアウトプットしましょう&lt;/li&gt;
&lt;li&gt;楽しいことをしよう&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というのをメインに話しました。&lt;/p&gt;

&lt;p&gt;裏の目的は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;自分のツイートだってコンテンツになりえるか&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;です。&lt;/p&gt;

&lt;p&gt;世の中には勉強会の存在を知らなくて一人でがんばってる人がいたり、
勉強会で何をやってるのかわからなかったり、
そういう人たちに地元の勉強会の存在を知る可能性を高くする。&lt;/p&gt;

&lt;p&gt;あと LT できる人、したがる人を増やす。
LTやる人がいないと LTをやろうと思う人も増えない。
僕は人前で喋りたくない派なので、できるのはきっかけ作りをしたい。&lt;/p&gt;

&lt;p&gt;そういう目的のセッションをしたつもりです。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;http://www.slideshare.net/slideshow/embed_code/23031128&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&#34; allowfullscreen webkitallowfullscreen mozallowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;http://www.slideshare.net/TomohikoHimura/ss-23031128&#34; title=&#34;すごい広島&#34; target=&#34;_blank&#34;&gt;すごい広島&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/TomohikoHimura&#34; target=&#34;_blank&#34;&gt;Tomohiko Himura&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;というわけで、セッション補足。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;up したスライドは削ったものを追懐しています。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;github:a8a6cf8135143e61a1c8c7eaefbc9637&#34;&gt;Github&lt;/h3&gt;

&lt;p&gt;ここを見ている人に書く必要はないと思いますが、オープンソースプロジェクトをしていく上で重要なWebサービスです。
言葉慣れをしてもらうということで解説は全くしませんでした。&lt;/p&gt;

&lt;h3 id=&#34;気軽にアウトプット:a8a6cf8135143e61a1c8c7eaefbc9637&#34;&gt;気軽にアウトプット&lt;/h3&gt;

&lt;p&gt;気合いれてアウトプットするにはエネルギーが必要です。大作を毎週書くのは大変です。
「気軽に書きましょう」という話をしたかったですが、時間の都合上、削除しました。&lt;/p&gt;

&lt;p&gt;LTも気軽にアウトプットできて、影響も大きいです。気軽に作れるように練習したほうが良いと思います。
なので、気軽にLTするには &lt;a href=&#34;http://hiroshimarb.github.io/&#34;&gt;広島Ruby勉強会&lt;/a&gt;を使うといいですよ。
という話をあらかじめ休憩時間の告知で伏線を貼ることで、省略しました。&lt;/p&gt;

&lt;p&gt;アウトプットをすると勉強になる、かつ、そこに情報が集まる。
アウトプットをするにはそれなりのエネルギーが必要ですが、インプットするのはアウトプットに比べるとずっと少ないです。
気軽にコメントをしてくれたり、詳しい情報を聞こうと人が集まってきたり、強力なマサカリが飛んでくることで自分の理解を促進してくれます。&lt;/p&gt;

&lt;p&gt;また、伝えようとすることで考えを整理することができます。
そういう話をざっくりしました。&lt;/p&gt;

&lt;p&gt;また、ツイートも立派なコンテンツになるんじゃないかと、自分のツイートをスライドに使ってみたりもしました。
これは自爆気味なのでライフポイントがガンガン減ります。&lt;/p&gt;

&lt;h3 id=&#34;県外のほうが楽しく見える:a8a6cf8135143e61a1c8c7eaefbc9637&#34;&gt;県外のほうが楽しく見える&lt;/h3&gt;

&lt;p&gt;隣の芝生は本当に青いのか。
青くないのかもしれませんが、青く見えたら人はそちらに流れていく可能性があります。
そうです。潜在的に面白い人たちが都会へと流れてしまいます。&lt;/p&gt;

&lt;p&gt;こういった勉強会に興味を持つ人が「地元には面白いものがないから」
と、都会へと行ってしまう。
特にいまから高い可能性を持つ学生が都会へ流れずに、地元へ残る選択肢を提示していきたい。
また、面白ければ「県外から広島は楽しそうだから」と、やってくる可能性もあります。&lt;/p&gt;

&lt;p&gt;僕だって楽しいところに行きたいもの。
じゃあ、楽しくするしかないじゃないか。&lt;/p&gt;

&lt;h3 id=&#34;楽しければいいの:a8a6cf8135143e61a1c8c7eaefbc9637&#34;&gt;楽しければいいの?&lt;/h3&gt;

&lt;p&gt;ここは削った部分です。&lt;/p&gt;

&lt;p&gt;「楽しいだけの勉強会は人は集まらないし、本格化しない。人が集まらないので継続は難しい」そんなマサカリを受けたことがあります。
ビジネスにならないとメリットを感じることが難しいので人がこないという話ですね。&lt;/p&gt;

&lt;p&gt;実際、Ruby勉強会の参加者のほとんどがRuby初心者です。&lt;/p&gt;

&lt;p&gt;でもね、エンジニアはビジネスをする人じゃない。
技術を追求すべき人たちです。&lt;/p&gt;

&lt;p&gt;どういったことができるか、ビジネスをする人に伝える必要はありますが、
そうあるためには、エンジニアが技術を日々高めて、面白いことができるステージに立つ必要がある。&lt;/p&gt;

&lt;p&gt;どうやって技術を高めるかというと、努力するしかない。
努力するには楽しい必要があるのです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「僕にはそれが楽しかったから」&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;そういう人が増えて欲しい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;地域が活性化、エンジニアが活性化してなくて何ができるの？&lt;/li&gt;
&lt;li&gt;ビジネスをするための下地を作る必要があるのでは？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そんな風に考えました。&lt;/p&gt;

&lt;p&gt;つまり、答えは、&lt;strong&gt;楽しく学ぶ&lt;/strong&gt; 。まずは仲間がいればそれだけで楽しくなる。&lt;/p&gt;

&lt;p&gt;ひとりでもくもくと学んできたエンジニアは濃いネタをもっています。
だからこそ、それを伝える機会を増やす。&lt;/p&gt;

&lt;p&gt;アウトプットすれば、「ここに面白い人がいる」ということが認知されるのです。
だから、無理矢理アウトプットすることを すごい広島 の中で強制してみています。&lt;/p&gt;

&lt;h3 id=&#34;ltで失敗した点:a8a6cf8135143e61a1c8c7eaefbc9637&#34;&gt;LTで失敗した点&lt;/h3&gt;

&lt;p&gt;対象者に想定したレベルが高すぎた。
プロットに対象者の欄をかかなかったのがよくない。
LT でも対象者を意識するようにする。&lt;/p&gt;

&lt;p&gt;僕のセッション中に内容に関するツイート皆無なので、たぶん、微妙なLTだったんだと思う。
もっとがんばりましょう。&lt;/p&gt;

&lt;h3 id=&#34;独り言:a8a6cf8135143e61a1c8c7eaefbc9637&#34;&gt;独り言&lt;/h3&gt;

&lt;p&gt;しかし、狙ってないところで笑いがとれてしまう。
狙ったところは だいたい &lt;a href=&#34;http://kita.dyndns.org/diary/&#34;&gt;@NeXTSTEP2OSX&lt;/a&gt; の中の人にしかウケないんだよなー。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Rails で AngularJs を使おうとしてみた</title>
          <link>https://blog.eiel.info/blog/2013/06/12/htmlday-angular-js/</link>
          <pubDate>Wed, 12 Jun 2013 20:05:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/06/12/htmlday-angular-js/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://www.htmlday.jp&#34;&gt;&amp;lt;htmlday&amp;gt; 2013&lt;/a&gt;でやったことプラスアルファ。
足りなかった部分は&lt;a href=&#34;http://great-h.github.io/events/event-004.html&#34;&gt;すごい広島 #4&lt;/a&gt;内で調査しました。&lt;/p&gt;

&lt;p&gt;&amp;lt;htmlday&amp;gt; では &lt;a href=&#34;http://angularjs.org/&#34;&gt;AngularJS&lt;/a&gt; で遊びました&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2012/07/26/angularjs-abc/&#34;&gt;前にAngularJSを利用したときの復習&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://angularjs.org/&#34;&gt;AngularJS&lt;/a&gt; を rails で使うのに使えそうな gemの調査&lt;/li&gt;
&lt;li&gt;&amp;lt;html ng-app&amp;gt; と書けないの時の対処方法&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;angularjs-を-rails-で使うのに使えそうな-gemの調査:de9db9eb8c6ccb8fc160fb8104e352a8&#34;&gt;AngularJS を rails で使うのに使えそうな gemの調査&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ruby-toolbox.com/search?utf8=%E2%9C%93&amp;amp;q=angular&#34;&gt;とりあえず、Ruby Toolboxで angularを検索してみました。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;候補としては&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ludicast/angular-rails/tree/master/vendor/assets/javascripts&#34;&gt;angular-rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hiravgandhi/angularjs-rails/tree/master/lib&#34;&gt;anglurajs-rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ets-berkeley-edu/angular-gem&#34;&gt;angular-gem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yjchen/angular-rails-engine&#34;&gt;angular-rails-engine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;と、乱立状態でした。他にもありましたけど、見る元気はありませんでした。&lt;/p&gt;

&lt;p&gt;結論をまとめておくと&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;素の AngularJs でいいのなら angularjs-rails&lt;/li&gt;
&lt;li&gt;generatorなど、もしかすると便利になるものがあるかもしれないのが angular-gem&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という感じでした。&lt;/p&gt;

&lt;p&gt;まずは、angular-rails を試しました。generator などついていますが、AngularJSの本体が更新されていない状態でした。
また、添付されている angle.js を読み込みすると動作しなかったりと問題もちらほらありました。&lt;/p&gt;

&lt;p&gt;次にみたのは angularjs-rails です。これは Javascriptが添付されているだけのシンプルなものでした。添付されているものも最新で、unstable な最新バージョンも添付されていました。読み込みたいだけならこれで良さそうです。x&lt;/p&gt;

&lt;p&gt;unstableなバージョンをよみこむ場合は application.js に&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;//= require_tree ./angular/unstable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と、かけば良さそうです。&lt;/p&gt;

&lt;p&gt;3番目に angular-gem です。前述の angularjs をフォークして複数のversion のAngularJSを取りこんでいたりと、なかなか意欲的です。&lt;/p&gt;

&lt;p&gt;4つ目は angular-rails-engin です。angular_include_tag というヘルパーを提供してくれて、必要に応じて読込みして使う感じになるようです。&lt;/p&gt;

&lt;p&gt;とりあえず、 angular-gem を試していこうかなと思います。&lt;/p&gt;

&lt;h3 id=&#34;html-ng-app-を書けないのでその対処方法:de9db9eb8c6ccb8fc160fb8104e352a8&#34;&gt;&amp;lt;html ng-app&amp;gt; を書けないのでその対処方法&lt;/h3&gt;

&lt;p&gt;AngularJs では&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html ng-app&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のような書き方をして、機能拡張をする場合は、myModule を作成して、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html ng-app=&amp;quot;myModule&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようにします。&lt;/p&gt;

&lt;p&gt;しかし、&lt;a href=&#34;http://haml.info/&#34;&gt;haml&lt;/a&gt; &lt;a href=&#34;http://slim-lang.com/&#34;&gt;slim&lt;/a&gt; を利用していると、自動生成されてしまって書けそうにない。&lt;/p&gt;

&lt;p&gt;書けない場合は JavaScriptでなんとかできました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;angular.element(document).ready(function() {
  angular.bootstrap(document, [&#39;myModule&#39;]);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と書くと、前述のものと等価になります。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Gitリポジトリを直接動かして変更を検知 - QA@ITで遊んでる</title>
          <link>https://blog.eiel.info/blog/2013/06/05/git-dir/</link>
          <pubDate>Wed, 05 Jun 2013 13:26:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/06/05/git-dir/</guid>
          <description>

&lt;p&gt;朝早く起きることができたら、&lt;a href=&#34;http://qa.atmarkit.co.jp/&#34;&gt;QA@IT&lt;/a&gt;で、遊んでいます。
ざっと未解決の質問を見て、すぐわかりそうなものを試して解答をします。&lt;/p&gt;

&lt;p&gt;今日は 「&lt;a href=&#34;http://qa.atmarkit.co.jp/q/2970&#34;&gt;rails new project -d postgresql を指定した時に変更される部位&lt;/a&gt;」というのがあって、「試せばいいやーん」と思ったので、すぐに手を動かしてみました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rails new project&lt;/code&gt; と &lt;code&gt;rails new project -d postgresql&lt;/code&gt;  の違いについて。&lt;/p&gt;

&lt;p&gt;だいたい以下の操作をすれば違いはわかります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails new project
mv project project_sqlite3

rails new project -d postgresql
diff -ru project_sqlite3 project
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすれば違いは簡単にわかります。&lt;/p&gt;

&lt;p&gt;new の引数は同じ名前にしないと、余計な差分ができてしまうので、作成した後に リネームしています。&lt;/p&gt;

&lt;h3 id=&#34;折角なので-git-を絡めてみた:56381a3c645c8ceabcba188a961cd2ae&#34;&gt;折角なので Git を絡めてみた&lt;/h3&gt;

&lt;p&gt;Git のリポジトリって直接移動してもそのまま使えるんだぜ!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails new project
mv project project_sqlite3

cd project_sqlite3
git init
git add .
git commit -m &#39;initial&#39;
cd ..

rails new project -d postgresql

mv project_sqlite3/.git project
cd project
git diff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という、感じの解答をしてみました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.git&lt;/code&gt; を移動をしてるのが味噌です。&lt;/p&gt;

&lt;p&gt;リポジトリに対する物理的なワークツリーが変わっても簡単に認識してくれます。
このようにGitの理解が深まってくると応用力がついてきて、「subversion より Git 楽しいなぁ」と、個人的にはなります。&lt;/p&gt;

&lt;h3 id=&#34;別解:56381a3c645c8ceabcba188a961cd2ae&#34;&gt;別解&lt;/h3&gt;

&lt;p&gt;git には リポジトリを指定するオプション &lt;code&gt;--git-dir&lt;/code&gt; があります。
なので以下のような方法もあります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails new project
mv project project_sqlite3

cd project_sqlite3
git init
git add .
git commit -m &#39;initial&#39;
cd ..

rails new project -d postgresql

cd project
git --git-dir=../project_sqlite3/.git diff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、ワークツリーを指定するオプション &lt;code&gt;--work--tree&lt;/code&gt;もあります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails new project
mv project project_sqlite3

cd project_sqlite3
git init
git add .
git commit -m &#39;initial&#39;
cd ..

rails new project -d postgresql

cd project_sqlite3
git --work-tree=../project diff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Git 楽しいですねー。&lt;/p&gt;

&lt;h2 id=&#34;戯言:56381a3c645c8ceabcba188a961cd2ae&#34;&gt;戯言&lt;/h2&gt;

&lt;p&gt;QA@ITのサイト内ランクが100位切りました。ユーザすくないですな…。&lt;/p&gt;

&lt;h2 id=&#34;関連:56381a3c645c8ceabcba188a961cd2ae&#34;&gt;関連&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/06/04/git-log-s/&#34;&gt;このコード書いた誰だよ! そんな時の Git Log -S でもしてみよう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2012/11/20/git-hooks-triger/&#34;&gt;Git Push 時に発生する Update Hookを起動するワンナイナー&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>このコード書いた誰だよ! そんな時の git log -S でもしてみよう</title>
          <link>https://blog.eiel.info/blog/2013/06/04/git-log-s/</link>
          <pubDate>Tue, 04 Jun 2013 20:30:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/06/04/git-log-s/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://local.aguuu.com/events/15354&#34;&gt;広島Git勉強会&lt;/a&gt; で &lt;a href=&#34;https://twitter.com/pecosantoyobe&#34;&gt;@pecosantoyobe&lt;/a&gt; が &lt;a href=&#34;https://github.com/furu/hiroshimadotgit&#34;&gt;git log の使えるオプションについて語る&lt;/a&gt;というナイスなセッションがありました。&lt;/p&gt;

&lt;p&gt;その中で &lt;code&gt;git log -S&lt;/code&gt; の紹介がありましたが、説明が難しそうなので、さらっと流れてしました。
折角なので実例を紹介します。&lt;/p&gt;

&lt;p&gt;複数人でプログラムを書いてると、&lt;strong&gt;「このコード書いたの誰だよwww」&lt;/strong&gt; 的なことが稀にあります。&lt;/p&gt;

&lt;p&gt;例えばこんなコードがあるとします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Sample
  def hoge
    hogehoge_gorogoro.to_sym.to_s
  end

  def hogehoge_gorogoro
    &amp;quot;hogehoge_gorogoro&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;「&lt;code&gt;hogehoge_gorogoro.to_sym.to_s&lt;/code&gt; ってなんだよ!! 意味あるのかよ!」&lt;/strong&gt; みたいなことがあると思います。&lt;/p&gt;

&lt;p&gt;そんな時はすかさず git blame を利用します。&lt;/p&gt;

&lt;p&gt;みやすさの都合上、emacs の magit-blame を利用します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/git-log-S-magit.png&#34; alt=&#34;magitt&#34; /&gt;&lt;/p&gt;

&lt;p&gt;e92db224 で変更されていることがわかります。&lt;/p&gt;

&lt;p&gt;ちょっとこの時のコミットを見てみましょう。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git show e92db224&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/git-log-S.png&#34; alt=&#34;git show e92db224&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;インデントの修正されているだけ&lt;/strong&gt;で、大した情報が得られません。
こんなときに &lt;code&gt;git log -S&lt;/code&gt; を使います。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git log -S &#39;hogehoge_gorogoro&#39; --patch&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;変更内容が見たいので、 &lt;code&gt;--patch&lt;/code&gt; をつけました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/git-log-S-log-S.png&#34; alt=&#34;git log -S&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「なんだよ。initial commit ではじめからそーなのかよ!!」&lt;/strong&gt; なんて展開でした。
ちょっと例が凝れてなくて便利さが伝わりにくいかもしれません。&lt;/p&gt;

&lt;p&gt;diff の内容から更に git log -S で追ってみたりできます。
もし良いコミットログがあれば、コードの意図がわかったり チケットID などが記載されていれば、そちらを参照することになります。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「なんだよ。書いたのオレじゃねーか!! orz」&lt;/strong&gt; なんてこともよくあります。が、気を落とさず綺麗なコードを書いていきたいですね。&lt;/p&gt;

&lt;p&gt;お試しあれ。&lt;/p&gt;

&lt;h3 id=&#34;関連:9aec39af9f1640535333d9d3c0ba1d47&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2012/05/30/magit-blame-mode/&#34;&gt;magit-brame-modeの表示がみやすかった件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>広島Git勉強会 - 番外編 Github Flow してみる</title>
          <link>https://blog.eiel.info/blog/2013/06/02/hiroshima-git-extend/</link>
          <pubDate>Sun, 02 Jun 2013 21:14:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/06/02/hiroshima-git-extend/</guid>
          <description>

&lt;p&gt;書きわすれたことがあった。
ひとつ前のエントリはそれはそれで完結してるので、追記せず、別にしてみる。
そういえば、ひとつ前のエントリーうっかり Ruby勉強会って書いてました。見なかったことにしてください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://local.aguuu.com/events/15354&#34;&gt;広島Git勉強会&lt;/a&gt; の終了後に懇親会の代わりに、別の教室で &lt;a href=&#34;https://gist.github.com/Gab-km/3705015&#34;&gt;Github Flow&lt;/a&gt;体験をしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/eiel/5689554&#34;&gt;やることの手順ははGistにかいてます&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://great-h.github.io/events/event-002-5.html&#34;&gt;そしてその成果物がこの辺です&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;もし、やってみたい方がいれば気軽に挑戦してみてください。&lt;a href=&#34;https://github.com/great-h/great-h.github.io/issues?milestone=3&amp;amp;state=open&#34;&gt;Issue&lt;/a&gt;にそれっぽいことを書いてもらえたら大丈夫です。
先に空のブログ記事をつくって pull request して、あとからブログに感想を書くなどでも大丈夫です。もっと面白いことが思いついたらそれでもOKです。&lt;/p&gt;

&lt;p&gt;やってみて思ったことですが、Git普段使ってない人であれば、これだけでも結構難しいようでした。
次回やるときはもっと準備しておこうと思います。&lt;/p&gt;

&lt;h2 id=&#34;関連リンク:2fc06b69357900c52e9e4a6fce20c316&#34;&gt;関連リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/06/02/hiroshima-git-extend/&#34;&gt;広島Git勉強会 - 番外編 Github Flow してみる
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/02/17/github-pages/&#34;&gt;Github Pages について整理しておきます&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/02/18/jekyll-on-github/&#34;&gt;Github で Jekyll を使う時に調べたこと&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/02/06/how-to-use-github/&#34;&gt;Git がわからなくても Github を利用しよう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/05/13/how-to-enjoy-github/&#34;&gt;Github の楽しみ方&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>広島Git勉強会 201306 - やりなおせるGit入門</title>
          <link>https://blog.eiel.info/blog/2013/06/02/hiroshima-git/</link>
          <pubDate>Sun, 02 Jun 2013 20:47:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/06/02/hiroshima-git/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://local.aguuu.com/events/15354&#34;&gt;広島Git勉強会&lt;/a&gt; に参加しました。&lt;/p&gt;

&lt;p&gt;1セッション喋りました。&lt;/p&gt;

&lt;p&gt;はじめから&lt;code&gt;git reset&lt;/code&gt; と &lt;code&gt;git checkout&lt;/code&gt;あたりを説明しようと思ってたのですが、「元に戻せること」を主眼においていろいろ考えました。
結果として、「危険」「少し危険」なコマンドを定義して、よくわからない時どうすればいいのか伝えられるか試みてみました。&lt;/p&gt;

&lt;p&gt;「危険」なコマンドはワークツリーにした変更が消えてしまう恐れがあるもの。&lt;/p&gt;

&lt;p&gt;「少し危険」なコマンドは&lt;code&gt;git reflog&lt;/code&gt;などを利用しないと追えなくなるコミットができてしまうもの。&lt;/p&gt;

&lt;p&gt;と定義して、そこを強調しながら説明してみました。&lt;/p&gt;

&lt;p&gt;スライドはこちらに。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;http://www.slideshare.net/slideshow/embed_code/22237343&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&#34; allowfullscreen webkitallowfullscreen mozallowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;http://www.slideshare.net/TomohikoHimura/git-22237343&#34; title=&#34;やりなおせる Git 入門&#34; target=&#34;_blank&#34;&gt;やりなおせる Git 入門&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/TomohikoHimura&#34; target=&#34;_blank&#34;&gt;Tomohiko Himura&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;結局、難しかったのか簡単だったのか、周りの空気を読む余裕が僕にはまだまだ足りなくて、「経験値を積まないといけないなぁ」と、思うのでした。&lt;/p&gt;

&lt;h2 id=&#34;追記-ブクマのコメントなどなどに返信:aba3a29cdc6be5a15e7d4c5e3be2c4b2&#34;&gt;追記 ブクマのコメントなどなどに返信&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;「git commit の -m はそろそろ卒業しましょう」というのはどういうことなのかな？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;-m&lt;/code&gt; って解説のために、そう書いてることが多いじゃないかと思う。スライド上でも &lt;code&gt;-m&lt;/code&gt;を利用していますが、こ の場合はコミットログをタイトルしか書かない場合が予想できる。なので、「概要も書きましょう。」という話をするために書いています。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;良いまとめ。だけど rm -rf .git ってそんなにカジュアルでいいのかなw&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;すごく危険な操作なので、カジュアルにやるのはよくないですが、初回のコミットまでなら。という感じで口頭では伝えております。スライドにも入れればよかった。&lt;/p&gt;

&lt;h2 id=&#34;関連リンク:aba3a29cdc6be5a15e7d4c5e3be2c4b2&#34;&gt;関連リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/06/02/hiroshima-git-extend/&#34;&gt;広島Git勉強会 - 番外編 Github Flow してみる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/02/23/okagit-20130223/&#34;&gt;岡山Git勉強会 - 20130223 - Git 仕組み入門 という話をしてきた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/02/06/how-to-use-github/&#34;&gt;Git がわからなくても Github を利用しよう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/05/13/how-to-enjoy-github/&#34;&gt;Github の楽しみ方&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Polymer という Web Componets のラッパーを試した</title>
          <link>https://blog.eiel.info/blog/2013/05/31/polymer/</link>
          <pubDate>Fri, 31 May 2013 19:33:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/05/31/polymer/</guid>
          <description>&lt;p&gt;Google I/O で紹介されていた &lt;a href=&#34;http://www.polymer-project.org/&#34;&gt;Polymer&lt;/a&gt; という JavaScript で少し遊びました。&lt;/p&gt;

&lt;p&gt;Web Components という Web の UI を コンポーネント化するための仕組みがあります。
これをラップして 使いやすくしてくれる Polymer です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/polymer_experiment&#34;&gt;遊んだ結果はこの辺&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rake preview&lt;/code&gt; でウェブサーバが起動するので &lt;code&gt;http://localhost:4000&lt;/code&gt; でアクセスできるようにしています。&lt;/p&gt;

&lt;p&gt;ポイントは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;カスタムタグが作れる&lt;/li&gt;
&lt;li&gt;属性でコンポーネントに情報を渡せる&lt;/li&gt;
&lt;li&gt;コンポーネントは独立した HTML ファイル&lt;/li&gt;
&lt;li&gt;linkタグ で読み込む コンポーネントを指定できる&lt;/li&gt;
&lt;li&gt;Web Components に比べて記述良が少ない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といっところでしょうか。&lt;/p&gt;

&lt;p&gt;index.html は下記のようになっています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;script src=&amp;quot;polymer.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;link rel=&amp;quot;import&amp;quot; href=&amp;quot;my-element.html&amp;quot;&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;my-element hoge=&amp;quot;goro&amp;quot;&amp;gt;&amp;lt;/my-element&amp;gt;
    &amp;lt;my-element hoge=&amp;quot;mogu&amp;quot;&amp;gt;&amp;lt;/my-element&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Polymer を読み込んで&lt;/li&gt;
&lt;li&gt;my-element という コンポーネントを読み込んで&lt;/li&gt;
&lt;li&gt;my-element タグ で利用している&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という流れです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hoge属性で my-element コンポーネントのボタンのラベルを変更しています。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;my-element.html は下記のようになっています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;element name=&amp;quot;my-element&amp;quot; attributes=&amp;quot;hoge&amp;quot;&amp;gt;
  &amp;lt;template&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;span&amp;gt;I&#39;m &amp;lt;b&amp;gt;tk-element&amp;lt;/b&amp;gt;. This is my Shadow DOM.&amp;lt;/span&amp;gt;
      &amp;lt;button on-click=&amp;quot;delete&amp;quot;&amp;gt;{{ hoge }}&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/template&amp;gt;
  &amp;lt;script&amp;gt;
    Polymer.register(this,
    {
    &amp;quot;delete&amp;quot;: function () { alert(this.hoge) },
    }
    );
  &amp;lt;/script&amp;gt;
&amp;lt;/element&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いくつか特殊なタグがあります。&lt;/p&gt;

&lt;p&gt;element, template です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;element の name属性に 作成するタグの名前を書く&lt;/li&gt;
&lt;li&gt;element の attributes属性に 外部から受け取る情報を登録する

&lt;ul&gt;
&lt;li&gt;hoge という属性でやりとりすることを書いています&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;template の中にHTMLをかきます。

&lt;ul&gt;
&lt;li&gt;波括弧を使うことで 変数の中身を取り出せます&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ロジック は Polymer.register を利用して登録します&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;非常にモジュラリティが高いので、HTMLが見やすくなりそうです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>cleditor の内容を javascirptで変更する in Cucumber</title>
          <link>https://blog.eiel.info/blog/2013/05/31/cucumber-cleditor/</link>
          <pubDate>Fri, 31 May 2013 19:20:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/05/31/cucumber-cleditor/</guid>
          <description>&lt;p&gt;Cucumber の @javascript で実行しているシナリオに ]cleditor](&lt;a href=&#34;https://github.com/cleditor/cleditor/blob/master/jquery.cleditor.js&#34;&gt;https://github.com/cleditor/cleditor/blob/master/jquery.cleditor.js&lt;/a&gt;) という WYGSYG が利用されていて 普通に値を代入しただけだと反映されない問題に直面した。&lt;/p&gt;

&lt;p&gt;caybara  のドライバーには poltergeist を使用しています。&lt;/p&gt;

&lt;p&gt;バリデーションをかけていて、入力しないと進めないので、javascriptを使って入力することにした。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(selector).data(&#39;cleditor&#39;).$area.html( content );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.data(&amp;lsquo;cleditor&amp;rsquo;).$area というところに情報が保存されていることがわかったので、そこのHTMLをさしかえます。
Safari で実行した場合は画面表示は変更されないので注意です。&lt;/p&gt;

&lt;p&gt;これを cucumber の step で実行したいので、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;description = &amp;quot;hogehoge&amp;quot;
code = &amp;lt;&amp;lt;&amp;quot;JAVASCRIPT&amp;quot;
$(&#39;#hogehoge&#39;).data(&#39;cleditor&#39;).$area.html(&#39;#{description}&#39;);
JAVASCRIPT
evaluate_script(code)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;として、 evalute_script を利用して実行しました。&lt;/p&gt;

&lt;p&gt;data属性にデータを保存しておくのは一般的なのかな？この辺の事情はよくしりません。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Github Page で公開する サイトを ローカルで preview するのに使ってる方法</title>
          <link>https://blog.eiel.info/blog/2013/05/29/jekyll-preview/</link>
          <pubDate>Wed, 29 May 2013 21:52:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/05/29/jekyll-preview/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://great-h.github.io/events/event-002.html&#34;&gt;すごい広島 #2&lt;/a&gt; でしたことを書きます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://eielh-life.tumblr.com/post/51639356116/2&#34;&gt;日記のほうはこちら&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2013年8月23日追記。下記の方法を改良したものがあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/08/28/browse-open-when-rake-preview/&#34;&gt;ローカルサーバ起動と同時にブラウザで開く。 - Jekyll とかで。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上、追記終了。&lt;/p&gt;

&lt;p&gt;私は、Jekyllを使用したサイトをプレビューする際に、jekyll のインターフェイスが変化しても、または、jekyll 以外のものを使用しているときのことも考えて、 &lt;code&gt;rake preview&lt;/code&gt; でサイトのプレビューをできるようにしています。&lt;/p&gt;

&lt;p&gt;「Octopressでも、Hakyll でも Jekyll でも &lt;code&gt;rake preview&lt;/code&gt; にしたいんだ!!」&lt;/p&gt;

&lt;p&gt;具体的には以下のような、Rakefile を作成しました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;desc &#39;preview する。 http://localhost:4000/&#39;
task :preview do
  sh &#39;bundle exec jekyll serve --watch&#39;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jekyll は v1.0.0 で preview するためのコマンド名が変わりました。&lt;/p&gt;

&lt;p&gt;あとは、他の人が gem のインストールのを軽減するために、Gemfile も書きました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;source &#39;https://rubygems.org&#39;

gem &#39;jekyll&#39;,     &#39;=1.0.2&#39;
gem &#39;liquid&#39;,     &#39;=2.5.0&#39;
gem &#39;redcarpet&#39;,  &#39;=2.2.2&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで、ruby と bundler さえ入っている人は &lt;code&gt;bundle instnall&lt;/code&gt; というコマンドを実行すれば、サイトのプレビューができるようになります。&lt;/p&gt;

&lt;p&gt;bundler は &lt;code&gt;gem install bundler&lt;/code&gt; でインストールしておきましょう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/great-h/great-h.github.io/pull/31&#34;&gt;具体的なコミットはこちらに&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;関連:a6a66ea74ef9d9b45cfb216612dcf840&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;blog/2013/08/28/browse-open-when-rake-preview/&#34;&gt;ローカルサーバ起動と同時にブラウザで開く。 - Jekyll とかで。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>セキュリティもみじで空気読めてないLTをしたんだ - すごい Hiroshima で楽しく学ぼう</title>
          <link>https://blog.eiel.info/blog/2013/05/23/momiji/</link>
          <pubDate>Thu, 23 May 2013 10:56:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/05/23/momiji/</guid>
          <description>&lt;p&gt;先週の土曜日に&lt;a href=&#34;https://sites.google.com/site/secmomiji/secmomiji24&#34;&gt;セキュリティもみじ&lt;/a&gt;で 5分の LT をしました。&lt;/p&gt;

&lt;p&gt;セキュリティの勉強会なのに、セキュリティと全く関係なかったり、5分を超過してたり、痛いツイート引用していたりと、恥ずかしい限りです。&lt;/p&gt;

&lt;p&gt;しかも、ターゲットに設定していた広島の若い人が……&lt;strong&gt;参加してない!&lt;/strong&gt; という、致命的な問題が発生しました。
仕方ないので、ネタにしておきました。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;http://www.slideshare.net/slideshow/embed_code/21713029&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&#34; allowfullscreen webkitallowfullscreen mozallowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;http://www.slideshare.net/TomohikoHimura/hiroshima-21713029&#34; title=&#34;すごい Hiroshima で 楽しく学ぼう&#34; target=&#34;_blank&#34;&gt;すごい Hiroshima で楽しく学ぼう&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/TomohikoHimura&#34; target=&#34;_blank&#34;&gt;Tomohiko Himura&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;タイトルの元ネタは言わずとしれた、「すごいH本」で知られる [すごいHaskell 楽しく]&lt;a href=&#34;http://www.amazon.co.jp/gp/product/4274068854?ie=UTF8&amp;amp;camp=1207&amp;amp;creative=8411&amp;amp;creativeASIN=4274068854&amp;amp;linkCode=shr&amp;amp;tag=eiel-22(&#34;&gt;http://www.amazon.co.jp/gp/product/4274068854?ie=UTF8&amp;amp;camp=1207&amp;amp;creative=8411&amp;amp;creativeASIN=4274068854&amp;amp;linkCode=shr&amp;amp;tag=eiel-22(&lt;/a&gt;) です。
良本なので、まだ読んでない方は、ぜひ。Haskell を使う機会がなくて新しい視点を得るヒントになるかもしれません。
LTは Haskell ともなんにも関係ないし、説明する時間もありませんでした。&lt;/p&gt;

&lt;p&gt;話を戻します。&lt;/p&gt;

&lt;p&gt;つまり、広島は盛り上がってるのか、盛り上がってないのか。
どちらでも構わないから、もっと盛り上げたらいいよね。
そういう気持ちの話しをしてきました。&lt;/p&gt;

&lt;p&gt;人前で話すのは本当に苦手です。
だからといって、何もしないのでは期待するような結果にはならないです。
ならば、まずは自分にできそうなことをやる。それだけです。&lt;/p&gt;

&lt;p&gt;「地元がよいけど、やっぱ都会のほうが楽しいよー」って、人たちが「地元楽しいな!」になると良いですよね。&lt;/p&gt;

&lt;p&gt;このセッションに便乗したわけではないのですが、&lt;a href=&#34;http://great-h.github.io/&#34;&gt;すごい広島&lt;/a&gt; という Meetup 的なものをはじめてみたりしました。
毎週水曜日にやってみようと思います。
おしい広島にもなんとなく音が近いですね。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qwik.jp/asakusarb/&#34;&gt;Asakura.rb&lt;/a&gt; 的なものがやってみたかった。
実は参加したことがないのでどんなやり方なのか実はさっぱりわかっていません。
岡山でも &lt;a href=&#34;https://ishikitakai.com/groups/10&#34;&gt;Okayama.rb&lt;/a&gt; というのを毎週やっていて、対抗したい意識があったり、なかったりです。&lt;/p&gt;

&lt;p&gt;やり方がよくわからないので自己流で裏テーマとして&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Github の使う&lt;/li&gt;
&lt;li&gt;ブログを書く週間をつける&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というのも兼ねてみてます。
「これは意識高すぎるんじゃね？」という意見もちょっと出てて、ちょっと迷い気味。
敷居もなるべく下げたい。&lt;/p&gt;

&lt;p&gt;盛り上がりというのは、正のスパイラルで、そこからはずれてしまうと、負のスパイラルに落ちいってしまう印象があります。
良い方向へ進めばどんどん良い方向に進むと思います。
悪い方向へ進んだら、ゼロからやりなおせばいいです。&lt;/p&gt;

&lt;p&gt;とりあえず、まずは周りから。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>cucumber で PhantomJS を使う</title>
          <link>https://blog.eiel.info/blog/2013/05/23/cucumber-with-phantomjs/</link>
          <pubDate>Thu, 23 May 2013 01:59:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/05/23/cucumber-with-phantomjs/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://cukes.info/&#34;&gt;Cucumber&lt;/a&gt; で使うブラウザを &lt;a href=&#34;http://phantomjs.org/&#34;&gt;PhantomJS&lt;/a&gt; にしたい。&lt;/p&gt;

&lt;p&gt;Cucumber -&amp;gt; Capybara -&amp;gt; Poltergeist -&amp;gt; PhantomJS という感じに利用します。&lt;/p&gt;

&lt;p&gt;PhantomJS は画面のないブラウザと言うと、伝わりやすいでしょうか。&lt;/p&gt;

&lt;p&gt;統合的なテストを行う場合、Rails プロジェクトでは Cucumber がよく使われています。
Cucumberのシナリオに &lt;code&gt;@javascript&lt;/code&gt; というタグをつけると Selenium を利用して Firefox を制御してテストを行うことができます。
非常に便利なのですが、処理が長かったり、また、X11の起動してない Linux などで動かそうとするとちょっと問題がおきます。
そこで、画面の表示をしないブラウザでテストしたくなります。
また、実際によく使うわれるのはレンダリングエンジンは Webkit です。&lt;/p&gt;

&lt;p&gt;そのためのブラウザとしての有力候補が PhantomJS です。
PhantomJS のレンダリングエンジンは Webkit で、必要であればスクリーンショットがとれます。
Travis CI でも利用できるようです。(未確認)&lt;/p&gt;

&lt;p&gt;利用までの手順としては&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PhantomJS のインストール&lt;/li&gt;
&lt;li&gt;Rails プロジェクトに Poltergeistを追加&lt;/li&gt;
&lt;li&gt;featrue/support/env.rb を設定&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;となります。&lt;/p&gt;

&lt;h3 id=&#34;phantomjs-のインストール:0431d6fc23db040417a221faa946fe58&#34;&gt;PhantomJS のインストール&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://phantomjs.org/download.html&#34;&gt;http://phantomjs.org/download.html&lt;/a&gt; から ダウンロードできます。
Mac であれば Homebrew や Macport でインストール可能なようです。ダウンロードしても bin/phantomjs を 環境変数PATH に入っているところに配置するだけです。&lt;/p&gt;

&lt;h3 id=&#34;rails-プロジェクトに-poltergeist-を追加:0431d6fc23db040417a221faa946fe58&#34;&gt;Rails プロジェクトに Poltergeist を追加&lt;/h3&gt;

&lt;p&gt;Gemfile に&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;group :test do
  gem &#39;poltergeist&#39;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と追記すれば良いです。&lt;/p&gt;

&lt;h3 id=&#34;feature-support-env-rb-を設定:0431d6fc23db040417a221faa946fe58&#34;&gt;feature/support/env.rb を設定&lt;/h3&gt;

&lt;p&gt;設定しないと使えません。
&lt;code&gt;feature/support/env.rb&lt;/code&gt; に以下を追記すればよいでしょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;capybara/poltergeist&#39;
Capybara.javascript_driver = :poltergeist
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;@javascript&lt;/code&gt; つけるのがめんどくさい! って場合は、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;equire &#39;capybara/poltergeist&#39;
Before do
  Capybara.current_driver = :poltergeist
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とする方法もあります。&lt;/p&gt;

&lt;h3 id=&#34;トラブルとか:0431d6fc23db040417a221faa946fe58&#34;&gt;トラブルとか&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;javascript がちょっとエラーがおきただけで、エラーになる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;js_errors&lt;/code&gt; などを設定すると無視できるようです。
今のところは折角なので全部直しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;クリックに失敗することがある。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なにやらふたつの node をクリックしてしまって、エラーのようなものが起きてる箇所がでてます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;もし /^&amp;quot;(.*?)&amp;quot;をクリック$/ do |name|
  click_on name
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のような、step を&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;もし /^&amp;quot;(.*?)&amp;quot;をクリック$/ do |name|
  find(:link_or_button, name).trigger(&#39;click&#39;)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;にすると動く場面もありました。&lt;/p&gt;

&lt;h3 id=&#34;もうちょっと詳しく:0431d6fc23db040417a221faa946fe58&#34;&gt;もうちょっと詳しく&lt;/h3&gt;

&lt;p&gt;失敗する利用がわからなくて、pry などで停止させた時に Poltergeist を直接やりとりしたい場合は&lt;code&gt;page.driver&lt;/code&gt; でオブジェクトにアクセスできます。
PhantomJS と直接やりとりしたい場合は &lt;code&gt;page.driver.server&lt;/code&gt; でよさそうです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jonleighton/poltergeist/blob/master/lib/capybara/poltergeist/driver.rb&#34;&gt;Capybara::Poltergeist::Driver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jonleighton/poltergeist/blob/master/lib/capybara/poltergeist/server.rb&#34;&gt;Capybara::Poltergeist::Server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;一応登場人物の整理:0431d6fc23db040417a221faa946fe58&#34;&gt;一応登場人物の整理&lt;/h3&gt;

&lt;p&gt;Capybara はウェブブラウザの違いを吸収してブラウザの操作を記述するDSLです。バックエンドに何を使うとしても同じように書けます。&lt;/p&gt;

&lt;p&gt;Poltergeist は CapybaraのDSLによる命令を、PhantomJS の命令に変換し、実行結果をもどす役目をします。違いを吸する部分です。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:0431d6fc23db040417a221faa946fe58&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;まだテストがすべて通ってない。JavaScript を使用していない シナリオからの移行はそれなりに大変です。
でも、やるなら速いほうがいいと思います。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>AutoLayout TIPS - 真ん中に固定幅のスペース</title>
          <link>https://blog.eiel.info/blog/2013/05/19/auto-layout-tips-1/</link>
          <pubDate>Sun, 19 May 2013 12:04:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/05/19/auto-layout-tips-1/</guid>
          <description>

&lt;p&gt;AutoLayout になかなか慣れません。
そうは言っても使わなければ、身につかない。
&lt;del&gt;というか久しぶにりiOSのコード書いてるだけな気がする&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;今回挑戦したのはふたつのViewの間に固定幅をスペースをつくりたい。
具体的には以下の感じ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/autolayout-fixed-center.png&#34; alt=&#34;autolayout&#34; /&gt;&lt;/p&gt;

&lt;p&gt;書いた VisualFormatLanguage はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|-[_leftView]-40-[_rightView]-|
[_leftView(==_rightView)]

V:|-[_leftView]-|
V:|-[_rightView]-|
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のように書いてもよい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|-[_leftView(==_rightView)]-40-[_rightView]-|

V:|-[_leftView]-|
V:|-[_rightView]-|
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;やってみると簡単。&lt;/p&gt;

&lt;p&gt;プログラムで気軽にレイアウトできる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/AutoLayoutTip1&#34;&gt;具体的なソースコードは Github に アップしています。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/AutoLayoutTip1/blob/master/AutolayoutTip1/ALViewController.m#L44-L66&#34;&gt;主な処理はこの辺にあります。&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;簡単に解説:6b592a74ab34617953b7b70fed14874c&#34;&gt;簡単に解説&lt;/h3&gt;

&lt;p&gt;頭に &lt;code&gt;V:&lt;/code&gt; がついているのは 縦方向に対する設定です。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;|-&lt;/code&gt; の部分は OS 標準の幅になります。ぴったりつけたいなら、&lt;code&gt;|-0-&lt;/code&gt; とします。&lt;/p&gt;

&lt;p&gt;縦方向の左側 だけやってみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;V:|-0-[_leftView]-0-|
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;まとめ:6b592a74ab34617953b7b70fed14874c&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;なれるまで発想のセンスがいる気がします。&lt;/p&gt;

&lt;p&gt;論理的な手順で、作りたいレイアウトをするのはまだまだまだ説明できそうにないです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Github の楽しみ方</title>
          <link>https://blog.eiel.info/blog/2013/05/13/how-to-enjoy-github/</link>
          <pubDate>Mon, 13 May 2013 01:06:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/05/13/how-to-enjoy-github/</guid>
          <description>

&lt;p&gt;みなさん &lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt; を楽しんでいますか？&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/02/06/how-to-use-github/&#34;&gt;まだ利用してない場合は、利用しましょう。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;「利用しはじめたけど、もう一歩進みたい…」という人のために、私なりの楽しみ方を紹介しておきたいと思います。&lt;/p&gt;

&lt;p&gt;今回は以下の遊び方について書きます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;友人のリポジトリにちょっかいを出す&lt;/li&gt;
&lt;li&gt;有名なリポジトリに名前を残す&lt;/li&gt;
&lt;li&gt;毎日活動して Longest Streak の記録を更新する&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;友人のリポジトリにちょっかいを出す:66901502d550b98af57c4e8c22ee3bdf&#34;&gt;友人のリポジトリにちょっかいを出す&lt;/h3&gt;

&lt;p&gt;Github は 「SNS」 です。
SNS なのでは人とコミュニケーションをとって遊びましょう。&lt;/p&gt;

&lt;p&gt;なので、コミュニケーションをしましょう。
Github ではユーザ同士がコミュニケーションを取る主な方法は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;コミットへのコメント&lt;/li&gt;
&lt;li&gt;Issues&lt;/li&gt;
&lt;li&gt;Pull Request&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;があります。&lt;/p&gt;

&lt;p&gt;こういったものはまずは友人に対して行うのが気軽で、オススメです。&lt;/p&gt;

&lt;p&gt;しかし、リポジトリを作成したことや、コミットされたことに気づかなければ、コミュニケーションを取る機会がありません。&lt;/p&gt;

&lt;p&gt;友人がリポジトリを作成したことに気がつくためには、友人をフォローしておくことです。
&lt;a href=&#34;(http://blog.eiel.info/blog/2013/02/06/how-to-use-github/&#34;&gt;以前紹介している&lt;/a&gt;ので、ここを読んでいる方はフォローしていると思います。&lt;/p&gt;

&lt;p&gt;これで News Feed を見る癖がついていれば、友人がリポジトリを作成したことに気がつくようになると思います。
しかし、コミットされ、プッシュした情報は流れてきません。プッシュされたことを知りたいなら、&lt;code&gt;watch&lt;/code&gt; をしましょう。&lt;/p&gt;

&lt;h4 id=&#34;watch-する:66901502d550b98af57c4e8c22ee3bdf&#34;&gt;Watch する&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;watch&lt;/code&gt; をするには リポジトリのページへ移動し、以下の画像の示す部分を Watching にします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/github-watch.png&#34; alt=&#34;watch&#34; /&gt;
&lt;img src=&#34;https://blog.eiel.info/images/github-watch-zoom.png&#34; alt=&#34;watch&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;watch&lt;/code&gt; するとそのリポジトリへの push や Issuesの作成、 Pull Request の作成などの情報が流れるようになります。
ここまで来れば日々チェックして、相手の隙を伺いアタックをしていきます。&lt;/p&gt;

&lt;h4 id=&#34;コミットへのコメント:66901502d550b98af57c4e8c22ee3bdf&#34;&gt;コミットへのコメント&lt;/h4&gt;

&lt;p&gt;Github ではコミットに対してコメントをすることができます。
また、コミットに関連しているファイルの特定の行にもコメントを付けることができます。&lt;/p&gt;

&lt;p&gt;まずは、Github で コミットを見てみましょう。&lt;/p&gt;

&lt;p&gt;参考用に利用するリポジトリは &lt;a href=&#34;https://github.com/eiel/hiroshima_hall&#34;&gt;eiel/hiroshima_hall&lt;/a&gt; にしました。&lt;/p&gt;

&lt;p&gt;コミットを見るにはコミットを見つける必要があります。
一般的な方法としては 「コミットの一覧」 &amp;gt; 「コミット」と進めばコミットのページへいけます。&lt;/p&gt;

&lt;p&gt;コミットの一覧を見るには以下の画像を参考にしてください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/commit-list.png&#34; alt=&#34;commit list&#34; /&gt;&lt;/p&gt;

&lt;p&gt;そこからコミットを見るには、見たいコミットの`コミットIDをクリックします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/from-commit-list.png&#34; alt=&#34;from commit list&#34; /&gt;&lt;/p&gt;

&lt;p&gt;コミットに対しコメントしたい場合は画面下部にテキストエリアがあるので、そこに書き込みします。&lt;/p&gt;

&lt;p&gt;また、ファイルの特定行数に対しコメントすることもできます。
コメントしたいところにカーソルを合わせると、左側に「+」のようなものがでますので、そこをクリックすると、フォームが表われます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/github-comment.png&#34; alt=&#34;comment&#34; /&gt;&lt;/p&gt;

&lt;p&gt;さあ、コメントの仕方がわかったので、どんどんコミュニケーションをしましょう。マサカリは怖いです。&lt;/p&gt;

&lt;h4 id=&#34;issues:66901502d550b98af57c4e8c22ee3bdf&#34;&gt;Issues&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Issues&lt;/code&gt; は問題を発見した場合に、書き込むところですが、おおよそ掲示板のように使えます。&lt;/p&gt;

&lt;p&gt;相手に伝えたいことがあるなら、書いてみましょう。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Issue&lt;/code&gt; を作るには、&lt;code&gt;リポジトリのトップ&lt;/code&gt; &amp;gt; &lt;code&gt;Issues&lt;/code&gt; &amp;gt; &lt;code&gt;New Issue&lt;/code&gt; から行えます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/github-issues.png&#34; alt=&#34;github issues&#34; /&gt;
&lt;img src=&#34;https://blog.eiel.info/images/github-issue2.png&#34; alt=&#34;github issues&#34; /&gt;
&lt;img src=&#34;https://blog.eiel.info/images/github-issue3.png&#34; alt=&#34;github issues&#34; /&gt;&lt;/p&gt;

&lt;p&gt;好きなようにメッセージを書いて遊びましょう。&lt;/p&gt;

&lt;p&gt;各種コメントが書ける部分で #Issues 番号とすると関連付けもできます。
&lt;code&gt;:&lt;/code&gt;(コロン) を書くと絵文字なども出せます。&lt;/p&gt;

&lt;h4 id=&#34;pull-request:66901502d550b98af57c4e8c22ee3bdf&#34;&gt;Pull Request&lt;/h4&gt;

&lt;p&gt;Github といえば &lt;code&gt;Pull Request&lt;/code&gt; です。
&lt;code&gt;Pull Request&lt;/code&gt; は、「ちょっとこういう変更したら面白いじゃね？」とか、製作者に投げかける機能です。
ナイスな変更であればリポジトリの管理者の方が変更を取り込んでくれると思います。
そうでなくても、リポジトリに関した情報交換ができるでしょう。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Pull Request&lt;/code&gt; のやりかたは長くなりそうなので割愛しますが、簡単に書いておきます。
フォークをして自分のリポジトリを作り、ファイルの変更をすると pull request するボタンがでてきます。
これを押してメッセージを書くだけです。
ファイルを変更は Github 上でも行えまし、ローカルPCで編集して push する方法もあります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/github-pull.png&#34; alt=&#34;github pull&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Pull Request&lt;/code&gt; を繰り返してリポジトリへ貢献していくと、ちゃんと自分が貢献しことが記録されています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/github-graph.png&#34; alt=&#34;github graph&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/hiroshima_hall/contributors?from=2013-05-05&amp;amp;to=2013-05-12&amp;amp;type=c&#34;&gt;https://github.com/eiel/hiroshima_hall/contributors?from=2013-05-05&amp;amp;to=2013-05-12&amp;amp;type=c&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;大勢の人が参加しているリポジトリではないので、高い貢献率を叩きだせるかもしれません。
まるで、自分のリポジトリかのようにしてしまいしょう。&lt;/p&gt;

&lt;h3 id=&#34;有名なリポジトリに名前を残す:66901502d550b98af57c4e8c22ee3bdf&#34;&gt;有名なリポジトリに名前を残す&lt;/h3&gt;

&lt;p&gt;友達のリポジトリを賑やかして遊んだら、本格的にリポジトリに絡んでいってみましょう。
自分が利用してるアプリケーションを &lt;code&gt;Watch&lt;/code&gt; したり バグを直して &lt;code&gt;Pull Request&lt;/code&gt;してみましょう。&lt;/p&gt;

&lt;p&gt;僕は結構ショボイ Pull Request をしています。
例えば、&lt;a href=&#34;https://github.com/rails/rails&#34;&gt;Ruby on Rails&lt;/a&gt; で、一行削除しただけ &lt;code&gt;Pull Request&lt;/code&gt; を出してみたりしましたが、取り込まれました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rails/rails/pull/10339&#34;&gt;rails #10339&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/rails-pull1.png&#34; alt=&#34;rails pull1&#34; /&gt;
&lt;img src=&#34;https://blog.eiel.info/images/rails-pull2.png&#34; alt=&#34;rails pull2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;これぐらいなら、できそうですよね!(えー)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;こうすることで、リポジトリに自分の名前が残りますし、
編集したファイルには小さいですが、自分のアイコンが出現します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/rails-pull3.png&#34; alt=&#34;rails pull3&#34; /&gt;&lt;/p&gt;

&lt;p&gt;のらりくらりとソースコード読んで気になったところを Pull Request して自慢して遊びましょう。&lt;/p&gt;

&lt;h3 id=&#34;毎日活動して-longest-streak-を更新する:66901502d550b98af57c4e8c22ee3bdf&#34;&gt;毎日活動して Longest Streak を更新する&lt;/h3&gt;

&lt;p&gt;いつだったか忘れましたが、昨年末か今年の始めに Your Contributions という 自分の Github での活動が視覚化されるようになっています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/github-contribution.png&#34; alt=&#34;Your Contribution&#34; /&gt;&lt;/p&gt;

&lt;p&gt;緑のマスが見える部分は一マスが一日に対応していて一年分表示されています。
濃い緑のところほど、貢献した日になります。
灰色の場合はなにもしてないことになります。&lt;/p&gt;

&lt;p&gt;濃い緑がたくさん見えれば見えるほど「この人は化け物か!!」 なんて思ってしまうので、私もほどほどにがんばりたいところです。&lt;/p&gt;

&lt;p&gt;この緑の部分が最高何日つづいたか、中央の Longest Streak に表示されます。
現在最高25日連続して貢献していることがわかります。&lt;/p&gt;

&lt;p&gt;また、右隣の Current Streak は現在継続中の記録になります。
最高記録と並んでいる状態で、記録更新中の状態です。&lt;/p&gt;

&lt;p&gt;これをがんばるために毎日更新できるようなものを考えてみたりしても良いかもしれません。
ちなみに、私はこれをするために &lt;a href=&#34;https://github.com/eiel/railsdoc.eiel.info/commits/master&#34;&gt;Ruby on Rails のソースコードを眺めてメモをとる作業をしています。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;また、この緑の部分を利用して&lt;a href=&#34;http://song-of-github.herokuapp.com/?username=eiel&#34;&gt;音楽が聞けるサービス&lt;/a&gt;とかあったりして、Github の API を叩いて面白いサービスも作りたいですね。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:66901502d550b98af57c4e8c22ee3bdf&#34;&gt;まとめ？&lt;/h3&gt;

&lt;p&gt;Github は日々進化していて、いろいろ面白い機能やら、便利になったりで目が離せません。&lt;/p&gt;

&lt;p&gt;ITの世界に生きるのであれば、自己ブランディングするには現状では最強のサービスではないでしょうか。
自分なりの楽しみ方を見つけましょー。&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=eiel-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=477416366X&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;関連記事:66901502d550b98af57c4e8c22ee3bdf&#34;&gt;関連記事&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/02/06/how-to-use-github/&#34;&gt;Git がわからなくても Github を利用しよう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/11/21/github-notifications-is-not-spam/&#34;&gt;GitHub からの通知が迷惑メールになった - 見ないリポジトリは unwatch しよう&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>rails4 で Asset の生成したいファイルの追加がうまいこといかなかった。</title>
          <link>https://blog.eiel.info/blog/2013/05/04/rails4-assets/</link>
          <pubDate>Sat, 04 May 2013 00:44:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/05/04/rails4-assets/</guid>
          <description>&lt;p&gt;Rails4 を試していた。
1ページだけ全く違うデザインがあって js とか css を application.js とか application.css とは別に生成したかった。&lt;/p&gt;

&lt;p&gt;ということで `config/environments/production.rb&amp;rsquo; に&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.assets.precompile += %w( hoge.js )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と書きました。&lt;/p&gt;

&lt;p&gt;なぜか生成されない。Rails3 では間違いなく生成される。&lt;/p&gt;

&lt;p&gt;調べてみたところ &lt;code&gt;config/application.rb&lt;/code&gt; に書けば動くことがわかった。
それだけ。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>rails4 rc1 がリリースされたことだし beta1 からアップグレードしてみた</title>
          <link>https://blog.eiel.info/blog/2013/05/03/rails4-rc1-from-beta1/</link>
          <pubDate>Fri, 03 May 2013 01:36:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/05/03/rails4-rc1-from-beta1/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;http://weblog.rubyonrails.org/2013/5/1/Rails-4-0-release-candidate-1/&#34;&gt;Rails 4.0 rc1 がリリース&lt;/a&gt;されてますね。軽いノリでアップグレードしてみたら余裕で起動しませんでした。&lt;/p&gt;

&lt;p&gt;アップグレードするには &lt;code&gt;Gemfile&lt;/code&gt; を以下の編集をしました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;-gem &#39;rails&#39;, &#39;4.0.0.beta1&#39;
+gem &#39;rails&#39;, &#39;4.0.0.rc1&#39;

 gem &#39;pg&#39;

 # Gems used only for assets and not required
 # in production environments by default.
 group :assets do
-  gem &#39;sass-rails&#39;,   &#39;~&amp;gt; 4.0.0.beta1&#39;
-  gem &#39;coffee-rails&#39;, &#39;~&amp;gt; 4.0.0.beta1&#39;
+  gem &#39;sass-rails&#39;,   &#39;~&amp;gt; 4.0.0.rc1&#39;
+  gem &#39;coffee-rails&#39;, &#39;~&amp;gt; 4.0.0.rc1&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとは &lt;code&gt;bundle update&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;そんでもって起動すると下記のエラー。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gems/railties-4.0.0.rc1/lib/rails/application/configuration.rb:144:in `const_get&#39;: uninitialized consta
nt ActionDispatch::Session::EncryptedCookieStore (NameError)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/rails/rails/blob/4-0-stable/actionpack/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt;には&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Automatically configure cookie-based sessions to be encrypted if secret_key_base is set, falling back to signed if only secret_token is set. Automatically upgrade existing signed cookie-based sessions from Rails 3.x to be encrypted if both secret_key_base and secret_token are set, or signed with the new key generator if only secret_token is set. This leaves only the config.session_store :cookie_store option and removes the two new options introduced in 4.0.0.beta1: encrypted_cookie_store and upgrade_signature_to_encryption_cookie_store.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;とかいてあって、僕には細かいニュアンスは分からないのですが、&lt;code&gt;config/initializers/session_store.rb&lt;/code&gt; を下記のように修正しました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;-RealGame::Application.config.session_store :encrypted_cookie_store, key: &#39;_RealGame_session&#39;
+RealGame::Application.config.session_store :cookie_store, key: &#39;_RealGame_session&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そしたら無事に起動するようになりました。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>i18n で ActiveModelを使ったモデルの日本語化</title>
          <link>https://blog.eiel.info/blog/2013/04/29/i18n-active-model/</link>
          <pubDate>Mon, 29 Apr 2013 13:53:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/04/29/i18n-active-model/</guid>
          <description>&lt;p&gt;&lt;code&gt;ActiveModel&lt;/code&gt; を利用したモデルで i18n を利用しようとして以下のようなyamlを書いたら日本語にならなかった。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;activerecord:
  models:
    page: &amp;quot;ページ&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ソースコードを読んでみた結果、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;activemodel:
  models:
    page: &amp;quot;ページ&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と、書けばいいことがわかりました。&lt;/p&gt;

&lt;p&gt;「それはそうですね。」という結果でなんとも言い難いです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>広島マックユーザグループで 黒い画面入門 &#43; パッケージ管理画面の話をした</title>
          <link>https://blog.eiel.info/blog/2013/04/28/abc-terminal/</link>
          <pubDate>Sun, 28 Apr 2013 23:49:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/04/28/abc-terminal/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;http://hiroshima.mac-ug.net/&#34;&gt;広島マックユーザーグループ&lt;/a&gt; の&lt;a href=&#34;http://atnd.org/events/36583&#34;&gt;勉強会&lt;/a&gt; で「黒い画面入門 + パッケージ管理紹介 + Macの使い方とか」と称して稚拙なセッションを担当しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;黒い画面入門&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;広島マックユーザグループは開発者ではない方が多く参加されるので、パッケージ管理システムの話をする前に UNIX 的な話をしてみました。
正直な話、何を話すか自分の答えが出ず、迷走した感があります。&lt;/p&gt;

&lt;p&gt;結局ですが、「リダイレクトとパイプの話を20分でする。」という裏目的のスライドになりました。
ちなみに20分どころか 30分使いました。それでも速かった。&lt;/p&gt;

&lt;p&gt;そもそも大学の授業で2コマぐらい使いそうな内容な気がするので、「がんばって必要最低限の知識を詰め込みをしました。」という仕上りになっているんじゃないだろうかと思います。&lt;/p&gt;

&lt;p&gt;Macの使い方の部分はやりたかったことはあるのですが、時間も準備もなかったのでサラッと流した感じになりました。また別の機会に。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;http://www.slideshare.net/slideshow/embed_code/20116013&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&#34; allowfullscreen webkitallowfullscreen mozallowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;http://www.slideshare.net/TomohikoHimura/mac-20116013&#34; title=&#34;黒い画面入門 + パッケージ管理紹介 + Macの使い方とか&#34; target=&#34;_blank&#34;&gt;黒い画面入門 + パッケージ管理紹介 + Macの使い方とか&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/TomohikoHimura&#34; target=&#34;_blank&#34;&gt;Tomohiko Himura&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;パッケージ管理ツールの紹介&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;どちらかというと今日のメインです。
がんばって普段使わないものと基本的な比較をしてみました。
どれもマサカリが飛んできそうなところで非常に怖いところです。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;http://www.slideshare.net/slideshow/embed_code/20115472&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&#34; allowfullscreen webkitallowfullscreen mozallowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;http://www.slideshare.net/TomohikoHimura/ss-20115472&#34; title=&#34;Mac OS X のパッケージ管理紹介/比較&#34; target=&#34;_blank&#34;&gt;Mac OS X のパッケージ管理紹介/比較&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/TomohikoHimura&#34; target=&#34;_blank&#34;&gt;Tomohiko Himura&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;いろいろ使ってみての感想ですが、Macports が良い感じでした。
Finkは日本語が化けたという話をし忘れました。
ウェブサイトも日本語化されていますが、更新がだいぶ遅れているようなので注意してください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/hiroshima-mac-ug-terminal&#34;&gt;ちなみに資料とかメモとか Github に丸投げしております。&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>「数学文章作法 基礎編」 が心に残り過ぎて、しばらく持ち歩きたい。</title>
          <link>https://blog.eiel.info/blog/2013/04/16/writing-math-text-basic/</link>
          <pubDate>Tue, 16 Apr 2013 02:22:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/04/16/writing-math-text-basic/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;http://www.amazon.co.jp/gp/product/448009525X?ie=UTF8&amp;amp;camp=1207&amp;amp;creative=8411&amp;amp;creativeASIN=448009525X&amp;amp;linkCode=shr&amp;amp;tag=eiel-22&amp;amp;qid=1366046861&amp;amp;sr=8-1&amp;amp;keywords=%E6%95%B0%E5%AD%A6%E6%96%87%E7%AB%A0%E4%BD%9C%E6%B3%95&#34;&gt;数学文章作法 基礎編&lt;/a&gt; 読みました。
どこを読んでいても、すごく読者を大切にしてることが伝わってきます。&lt;/p&gt;

&lt;p&gt;文章を書いてるすべての人に、&lt;strong&gt;「読者のことを考えて欲しい」&lt;/strong&gt;と伝えたい。&lt;/p&gt;

&lt;p&gt;文章だけでなくて、何かを伝えたいことがある人に、&lt;strong&gt;「相手のことを考えて欲しい」&lt;/strong&gt;と伝えたい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://booklog.jp/users/eiel/archives/1/448009525X&#34;&gt;Booklog にも拙い感想を書きましたが、&lt;/a&gt;とても素晴しい一冊でした。
しばらく持ち歩いて、「読者のことを考える」ことを癖にしたいです。&lt;/p&gt;

&lt;p&gt;この本のタイトルと著者を見た瞬間に迷わず、予約しました。
数式の混ざるような文章は書くことは当面ないとわかっていて理解していました。
それだけ、著者の結城浩さんの伝わる文章、わかりやすい文章を身をもって何度も体感していたからです。そのノウハウが詰まっていると期待して迷わず購入しました。
その期待は全く裏切られることはありませんでした。&lt;/p&gt;

&lt;p&gt;私たちは様々な場所で文章を書きます。
特にメールを書く人は多いと思います。
メールは伝えるために書く文章です。
誰が書くメールであっても、相手に何か伝えたいことがあります。
メールを読む相手のことを考えて書きたい。そう思いました。&lt;/p&gt;

&lt;p&gt;私はブログを書いていますが、自分のために書いてるものが多いです。
細部を気にしたり、読者のことを考える必要はあまりありません。
それでも、人の目に触れる場所に書いています。
どうせならば少しでも伝わるように書きたい。そう思いました。&lt;/p&gt;

&lt;p&gt;Facebook に友達に伝えたいことがあって書くことがあります。
伝わるように書けば、「いいね!」もたくさん付くと思います。
伝えることがもっと楽しくなると思いました。&lt;/p&gt;

&lt;p&gt;気がつくと文章の書き方の書籍から、いつのまにか「相手を大切にする」こと考えていました。&lt;/p&gt;

&lt;p&gt;人に伝えることをはじめたいです。&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=eiel-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=448009525X&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Windows8 を触ってみての感想</title>
          <link>https://blog.eiel.info/blog/2013/04/16/windows8-first/</link>
          <pubDate>Tue, 16 Apr 2013 02:04:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/04/16/windows8-first/</guid>
          <description>&lt;p&gt;お仕事で Windows8 を触る機会がありました。ちょろちょろいじっております。&lt;/p&gt;

&lt;p&gt;大概作業は Emacs と ターミナルで行う僕の感想を書きます。。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;クラシックデスクトップで生活する人からみると、かっこ悪くなったんじゃないだろうか。&lt;/li&gt;
&lt;li&gt;クラシックデスクトップとModern UIとの相性がいまいち。&lt;/li&gt;
&lt;li&gt;Modern UI の中で大半の生活するなら素敵な世界だと思う。かゆくなったらデスクトップへ。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;フラットデザインということで、影とかつやつや感がなくなってしまいました。
なんだか寂しい。退化した感じがします。
クラシックデスクトップをModern UIと同じ世界感においてしまった故の状況ですが、別世界として扱う手法もあったんじゃないかという感想を抱きました。&lt;/p&gt;

&lt;p&gt;Google chrome をインストールしてみたら Modern UI なアプリでした。クラシックデスクトップで使用するように切り替えることもできます。
別に悪くない。
ただ、Modern UI の状態で使用してダウンロードして実行すると、通知がなにもこない。クラシックデスクトップにもどって始めてきづく。
ただ、最大化して使うことが多くなった最近のアプリケーションが多くて、いつのまにか埋もれしまうことが多発。&lt;/p&gt;

&lt;p&gt;しかし、タッチデバイスの操作感の統一性はよくて、慣れと目的さえ見えていれば、直感的です。パーソナルコンピュータとしてはより人にやさしくなった。
開発マシンとしては…いままでどおりいけばいいのか。&lt;/p&gt;

&lt;p&gt;デスクトップはリッチに見せて欲しいのは、Macユーザのエゴなのでしょうか。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>rbenv install したときに 一緒に bundler をインストールする</title>
          <link>https://blog.eiel.info/blog/2013/04/12/rbenv-install-after-install-bundler/</link>
          <pubDate>Fri, 12 Apr 2013 02:33:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/04/12/rbenv-install-after-install-bundler/</guid>
          <description>

&lt;p&gt;&lt;code&gt;rbenv install&lt;/code&gt; したときに bundler ぐらい自動で入って欲しいですよね。
たぶん。今日、そういうツイートを見ました。&lt;/p&gt;

&lt;p&gt;rbenv には hook という機能が用意されているのでこれを利用するとできます。
hook したときに呼ばれるスクリプトは以下の場所に配置できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;${RBENV_ROOT}/rbenv.d&lt;/li&gt;
&lt;li&gt;/usr/local/etc/rbenv.d&lt;/li&gt;
&lt;li&gt;/etc/rbenv.d&lt;/li&gt;
&lt;li&gt;/usr/lib/rbenv/hooks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;環境変数 &lt;code&gt;RBENV_HOOK_PATH&lt;/code&gt; を設定すると好きな場所に配置できます。
私はホームディレクトリにおきたいので指定しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export RBENV_HOOK_PATH=&amp;quot;$HOME/.rbenv.d&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;必要に応じて &lt;code&gt;.zshenv&lt;/code&gt; や &lt;code&gt;.bash_profile&lt;/code&gt; などに書き込みましょう。&lt;/p&gt;

&lt;p&gt;以下、 .rbenv.d に設定したと仮定して話をします。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rbenv install&lt;/code&gt; 時 にhook するスクリプトは &lt;code&gt;.rbenv.d/install&lt;/code&gt; におきます。
拡張子を &lt;code&gt;bash&lt;/code&gt; にする必要があります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.rbenv.d/install/install_bundler.bash&lt;/code&gt; というファイルを作成して、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#/bin/sh

after_install &#39;RBENV_VERSION=&amp;quot;$VERSION_NAME&amp;quot; gem install bundler&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とかいておけばOKです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rbenv hooks install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で rbenv install で hook される script を確認することができます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/rbenv-hooks&#34;&gt;rbenv-hooks&lt;/a&gt;というリポジトリをつくったので、作るのがめんどくさい人は環境変数を設定して、clone してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone git://github.com/eiel/rbenv-hooks.git ~/.rbenv.d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;READMEかかなきゃ…。&lt;/p&gt;

&lt;h3 id=&#34;もうちょっと詳しく:fbebfe0bd3c58bfa4cbdd9cdfbe8bd8d&#34;&gt;もうちょっと詳しく&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;after_install&lt;/code&gt; というのは ruby-buildの &lt;code&gt;rbenv-install&lt;/code&gt; で定義されてる関数です。
同様の関数として &lt;code&gt;before_install&lt;/code&gt; があります。
このへんは ruby-buildの独自機能のようです。&lt;/p&gt;

&lt;p&gt;rbenv hooks 自体は rbenv の機能です。
rbenv の各コマンド実行後に実行したいスクリプトがあれば、同じ手法が使えます。&lt;/p&gt;

&lt;p&gt;ただ、対応してないコマンドもあるようなので、使いたくなったら、適当に追記して pull request すればよいと思います。(たぶん)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Load plugin hooks.
for script in $(rbenv-hooks コマンド名); do
  source &amp;quot;$script&amp;quot;
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすると、hook を実行することができます。&lt;/p&gt;

&lt;p&gt;hook の一覧を取得してひとつづつ source するだけみたいです。&lt;/p&gt;

&lt;h3 id=&#34;おまけ-hook-を書くときの-debug-の方法:fbebfe0bd3c58bfa4cbdd9cdfbe8bd8d&#34;&gt;おまけ hook を書くときの debug の方法&lt;/h3&gt;

&lt;p&gt;hook をかくときにどのような変数が定義されてるかは set というコマンドを使えばわかります。
ファイルをつくったら set を利用して使いたい値がないか探してみましょう。&lt;/p&gt;

&lt;h3 id=&#34;関連:fbebfe0bd3c58bfa4cbdd9cdfbe8bd8d&#34;&gt;関連&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/04/12/rbenv-version-switch/&#34;&gt;Rbenv で Ruby の Version を一時的に切り替え&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>rbenv で Ruby の version を一時的に切り替え</title>
          <link>https://blog.eiel.info/blog/2013/04/12/rbenv-version-switch/</link>
          <pubDate>Fri, 12 Apr 2013 01:25:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/04/12/rbenv-version-switch/</guid>
          <description>

&lt;p&gt;rbenv で ruby の version を一時的に切り替えたい場合があります。
rbenv は名前のとおり環境変数で挙動を変更することができます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;RBENV_VERSION&lt;/code&gt; を設定しておけばそのRubyを実行をすることができます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ruby -v
ruby 2.0.0p0 (2013-02-24 revision 39474) [x86_64-darwin12.2.1]
$ RBENV_VERSION=1.9.3-p0 ruby -v
ruby 1.9.3p0 (2011-10-30 revision 33570) [x86_64-darwin12.3.0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ruby だけでなく gem や gem で installしたコマンドにも有効です。&lt;/p&gt;

&lt;h3 id=&#34;おまけ:ab41d67735f1ce1a316745e350a240c1&#34;&gt;おまけ&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;rbenv local&lt;/code&gt; でそのプロジェクトで使用するRubyを設定できますが、&lt;code&gt;.rbenv-version&lt;/code&gt;というファイルを生成します。
まれに、生成したくない場合があります。&lt;/p&gt;

&lt;p&gt;例えばホームディレクトリにいるときです。
広い範囲で影響がでます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rbenv global&lt;/code&gt; を使えばいいという説もありますが、バックグラウンドで ruby の script が動いていると&lt;code&gt;必要な gem がない&lt;/code&gt;ということが起きることがあります。&lt;/p&gt;

&lt;p&gt;そんなときは &lt;code&gt;rbenv shell&lt;/code&gt;が使えます。
一時的に ruby の version を固定できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ruby -v
ruby 2.0.0p0 (2013-02-24 revision 39474) [x86_64-darwin12.2.1]
$ rbenv shell 1.9.3-p0
$ ruby -v
ruby 1.9.3p0 (2011-10-30 revision 33570) [x86_64-darwin12.3.0]
$ rbenv shell --unset
$ ruby -v
ruby 2.0.0p0 (2013-02-24 revision 39474) [x86_64-darwin12.2.1]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;基本的には RBENV_VERSION を再設定しているだけのようです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>cucumber で シナリオを Ruby のバージョンによって実行しなかったり</title>
          <link>https://blog.eiel.info/blog/2013/04/11/cucumber-switch-ruby-version/</link>
          <pubDate>Thu, 11 Apr 2013 01:48:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/04/11/cucumber-switch-ruby-version/</guid>
          <description>

&lt;p&gt;どんなにがんばっても ruby 1.8.7 では動かすことができない &lt;code&gt;cucumber&lt;/code&gt; のシナリオがあって、これを対応した時のメモ。&lt;/p&gt;

&lt;p&gt;結論から書いておきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@fails_on_1_8_7&lt;/code&gt; というタグを使って、失敗するシナリオをタグづけ&lt;/li&gt;
&lt;li&gt;cucumber の profile に &lt;code&gt;ruby_1_8_7&lt;/code&gt; をつくり &lt;code&gt;--tags ~@failds_on_1_8_7&lt;/code&gt; を設定&lt;/li&gt;
&lt;li&gt;rake 実行時に RUBY_VERSION をみて profile を ruby_1_8_7 になるように設定&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;です。&lt;/p&gt;

&lt;p&gt;テストは Travis CI で実行します。Travis では rake が実行されるので、rake 実行時にprofile を切り替えるようにしました。
もともとそのプロジェクトには ruby_1_9 というのと ruby_2_0 というのがあったのでそれらに合わせました。&lt;/p&gt;

&lt;p&gt;具体的には &lt;a href=&#34;https://github.com/eiel/cucumber/commit/edfc124dd28abd92d41833bfdfd9018b754b4667&#34;&gt;cucumber/cucumber に出したpull request&lt;/a&gt; です。&lt;/p&gt;

&lt;h2 id=&#34;ちょっと掘り下げておく:246a93b306e619fba49a96631e3eebde&#34;&gt;ちょっと掘り下げておく。&lt;/h2&gt;

&lt;p&gt;cucumber には profile という機能があって、あらかじめ設定しておいたオプションを切り替える機能があります。
&lt;code&gt;cucumber --profile ruby_1_8_7&lt;/code&gt; みたいに使います。&lt;/p&gt;

&lt;p&gt;これを rake task に割り当てるには &lt;code&gt;Cucumber::Rake::Task&lt;/code&gt; のインスタンスのprofile に渡してやればいいです。
&lt;code&gt;new&lt;/code&gt; したときのブロックの第1引数が &lt;code&gt;Cucumber::Rake::Task&lt;/code&gt; そのものです。&lt;/p&gt;

&lt;p&gt;例:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Cucumber::Rake::Task.new do |t|
  t.profile = &#39;ruby_1_8_7&#39;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;cucumber のプロジェクトではは、この設定は &lt;a href=&#34;https://github.com/cucumber/cucumber/blob/v1.2.5/gem_tasks/cucumber.rake&#34;&gt;gem_tasks/cucumber.rake&lt;/a&gt;にあります。&lt;/p&gt;

&lt;p&gt;ちなみに &lt;code&gt;Cucumber::Rake::Task&lt;/code&gt; は &lt;a href=&#34;https://github.com/cucumber/cucumber/blob/v1.2.5/lib/cucumber/rake/task.rb&#34;&gt;lib/cucumber/rake/task.rb&lt;/a&gt;  に定義されています。&lt;/p&gt;

&lt;p&gt;あとは travis が勝手に実行にしてくれる寸法です。&lt;/p&gt;

&lt;p&gt;Cucumber のテストを Cucumber で書いてて紛らわしい例ですいません。&lt;/p&gt;

&lt;p&gt;ちなみに、このpull request が取り込まれると以下のブログ記事にある修正が不必要になります。steps で日本語が使えます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://319ring.net/blog/archives/2145&#34;&gt;CUCUMBERで日本語でSTEPからSTEPを呼び出す - 自転車で通勤しましょ♪ブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;関連記事:246a93b306e619fba49a96631e3eebde&#34;&gt;関連記事&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/02/12/gherkin/&#34;&gt;Cucumber のフィーチャの文法 - Gherkin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Rails で外部キー制約</title>
          <link>https://blog.eiel.info/blog/2013/04/08/foreign-key-constrait-on-rails/</link>
          <pubDate>Mon, 08 Apr 2013 01:51:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/04/08/foreign-key-constrait-on-rails/</guid>
          <description>&lt;p&gt;外部キー制約は好きですか？&lt;/p&gt;

&lt;p&gt;O/RマッパーしててもなるべくDBの力は借りたいです。
ということで、&lt;a href=&#34;https://www.ruby-toolbox.com/&#34;&gt;Ruby Toolbox&lt;/a&gt;で foreign を検索して、ちらちら見て一番人気の&lt;a href=&#34;https://github.com/matthuhiggins/foreigner&#34;&gt;foreigner&lt;/a&gt;を選びました。基本的にはデータベースに丸投げなので Rails4 でもいまのとこ問題なく使えております。&lt;/p&gt;

&lt;p&gt;インストールは &lt;code&gt;Gemfile&lt;/code&gt; に:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;foreigner&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と追加して &lt;code&gt;bundle install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;あとはマイグレーションで:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;create_table :comments do |t|
  t.references :post, null: false, index: true
  t.foreign_key :posts, dependent: :delete
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としておきました。&lt;/p&gt;

&lt;p&gt;ついでに確認。&lt;/p&gt;

&lt;p&gt;存在しない 外部キーを指定すると保存を失敗する確認。postgresの例:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Comment.create(post_id: 1)
# =&amp;gt; PG::Error: ERROR:  insert or update on table &amp;quot;comments&amp;quot; violates foreign key constraint &amp;quot;comments_post_id_fk&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;キーを指定して、親になるオブジェクトを削除すると消える確認:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Comment.create(post_id: Post.create)
Comment.count
# =&amp;gt; 1
Post.count
# =&amp;gt; 1
Post.first.destroy
Post.count
# =&amp;gt; 0
Comment.count
# =&amp;gt; 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ほむ。良い感じですね。&lt;/p&gt;

&lt;p&gt;しかし、Rails4 からは scheme.rb の hash形式が変わってるけどそこには対応してませんでした。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;add_foreign_key &amp;quot;comments&amp;quot;, &amp;quot;posts&amp;quot;, :name =&amp;gt; &amp;quot;comments_post_id_fk&amp;quot;, :dependent =&amp;gt; :delete
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;パッチがきてなかったら プルリクエストしてみようかな。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>広島Ruby勉強会 #031 で 「Hakyllで遊んだ」のでざくっと紹介した。</title>
          <link>https://blog.eiel.info/blog/2013/04/07/hiroshimarb-31/</link>
          <pubDate>Sun, 07 Apr 2013 01:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/04/07/hiroshimarb-31/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;http://hiroshimarb.github.io/blog/2013/04/06/hiroshimarb-31/&#34;&gt;広島Ruby勉強会 #031&lt;/a&gt; で かるくLT しました。&lt;/p&gt;

&lt;p&gt;内容は &lt;a href=&#34;http://jaspervdj.be/hakyll/&#34;&gt;Hakyll&lt;/a&gt; についてです。&lt;/p&gt;

&lt;p&gt;なのですが、Rubyのリファレンスからメソッドの紹介をしているのですが、今回は ActiveSupport で追加される メソッド。Array 編をしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://railsdoc.eiel.info/&#34;&gt;その資料はこちらに。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この資料をどこにどうやって置こうかな？と思っていたので、ついでにHakyllを試してみました。そこで学んだこととかを紹介しました。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;http://www.slideshare.net/slideshow/embed_code/18303056&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&#34; allowfullscreen webkitallowfullscreen mozallowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;http://www.slideshare.net/TomohikoHimura/hakyll-18303056&#34; title=&#34;Hakyllで遊んでみた。&#34; target=&#34;_blank&#34;&gt;Hakyllで遊んでみた。&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/TomohikoHimura&#34; target=&#34;_blank&#34;&gt;Tomohiko Himura&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;このサイトのソースコードは &lt;a href=&#34;https://github.com/eiel/railsdoc.eiel.info&#34;&gt;Github&lt;/a&gt; に丸投げしていたりします。&lt;/p&gt;

&lt;p&gt;このスライドに書いてないことでは、コンパイルを毎回するのがめんどくさかったので、ghci から 引数付きで main 関数を実行する方法を調べました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;System.Environment&lt;/code&gt; に定義されてる &lt;code&gt;withArgs&lt;/code&gt; を使えばできました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;withArgs :: [String] -&amp;gt; IO a -&amp;gt; IO a&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;利用例:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;withArgs [&amp;quot;build&amp;quot;] main
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第1引数にコマンド引数をリストで渡してしまえば、良いようです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Ruby で モナドを書いてみた。</title>
          <link>https://blog.eiel.info/blog/2013/04/04/monad-in-ruby/</link>
          <pubDate>Thu, 04 Apr 2013 00:41:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/04/04/monad-in-ruby/</guid>
          <description>

&lt;p&gt;ちょっと気分転換したかっただけで、反省している。(2015年4月11加筆修正)&lt;/p&gt;

&lt;p&gt;記事を書く目的があったわけでも、何か確認したかったわけでもないけど、自分的に得るものがあったので、それを書いておきます。&lt;/p&gt;

&lt;p&gt;Rubyでモナドをつくってみました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/eiel/5302011&#34;&gt;ソースコード&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;モナドってモノイドに名前が似ていることからわかるようにモノイド的な特性があるらしいです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ja.wikipedia.org/wiki/%E3%83%A2%E3%83%8E%E3%82%A4%E3%83%89&#34;&gt;Wikipedia:モノイド&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回の話は、モナドだと簡単にモノイドが作れるという話のような気がする。&lt;/p&gt;

&lt;h3 id=&#34;結合律:36e25dd139b5b5a09c43152e31083e30&#34;&gt;結合律&lt;/h3&gt;

&lt;p&gt;モノイドであれば&lt;strong&gt;結合律&lt;/strong&gt;が成立します。&lt;/p&gt;

&lt;p&gt;結合律をプログラミングに当てはめてみると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func1();
func2();
func3();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という命令列があった場合&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func1(); func2();
func3();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func1();
func2(); func3();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;は等価と言えるという話にできます。&lt;/p&gt;

&lt;p&gt;違いがよくわからないので、別名をつけてまとめてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;funcX();   // funcX () { func1(); func2(); }
func3();
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;func1();
funcY();   // funcY () { func2(); func3(); }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;どちらも同じように動きますよね。
セミコロンを演算子とみたててみます&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func1 ; func2 ; func3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最後のセミコロンはみにくいので削除しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(func1 ; func2) ; func3 == func1 ; (func2; func3)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;単位元:36e25dd139b5b5a09c43152e31083e30&#34;&gt;単位元&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;単位元の存在  - 演算してもコンテキストが変化しない値が存在する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;プログラムでいえばセミコロンだけでかこまれていればそんな感じになりそうです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func1;
;         // あってもなくても変わらない
func2;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;かけ算で考える:36e25dd139b5b5a09c43152e31083e30&#34;&gt;かけ算で考える&lt;/h3&gt;

&lt;p&gt;結合律と単位元を整数のかけ算に確認しておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;3 * 4 * 5 == (3 * 4) * 5 == 3 * (4 * 5) == 60 // どっちを先に計算してもOK

3 * 1 == 3    // 単位元になにをかけ算してもそのまま。
1 * 3 == 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;簡単ですね。&lt;/p&gt;

&lt;h3 id=&#34;具体例:36e25dd139b5b5a09c43152e31083e30&#34;&gt;具体例&lt;/h3&gt;

&lt;p&gt;さて、作成した Maybeクラスですが &lt;code&gt;*&lt;/code&gt; を用意しています。遊んでみましょう。
Maybeのインスタンス同士でしか演算はできません。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Maybe.new(3)                # =&amp;gt; Just 3
Maybe.new(2)                # =&amp;gt; Just 2
Maybe.new(3) * Maybe.new(2) # =&amp;gt; Just 2

Maybe.zero    # =&amp;gt; Nothing
Maybe.new(3) * Maybe.zero   # =&amp;gt; Nothing
Maybe.zero  * Maybe.new(2)  # =&amp;gt; Nothing
Maybe.zero  * Maybe.zero  # =&amp;gt; Nothing
Maybe.new(3) * Mabye.zero * Mabye.new(2) # =&amp;gt; Nothing
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2 とか 3 とかは気にせずに &lt;code&gt;Just&lt;/code&gt; と &lt;code&gt;Nothing&lt;/code&gt;だけに注目しましょう。
あえて無視するようにつくっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Just    * Just    = Just&lt;/li&gt;
&lt;li&gt;Just    * Nothing = Nothing&lt;/li&gt;
&lt;li&gt;Nothing * Just    = Nothing&lt;/li&gt;
&lt;li&gt;Nothing * Nothing = Nothing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というルールが成立しています。&lt;/p&gt;

&lt;p&gt;整数で考えたいのであれば Just を 1、 Nothing を 0 と考えても良いかもしれません。
Bool であれば Just は true, Nothing は false で、 * は &lt;code&gt;and&lt;/code&gt; という置き換えができそうですね。&lt;/p&gt;

&lt;p&gt;この&lt;code&gt;*&lt;/code&gt;ですか実装はとてもシンプルです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def *(m)
  bind { m }
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この実装はHaskellの&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;と同じです。
bindを使えば似たようなものをたくさんつくれます。&lt;/p&gt;

&lt;p&gt;なので、モナドであれば簡単にモノイドをつくれるということが言えそうです。
単位元はreturnすれば作れるし、演算子はbindをつかって簡単に作れます。&lt;/p&gt;

&lt;p&gt;以下補足。&lt;/p&gt;

&lt;p&gt;Maybe.zero は Nothing を生成するためのファクトリです。&lt;/p&gt;

&lt;p&gt;Maybe は &lt;code&gt;Just&lt;/code&gt; と &lt;code&gt;Nothing&lt;/code&gt; しかないので &lt;code&gt;*&lt;/code&gt;という演算に対する単位元と zero しか値がないのであんまり楽しくないですね。
あとで、Haskell で リストモナドをみてみましょう。&lt;/p&gt;

&lt;h3 id=&#34;toc_4:36e25dd139b5b5a09c43152e31083e30&#34;&gt;&amp;gt;&amp;gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; はいままで保持している値を捨ててしまうので、後のほうの値である 2 しか残っていません。
この &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; を別のものに代えてしまえばモナドが保持している値も持ち運びができます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Maybe.bind&lt;/code&gt; ですが、
&lt;code&gt;a -&amp;gt; M b&lt;/code&gt; な型の関数を用意すれば単項演算子が作れる感じです。
(&amp;gt;&amp;gt;= return) の型を見てみるとわかりやいです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:t (&amp;gt;&amp;gt;= return)
(&amp;gt;&amp;gt;= return) :: Monad m =&amp;gt; m b -&amp;gt; m b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Maybe.new は Haskell では &lt;code&gt;Just&lt;/code&gt; になります。
抽象化してどんなモナドでも使えるのが &lt;code&gt;return&lt;/code&gt; になります。&lt;/p&gt;

&lt;p&gt;Maybe であれば &lt;code&gt;+&lt;/code&gt; も定義できます。MonadPlus です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Maybe.new(3) + Maybe.new(2) # =&amp;gt; Just 2
Maybe.new(3) * Maybe.zero + Maybe.new(2) # =&amp;gt; Just 2
Maybe.zero + Maybe.new(3) * Maybe.new(2) # =&amp;gt; Just 2
Maybe.zero + Maybe.zeror # =&amp;gt; Nothing
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Just    + Just    = Just&lt;/li&gt;
&lt;li&gt;Nothing + Just    = Just&lt;/li&gt;
&lt;li&gt;Just    + Nothing = Just&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Nothing + Nothing = Nothing&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;においては 単位元は Nothing になります。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;list-モナド:36e25dd139b5b5a09c43152e31083e30&#34;&gt;List モナド&lt;/h2&gt;

&lt;p&gt;これらのことを踏まえて Haskell でリストモナドで遊んでみます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;[1] &amp;gt;&amp;gt; [2] -- =&amp;gt; [2]
[1] &amp;gt;&amp;gt; []  -- =&amp;gt; []
[] &amp;gt;&amp;gt; [1]  -- =&amp;gt; []
[] &amp;gt;&amp;gt; []   -- =&amp;gt; []
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; を &lt;code&gt;*&lt;/code&gt; だと考えましょう。&lt;/p&gt;

&lt;p&gt;要素が1つの リストが単位元です。&lt;/p&gt;

&lt;p&gt;もうちょっと複雑な例にいきましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;[1,2] &amp;gt;&amp;gt; [3]   -- =&amp;gt; [3,3]
[1,2] &amp;gt;&amp;gt; [3,4] -- =&amp;gt; [3,4,3,4]
[1,2] &amp;gt;&amp;gt; []    -- =&amp;gt; []
[]    &amp;gt;&amp;gt; [3,4] -- =&amp;gt; []
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちょっとわかりにくい。
以下の作業をしてみましょう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; を &lt;code&gt;*&lt;/code&gt; に&lt;/li&gt;
&lt;li&gt;演算される値を要素数に置き換えてみましょう。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;2 * 1 =&amp;gt; 2  --  [1,2] &amp;gt;&amp;gt; [3]   # =&amp;gt; [3,3]
2 * 2 =&amp;gt; 4  --  [1,2] &amp;gt;&amp;gt; [3,4] # =&amp;gt; [3,4,3,4]
2 * 0 =&amp;gt; 0  --  [1,2] &amp;gt;&amp;gt; []    # =&amp;gt; []
0 * 2 =&amp;gt; 0  --  []    &amp;gt;&amp;gt; [3,4] # =&amp;gt; []
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;整数の積になりました。&lt;/p&gt;

&lt;p&gt;値が捨てられるのが気に食わないですか？
活かせるようにもできます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;let product = \x y -&amp;gt; x &amp;gt;&amp;gt;= \x&#39; -&amp;gt; (y &amp;gt;&amp;gt;= \y&#39; -&amp;gt; return $ x&#39; * y&#39;) :: [Int]
[1,2] `product` [3] -- =&amp;gt; [3,6]
-- 2 * 1 = 2
[1,2] `product` [3,4] -- =&amp;gt; [3,4,6,8]
-- 2 * 2 = 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちょっと難しいかもしれません、product は do 記法つかえばシンプルに書けます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;product x y = do
  x&#39; &amp;lt;- x
  y&#39; &amp;lt;- y
  return $ x&#39; * y&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;io-モナド:36e25dd139b5b5a09c43152e31083e30&#34;&gt;IO モナド&lt;/h2&gt;

&lt;p&gt;なんとなく思ったこと。&lt;/p&gt;

&lt;p&gt;結合律を利用して順番を保証しているのだと思いました。&lt;/p&gt;

&lt;h2 id=&#34;rubyの話もすこし:36e25dd139b5b5a09c43152e31083e30&#34;&gt;Rubyの話もすこし&lt;/h2&gt;

&lt;p&gt;型推論ができないため、 bind がブロックに渡す引数を ふたつにして、第2引数に型を渡してみました。
これでbind に渡すブロック内の処理が Maybe に依存せずに済んでいます。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:36e25dd139b5b5a09c43152e31083e30&#34;&gt;まとめ。&lt;/h2&gt;

&lt;p&gt;Rubyでモナドを実装してみたら、
「モナドを勉強していて気になっていたことが文章にできそうになった」ので、文章にしてみました。&lt;/p&gt;

&lt;p&gt;途中に説明不足な部分がありますが、今回は割愛しておきます。&lt;/p&gt;

&lt;p&gt;圏論楽しいですね。やばいです。&lt;/p&gt;

&lt;p&gt;誰かのモナドの理解への助けになるといいな。&lt;/p&gt;

&lt;p&gt;それより斧で血だらけになりそうです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Rails で ajax をちょっと実験するときに `render text:` すると コールバックしてこない。 </title>
          <link>https://blog.eiel.info/blog/2013/04/03/render-text-ajax-on-rails/</link>
          <pubDate>Wed, 03 Apr 2013 19:49:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/04/03/render-text-ajax-on-rails/</guid>
          <description>&lt;p&gt;サンプルコードがなくて申し訳ないです。&lt;/p&gt;

&lt;p&gt;rails で ajax を使用とすると 一般的には &lt;a href=&#34;https://github.com/rails/jquery-ujs&#34;&gt;jquery-ujs&lt;/a&gt; を利用します。&lt;/p&gt;

&lt;p&gt;あるリンクをクリックする時に非同期に読込みたい場合は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;%= link_to &#39;hoge&#39;, @user, class: user-link %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;に対して、 remote: true を追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;%= link_to &#39;hoge&#39;, @user, remote: ture, class: user-link %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;といった感じになります。
あとはサーバからのレスポンスが返ってきた時の処理を書きましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(function () {
   $(document).on(&#39;ajax:success&#39;, &#39;.user-link&#39;, function (ujs, content, status, xhr) {
    $(&#39;#user-info&#39;).html(content);
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;少し説明不足ですが、気にせず。&lt;/p&gt;

&lt;p&gt;さて、ここで リンク先が未実装で手抜きして:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class UsersController
  def show
    render text: &#39;hoge&#39;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と、さくっと実装しちゃうと さきほど実装した javascript の コールバックが呼ばれません。
めんどくさがらずに、 &lt;code&gt;app/views/users/show.htmle.rb&lt;/code&gt; などを作成してあげましょう。&lt;/p&gt;

&lt;p&gt;そんなこと滅多にないか…。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Ruby の とあるクラスの実装がどこにあるかわからない時の方法 - コードリーディング</title>
          <link>https://blog.eiel.info/blog/2013/04/03/search-ruby-code/</link>
          <pubDate>Wed, 03 Apr 2013 19:34:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/04/03/search-ruby-code/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;http://hiroshimarb.github.com/blog/2013/04/06/hiroshimarb-31/&#34;&gt;広島Ruby勉強会&lt;/a&gt; のネタ探しをしていて、「実装見てなにか面白いネタないかなー。」
って時に使ったコマンドを紹介。&lt;/p&gt;

&lt;p&gt;例は Method クラスの実装を探す。&lt;/p&gt;

&lt;p&gt;まずは git でソースコードをとってきている場合。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git grep &#39;rb_define_class(&amp;quot;Method&amp;quot;&#39;
proc.c:    rb_cMethod = rb_define_class(&amp;quot;Method&amp;quot;, rb_cObject);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;git grep&lt;/code&gt; を使います。&lt;code&gt;git grep&lt;/code&gt; はサクサクなのでメインの探索方法です。
Emacs上から使うとジャンプも楽チン。&lt;/p&gt;

&lt;p&gt;「git リポジトリじゃねーよ」って時は &lt;code&gt;ag&lt;/code&gt; を使います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ag &#39;rb_define_class\(&amp;quot;Method&amp;quot;&#39;
proc.c
2331:    rb_cMethod = rb_define_class(&amp;quot;Method&amp;quot;, rb_cObject);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こちらは行番号とかでます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(&lt;/code&gt; のエスケープがいります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ag&lt;/code&gt; というのは &lt;a href=&#34;http://geoff.greer.fm/2011/12/27/the-silver-searcher-better-than-ack/&#34;&gt;the silver searcher&lt;/a&gt; のことです。こちらも emacs から使う &lt;a href=&#34;http://d.hatena.ne.jp/syohex/20130302/1362182193&#34;&gt;helm-ag&lt;/a&gt; というのがあるのでオススメします。&lt;/p&gt;

&lt;p&gt;使える正規表現も違うような気がするので凝ったことがしたいならこちらを。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rb_define_class&lt;/code&gt; というのは Ruby の C API で クラスオブジェクトを作成します。このあたりに メソッドをクラスに紐づける処理なんかがあったりします。&lt;/p&gt;

&lt;p&gt;それでは Happy な ソースコードリーディングを。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>libv8 が コンパイルしたり、バイナリで入ったりで、気になったので少し調べた。</title>
          <link>https://blog.eiel.info/blog/2013/04/03/libv8-binary/</link>
          <pubDate>Wed, 03 Apr 2013 19:18:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/04/03/libv8-binary/</guid>
          <description>

&lt;p&gt;気になったというか、環境によって失敗すると言われてしまった。&lt;/p&gt;

&lt;p&gt;libv8 は the ruby racecer のバックエンドです。&lt;/p&gt;

&lt;p&gt;調べてみると、「libv8 はバイナリバージョンの gem」 と「ビルドするバージョンの gem」があるのですね。
バイナリバージョンは当然のようにアーキテクチャごとあるようです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rubygems.org/gems/libv8/versions&#34;&gt;libv8のバージョン一覧&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;3.16.14.1 March 28, 2013 x86_64-darwin-10
3.16.14.1 March 28, 2013
3.16.14.1 March 28, 2013 x86_64-linux yanked
3.16.14.1 March 28, 2013 x86-linux yanked
3.16.14.0 March 28, 2013
3.15.11.1 January 8, 2013 yanked
3.15.11.0 January 8, 2013 x86_64-linux yanked
3.15.11.0 January 8, 2013 yanked
3.11.8.17 March 22, 2013 x86_64-linux
3.11.8.17 March 22, 2013 x86_64-darwin-12
3.11.8.17 March 22, 2013 x86-linux
3.11.8.17 March 22, 2013
3.11.8.17 March 22, 2013 x86_64-darwin-10
3.11.8.16 March 22, 2013
3.11.8.14 March 22, 2013 yanked
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ビルドが走ってしまうと、ビルドに失敗する環境や低スペックマシンでつらいので、いろんなバージョンのバイナリのある &lt;code&gt;3.11.8.13&lt;/code&gt; に固定しました。
&lt;code&gt;x86_64-darwin-10&lt;/code&gt; があるのに &lt;code&gt;x86_64-darwin-11&lt;/code&gt; がなかったり少し謎ですが、深追いはしていません。&lt;/p&gt;

&lt;p&gt;最新に保つには定期的にチェックするしかないのでしょうか。&lt;/p&gt;

&lt;p&gt;libv8 のビルドは最近のマシンでもなかなか長いです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem &#39;libv8&#39;, &#39;3.11.8.13&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;rubygems に関する知識が全然足りてないのですが、こういうことができることははじめて知りました。あとで gemspec をチェックしてみたい。&lt;/p&gt;

&lt;h3 id=&#34;参考文献:ba32e61fe616df2ad6e057b60156c9cd&#34;&gt;参考文献&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/suu-g/20121222/1356189597&#34;&gt;http://d.hatena.ne.jp/suu-g/20121222/1356189597&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rubygems.org/gems/libv8/versions&#34;&gt;https://rubygems.org/gems/libv8/versions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ActiveModelを利用してフォームを作成した時の型変換</title>
          <link>https://blog.eiel.info/blog/2013/03/20/activerecord-value-to-type/</link>
          <pubDate>Wed, 20 Mar 2013 15:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/03/20/activerecord-value-to-type/</guid>
          <description>

&lt;p&gt;対応するレコードがないフォームを使う場合、ActiveModelを使用することで、シンプルなビューを構築しつつ、処理はモデルにかけます。&lt;/p&gt;

&lt;p&gt;しかし、ActiveModelのノウハウってあんまり落ちていません。
それなりに ActiveRecord に対する理解も必要で、難しいですね。
ハマったことなど共有していきたいと思います。&lt;/p&gt;

&lt;p&gt;フォームからのデータは文字列ですが、ActiveRecord にはコラム自体には型があるため、型変換を自動的に行ってくれます。
これを無意識に使用していると ActiveModelではまります。&lt;/p&gt;

&lt;p&gt;具体的には以下のテーブルがあったとします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class CreateUsers &amp;lt; ActiveRecord::Migration
  def change
    create_table :users do |t|
      t.string :name
      t.integer :age
      t.boolean :is_person
      t.timestamps
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;利用例を見てみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;user = User.new(age: &#39;20&#39;)
user.age                        # =&amp;gt; 20
user.age.class                  # =&amp;gt; Fixnum

user = User.new(is_person: &amp;quot;1&amp;quot;)
user.is_person                  # =&amp;gt; true
user.is_person.class            # =&amp;gt; TrueClass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;文字列から作成しているけども、自動的に数値や、真偽値へと変換されています。&lt;/p&gt;

&lt;p&gt;ActiveModel を使用する場合は以下のように実装しておくとよさそうです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User2
  attr_reader :age, :is_person
  include ActiveRecord::ConnectionAdapters

  def initialize(attributes = {})
    attributes.each do |key, value|
      send(&amp;quot;#{key}=&amp;quot;,value)
    end
  end

  def age=(age)
    @age = age.to_i
  end

  def is_person=(is_person)
    @is_person = Column.value_to_boolean(is_person)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;代入する時に値を修正するのが インスタンス変数に直接アクセスした場合にも型が保証できて良いです。&lt;/p&gt;

&lt;p&gt;「別に文字列でもいいよ。」なんてこともあると思いますが、
数値だとおもってうっかり使うと &lt;code&gt;&#39;20&#39; * 3 -&amp;gt; &#39;202020&#39;&lt;/code&gt; となって欲しい &lt;code&gt;40&lt;/code&gt;とは大きく違います。
チェックボックスを利用すると &lt;code&gt;&amp;quot;1&amp;quot;&lt;/code&gt; などなど、値として降ってきます。&lt;/p&gt;

&lt;p&gt;特に 真偽値への変換ですが、とりあえずわからなかったので、自前でごまかしていたのですが、調べました。
&lt;code&gt;ActiveRecord::ConnectionAdapters::Column&lt;/code&gt; にさままな型変換のメソッドが実装されています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/rails/rails/blob/v3.2.13/activerecord/lib/active_record/connection_adapters/column.rb&#34;&gt;https://github.com/rails/rails/blob/v3.2.13/activerecord/lib/active_record/connection_adapters/column.rb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;その中の &lt;code&gt;value_to_boolean&lt;/code&gt; を使用しました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def value_to_boolean(value)
  if value.is_a?(String) &amp;amp;&amp;amp; value.blank?
    nil
  else
    TRUE_VALUES.include?(value)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;true&lt;/code&gt; になる値は以下のように定義されてます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[true, 1, &#39;1&#39;, &#39;t&#39;, &#39;T&#39;, &#39;true&#39;, &#39;TRUE&#39;, &#39;on&#39;, &#39;ON&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;他にも&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;value_to_integer&lt;/li&gt;
&lt;li&gt;value_to_decimal&lt;/li&gt;
&lt;li&gt;string_to_time&lt;/li&gt;
&lt;li&gt;string_to_date&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などのメソッドがありました。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:373a133d85b51f8db7edc035cb738400&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;単体テストをかくときには文字列を渡すようにしたほうが良いかもしれません。
しかし、このような状況下になることはあまりないので、そんなに気にしなくても良いかなーという感じです。&lt;/p&gt;

&lt;p&gt;テーブルつくれることならテーブルを作るほうが手軽そうです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/eiel/5202625&#34;&gt;サンプルコード&lt;/a&gt; はこちらに置いてます。&lt;/p&gt;

&lt;p&gt;ActiveModel を使用するには 積極的にActiveRecord への理解を深める必要があります。
ソースコードもそこまで複雑ではないと思いますので、Rdocやソースコードも読んでいきたいですね。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>iOS で Digest認証してみる。 - AFNetworking</title>
          <link>https://blog.eiel.info/blog/2013/03/20/digest-authencation-for-ios/</link>
          <pubDate>Wed, 20 Mar 2013 02:20:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/03/20/digest-authencation-for-ios/</guid>
          <description>

&lt;p&gt;iOS で Digest認証するコードを書きました。&lt;/p&gt;

&lt;p&gt;サンプルコードの作成は頼まれて作成しただけです。
折角なので、簡単な説明を 記事にしておきます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/Digest_Sample&#34;&gt;サンプルコードはこちら&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;テストサーバ構築:d404f6f128ea77c478a4255b45512e01&#34;&gt;テストサーバ構築&lt;/h2&gt;

&lt;p&gt;まずは動作確認をできるようにしないといけないので Digest認証 をするためのウェブサーバがないと困ります。Ruby の rack を使いました。&lt;/p&gt;

&lt;p&gt;Digest認証をするには Rack のミドルウェア &lt;code&gt;Rack::Auth::Digest::MD5&lt;/code&gt; を使用しました。
Digest認証は ハッシュ化アルゴリズムの選択できるようになっているので、ミドルウェアはこのような名前になっているようです。
Rackのソースコードみにいったら、最初気づかなくて困りました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;config.ru&lt;/code&gt; は以下のように書きました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use Rack::Auth::Digest::MD5, &amp;quot;auth&amp;quot;, &#39;&#39; do |username|
  &amp;quot;password&amp;quot;
end

run proc { [200, {&#39;Content-Type&#39; =&amp;gt; &#39;text/html&#39;}, [&#39;hoge&#39;]] }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;use の第三引数は opaque となります。デフォルトでは &lt;code&gt;nil&lt;/code&gt; で、設定しないと動きません。はまりました。&lt;/p&gt;

&lt;p&gt;蛇足ですが、 &lt;code&gt;use&lt;/code&gt; の仕組みをよくしらなかったので&lt;a href=&#34;https://github.com/rack/rack/blob/1.5.2/lib/rack/builder.rb#L81-L87&#34;&gt;ソースコード&lt;/a&gt;をちら見しました。
&lt;code&gt;lib/builder.rb&lt;/code&gt; に実装があります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    def use(middleware, *args, &amp;amp;block)
      if @map
        mapping, @map = @map, nil
        @use &amp;lt;&amp;lt; proc { |app| generate_map app, mapping }
      end
      @use &amp;lt;&amp;lt; proc { |app| middleware.new(app, *args, &amp;amp;block) }
    end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;@map が &lt;code&gt;nil&lt;/code&gt; の場合は middleware.new する処理が割り込むだけですね。引数はまるまる渡しています。&lt;/p&gt;

&lt;p&gt;use する時の引数は 使用するミドルウェア の initialize メソッドをみればよいことがわかります。
Digest認証の場合は (&lt;a href=&#34;https://github.com/rack/rack/blob/rack-1.5/lib/rack/auth/digest/md5.rb#L24-L31&#34;&gt;ソースコード&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;        def initialize(app, realm=nil, opaque=nil, &amp;amp;authenticator)
          @passwords_hashed = nil
          if opaque.nil? and realm.respond_to? :values_at
            realm, opaque, @passwords_hashed = realm.values_at :realm, :opaque, :passwords_hashed
          end
          super(app, realm, &amp;amp;authenticator)
          @opaque = opaque
        end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第2引数、第3引数、ブロックを用意すればよさそうです。rdoc にも書いてありますが、block は username を引数にうけとります。
確認しないと心配なら &lt;a href=&#34;https://github.com/rack/rack/blob/rack-1.5/lib/rack/auth/digest/md5.rb#L97-L100&#34;&gt;valid_digest?&lt;/a&gt; で利用されています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;        def valid_digest?(auth)
          pw = @authenticator.call(auth.username)
          pw &amp;amp;&amp;amp; digest(auth, pw) == auth.response
        end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ios側:d404f6f128ea77c478a4255b45512e01&#34;&gt;iOS側&lt;/h2&gt;

&lt;p&gt;使い方は サンプルコードの &lt;a href=&#34;https://github.com/eiel/Digest_Sample&#34;&gt;README.md&lt;/a&gt; にかいています。&lt;/p&gt;

&lt;p&gt;AFNetworking は iOS と Mac OS X で利用できるライブラリで block や NSOperation を利用して ネットワークの処理がかけるライブラリみたいです。&lt;/p&gt;

&lt;p&gt;Digjest 認証をしたい場合は `AFHTTPRequestOperation#setAuthenticationChallengeBlock に認証が必要なときに呼び出される処理を block で登録しておけばよいようです。&lt;/p&gt;

&lt;p&gt;なので、あらかじめ登録しておいた username と password を利用して、
認証する処理を登録した状態の AFHTTPRequestOperation を返すようなファクトリを用意してやりました。&lt;/p&gt;

&lt;p&gt;あと雑談ですが、&lt;/p&gt;

&lt;p&gt;block 内で &lt;code&gt;self&lt;/code&gt; を利用したい場合は JavaScript の影響で &lt;code&gt;that&lt;/code&gt; にして使っています。
一般的な変数名はなんなのでしょうか。&lt;/p&gt;

&lt;h2 id=&#34;参考リンク:d404f6f128ea77c478a4255b45512e01&#34;&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/dayflower/20120711/1342058487&#34;&gt;Rack::Auth::Digest::MD5 のつかいかた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rack/rack&#34;&gt;rack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/AFNetworking/AFNetworking&#34;&gt;AFNetworking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ch3cooh.hatenablog.jp/entry/20110513/1305264939&#34;&gt;NSURLConnectionクラスを使用したダイジェスト認証処理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>エディタの文字色に悩む日々 - CIELCH</title>
          <link>https://blog.eiel.info/blog/2013/03/13/cielch/</link>
          <pubDate>Wed, 13 Mar 2013 11:38:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/03/13/cielch/</guid>
          <description>

&lt;p&gt;色について少し話しをしたいと思う。
プログラマたるものエディタの配色はこだわりたいものです。&lt;/p&gt;

&lt;p&gt;目が疲れにくく、かつ、文字が読みやすい配色が欲しいのです。&lt;/p&gt;

&lt;p&gt;特に私は視力がそんなによくないので、この点を気にしています。
既存のテーマのもので文字が読めなかったりして、色を変えたりしても上手いこと調和が取れない。
上手いこといかないので過去に何度か模索して、いまも模索しています。&lt;/p&gt;

&lt;p&gt;そんなわけで今回は &lt;a href=&#34;http://ja.wikipedia.org/wiki/L*a*b*%E8%A1%A8%E8%89%B2%E7%B3%BB&#34;&gt;CIELAB&lt;/a&gt; について調べていたのですが、その変種な CIELCH について紹介したいと思います。&lt;/p&gt;

&lt;p&gt;先にまとめておくと CIELCH を利用して配色を行います。
背景色と文字色で &lt;code&gt;L(明度)&lt;/code&gt; がある程度の差をもつようにすると文字の読みやすさを確保することができます。
明度の差が大きいとチカチカするので差をつけすぎないのも大事です。
あとは C(彩度) や H(色相) のパラメータを調整しています。&lt;/p&gt;

&lt;h2 id=&#34;cielab:1159d8534aa12db900aa9cc731cacc3a&#34;&gt;CIELAB&lt;/h2&gt;

&lt;p&gt;CIELAB は L a b というパラメータで色を指定します。CIEというのは 国際照明委員会だそうで、Lab とかいても通じそうです。
L は明度を示し 0だと黒で 100だと黒です。
a は正の値が大きいと マゼンダ(赤紫)っぽい色になり、負の値が大きいと緑っぽい色になります。
b は正の値が大きいと 黄色っぽい色になり、負の値が大きいと青っぽい色になります。&lt;/p&gt;

&lt;p&gt;a と b がなんでそんな色なのかっていうと、色相を考えたとき、それぞれの正負が補色関係にあり、かつ a と b 直交するからでしょう。&lt;/p&gt;

&lt;p&gt;この色空間の良いところは L です。
Lの明度は &lt;a href=&#34;http://ja.wikipedia.org/wiki/HSV%E8%89%B2%E7%A9%BA%E9%96%93&#34;&gt;HSV&lt;/a&gt;  の明度と違う明度で、人間の視覚に比較的近いのです。&lt;/p&gt;

&lt;p&gt;HSV は 色相、彩度、明度を色で決める方法で、よくみかけると思います。この明度には人間の視覚においては非常にあてになりません。
例を出します。&lt;/p&gt;

&lt;p&gt;黒が明るさ 0 なんだから 明るさ 100% の色を使えばうまくいくような勘違いを一度はしたことはないでしょうか。&lt;/p&gt;

&lt;p&gt;rgb (0, 0, 255) の青を考えます。HSVでいうと 色相 240° 明度 100% 彩度 100% になります。 &lt;strong&gt;明度 100%&lt;/strong&gt; です。&lt;/p&gt;

&lt;div style=&#34;background-color: black; color: #0000FF&#34;&gt;
明度 100% です。
&lt;/div&gt;

&lt;p&gt;大事なことなので3回言いました。3回目は読みにくいですね。
HSV の明度は人間の視覚に対応していません。&lt;/p&gt;

&lt;p&gt;同じ明度の黄色でやってみましょう。&lt;/p&gt;

&lt;div style=&#34;background-color: black; color: #FFFF00&#34;&gt;
明度 100% です。
&lt;/div&gt;

&lt;p&gt;青のときに比べて文字がはっきりしますね。&lt;/p&gt;

&lt;p&gt;というわけで、ほかの色空間が欲しくなります。&lt;/p&gt;

&lt;p&gt;他に使えるものとしては&lt;a href=&#34;http://ja.wikipedia.org/wiki/%E3%83%9E%E3%83%B3%E3%82%BB%E3%83%AB%E3%83%BB%E3%82%AB%E3%83%A9%E3%83%BC%E3%83%BB%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0&#34;&gt;マンセルカラー&lt;/a&gt;とかありますが、RGB値が厳密には定義されてないようです。
色見本から測定して変換しているものはあるようです。&lt;/p&gt;

&lt;p&gt;実世界の色とモニターの色を比較する場合、モニター自体の明るさを変更できてしまうし、一致させることができない。と、認識しました。&lt;/p&gt;

&lt;p&gt;Haskell で CIELAB から RGB に変換する場合 ホワイトバランス というパラメータが必要でしたし。&lt;/p&gt;

&lt;p&gt;いろんな文献をあたると RGB をマンセルカラーに変換する場合は XYZ という色空間を経由して、CIELAB にもっていくことがわかりました。
そこで CIELAB を利用するのですが、HSV のように 色相 明度 彩度で指定できると都合がよいので aとb を極座標にして 色相、彩度にしたのが CIELCH になります。&lt;/p&gt;

&lt;p&gt;ようやく本題ですが、CIELCH の色立体が見たかったのです。
Y 方向に明度 X 方向に彩度 で 色相を18°づつずらしてみました。
また、RGB値に変換するときに どんな値でも変換できるのですが、負の値になるものやら,255を越えてしまうものやらでてしまいます。
若干丸めて、そのような色の場合は表示しないようにしました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/cielch0.png&#34; alt=&#34;異常っぽい値を省いた色見本&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.dic-color.com/knowledge/080926.html&#34;&gt;マンセルカラー&lt;/a&gt;と比べてみても似たような雰囲気はでてますね。
明い色になると青色がでてないのがわかります。&lt;/p&gt;

&lt;p&gt;今度は彩度200 まで。
異常と判断した値も表示してみます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/cielch1.png&#34; alt=&#34;異常っぽい値を省かず色見本 彩度200&#34; /&gt;&lt;/p&gt;

&lt;p&gt;彩度をあげると徐々に明るくなっちゃってますね。&lt;/p&gt;

&lt;p&gt;もっと起きてることをわかりやすくするには彩度をもっと引っ張ります。
彩度500 とかいってみましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/cielch2.png&#34; alt=&#34;異常っぽい値を省かず色見本 彩度500&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ほんとは三次元に出したかった。&lt;/p&gt;

&lt;h2 id=&#34;使用したコード:1159d8534aa12db900aa9cc731cacc3a&#34;&gt;使用したコード&lt;/h2&gt;

&lt;p&gt;作成したコードも貼っておきます。Haskell のサンプルコードとしてお使いください。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;import Data.Colour.CIE
import Data.Colour.SRGB
import Data.Colour.CIE.Illuminant
import Data.Colour.SRGB.Linear

cieLCH :: (Ord a, Floating a) =&amp;gt; Chromaticity a -&amp;gt; a -&amp;gt; a -&amp;gt; a -&amp;gt; Colour a
cieLCH white_ch l c h = cieLAB white_ch l a b
  where
    radius = pi * h / 180
    a = cos radius * c
    b = sin radius * c

validRGB :: (Fractional a, Ord a) =&amp;gt; RGB a -&amp;gt; Bool
validRGB (RGB r g b) = if sum &amp;gt;= 0 &amp;amp;&amp;amp; sum &amp;lt;= 3.1 &amp;amp;&amp;amp;
                          r &amp;gt; low &amp;amp;&amp;amp; r &amp;lt; high &amp;amp;&amp;amp;
                          g &amp;gt; low &amp;amp;&amp;amp; g &amp;lt; high &amp;amp;&amp;amp;
                          b &amp;gt; low &amp;amp;&amp;amp; b &amp;lt; high
                       then True
                       else True
  where
    sum = r + g + b
    low = -0.1
    high = 1.2

toRGBColor :: (Fractional a, Ord a) =&amp;gt; Colour a -&amp;gt; Maybe (Colour a)
toRGBColor colour = if validRGB rgb
                    then Just colour
                    else Nothing
  where
    rgb = Data.Colour.SRGB.Linear.toRGB colour

type ColorName = (Maybe (Colour Double), Double, Double)
type ColorTable = [[ColorName]]

colorTabletoHTML :: ColorTable -&amp;gt; String
colorTabletoHTML table = &amp;quot;&amp;lt;table style=\&amp;quot;display: inline;\&amp;quot;&amp;gt;&amp;quot;
                         ++ (unlines $ map makeRow table) ++ &amp;quot;&amp;lt;/table&amp;gt;&amp;quot;
  where
    makeRow :: [ColorName] -&amp;gt; String
    makeRow cols = &amp;quot;&amp;lt;tr&amp;gt;&amp;quot; ++ (unlines $ map makeCol cols) ++ &amp;quot;&amp;lt;/tr&amp;gt;&amp;quot;
    makeCol :: ColorName -&amp;gt; String
    makeCol (color, l, c) = &amp;quot;&amp;lt;td style=\&amp;quot;background-color: &amp;quot; ++
                          rgbString color ++ &amp;quot;; \&amp;quot;&amp;gt;&amp;amp;nbsp;&amp;lt;/td&amp;gt;&amp;quot;
    rgbString Nothing = &amp;quot;&amp;quot;
    rgbString (Just color) = sRGB24show color

colorTable lightnesses chromas h =
  [[(makeColor l c h, l,c) | c &amp;lt;- chromas]
    | l &amp;lt;- lightnesses]
  where
    makeColor l c h = Main.toRGBColor $ cieLCH d65 l c h

hues = [0,18..342]
chromas = [200,160..0]
lightnesses = [100,80..0]

main = do
  putStrLn &amp;quot;&amp;lt;body style=\&amp;quot;background-color: #2c2c2c\&amp;quot;&amp;gt;&amp;quot;
  mapM_ putStrLn $ map (colorTabletoHTML . colorTable lightnesses chromas) hues
  putStrLn &amp;quot;&amp;lt;/body&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/eiel/5148886&#34;&gt;gist&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;実際、私達が普段目にするものは彩度が高いものはなくて、RGBの彩度100 の値は不自然です。
かといって彩度を下げすぎると味けなくなるのでバランスが大事です。
明度を統一しつつ彩度をどこまであげるか、という線型計画問題的な感じになります。これに色の調和の計算式を盛り込めば、機械的に配色を計算できるようになりそうですね。&lt;/p&gt;

&lt;h2 id=&#34;実際に配色してみた:1159d8534aa12db900aa9cc731cacc3a&#34;&gt;実際に配色してみた&lt;/h2&gt;

&lt;p&gt;そんなわけでこれらを参考にして配色してみました。
明度 70 彩度 60 あたりで 色相は均等にはしていません。
彩度がでにくい色は少しだけ高い彩度が表現できる方向にずらしたりしています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/color.png&#34; alt=&#34;配色例&#34; /&gt;&lt;/p&gt;

&lt;p&gt;抜粋したら以下の感じでした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(gray &amp;quot;#c6c6c6&amp;quot;)
(red &amp;quot;#ff91a7&amp;quot;)
(orange &amp;quot;#ffa667&amp;quot;)
(yellow &amp;quot;#f2e582&amp;quot;)
(green &amp;quot;#87d46f&amp;quot;)
(aqua &amp;quot;#6cd0dc&amp;quot;)
(blue &amp;quot;#80c1ff&amp;quot;)
(purple &amp;quot;#e9a7ff&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;背景色は &lt;code&gt;#2c2c2c&lt;/code&gt; を使用しています。こうしておくと黒が使えるし、黒は色として尖りがあるので、落ちついた雰囲気になります。&lt;/p&gt;

&lt;p&gt;Haskell のコードについては別途解説したいと思います。&lt;/p&gt;

&lt;h2 id=&#34;参考文献:1159d8534aa12db900aa9cc731cacc3a&#34;&gt;参考文献&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ja.wikipedia.org/wiki/L*a*b*%E8%A1%A8%E8%89%B2%E7%B3%BB&#34;&gt;Wikipedia: Lab色空間&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.xrite.com/documents/literature/ja/L10-001_Understand_Color_ja.pdf&#34;&gt;PDF カラーコミュニケーションガイド —色を正しく伝えるために&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nanisama.com/color/system/Ostwalt/index.html&#34;&gt;色彩理論：表色系：オストワルト表色系&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hackage.haskell.org/package/colour&#34;&gt;HaskellDB colour&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jfly.iam.u-tokyo.ac.jp/lab/colorresearch.html&#34;&gt;分子細胞生物学研究所・脳神経回路研究分野&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Wikiやメモをかくときに考えてること</title>
          <link>https://blog.eiel.info/blog/2013/03/13/how-to-write-note/</link>
          <pubDate>Wed, 13 Mar 2013 00:57:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/03/13/how-to-write-note/</guid>
          <description>

&lt;p&gt;私がメモをとるときに意識してることを書いておきたいと思います。&lt;/p&gt;

&lt;p&gt;といっても、大したことではないです。&lt;/p&gt;

&lt;p&gt;Wiki を書くときのポリシーについて、書こうと思ったのですが、こういう形に落ちつきました。&lt;/p&gt;

&lt;p&gt;最初に一言でまとめておきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ログ&lt;/code&gt;を書いているのか &lt;code&gt;まとめ&lt;/code&gt;を書いているのか を意識する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;物事を整理するには、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;情報収集&lt;/li&gt;
&lt;li&gt;まとめる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という2段階のプロセスを踏みます。
情報収集のアウトプットが&lt;code&gt;ログ&lt;/code&gt;で、まとめることのアウトプットが&lt;code&gt;まとめ&lt;/code&gt;です。&lt;/p&gt;

&lt;h2 id=&#34;なんのためにメモをとるんだっけ:18bdf0f5c1da7dbff222ae84d2033eea&#34;&gt;なんのためにメモをとるんだっけ？&lt;/h2&gt;

&lt;p&gt;忘れても大丈夫なようにするためです。&lt;/p&gt;

&lt;p&gt;決めたことの証拠にもなります。&lt;/p&gt;

&lt;h2 id=&#34;ログ-とは:18bdf0f5c1da7dbff222ae84d2033eea&#34;&gt;&lt;code&gt;ログ&lt;/code&gt; とは&lt;/h2&gt;

&lt;p&gt;時系列順に並んだメモです。&lt;/p&gt;

&lt;p&gt;時系列に並んでいなくてもいいですが、時系列に並んでるほうが扱いやすいです。
&lt;code&gt;ログ&lt;/code&gt;は基本的に一度書いたものは、変更しません。忘れても大丈夫でないと困るからです。変更されてしまうと、変更前の情報がわかりません。&lt;/p&gt;

&lt;p&gt;人の話を聞いたり、読書メモをとったりするのに、マインドマップのようなものを使っていたこともあるのですが、正直間に合いません。スペースが足りません。
なので、時系列順というのは書きやすいです。
また、時系列順であれば見直す場合も読みやすいです。&lt;/p&gt;

&lt;p&gt;紙にメモをしている場合であれば、矢印をつけたり、色をつけたりをしても良いかもしれませんが、迷うようであればあとまわしにしています。&lt;/p&gt;

&lt;p&gt;一時期、メモをとるのに工夫をしすぎていて、
メモの最中にあとでわかりやすいよに文章の位置を入れかえたり、などなど
していてとメモが取れる量が減ってしまったりしました。
そうすると、必然的に重要なことだけメモろうとなります。
でも、なにが重要なのかその場で判断できないことのほうが多く、真っ白なままのノートができたりします。&lt;/p&gt;

&lt;p&gt;もともと何かのまとめであったものが、ログになる場合もあります。&lt;/p&gt;

&lt;h2 id=&#34;まとめ-とは:18bdf0f5c1da7dbff222ae84d2033eea&#34;&gt;&lt;code&gt;まとめ&lt;/code&gt; とは&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;まとめ&lt;/code&gt;は必要な情報が必要な時にすぐに取り出せるようにしている情報です。使いやすくなるように工夫したりしましょう。
忘れた事を思い出すためのショートカットです。大事なことだけ伝えるためのショートカットにもなります。&lt;/p&gt;

&lt;p&gt;一度書いたあとも何度も何度も修正していくこともあります。
&lt;code&gt;ログ&lt;/code&gt;さえあれば&lt;code&gt;まとめ&lt;/code&gt;を再構築できるはずなのでどんどん修正できます。&lt;/p&gt;

&lt;p&gt;書式は様々です。Wikiであったり、blogであったり、マインドマップだったり適材適所です。&lt;/p&gt;

&lt;p&gt;修正されなくなったまとめはログとして再利用される場合があると思います。&lt;/p&gt;

&lt;h2 id=&#34;ログ-と-まとめ:18bdf0f5c1da7dbff222ae84d2033eea&#34;&gt;&lt;code&gt;ログ&lt;/code&gt;と&lt;code&gt;まとめ&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;頻繁に閲覧することになるのは &lt;code&gt;まとめ&lt;/code&gt; です。
利便性のためにまとめはあるため、時折、修正を行い利便性を維持する必要があります。
結果、修正をしていくうちに、その結論にいたった理由や情報が失われる恐れがあります。これを補完するためにログが必要になります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ログ&lt;/code&gt;は情報が失われていませんので、&lt;code&gt;ログ&lt;/code&gt;があればすべてがわかります。
時系列に並んでいればどうしてそういう結論になったのか追いやすいです。
しかし、&lt;code&gt;ログ&lt;/code&gt; は情報量が &lt;code&gt;まとめ&lt;/code&gt; に比べて多いです。ノイズも多いです。
ログをすべて追うには時間がかかります。
必要な情報が分散していれば、いったりきたりしたりすることにもなります。
このために&lt;code&gt;まとめ&lt;/code&gt;が必要になります。&lt;/p&gt;

&lt;p&gt;まとめは過程が欠落してしまい、ログは長すぎるのです。&lt;/p&gt;

&lt;p&gt;ということで、覚えておかなければならないことがあるのであれば。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ログ&lt;/code&gt;があるなら&lt;code&gt;まとめ&lt;/code&gt;をかいて、より便利に。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ログ&lt;/code&gt;がないのであれば&lt;code&gt;ログ&lt;/code&gt;を作る。でないと&lt;code&gt;まとめ&lt;/code&gt;が書けない、なおせない。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ということになります。&lt;/p&gt;

&lt;h2 id=&#34;wikiをかくときのこと:18bdf0f5c1da7dbff222ae84d2033eea&#34;&gt;Wikiをかくときのこと&lt;/h2&gt;

&lt;p&gt;Wiki はどちらかというと &lt;code&gt;まとめ&lt;/code&gt;を書くのに適したツールです。
リンクを貼ることもできるので、&lt;code&gt;ログ&lt;/code&gt;へのリンクを用意しておくと良いです。
必要な情報が取り出しやすいようにメンテナンスもしましょう。&lt;/p&gt;

&lt;p&gt;また、&lt;code&gt;ログ&lt;/code&gt;がない情報もあるかもしれません。
&lt;code&gt;ログ&lt;/code&gt;なのか、そうでないかでページをわけていきましょう。
同じ情報でも、別々に記述する場合があります。
まとめのほうは更新するのでなくなる可能性がありますし、
&lt;code&gt;ログ&lt;/code&gt;のほうはそのまま残ります。
Wiki自体に履歴、差分機能があれば、気にしなくてよいかもしれません。&lt;/p&gt;

&lt;p&gt;Wikiの場合はページあたりの情報量も意識するようにしています。
1ページあたりの情報がおおくなってきたら、別のページに分割します。
プログラミングで、長い関数を複数の短い関数に分離するのと同じ感覚です。
&lt;code&gt;ログ&lt;/code&gt;さえきっちりしていれば、書き換えることに不安はないはずです。&lt;/p&gt;

&lt;h2 id=&#34;サイボウズ-live-をかくときのこと:18bdf0f5c1da7dbff222ae84d2033eea&#34;&gt;サイボウズ live をかくときのこと&lt;/h2&gt;

&lt;p&gt;サイボウズ live では 掲示板ではトピックを作り、議論することができます。
コメントは必然的に時系列に並びます。会話形式表示もできます。
ログとして使いやすいです。&lt;/p&gt;

&lt;p&gt;また、トピックの本文は修正することができます。
修正した際に通知することもできますので、これをまとめに使っています。&lt;/p&gt;

&lt;h2 id=&#34;メールで議論をしている場合:18bdf0f5c1da7dbff222ae84d2033eea&#34;&gt;メールで議論をしている場合&lt;/h2&gt;

&lt;p&gt;メールはログです。&lt;/p&gt;

&lt;p&gt;まとめを書いたあとにレスがついたりすると、カオスです。
過去のメールを頻繁に確認するようになりはじめたら、
どこか別のところにまとめるようにしています。
成果物がまとめになる場合もあります。&lt;/p&gt;

&lt;h2 id=&#34;blog:18bdf0f5c1da7dbff222ae84d2033eea&#34;&gt;blog&lt;/h2&gt;

&lt;p&gt;blog は書くときはまとめですが、公開後は今後、ログとして再利用するつもりでいます。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:18bdf0f5c1da7dbff222ae84d2033eea&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;書いてみたら非常に当たり前な感じになりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ログ&lt;/code&gt;を書いているときは、情報を取り零さないように集中します。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;まとめ&lt;/code&gt;を書いてるときは、より便利に見易くなるように表現方法を工夫します。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2ちゃんねるなんかでも、スレの最初にこれまでのまとめがありますね。今北産業なんかは中間のまとめですね。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ログ&lt;/code&gt;は単に時系列にかくだけでなく、カテゴリ分けされる場合もあります。
このあたりはセンスが問われますが、追う際に一本道になるようになっていると読みやすいです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Gentoo Prefix で python3.2 がないって言われてインストールできない</title>
          <link>https://blog.eiel.info/blog/2013/03/06/gentoo-prefix-python3-dot-2/</link>
          <pubDate>Wed, 06 Mar 2013 14:08:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/03/06/gentoo-prefix-python3-dot-2/</guid>
          <description>&lt;p&gt;いつのまにやら Gentoo Prefix が python 3.2 を入れようとするのだけど、 python 3.2 の ebuild はありません。
&lt;code&gt;emerge -uDNt world&lt;/code&gt; とかで更新しようとしたとき python 関連のものがあると実行できない。以下のようなメッセージがでます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;emerge: there are no ebuilds to satisfy &amp;quot;dev-lang/python:3.2&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;python 3.3 はいってるし、別にいらないよね。&lt;/code&gt; ということで USE フラグに &lt;code&gt;-python_targets_python3_2&lt;/code&gt; を追加したらうまくいった。&lt;/p&gt;

&lt;p&gt;TARGET_PYTHONを調整したくなるのですが、これは 上記の USE フラグに展開される。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>広島Ruby勉強会 #30で Liquidの簡単な説明をした</title>
          <link>https://blog.eiel.info/blog/2013/03/02/abc-liquid/</link>
          <pubDate>Sat, 02 Mar 2013 21:04:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/03/02/abc-liquid/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;http://hiroshimarb.github.com/blog/2013/02/08/hiroshimarb-30/&#34;&gt;広島Ruby勉強会 #030&lt;/a&gt;で Jekyl の中で使用されている テンプレートエンジン Liquid のざっくりとした説明をする LT しました。&lt;/p&gt;

&lt;p&gt;大したネタもないし、そんなに凝ったこともしてないですが、公開しておきます。&lt;/p&gt;

&lt;iframe src=&#34;http://www.slideshare.net/slideshow/embed_code/16879154&#34; width=&#34;476&#34; height=&#34;400&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34;&gt;&lt;/iframe&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Rails4 beta1 がリリースされたのでアップグレードしてみた</title>
          <link>https://blog.eiel.info/blog/2013/02/27/rails4.0-beta/</link>
          <pubDate>Wed, 27 Feb 2013 14:32:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/02/27/rails4.0-beta/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://weblog.rubyonrails.org/2013/2/25/Rails-4-0-beta1/&#34;&gt;Rails4 beta1がリリースされてます。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;というわけで、アップグレードしてもよさそうなプロジェクトをアップグレードしてみました。(リリースしてないし)&lt;/p&gt;

&lt;p&gt;config以下の書き換えなどは自己責任で。&lt;/p&gt;

&lt;h2 id=&#34;やったこと:141a49326ebf4d78d7401d875ab6d2bd&#34;&gt;やったこと&lt;/h2&gt;

&lt;p&gt;bundler 1.3 が必要になるので、まだいれていない場合アップデートします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ gem install bundler
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gemfileを修正します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;rails&#39;, &#39;4.0.0.beta1&#39;

group :assets do
  gem &#39;sass-rails&#39;, &#39;~&amp;gt; 4.0.0.beta1&#39;
  gem &#39;coffee-rails&#39;, &#39;~&amp;gt; 4.0.0.beta1&#39;

  # See https://github.com/sstephenson/execjs#readme for more supported runtimes
  # gem &#39;therubyracer&#39;, :platforms =&amp;gt; :ruby

  gem &#39;uglifier&#39;, &#39;&amp;gt;= 1.0.3&#39;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;必要に応じてgemの設定:141a49326ebf4d78d7401d875ab6d2bd&#34;&gt;必要に応じてgemの設定&lt;/h2&gt;

&lt;h3 id=&#34;protected-attributes:141a49326ebf4d78d7401d875ab6d2bd&#34;&gt;protected_attributes&lt;/h3&gt;

&lt;p&gt;strong_parameters に移行してない場合&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;protected_attributes&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;devise:141a49326ebf4d78d7401d875ab6d2bd&#34;&gt;devise&lt;/h3&gt;

&lt;p&gt;devise がまだ対応 gem がないので&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;devise&#39;, github: &#39;plataformatec/devise&#39;, branch: &#39;rails4&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;githubから直接。&lt;/p&gt;

&lt;h3 id=&#34;simple-form:141a49326ebf4d78d7401d875ab6d2bd&#34;&gt;simple_form&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;simple_form&#39;, &#39;3.0.0.beta1&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;simple_form が rails4 に対応したものが beta なので&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &amp;quot;simple_form&amp;quot;, &amp;quot;3.0.0.beta1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;config-をモダンに:141a49326ebf4d78d7401d875ab6d2bd&#34;&gt;config をモダンに？&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rake rails:update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;地道に diff をみながら調整しました。自分で変更したところははっきりと分離しておいたほうがよさそうでした。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;routes.rb&lt;/code&gt; は確実に変更していると思います。
がっつり変更されるのでコミットをした上で試しましょう。&lt;/p&gt;

&lt;h2 id=&#34;参考にしたりとか:141a49326ebf4d78d7401d875ab6d2bd&#34;&gt;参考にしたりとか&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.upgradingtorails4.com/&#34;&gt;upgrading rails 4&lt;/a&gt;&lt;br&gt;
Topics Covered あたりをみながら、必要そうなものを追加したり、修正したりしました。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://rubygems.org/&#34;&gt;rubygems.org&lt;/a&gt;&lt;br&gt;
リリースされてるgemの確認とか&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あとは各gem のリポジトリを見にいったりして確認しました。
gem関連はリリースされるころには rails のバージョンを指定をするだけで済むかもしれないペースで対応が進んでいそうですね。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ruby-build の プルリクエスト バトル</title>
          <link>https://blog.eiel.info/blog/2013/02/24/ruby-build-battle/</link>
          <pubDate>Sun, 24 Feb 2013 23:14:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/02/24/ruby-build-battle/</guid>
          <description>

&lt;p&gt;ネタです。&lt;/p&gt;

&lt;p&gt;最近もろもろな事情で Ruby がリリースされることが多かったですが、ruby-build の更新を待っていた人はどれくらいいるでしょうか。&lt;/p&gt;

&lt;p&gt;みんな待ちきれなくて自分で ruby-build のレシピを書いたんではないでしょうか？
そして「俺がと プル リクエストをおくるんだ!!」と燃えたのではないでしょうか？
これを Ruby のリリースがあるたびに発生する &lt;code&gt;ruby-bulild プルリクエストバトル&lt;/code&gt;だと勝手に想像して楽しんでいます。こんばんは。&lt;/p&gt;

&lt;p&gt;&lt;del&gt;僕の場合はだいたいなぜか &lt;code&gt;rbenv&lt;/code&gt; のほうをみにいって、「まだ更新がないないなー」っておもってレシピをかくんですが、書いたあとに &lt;code&gt;ruby-build&lt;/code&gt; だったと気づく馬鹿なことをしているだけだったりしますが&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;今日も &lt;a href=&#34;http://www.ruby-lang.org/ja/news/2013/02/24/ruby-2-0-0-p0-is-released/&#34;&gt;Ruby 2.0 のリリース&lt;/a&gt; がありましたが、このプルリクエスト バトル の行方はどうなったのでしょうか。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sstephenson/ruby-build/pull/299&#34;&gt;https://github.com/sstephenson/ruby-build/pull/299&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sstephenson/ruby-build/pull/301&#34;&gt;https://github.com/sstephenson/ruby-build/pull/301&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同じ Issue を立てないように気をつけたいですね。&lt;/p&gt;

&lt;p&gt;それと Ruby 20周年おめでとうございます。&lt;/p&gt;

&lt;h2 id=&#34;ついでにレシピの書き方:b4fffd22545e14a7e3b00e59a4fcbbfa&#34;&gt;ついでにレシピの書き方&lt;/h2&gt;

&lt;p&gt;ネタだけで終わるのもあれなので。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;~/.rbenv&lt;/code&gt; にインストールしている場合は &lt;code&gt;~/.rbenv/plugins/ruby-build/share/ruby-build/&lt;/code&gt; にレシピが配置されています。&lt;/p&gt;

&lt;p&gt;今回の 2.0 の場合は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;install_package &amp;quot;openssl-1.0.1e&amp;quot; &amp;quot;https://www.openssl.org/source/openssl-1.0.1e.tar.gz#66bf6f10f060d561929de96f9dfe5b8c&amp;quot; mac_openssl --if has_broken_mac_openssl
install_package &amp;quot;ruby-2.0.0-p0&amp;quot; &amp;quot;ftp://ftp.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p0.tar.gz#50d307c4dc9297ae59952527be4e755d&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とか前のバージョンを参考にして書けばよいです。簡単ですね。&lt;/p&gt;

&lt;h2 id=&#34;なんでこんなことかいたのか:b4fffd22545e14a7e3b00e59a4fcbbfa&#34;&gt;なんでこんなことかいたのか&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;なんで push してないんだー。って怒られたので&lt;/li&gt;
&lt;li&gt;Ruby 2.0 リリース &amp;amp; 20 周年 おめでとー。とかそういう記事書きたいじゃないですか&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>岡山Git勉強会 - 20130223 - Git 仕組み入門 という話をしてきた</title>
          <link>https://blog.eiel.info/blog/2013/02/23/okagit-20130223/</link>
          <pubDate>Sat, 23 Feb 2013 21:24:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/02/23/okagit-20130223/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://local.aguuu.com/events/11120&#34;&gt;岡山Git勉強会 20130223&lt;/a&gt; で &lt;code&gt;Git 仕組み 入門&lt;/code&gt;という話をしてきました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://togetter.com/li/460974&#34;&gt;トゥギャッター&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sekico.co/zaseki/95&#34;&gt;セキココ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;もっと簡単な内容にできるかな？っと思ってやってみたのですが、やっぱり難しめだったみたいです。
スライドだけでもある程度理解できるように細かめにつくってみました。
やりすぎた感が漂います。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;http://www.slideshare.net/slideshow/embed_code/16716062&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&#34; allowfullscreen webkitallowfullscreen mozallowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;http://www.slideshare.net/TomohikoHimura/git-16716062&#34; title=&#34;Git 仕組み 入門&#34; target=&#34;_blank&#34;&gt;Git 仕組み 入門&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/TomohikoHimura&#34; target=&#34;_blank&#34;&gt;Tomohiko Himura&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/okagit-object&#34;&gt;スライドをつくる際のメモなどもupしています。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この辺りの話を聞いたことがない方は手を動かしてみてはどうでしょうか。&lt;/p&gt;

&lt;h3 id=&#34;話し忘れたこと:43d1df66e254d4a4856c488e0588fa1e&#34;&gt;話し忘れたこと&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;日頃使うツールはしっかり理解したほうがいいと思う&lt;/li&gt;
&lt;li&gt;tree  オブジェクトに登場した mode は 666 とかよくパーミッションがどうこう言われるアレです。&lt;/li&gt;
&lt;li&gt;このあたりの仕組みが入門書に出てくるあたりも Git の魅力なだと思います。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;内容にあまり関係ないこと:43d1df66e254d4a4856c488e0588fa1e&#34;&gt;内容にあまり関係ないこと&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;keynote の機能をいろいろためした&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;もっとはやく勉強しておけばよかった。マスタースライドでスライドのテンプレートをつくっていじると、スライドのデザインをまとめていじれる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;背景色をうっすら変えてみた。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;お洒落感が出るのか試してみたかった。結果はよくわからない。
ディスプレイでみるとわかる違いはプロジェクターでわかるかどうか怪しい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;keynote で アウトラインからスライドを作ると効率よさげ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前述のマスタースライドの機能がわかっていれば、わりといけます。&lt;/p&gt;

&lt;h3 id=&#34;まとめ:43d1df66e254d4a4856c488e0588fa1e&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;話をするのは苦手で、相変わらず、反省点の多いセッションですが、話を聞いていただいてありがとうございました。良い経験になりました。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Github で Jekyll を使う時に調べたこと</title>
          <link>https://blog.eiel.info/blog/2013/02/18/jekyll-on-github/</link>
          <pubDate>Mon, 18 Feb 2013 00:46:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/02/18/jekyll-on-github/</guid>
          <description>

&lt;p&gt;Github で Jekyll を使うときにできることとか調べたので整理しておきます。
今日の成果物。
この記事をいきなりポーンと書いても仕方ない気がして前の記事を書きました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/02/17/github-pages/&#34;&gt;Github Pages について整理しておきます&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jekyll を利用するかしないかの判断材料などに利用してください。&lt;/p&gt;

&lt;p&gt;利用できる マークアップ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;Markdown&lt;/li&gt;
&lt;li&gt;Textile&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;関連する gem&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://liquidmarkup.org/&#34;&gt;liquid&lt;/a&gt;- テンプレートエンジン&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vmg/redcarpet&#34;&gt;redcarpet&lt;/a&gt; - 高機能高速動作な Markdown&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/bhollis/maruku&#34;&gt;maruku&lt;/a&gt;    - 高機能な Markdown&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rtomayko/rdiscount&#34;&gt;rdiscount&lt;/a&gt; - 高速動作な Markdown&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://redcloth.org/&#34;&gt;RedCloth&lt;/a&gt;  - Textile&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pygments.org/&#34;&gt;Pygemnts.rb&lt;/a&gt; - シンタックスハイライト&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;できること&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Layoutの利用 - ネスト可能&lt;/li&gt;
&lt;li&gt;includeの利用 - Jekyll Boostrap がかなり利用してる様子&lt;/li&gt;
&lt;li&gt;記事の作成

&lt;ul&gt;
&lt;li&gt;atom.xmlや記事一覧の作成 - site.posts 変数から参照可能&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;シンタックスハイライト&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;できなかったこと&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rubyのコードを書いて改造&lt;/li&gt;
&lt;li&gt;pluginの利用

&lt;ul&gt;
&lt;li&gt;対応するファイルのないものを自動生成&lt;/li&gt;
&lt;li&gt;拡張タグ&lt;/li&gt;
&lt;li&gt;利用できるタグの追加&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;gem を読み込んで情報源などにする&lt;/li&gt;
&lt;li&gt;Scss, Sass, Less などメタCSSの利用&lt;/li&gt;
&lt;li&gt;CoffeeScript などの利用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jekyll Bootstrap がしてること&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;include を駆使して

&lt;ul&gt;
&lt;li&gt;デファルト値を設定したり&lt;/li&gt;
&lt;li&gt;_config.yml で登録した値で分岐したり&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;プログラムをかいてカスマイズはできそうにない:c7540de9ca42c88091d7129738a9e5bd&#34;&gt;プログラムをかいてカスマイズはできそうにない&lt;/h2&gt;

&lt;p&gt;Github で Jekyll が動作する際に &lt;code&gt;--safe&lt;/code&gt; オプションがつくため _plugins ディレクトリ内のファイルは実行されませんでした。
他にコードを読ませる手段が非合法な方法を探さないとできそうにないです。&lt;/p&gt;

&lt;p&gt;知っていたら教えてください。&lt;/p&gt;

&lt;p&gt;もし Jekyll を Rubyでカスタマイズして使って、Github Pages で公開したいのであればローカルでJekyll を動かして生成されたものを push しましょう。
github の push をフックして、別のサーバで動作させるのもありかもしれません。&lt;/p&gt;

&lt;p&gt;なので、基本的には liquid redcarpet pygemnts を利用してページを作成していくことなります。&lt;/p&gt;

&lt;h2 id=&#34;jekyll:c7540de9ca42c88091d7129738a9e5bd&#34;&gt;Jekyll&lt;/h2&gt;

&lt;p&gt;Jekyll についての詳しいことは &lt;a href=&#34;http://melborne.github.com/2012/05/13/first-step-of-jekyll/&#34;&gt;30分のチュートリアルでJekyllを理解する&lt;/a&gt; という記事が非常に良いです。&lt;/p&gt;

&lt;h2 id=&#34;liquid:c7540de9ca42c88091d7129738a9e5bd&#34;&gt;liquid&lt;/h2&gt;

&lt;p&gt;テンプレートエンジンです。
タグを使用する場合は &lt;code&gt;｛｛ 変数 ｝｝&lt;/code&gt; を使い、変数を参照する場合は &lt;code&gt;｛% タグ %｝&lt;/code&gt; を使います。(エスケープできないので全角を使用)&lt;/p&gt;

&lt;p&gt;｛% 変数 %｝ でも 変数の参照ができますが、未定義の場合はエラーになります。&lt;/p&gt;

&lt;p&gt;タグには ループをする &lt;code&gt;for&lt;/code&gt; や 分岐を行う &lt;code&gt;if&lt;/code&gt; 、SSIにあるような 外部ファイルを読み込む &lt;code&gt;include&lt;/code&gt;などが使えます。
変数の利用や フィルター という文字列を加工する機能もあります。&lt;/p&gt;

&lt;p&gt;詳しいことは公式の&lt;a href=&#34;https://github.com/Shopify/liquid/wiki/Liquid-for-Designers&#34;&gt;ドキュメント&lt;/a&gt;を参照してください。&lt;/p&gt;

&lt;p&gt;変数は Hash であれば ドットでアクセスできます。&lt;/p&gt;

&lt;p&gt;カスタムタグなど作る機能は用意されれてますが、Github Pages では利用できません。&lt;/p&gt;

&lt;h2 id=&#34;redcarpet:c7540de9ca42c88091d7129738a9e5bd&#34;&gt;redcarpet&lt;/h2&gt;

&lt;p&gt;マークダウンを使う場合、選択肢がありますが、これが一番よさそうです。
C言語のライブラリ sundown のラッパーで 高速に動作し、&lt;a href=&#34;http://michelf.ca/projects/php-markdown/extra/&#34;&gt;PHP Extars&lt;/a&gt; という Markdown の拡張文法に対応しており、&lt;code&gt;_config.yml&lt;/code&gt; で、利用の可否を設定できます。&lt;/p&gt;

&lt;p&gt;例: &lt;code&gt;_config.yml&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;markdown: redcarpet
redcarpet:
  extensions: [tables,autolink,strikethrough]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;といった感じに設定できます。&lt;/p&gt;

&lt;p&gt;設定できる拡張は わかりにくいですが、 &lt;a href=&#34;https://github.com/vmg/redcarpet&#34;&gt;README&lt;/a&gt; の extensiots に書かれています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;no_intra_emphasis&lt;/li&gt;
&lt;li&gt;tables&lt;/li&gt;
&lt;li&gt;fenced_code_blocks&lt;/li&gt;
&lt;li&gt;autolink&lt;/li&gt;
&lt;li&gt;strikethrough&lt;/li&gt;
&lt;li&gt;lax_spacing&lt;/li&gt;
&lt;li&gt;space_after_headers&lt;/li&gt;
&lt;li&gt;superscript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;があります。&lt;/p&gt;

&lt;h2 id=&#34;pygemnts:c7540de9ca42c88091d7129738a9e5bd&#34;&gt;pygemnts&lt;/h2&gt;

&lt;p&gt;シンタックスハイライトをするためのものです。&lt;/p&gt;

&lt;p&gt;対応言語は&lt;a href=&#34;http://pygments.org/languages/&#34;&gt;ここ&lt;/a&gt;に書かれています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  ```ruby
  def hoge
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
のように使用します。

## Jekyll Bootstrap

Jekyll Bootstrap は「まずはじめたい。」ときにも良いですし、参考にしても役に経ちます。素のJekyll からはじめたい場合は参考になります。

## その他

動作確認をする場合は `_config.yml` に

```yaml
safe: true
lsi: false
pygments: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と、書いておき、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ jekyll --auto --server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;として、ブラウザで確認するのがよいです。
&lt;code&gt;jekyll bootstrap&lt;/code&gt;や&lt;code&gt;Octopress&lt;/code&gt; には &lt;code&gt;rake preview&lt;/code&gt; があります。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:c7540de9ca42c88091d7129738a9e5bd&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;冒頭にまとめてます。&lt;/p&gt;

&lt;p&gt;Jekyll とか liquid のソースコード読んでみたけど、カスタマイズの仕方もわかったけど、Github Pages 上で動かす分には無意味になった。&lt;/p&gt;

&lt;p&gt;Jekyllをローカルで走らせるか、Scssなどはpushする前に自分で変換する。などの手法をとることになります。
この辺を自動化しているのが &lt;a href=&#34;http://octopress.org/&#34;&gt;Octopress&lt;/a&gt; になります。&lt;/p&gt;

&lt;p&gt;蛇足ですが Jekyll の同様のツールで Haskellでカスタマイズする &lt;a href=&#34;http://jaspervdj.be/hakyll/&#34;&gt;Hakyll&lt;/a&gt; というものもあります。
Jekyll はある程度ルールがありますが、 Hakyll はもっと自由度が高いツールになります。&lt;/p&gt;

&lt;h2 id=&#34;関連:c7540de9ca42c88091d7129738a9e5bd&#34;&gt;関連&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/02/06/how-to-use-github/&#34;&gt;Git がわからなくても Github を利用しよう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/02/17/github-pages/&#34;&gt;Github Pages について整理しておきます&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Github Pages について整理しておきます</title>
          <link>https://blog.eiel.info/blog/2013/02/17/github-pages/</link>
          <pubDate>Sun, 17 Feb 2013 22:39:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/02/17/github-pages/</guid>
          <description>

&lt;p&gt;Git の練習を兼ねて Github できることといえばひとつとして &lt;a href=&#34;http://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt; があります。
ウェブサイトを Git で管理して、Github へ プッシュすれば公開できるというものです。&lt;/p&gt;

&lt;p&gt;使い方などは &lt;a href=&#34;https://help.github.com/tags/20/articles&#34;&gt;公式のヘルプ&lt;/a&gt;に書かれていますが自分が Github Pages を使おうとした時に知りたかったことを整理しておきます。
細かいことについてはあまり書きません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Github Pages の特徴&lt;/li&gt;
&lt;li&gt;Github Pages の種類

&lt;ul&gt;
&lt;li&gt;ユーザぺージ または グループページ&lt;/li&gt;
&lt;li&gt;プロジェクトページ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Github Pages の構築方法

&lt;ul&gt;
&lt;li&gt;Jekyll&lt;/li&gt;
&lt;li&gt;静的ファイル&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;独自ドメインの利用&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;github-pages-の特徴:a84c94e8af05d534511e157f48c1577d&#34;&gt;Github Pages の特徴&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;公開リポジトリで作れば無料。容量制限もないと言ってよいです。&lt;/li&gt;
&lt;li&gt;CGI,PHPなどで動的ページは生成できません。

&lt;ul&gt;
&lt;li&gt;代わりに Jekyll というアプリケーションを使い github にページを生成させることができる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;github-pages-の種類:a84c94e8af05d534511e157f48c1577d&#34;&gt;Github Pages の種類&lt;/h2&gt;

&lt;p&gt;Github Pages には 2種類あります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ユーザページ または グループページ&lt;/li&gt;
&lt;li&gt;プロジェクトページ&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ユーザページ-グループページ:a84c94e8af05d534511e157f48c1577d&#34;&gt;ユーザページ グループページ&lt;/h3&gt;

&lt;p&gt;ユーザページ と グループページは同じ機能と言えるので同じものと考えてください。&lt;/p&gt;

&lt;p&gt;ユーザページはアカウントにひとつだけ作れる Github Pages になります。
グルーページは Github には Organization という グループを作る機能があります。
正確には &lt;code&gt;Organization Pages&lt;/code&gt; ですが、グループページと呼びます。グループページもひとつだけ作れます。&lt;/p&gt;

&lt;p&gt;このユーザページは http://&lt;code&gt;アカウント名&lt;/code&gt;.github.com というアドレスでアクセスできるウェブサイトを作ることができます
。私の場合 アカウント名が &lt;code&gt;eiel&lt;/code&gt; なので &lt;a href=&#34;http://eiel.github.com&#34;&gt;http://eiel.github.com&lt;/a&gt; になります。(作ってません)&lt;/p&gt;

&lt;p&gt;グループも同じで hiroshimarb というアカウントのグループがあるのので &lt;a href=&#34;http://hiroshimarb.github.com&#34;&gt;http://hiroshimarb.github.com&lt;/a&gt; となります。
こちらは作っているのでこちらを例にしていきます。&lt;/p&gt;

&lt;p&gt;このページを作るには、 &lt;a href=&#34;https://github.com/hiroshimarb/hiroshimarb.github.com&#34;&gt;hiroshimarb.github.com&lt;/a&gt; という リポジトリを作ります。&lt;/p&gt;

&lt;p&gt;このリポジトリの &lt;strong&gt;master&lt;/strong&gt; ブランチがウェブサイトになります。&lt;/p&gt;

&lt;p&gt;自動生成機能はなく、自分で構築することになります。&lt;/p&gt;

&lt;h3 id=&#34;プロジェクトページ:a84c94e8af05d534511e157f48c1577d&#34;&gt;プロジェクトページ&lt;/h3&gt;

&lt;p&gt;こちらは リポジトリ用のページ作成をする機能です。
リポジトリごとに作れます。&lt;/p&gt;

&lt;p&gt;アドレスは &lt;code&gt;http://アカウント名.github.com/リポジトリ名/&lt;/code&gt; となります。
ユーザページのサブディレクトリに構築されます。&lt;/p&gt;

&lt;p&gt;Hiroshimarb の &lt;a href=&#34;https://github.com/hiroshimarb/hiroshimarb-gem&#34;&gt;Hiroshimarb-gem&lt;/a&gt; というリポジトリのページは &lt;a href=&#34;http://hiroshimarb.github.com/hiroshimarb-gem/&#34;&gt;http://hiroshimarb.github.com/hiroshimarb-gem/&lt;/a&gt;になります。&lt;/p&gt;

&lt;p&gt;これは、&lt;code&gt;hiroshimarb-gem&lt;/code&gt; リポジトリの &lt;strong&gt;gh-pages&lt;/strong&gt; ブランチがウェブサイトになります。&lt;/p&gt;

&lt;p&gt;ユーザページとは違う点として 自動生成する機能があり、内容をウェブ上で入力して、レイアウトを選択することで作成することもできます。
自分で構築することもできます。&lt;/p&gt;

&lt;p&gt;自動生成するには、 リポジトリの設定画面にいくと、Options に Github Pages という項目があるので、&lt;code&gt;Automatic Page Generator&lt;/code&gt;をクリックして指示どおりすすめていくと作ることができます。&lt;/p&gt;

&lt;p&gt;この自動生成されたページは Jekyll が使用されています。&lt;/p&gt;

&lt;h2 id=&#34;github-pages-の構築方法:a84c94e8af05d534511e157f48c1577d&#34;&gt;Github Pages の構築方法&lt;/h2&gt;

&lt;p&gt;何度か出てきましたが、Github Pages を使って公開するウェブサイトを構築する方法は大きく分けて二通りあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jekyll を使う&lt;/li&gt;
&lt;li&gt;Jekyll を使わない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;です。&lt;/p&gt;

&lt;h3 id=&#34;jekyll-を使う:a84c94e8af05d534511e157f48c1577d&#34;&gt;Jekyll を使う&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; を使う場合は markdown 形式や textile 形式のファイルを書いて push すれば、Github が HTML へ変換してくれます。
レイアウトなどの機能も備えているので 重複を抑えつつページを作成することができます。&lt;/p&gt;

&lt;p&gt;ユーザぺージで、Jekyllを使う場合、デザインしたり、RSSを配信したりするのは少し手間がかかります。
楽をしたい場合は、&lt;a href=&#34;http://jekyllbootstrap.com/&#34;&gt;Jekyll Bootstrap&lt;/a&gt;などを使うある程度設定された状態と Jekyll を利用できます。&lt;/p&gt;

&lt;p&gt;一応、もう一度書いておきますが、ユーザページなら master ブランチ、プロジェクトページなら gh-pages ブランチ にpush した内容が使われます。&lt;/p&gt;

&lt;h3 id=&#34;jekyll-を使わない場合はさらに細分化できます:a84c94e8af05d534511e157f48c1577d&#34;&gt;Jekyll を使わない場合はさらに細分化できます。&lt;/h3&gt;

&lt;p&gt;Jekyll を使わない場合は、ユーザページの master ブランチ、プロジェクトページなら gh-pages ブランチ の内容がそのまま公開されます。&lt;/p&gt;

&lt;p&gt;なので、HTMLを書いてコミットして push すれば 普通のウェブサーバの様に利用することができます。&lt;/p&gt;

&lt;p&gt;動的にページを生成することはできないので、JavaScriptなどで工夫したり、ローカルマシンで Jekyll などを動かして生成したページをコミットして使うという方法もよくされています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://octopress.org/&#34;&gt;Octopress&lt;/a&gt; というツールがよく使われていますが、これはローカルマシンで Jekyll を動かしページを生成して、自動的にコミット、プッシュします。
同様のツールはいくつかありますが、ここでは紹介しません。&lt;/p&gt;

&lt;p&gt;この方法の良いところはやりたい放題できることでしょう。Githubで動く Jekyll はplugin が利用できないなど、制限があります。&lt;/p&gt;

&lt;p&gt;しかし、 Git の練習はできません。&lt;/p&gt;

&lt;h2 id=&#34;独自ドメインの使用:a84c94e8af05d534511e157f48c1577d&#34;&gt;独自ドメインの使用&lt;/h2&gt;

&lt;p&gt;使用したいドメインを &lt;code&gt;CNAME&lt;/code&gt; というファイルに書いておいて、 DNSを設定をして,Githubを参照するようにすれば独自ドメインが利用できます。
DNSの設定方法にについてはここには書きません。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:a84c94e8af05d534511e157f48c1577d&#34;&gt;まとめ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Github Pages を使ってみたいなら ユーザページを試してみましょう。&lt;/li&gt;
&lt;li&gt;プロジェクトのサイトを簡単に作れます。成熟してるプロジェクトは試してみましょう。&lt;/li&gt;
&lt;li&gt;CGI、PHPの動かない Webサーバとして使えます。&lt;/li&gt;
&lt;li&gt;Blog を作りたいなら Jekyll Bootstrap か Octopress を試してみましょう。

&lt;ul&gt;
&lt;li&gt;Git を使う練習を兼ねたいなら Jekyll Bootstrap のほうがおすすめです。&lt;/li&gt;
&lt;li&gt;複数人で変更する可能性がある場合も Jekyll がよいです。&lt;/li&gt;
&lt;li&gt;Scss などメタCSSを使いたいなら Octopress のほうが良いです。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;説明してない結論がありますが、気にしないでください。&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=eiel-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=477416366X&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;関連:a84c94e8af05d534511e157f48c1577d&#34;&gt;関連&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/02/06/how-to-use-github/&#34;&gt;Git がわからなくても Github を利用しよう&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>tmux で copy-mode でのキーバインドについて</title>
          <link>https://blog.eiel.info/blog/2013/02/17/tmux-copy-mode/</link>
          <pubDate>Sun, 17 Feb 2013 12:45:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/02/17/tmux-copy-mode/</guid>
          <description>&lt;p&gt;tmuxのコピーモードでのキーバインドはデフォルトで emacs like になっています。&lt;/p&gt;

&lt;p&gt;なぜか、一部のマシンでのみ vi like になってたので、&lt;code&gt;man tmux&lt;/code&gt; をみてみた。
&amp;gt;  the default is emacs, unless VISUAL or EDITOR contains ‘vi’.&lt;/p&gt;

&lt;p&gt;デフォルトは emacs だけど環境変数 VISUAL か EDITOR に &amp;lsquo;vi&amp;rsquo; を含んでいれば vi like になるそうです。&lt;/p&gt;

&lt;p&gt;環境変数に影響されずに固定したい場合は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set-window-option -g mode-keys emacs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とか&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set-window-option -g mode-keys vi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とか、書いておきましょう。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>よりよい開発者になるために CodeKata</title>
          <link>https://blog.eiel.info/blog/2013/02/13/codekata/</link>
          <pubDate>Wed, 13 Feb 2013 16:08:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/02/13/codekata/</guid>
          <description>&lt;p&gt;github の News Feed みてたら codekata というのがあって、なんだっけと思いつつ調べたら&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;情熱プログラマという本 （ &lt;a href=&#34;http://amzn.to/d6zjDE&#34;&gt;http://amzn.to/d6zjDE&lt;/a&gt; ) を読んでいる。&lt;/p&gt;

&lt;p&gt;そこにこんなことが書いてあった。&lt;/p&gt;

&lt;p&gt;プログラマはしばしば実務の中でスキルを訓練する。
これがミュージシャンだったらどうだろう？ 彼らがステージ上で変な音を出しながら練習していたら、観客はどう思う？ 練習は、観客のいない密室で、自分の時間を使ってするべきだ。プログラマもそれと同じだ。&lt;/p&gt;

&lt;p&gt;なるほど、それはその通りだ。で、この本にプログラミングの訓練の手がかりが紹介されている。
それが「Code Kata ( &lt;a href=&#34;http://codekata.pragprog.com/&#34;&gt;http://codekata.pragprog.com/&lt;/a&gt; )」 だ。&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Kata&amp;rdquo;とは、空手の型のこと。
空手の練習は、定められた型を繰り返し反復することで技術を習得していく。
それと同様のコンセプトで、型を訓練し、ソフトウェア開発のスキルを磨きましょう、というものだそうな。&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&amp;ndash; 言葉をポッケに持ち歩こう&lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;なるほど。日々の基礎練習が大切なんですね。&lt;/p&gt;

&lt;p&gt;ということで forkして &lt;a href=&#34;https://github.com/eiel/haskell_codekata&#34;&gt;codekata for haskell&lt;/a&gt; はじめました。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>読書メモ 関数プログラミング入門 Haskellで学ぶ原理と技法 1.7 仕様</title>
          <link>https://blog.eiel.info/blog/2013/02/12/intro-functional-1-dot-7/</link>
          <pubDate>Tue, 12 Feb 2013 23:33:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/02/12/intro-functional-1-dot-7/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://www.amazon.co.jp/gp/product/427406896X/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=427406896X&amp;amp;linkCode=as2&amp;amp;tag=eiel-22&#34;&gt;関数プログラミング入門 Haskell で学ぶ原理と技法&lt;/a&gt; の読書メモです。引用もしていますし、感想なども混ぜています。&lt;/p&gt;

&lt;p&gt;本節は&lt;strong&gt;仕様&lt;/strong&gt;についてです。&lt;/p&gt;

&lt;p&gt;仕様と実装の関係について、語られます。
仕様はやりたいこと、実装は実現方法。
そんな感じのことがかかれています。&lt;/p&gt;

&lt;p&gt;関数の仕様を表明し、そのやりかたとして引数と戻り値の組を用意する。
単純な実装を行い、よりよい実装にしていく方法が良いとされてます。&lt;/p&gt;

&lt;p&gt;すごくBDD感漂うRspec的な手法が勧められていますね。&lt;/p&gt;

&lt;p&gt;この手法の難しい点は、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;仕様が利用者の要求とずれてしまうかも。&lt;/li&gt;
&lt;li&gt;仕様を満たすための検証が膨大になりすぎて証明が大変&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ということです。非常に身に覚えがあります。&lt;/p&gt;

&lt;h2 id=&#34;練習問題:e7079363f43b9581a2da49b8823b543f&#34;&gt;練習問題&lt;/h2&gt;

&lt;p&gt;あまりおもしろくない解答をかきました。うーん。面白いの考えたい。&lt;/p&gt;

&lt;h2 id=&#34;ついでに1章のまとめ:e7079363f43b9581a2da49b8823b543f&#34;&gt;ついでに1章のまとめ。&lt;/h2&gt;

&lt;p&gt;一度、読書メモを本気でやってみようと思っていたのではじめてみましたが、思うよりもずっとずっと大変でしたが、関数プログラミングに対する基礎知識がグッと固いものになったと感じてます。&lt;/p&gt;

&lt;p&gt;通し読みせずにやっているので、読み終わるのはいつになるのでしょうか。&lt;/p&gt;

&lt;p&gt;これからもがんばってできる限り続けていきたいです。&lt;/p&gt;

&lt;h2 id=&#34;関連:e7079363f43b9581a2da49b8823b543f&#34;&gt;関連&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/Introduction-to-Functional-Programming-using-Haskell/blob/master/1/index.org&#34;&gt;メモ用のリポジトリ 1章&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/Introduction-to-Functional-Programming-using-Haskell/blob/master/1/1.7.hs&#34;&gt;1.6の練習問題&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Cucumber のフィーチャの文法 - Gherkin</title>
          <link>https://blog.eiel.info/blog/2013/02/12/gherkin/</link>
          <pubDate>Tue, 12 Feb 2013 14:13:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/02/12/gherkin/</guid>
          <description>

&lt;p&gt;Cucumber 利用していますか？&lt;/p&gt;

&lt;p&gt;基本的な使い方はわかるんだけど、なんだかもっと上手く使えるんじゃないだろうか？と、もやもやしながら使っています。
少くとも私の周りには Cucumber について情報交換できる人がいないです。&lt;/p&gt;

&lt;p&gt;それでも、SlideShare や Speaker Deck なんかに公開されたスライドでよくみかけるので、使い込んでるところでは使い込まれているのだと思います。&lt;/p&gt;

&lt;p&gt;Cucumber は Rails プロジェクト以外でも利用されているようで、範囲が広いです。もうちょっといろんな情報がWeb上に流れていても良い気がします。&lt;/p&gt;

&lt;p&gt;私が知る限りでは Cucumber についてもっと詳しく書かれているのは &lt;a href=&#34;http://www.amazon.co.jp/gp/product/4798121932/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=4798121932&amp;amp;linkCode=as2&amp;amp;tag=eiel-22&#34;&gt;The Rspec Book&lt;/a&gt; です。&lt;/p&gt;

&lt;p&gt;前置きはさておき、 Cucumber の &lt;code&gt;*.feature&lt;/code&gt; は &lt;a href=&#34;https://github.com/cucumber/cucumber/wiki/Gherkin&#34;&gt;Gherkin&lt;/a&gt; という 言語で書きます。
その文法について調べたのでそのメモを整理しておきます。&lt;/p&gt;

&lt;p&gt;ちなみにこの内容はソース読んだり、Wikiに書かれているものを参考したもので、仕様として記述されてない情報もあるので未来のバージョンでは予告なく変更される部分があるかもしれません。&lt;/p&gt;

&lt;p&gt;こんな長くて不正確な記事読みたくないよ!という人は &lt;a href=&#34;https://github.com/cucumber/gherkin/wiki/BNF&#34;&gt;BNF&lt;/a&gt; を読むのが手っ取りです。
というか、BNFが読める人は読みましょう。
むしろ、もっとはやく読めばよかった。&lt;/p&gt;

&lt;h2 id=&#34;具体例:86b43392d5d2f5c8a8f67644afbfc1cc&#34;&gt;具体例&lt;/h2&gt;

&lt;p&gt;Gherukinのという言語で書いた文書の例を上げておきます。
内容はシステムに関するものにしませんでした。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;# language: ja
@blog
フィーチャ: ブログを書く
  ブログを書くには本人のやる気と書く時間が必要です。
  アウトプットは次のインプットに繋がるので積極的に行なうべきです。

  # これはコメントでタグの後にはかけない
  # @ではじまるのはタグ
  @good
  シナリオ: ブログが書ける
    ブログが書ける場合はやる気と時間があるのです。

    # ネタがないとかけないです。
    前提 ネタがある
    # 時間がないとかけないです
    かつ 納期に終われていない
    # 先輩とかいないですけど
    もし 先輩にブログを書けと言われた
    # オチがない
    ならば ブログが書けている

  @bad
  シナリオ: デスマ中はブログが書けない
     デスマ中ダトソレドコロジャナインダ!!

     前提 ネタがある
     かつ デスマ中
     もし 先輩にブログを書けと言われた
     ならば ブログが書けていない
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/gherkin.png&#34; width=&#34;400&#34; height=&#34;290&#34; /&gt;&lt;/p&gt;

&lt;p&gt;見てわかるように、ほぼ自然言語の雰囲気を残せます。
&lt;strong&gt;これならプログラマ以外の人でも読み書きできそうだよね。&lt;/strong&gt;
ってのがウリです。&lt;/p&gt;

&lt;h2 id=&#34;要素:86b43392d5d2f5c8a8f67644afbfc1cc&#34;&gt;要素&lt;/h2&gt;

&lt;p&gt;Gherkin は以下の要素で構成されます。
&lt;small&gt;ここでは要素と呼んでますが、トークンの一部を抜粋しただけです。&lt;/small&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;コメント&lt;/li&gt;
&lt;li&gt;タグ&lt;/li&gt;
&lt;li&gt;フィーチャ&lt;/li&gt;
&lt;li&gt;バックグラウンド&lt;/li&gt;
&lt;li&gt;シナリオ&lt;/li&gt;
&lt;li&gt;シナリオテンプレート&lt;/li&gt;
&lt;li&gt;例&lt;/li&gt;
&lt;li&gt;ステップ&lt;/li&gt;
&lt;li&gt;ドックストリング&lt;/li&gt;
&lt;li&gt;表&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;トップダウンに説明していきます。説明する前の用語がでてきますが、一通り読んでもどってくると良いです。&lt;/p&gt;

&lt;h2 id=&#34;ファイル構成:86b43392d5d2f5c8a8f67644afbfc1cc&#34;&gt;ファイル構成&lt;/h2&gt;

&lt;p&gt;Gherkin では ひとつのファイルにひとつの&lt;code&gt;フィーチャ&lt;/code&gt;しか記述できません。
なので全体像としては&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;コメント&lt;/code&gt; (省略可能)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;タグ&lt;/code&gt; (省略可能)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;フィーチャ&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;となります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;タグ&lt;/code&gt;と&lt;code&gt;コメント&lt;/code&gt;の順番は入れかえることはできません。&lt;/p&gt;

&lt;p&gt;具体的には:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;# comment
@tag
フィーチャ: フィーチャ名
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;コメント:86b43392d5d2f5c8a8f67644afbfc1cc&#34;&gt;コメント&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;#&lt;/code&gt; ではじまる行は コメント&lt;code&gt;になります。
&lt;/code&gt;#` の前に空白があっても構いません。&lt;/p&gt;

&lt;p&gt;プログラミング言語にあるような&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;@blog      # comment
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようなことは&lt;strong&gt;できません。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;先頭にある &lt;code&gt;language: ja&lt;/code&gt;
は特殊な&lt;code&gt;コメント&lt;/code&gt;でこのファイルで使用するキーワードの言語を指定します。
&lt;code&gt;フィーチャ&lt;/code&gt; や &lt;code&gt;シナリオ&lt;/code&gt;,&lt;code&gt;前提&lt;/code&gt;、&lt;code&gt;かつ&lt;/code&gt;などがキーワードです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;コメント&lt;/code&gt;は書けるところがわりと限られてます。&lt;/p&gt;

&lt;h2 id=&#34;タグ:86b43392d5d2f5c8a8f67644afbfc1cc&#34;&gt;タグ&lt;/h2&gt;

&lt;p&gt;@ではじまる単語は タグになります。
1行に複数かくこともできますし、複数行にわたってかくこともできます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;@blog @hoge
@mogu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;フィーチャ&lt;/code&gt;や&lt;code&gt;シナリオ&lt;/code&gt;の前で書けます。&lt;/p&gt;

&lt;h2 id=&#34;フィーチャ:86b43392d5d2f5c8a8f67644afbfc1cc&#34;&gt;フィーチャ&lt;/h2&gt;

&lt;p&gt;このファイルに記述する&lt;code&gt;フィーチャ&lt;/code&gt;(機能)に関して記述します。
言語に日本語を利用している場合は
&lt;code&gt;フィーチャ:&lt;/code&gt; または  &lt;code&gt;機能:&lt;/code&gt;ではじまります。
つづけてその後ろには、その&lt;code&gt;フィーチャ&lt;/code&gt;の名前をかきます。&lt;/p&gt;

&lt;p&gt;次の行には&lt;code&gt;フィーチャ&lt;/code&gt;に関する説明をかくことができます。
説明はだいたい好きなように書けます。
それ以降には&lt;code&gt;バックグラウンド&lt;/code&gt;と&lt;code&gt;シナリオ&lt;/code&gt;を n個かくことができます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;フィーチャ&lt;/code&gt;: 名前

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;説明&lt;/code&gt;(省略可能)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;バックグラウンド&lt;/code&gt;(省略可能)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;シナリオ1&lt;/code&gt; or &lt;code&gt;シナリオアウトライン&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;シナリオ2&lt;/code&gt; or &lt;code&gt;シナリオアウトライン&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;.&lt;/li&gt;
&lt;li&gt;.&lt;/li&gt;
&lt;li&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;シナリオn&lt;/code&gt; or &lt;code&gt;シナリオアウトライン&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;フィーチャ&lt;/code&gt;と&lt;code&gt;説明&lt;/code&gt;の間には空行は置けますが&lt;code&gt;コメント&lt;/code&gt;などは書けません。
具体的には:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;フィーチャ: フィーチャ名
  フィーチャの説明

  バックグラウンド:
     前提 なにかがある

  シナリオ: シナリオ名
    .
    .
    .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のような感じです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;フィーチャ: hoge
  説明
  # comment
  説明
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などはエラーになります。&lt;/p&gt;

&lt;h2 id=&#34;バックグラウンド:86b43392d5d2f5c8a8f67644afbfc1cc&#34;&gt;バックグラウンド&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;フィーチャ&lt;/code&gt;内の&lt;code&gt;シナリオ&lt;/code&gt;の前に実行したい&lt;code&gt;ステップ&lt;/code&gt;をかくことができます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;背景: 名前

&lt;ul&gt;
&lt;li&gt;ステップ1&lt;/li&gt;
&lt;li&gt;ステップ2&lt;/li&gt;
&lt;li&gt;.&lt;/li&gt;
&lt;li&gt;.&lt;/li&gt;
&lt;li&gt;.&lt;/li&gt;
&lt;li&gt;ステップn&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という構造になります。&lt;/p&gt;

&lt;h2 id=&#34;シナリオ:86b43392d5d2f5c8a8f67644afbfc1cc&#34;&gt;シナリオ&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;シナリオ&lt;/code&gt;はひとつのテストになります。
&lt;code&gt;シナリオ&lt;/code&gt;はステップを複数持っていて、&lt;code&gt;ステップ&lt;/code&gt;の途中で失敗するとシナリオは失敗したことになります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;シナリオ&lt;/code&gt;も&lt;code&gt;フィーチャ&lt;/code&gt;と同様に説明が書けます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;コメント&lt;/code&gt; (省略可能)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;タグ&lt;/code&gt;(省略可能)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;シナリオ&lt;/code&gt;: 名前

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;説明&lt;/code&gt; (省略可能)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ステップ1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ステップ2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;.&lt;/li&gt;
&lt;li&gt;.&lt;/li&gt;
&lt;li&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ステップn&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という構造になります。&lt;/p&gt;

&lt;h2 id=&#34;シナリオアウトライン:86b43392d5d2f5c8a8f67644afbfc1cc&#34;&gt;シナリオアウトライン&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;シナリオ&lt;/code&gt;の重複を減らすためには&lt;code&gt;シナリオアウトライン&lt;/code&gt;を使うことができます。
シナリオ内に変数を埋めこんで、最後に変数に代入する値を&lt;code&gt;例&lt;/code&gt;として明示することで、&lt;code&gt;シナリオ&lt;/code&gt;になります。
変数は &lt;code&gt;&amp;lt;変数名&amp;gt;&lt;/code&gt;として表現できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;コメント(省略可能)&lt;/li&gt;
&lt;li&gt;タグ(省略可能)&lt;/li&gt;
&lt;li&gt;シナリオアウトライン: 名前

&lt;ul&gt;
&lt;li&gt;説明&lt;/li&gt;
&lt;li&gt;ステップ1&lt;/li&gt;
&lt;li&gt;ステップ2&lt;/li&gt;
&lt;li&gt;.&lt;/li&gt;
&lt;li&gt;.&lt;/li&gt;
&lt;li&gt;.&lt;/li&gt;
&lt;li&gt;ステップn&lt;/li&gt;
&lt;li&gt;例:&lt;/li&gt;
&lt;li&gt;表&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体例をあげておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;シナリオアウトライン: &amp;lt;種類&amp;gt;が書ける
  &amp;lt;種類&amp;gt;が書ける場合はやる気と時間があるのです。

  前提 ネタがある
  かつ 納期に終われていない
  もし &amp;lt;人&amp;gt;に&amp;lt;種類&amp;gt;を書けと言われた
  ならば &amp;lt;種類&amp;gt;が書けている
  例:
    | 種類   | 人   |
    | ブログ | 先輩 |
    | 資料   | 営業 |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例の表の 1行目は変数名に対応しますが、Gherkinというより Cucumber の部分になる気がします。
2行目に具体的な値を書きます。&lt;/p&gt;

&lt;p&gt;ブログ が &amp;lt;種類&amp;gt; の部分に、先輩 が &amp;lt;人&amp;gt; の部分に 展開されます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;シナリオアウトライン&lt;/code&gt;の代わりに &lt;code&gt;シナリオテンプレート&lt;/code&gt; なども使えます&lt;/p&gt;

&lt;p&gt;詳細は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cucumber --i18n ja
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ステップ:86b43392d5d2f5c8a8f67644afbfc1cc&#34;&gt;ステップ&lt;/h2&gt;

&lt;p&gt;先頭が&lt;code&gt;前提&lt;/code&gt; &lt;code&gt;もし&lt;/code&gt; &lt;code&gt;ならば&lt;/code&gt; などの部分です。
Cucumberでは対応する コード が実行されます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;コメント&lt;/code&gt; (省略可能)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ステップキーワード&lt;/code&gt;: 名前

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ドックストリング&lt;/code&gt; もしくは &lt;code&gt;表&lt;/code&gt; (省略可能)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という構造になります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ステップキーワード&lt;/code&gt;には&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;前提 (given)&lt;/li&gt;
&lt;li&gt;もし (when)&lt;/li&gt;
&lt;li&gt;ならば (then)&lt;/li&gt;
&lt;li&gt;かつ (and)&lt;/li&gt;
&lt;li&gt;しかし (but)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などがあります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;*&lt;/code&gt; というのもありまして:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* ネタがある
* 納期に終われていない
* 先輩にブログを書けと言われた
* ならば ブログが書けている
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とかいても等価です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cucumber --i18n ja
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なども確認してみてください&lt;/p&gt;

&lt;h2 id=&#34;ドックストリング:86b43392d5d2f5c8a8f67644afbfc1cc&#34;&gt;ドックストリング&lt;/h2&gt;

&lt;p&gt;ステップに長い文字列を渡したい場合に利用します。
&lt;code&gt;&#39;&#39;&#39;&lt;/code&gt;(クオート3つ)で挟むことでドックストリングになります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;前提 ネタがある
   &#39;&#39;&#39;
   デスマ神がほげほげ
   ネコ型の何かがもぐもぐ
   &#39;&#39;&#39;
かつ 納期に終われていない
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすると &amp;ldquo;ネタがある&amp;rdquo; &lt;code&gt;ステップ&lt;/code&gt;ヘ &amp;ldquo;デスマ神がほげ…もぐもぐ&amp;rdquo; という文字列を渡すことができます。&lt;/p&gt;

&lt;h2 id=&#34;表:86b43392d5d2f5c8a8f67644afbfc1cc&#34;&gt;表&lt;/h2&gt;

&lt;p&gt;表は &amp;ldquo;&lt;code&gt;シナリオアウトライン&lt;/code&gt;の例&amp;rdquo; と &amp;ldquo;&lt;code&gt;ステップ&lt;/code&gt;への引数として表を使いたい&amp;rdquo; 場合に利用できます。&lt;/p&gt;

&lt;p&gt;表は&lt;code&gt;|&lt;/code&gt;(パイプ)を利用してAscii Art で表を書きます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;シナリオアウトライン&lt;/code&gt;についてはもう書いているので省きます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ステップ&lt;/code&gt;で使用すると &lt;code&gt;Cucumber::Ast::Table&lt;/code&gt; というクラスのインスタンスが渡されます。ステップの実装で煮るなり焼くなりしあしょう。&lt;/p&gt;

&lt;p&gt;一応具体例:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34;&gt;前提 なにかある
  | 1 | 2 |
  | 3 | 4 |
もし なにかする
  | 1 | 2 | 3 |
  | 4 | 5 | 6 |
ならば こういう結果になる
  | 7 | 8 | 9 | 10 |
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;インデントについて:86b43392d5d2f5c8a8f67644afbfc1cc&#34;&gt;インデントについて&lt;/h2&gt;

&lt;p&gt;インデント自体に意味はありませんが適切につけておくと読みやすいです。cucumberで実行した場合は自動的に整形されます。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:86b43392d5d2f5c8a8f67644afbfc1cc&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;無駄に時間がかかりました。何かの役に立てば良いなぁ。
途中で対象読者を意識してないことに絶望していろいろブレてます。&lt;/p&gt;

&lt;p&gt;間違いなどあればご連絡ください。&lt;/p&gt;

&lt;p&gt;仕事してきます。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>読書メモ 関数プログラミング入門 Haskellで学ぶ原理と技法 1.6 仕様</title>
          <link>https://blog.eiel.info/blog/2013/02/11/intro-functional-1-dot-6/</link>
          <pubDate>Mon, 11 Feb 2013 16:11:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/02/11/intro-functional-1-dot-6/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://www.amazon.co.jp/gp/product/427406896X/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=427406896X&amp;amp;linkCode=as2&amp;amp;tag=eiel-22&#34;&gt;関数プログラミング入門 Haskell で学ぶ原理と技法&lt;/a&gt; の読書メモです。引用もしていますし、感想なども混ぜています。&lt;/p&gt;

&lt;p&gt;本節は&lt;strong&gt;型&lt;/strong&gt;についてです。強い型付けがよくわからなくて悩みました。&lt;/p&gt;

&lt;p&gt;内容は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;型の基本と強い型付け&lt;/li&gt;
&lt;li&gt;多相型&lt;/li&gt;
&lt;li&gt;型クラス&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といった感じです&lt;/p&gt;

&lt;h2 id=&#34;型の基本と強い型付け:af683e4c3eedf289586ccacebb20a44c&#34;&gt;型の基本と強い型付け&lt;/h2&gt;

&lt;p&gt;値は型という集まりに分類することができて、様々な型があります。 &lt;code&gt;Int&lt;/code&gt;, &lt;code&gt;Float&lt;/code&gt;, &lt;code&gt;Integer&lt;/code&gt;,リスト…などなど。&lt;/p&gt;

&lt;p&gt;既存の型を組合せて新しい型も作れます。 &lt;code&gt;(Int, Int)&lt;/code&gt;, &lt;code&gt;Int -&amp;gt; Int&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;型固有に演算があり、違う型に利用することは無意味です。意味がないので不当な式となります。&lt;/p&gt;

&lt;p&gt;式であれば、必ず型があり、その型は式を構成する要素から推論できます。構成要素から型が決定できるので強い型付けになるようです。(ここがはっきりしなくて悩んだ)
弱い型つけの場合は暗黙のキャストなどにより実行してみないとわからない部分があるようです。&lt;/p&gt;

&lt;p&gt;強い型付けの利点は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;つづりミスや混乱した定義をコンパイル時点で発見できる&lt;/li&gt;
&lt;li&gt;プログラムを書く際のルールになる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;だそうです。&lt;/p&gt;

&lt;p&gt;引数や結果の型を考えることで型レベルの整合性を保ち、その中で値をやりくりするので、型の枠から外れることも防ぐことができて、明瞭なプログラム設計ができるようです。&lt;/p&gt;

&lt;h2 id=&#34;多相型:af683e4c3eedf289586ccacebb20a44c&#34;&gt;多相型&lt;/h2&gt;

&lt;p&gt;式の型は 構成要素から決定できますが、関数合成や和や積などは複数の型に対して利用できているように見えます。これは型変数を利用することでこのような定義ができます。&lt;/p&gt;

&lt;p&gt;「それって強い型付けなの？」という疑問に教われるのですが、型変数を含んでいても型なので問題がないようです。
曖昧であれば不正な式になるのだと思います。その場合は推論に任せず型指定をすることになります。&lt;/p&gt;

&lt;p&gt;このように型変数を含む型を多相型と呼びます。&lt;/p&gt;

&lt;p&gt;おまけで (-&amp;gt;) は 型演算子 だそうで、右結合だそうです。&lt;code&gt;Int -&amp;gt; Int&lt;/code&gt; は &lt;code&gt;-&amp;gt;&lt;/code&gt; で演算して新しい型を作るとも言えます。
型式というものがありそうですが説明されてません。&lt;/p&gt;

&lt;h2 id=&#34;型クラス:af683e4c3eedf289586ccacebb20a44c&#34;&gt;型クラス&lt;/h2&gt;

&lt;p&gt;和や積をするつあめの &lt;code&gt;(+)&lt;/code&gt;, &lt;code&gt;(*)&lt;/code&gt; がありますがこれを型変数で定義するには一般的すぎます。数値であるようなものであれば扱えて欲しい。
そのような似た型をまとめる型クラスという機能があります。型変数に制約をつけることができます。数値であるような型は Num クラスのインスタンスとなります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Num a =&amp;gt; a -&amp;gt; a -&amp;gt; a&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;とかいたとき&lt;/p&gt;

&lt;p&gt;&lt;code&gt;a がNumクラスのインスタンスであるという制約のもとで、 a -&amp;gt; a -&amp;gt; a&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;と、読みます。&lt;/p&gt;

&lt;p&gt;数値以外の型クラスに 値が表示可能な型クラス(Show) 相等性検査可能な型クラス(Eq) 列挙可能な型(Enum) などなど様々なクラスがあります。(モナドとか)&lt;/p&gt;

&lt;p&gt;ある型は複数の型クラスのインスタンスになれます。
なんだかレイヤーがひとつ違う感じですね。&lt;/p&gt;

&lt;h2 id=&#34;練習問題:af683e4c3eedf289586ccacebb20a44c&#34;&gt;練習問題&lt;/h2&gt;

&lt;p&gt;lhs 形式を選択したのですが、あまり意味がありませんでした。
lhs 形式は地の文がコメントになり &lt;code&gt;&amp;gt;&lt;/code&gt; ではじまる部分がHaskellのコードになります。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:af683e4c3eedf289586ccacebb20a44c&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;型システムへの理解不足で難しかったです。
なんとなくで理解していたところだいぶすっきりすることができました。&lt;/p&gt;

&lt;p&gt;型を意識することで、他のプログラミング言語を利用する場合にも明瞭な設計ができると思います。&lt;/p&gt;

&lt;h2 id=&#34;関連:af683e4c3eedf289586ccacebb20a44c&#34;&gt;関連&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/Introduction-to-Functional-Programming-using-Haskell/blob/master/1/index.org&#34;&gt;メモ用のリポジトリ 1章&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/Introduction-to-Functional-Programming-using-Haskell/blob/master/1/1.6.lhs&#34;&gt;1.6の練習問題&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>「状態管理用の変数をインスタンスに持たせるなこのタコって話」という記事のStateパターンを適用したときのリファクタリングのステップが気になって。</title>
          <link>https://blog.eiel.info/blog/2013/02/11/state-pattern-refactring/</link>
          <pubDate>Mon, 11 Feb 2013 01:52:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/02/11/state-pattern-refactring/</guid>
          <description>

&lt;p&gt;内容の批判とかではなくて、自分が気になったことで、記事にするのもどうかなって思ってたのですが、サンプルコードを書いちゃったので、折角なので書きおきします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://nekogata.hatenablog.com/entry/2013/02/09/233540&#34;&gt;状態管理用の変数をインスタンスに持たせるなこのタコって話 - life.should be_happy # =&amp;gt; 1 examples, ? failures&lt;/a&gt; という記事がホットエントリに出ていて、すごく面白いです。&lt;/p&gt;

&lt;p&gt;その中で 「Stateパターンを使おう」というところでリファクタリングのステップが大きいなーって感じて、30分ぐらい考えてしまったんです。
Stateパターンってのをよく知っていれば、書き換えることは難しくないのですが、丁寧にコミットすることを考えたとき、どういうリファクタリングのステップにすればいいのかな、と。&lt;/p&gt;

&lt;p&gt;リファクタリングは極力小さなステップで行うほうが良いです。いきなりがっつりやるためにはテストコードがほぼ必須になります。
あったとしても小さいほうがうごかなくなって悩む時間が減ります。&lt;/p&gt;

&lt;p&gt;ということで、&lt;strong&gt;「リファクタリング飛躍」&lt;/strong&gt; に該当する部分は、&lt;a href=&#34;https://gist.github.com/Shinpeim/4745444&#34;&gt;player_02.rb&lt;/a&gt; から &lt;a href=&#34;https://gist.github.com/Shinpeim/4745446&#34;&gt;player_03.rb&lt;/a&gt; への変化する部分になります。&lt;/p&gt;

&lt;p&gt;リファクタリングのステップが大きすぎることを&lt;strong&gt;「リファクタリング飛躍」&lt;/strong&gt;と個人的に呼びたいです。&lt;/p&gt;

&lt;h2 id=&#34;例-1-クラスごとに分かれる処理を-case-でまとめておく:ec833f0aba6fc142f22351914955de72&#34;&gt;例 1 クラスごとに分かれる処理を case でまとめておく&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/eiel/4748209&#34;&gt;https://gist.github.com/eiel/4748209&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ポイントだけ、抜粋します。&lt;/p&gt;

&lt;p&gt;元のコードは:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  def move(direction)
    case @moving_mode
    when MOVING_MODE::NORMAL
      x_speed = 10 # かにモードとの整合性のために
      y_speed = 10 # 無駄な変更が加えられている
    when MOVING_MODE::FAST
      x_speed = 20 # FASTモードにも！
      y_speed = 20
    when MOVING_MODE::KANI
      x_speed = 40
      y_speed = 5
    end
 
    case direction
    when :up
      @position[:y] -= y_speed #ここも書き換えないといけない
    when :down
      @position[:y] += y_speed # ここも
    when :left
      @position[:x] -= x_speed # こk
    when :right
      @position[:x] += x_speed # k
    end
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  def move(direction)
    case @moving_mode
    when MOVING_MODE::NORMAL
      case direction
      when :up
        @position[:y] -= 10
      when :down
        @position[:y] += 10
      when :left
        @position[:x] -= 10
      when :right
        @position[:x] += 10
      end
    when MOVING_MODE::FAST
      case direction
      when :up
        @position[:y] -= 20
      when :down
        @position[:y] += 20
      when :left
        @position[:x] -= 20
      when :right
        @position[:x] += 20
      end
    when MOVING_MODE::KANI
      case direction
      when :up
        @position[:y] -= 40
      when :down
        @position[:y] += 40
      when :left
        @position[:x] -= 5
      when :right
        @position[:x] += 5
      end
    end
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コード量は増えます。&lt;/p&gt;

&lt;p&gt;Player03.rb へとリファクタリングするには、それぞれのクラスと同じコードになってないとクラスへの分離は難しいです。
ポリモーフィズムってのは 自動でwhenが増える case と見なせる(と個人的に思っている)ので、ここからクラスへ分けるのは常套句になります。&lt;/p&gt;

&lt;p&gt;外側のwhenブロックごとにクラスへと分離していくことになります。&lt;/p&gt;

&lt;p&gt;case がネストしていて、少し異臭がするので、はじめからこういうコードを書けるのは State パターンを見据えてるか、かなりの熟練プログラマーな気がします。
実際には移動量はデータにできるので、もっとシンプルにかけるよーな気がしますが、本題からずれるので考えません。&lt;/p&gt;

&lt;h2 id=&#34;例2-いきなりクラスに分離してみる:ec833f0aba6fc142f22351914955de72&#34;&gt;例2 いきなりクラスに分離してみる。&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/Shinpeim/4745444&#34;&gt;https://gist.github.com/Shinpeim/4745444&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;実際にはひとつづやれば良いと思います。&lt;/p&gt;

&lt;p&gt;ポイントだけ抜粋。&lt;/p&gt;

&lt;p&gt;元コードも再び:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  def move(direction)
    case @moving_mode
    when MOVING_MODE::NORMAL
      x_speed = 10 # かにモードとの整合性のために
      y_speed = 10 # 無駄な変更が加えられている
    when MOVING_MODE::FAST
      x_speed = 20 # FASTモードにも！
      y_speed = 20
    when MOVING_MODE::KANI
      x_speed = 40
      y_speed = 5
    end
 
    case direction
    when :up
      @position[:y] -= y_speed #ここも書き換えないといけない
    when :down
      @position[:y] += y_speed # ここも
    when :left
      @position[:x] -= x_speed # こk
    when :right
      @position[:x] += x_speed # k
    end
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    def move(direction, position)
      x_speed = 10
      y_speed = 10
 
      case direction
      when :up
        position[:y] -= y_speed
      when :down
        position[:y] += y_speed
      when :left
        position[:x] -= x_speed
      when :right
        position[:x] += x_speed
      end
      return position
    end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MOVING_MODE::NORMAL のときの処理だけ抜粋してクラスにわけます。 &lt;code&gt;x_speed&lt;/code&gt; と &lt;code&gt;y_speed&lt;/code&gt;を展開すれば、Ruby03.rbのコードへと向います。&lt;/p&gt;

&lt;p&gt;これはこれでこのまま放置しても良い気がします。
他と並べたときに整理したくなるかもしねません。&lt;/p&gt;

&lt;p&gt;これも、Stateパターンが見えてないと難しいかもしれません。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:ec833f0aba6fc142f22351914955de72&#34;&gt;まとめ。&lt;/h2&gt;

&lt;p&gt;これらは単純に僕がコードを並べて検討したかっただけです。
どちらの例もゴールが見えてないと難しいと実感したのが結論です。&lt;/p&gt;

&lt;p&gt;あと、リファクタリングにはテストコード大事だと感じました。&lt;/p&gt;

&lt;p&gt;そんなわけで先人の知恵たるデザインパターンを学ぶにはとても価値あることです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>今さらながら turbolinksを試した。- 感想</title>
          <link>https://blog.eiel.info/blog/2013/02/11/start-turbolinks/</link>
          <pubDate>Mon, 11 Feb 2013 01:14:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/02/11/start-turbolinks/</guid>
          <description>

&lt;p&gt;今さらながら Rails4 の新機能の一つである &lt;a href=&#34;https://github.com/rails/turbolinks&#34;&gt;turbolinks&lt;/a&gt; を試してみました。&lt;/p&gt;

&lt;p&gt;解説なんかは僕がするよりも様々な記事がもうあるので、あまり必要ないと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://willnet.in/40&#34;&gt;Rails 4.0 に入る予定の turbolinks について調べた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/deeeki/20121202/rails4_turbolinks&#34;&gt;Rails4 Turbolinksのメモ #mtsmhack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.uu59.org/2012-11-19-turbolinks-breaks-cors.html&#34;&gt;Rails4でデフォルトで入るturbolinksがオープンリダイレクタと合わさると何でもできてかなり危険&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;どれも良い記事でした。&lt;/p&gt;

&lt;p&gt;ということで、個人的感想とか&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;production環境より development環境での効果が高い気がした

&lt;ul&gt;
&lt;li&gt;体感ほんとに早い - development環境&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;だいたいそのままで動く。動かなくなる Javascriptはやっぱりある。

&lt;ul&gt;
&lt;li&gt;fancyboxとか、でも、そういうのはそもそもRailsで扱いずらいものばかり。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;CSSやJavaScriptが切り変わるリンクには HTMLタグに data-no-turbolink属性をいれればよい。いれないと悲しいことになります。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;インストール:9138d146f71a8b279fcd7b05378ecb22&#34;&gt;インストール&lt;/h2&gt;

&lt;p&gt;一緒に &lt;a href=&#34;https://github.com/kossnocorp/jquery.turbolinks/blob/master/README.md&#34;&gt;jquery.turbolinks&lt;/a&gt; も入れておきました。
これは簡単に言うと、&amp;rdquo;なにもしなかったら動かなくなってしまうもの&amp;rdquo;を減らすように工夫したものだと思います。
なんとなくで具体的に書くと、readyイベントでやってることをページロードするときにも実行するようにするんじゃないかと思います。(たぶん)&lt;/p&gt;

&lt;p&gt;jquery.turbolinks は turbolinks に依存してないのでそれぞれGemfileに入れる必要がありました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem &#39;turbolinks`
gem &#39;jquery-turbolinks&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;//= require turbolinks
//= require jquery.turbolinks
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;といった感じです。&lt;/p&gt;

&lt;h2 id=&#34;感想をもうちょっと:9138d146f71a8b279fcd7b05378ecb22&#34;&gt;感想をもうちょっと&lt;/h2&gt;

&lt;h3 id=&#34;体感ほんとに早い:9138d146f71a8b279fcd7b05378ecb22&#34;&gt;体感ほんとに早い&lt;/h3&gt;

&lt;p&gt;Rails3 でも試せるので、体感しておくのは良いと思います。設定はとても簡単なので、どういうものかは知っておいたほうが今後の方針に役立ちます。
個人的には、規模が大きいプロジェクトでは develpoment 環境でだけでも使いたいです。&lt;/p&gt;

&lt;h3 id=&#34;動かなくなったプラグイン:9138d146f71a8b279fcd7b05378ecb22&#34;&gt;動かなくなったプラグイン&lt;/h3&gt;

&lt;p&gt;試したプロジェクトは fancybox という jQueryプラグインが使用されてる箇所がありましたが、ここが動かなくなりました。
そもそも、Railsではこれはすごく扱いにくくて置き換えてやろうしてる部分で放置してるうちに次々と使われてしまってる問題児です。
修正するにはちょうどよい機会。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:9138d146f71a8b279fcd7b05378ecb22&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Rails的じゃないところほど問題がでやすい機能という点ですごく面白いなー。と、思いました。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Active Supportの日付演算ってなかなか不思議。</title>
          <link>https://blog.eiel.info/blog/2013/02/07/date-magick-on-active-support/</link>
          <pubDate>Thu, 07 Feb 2013 12:40:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/02/07/date-magick-on-active-support/</guid>
          <description>

&lt;p&gt;昨日の記事がかなり反響がありまして、みなさまありがとうございます。
関連のある記事を書きたくなりますが、とりあえず、変わらず淡々とメモも残していきたいと思います。ゆるりとGithub入門記事も書きたいです。&lt;/p&gt;

&lt;p&gt;ActiveSupportが拡張する日付操作はとても便利です。よく使います。でも、ちょっと黒魔術だなぁって思ったことがあったので紹介します。&lt;/p&gt;

&lt;p&gt;Rubyでは日付や時刻クラスのインスタンスと数値が演算できます。&lt;/p&gt;

&lt;p&gt;今から1ヶ月後の日付が知りたいのであれば、以下のように書けます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;1.month.since                   # =&amp;gt; 2013-03-07 12:51:18 +0900
1.months.since                  # =&amp;gt; 2013-03-07 12:51:18 +0900
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;複数形でも単数形でも。&lt;/p&gt;

&lt;p&gt;特定の日付からでも同様のことがしたい場合は以下のようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;DateTime.new(2013).months_since 1   # =&amp;gt; Fri, 01 Feb 2013 00:00:00 +0000
DateTime.new(2013) + 1.month        # =&amp;gt; Fri, 01 Feb 2013 00:00:00 +0000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有名な機能なので、ご存知の方も多いと思います。&lt;/p&gt;

&lt;p&gt;別に、一日単位なら &lt;code&gt;month&lt;/code&gt; メソッドとか使わなくてもできます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;DateTime.new(2013) + 1              # =&amp;gt; Wed, 02 Jan 2013 00:00:00 +0000
DateTime.new(2013) + 1.day          # =&amp;gt; Wed, 02 Jan 2013 00:00:00 +0000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さて、本題。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;month&lt;/code&gt;だけでなく&lt;code&gt;hour&lt;/code&gt;や&lt;code&gt;day&lt;/code&gt;,&lt;code&gt;second&lt;/code&gt;などもありますが、戻り値の型はすべて&lt;code&gt;Fixnum&lt;/code&gt;になっています。
&lt;code&gt;1&lt;/code&gt; などの数値も&lt;code&gt;Fixnum&lt;/code&gt;です。&lt;/p&gt;

&lt;p&gt;Rubyで日付や時刻を表わすクラスは &lt;code&gt;DateTime&lt;/code&gt;, &lt;code&gt;Date&lt;/code&gt;, &lt;code&gt;Time&lt;/code&gt; などありますが、演算をした場合は、&lt;strong&gt;レシーバによって変化します。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;でも、&lt;code&gt;month&lt;/code&gt;や&lt;code&gt;second&lt;/code&gt; メソッドを利用してから演算すると引数によって動作が変化します。&lt;strong&gt;どれも足すのは&lt;code&gt;Fixnum&lt;/code&gt;なのに。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;というわけで、サンプルコード。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;active_support/all&#39;

datetime = DateTime.new 2013, 2, 7
date     = Date.new     2013, 2, 7
time     = Time.new     2013, 2, 7

datetime                        # =&amp;gt; Thu, 07 Feb 2013 00:00:00 +0000
date                            # =&amp;gt; Thu, 07 Feb 2013
time                            # =&amp;gt; 2013-02-07 00:00:00 +0900

# レシーバによって動作が変わる          (1)
# 1日先に
datetime + 1                    # =&amp;gt; Fri, 08 Feb 2013 00:00:00 +0000
# 1日先に
date     + 1                    # =&amp;gt; Fri, 08 Feb 2013
# 1秒先に
time     + 1                    # =&amp;gt; 2013-02-07 00:00:01 +0900

# これを防ぐには和をとるものを明示する (2)
datetime + 1.days               # =&amp;gt; Fri, 08 Feb 2013 00:00:00 +0000
date     + 1.days               # =&amp;gt; Fri, 08 Feb 2013
time     + 1.days               # =&amp;gt; 2013-02-08 00:00:00 +0900

# 秒の場合                                (3)
datetime + 1.second             # =&amp;gt; Thu, 07 Feb 2013 00:00:01 +0000
date     + 1.second             # =&amp;gt; 2013-02-07 00:00:01 +0900
time     + 1.second             # =&amp;gt; 2013-02-07 00:00:01 +0900

# Class は どれも Fixnum なのです
1                               # =&amp;gt; 1
1.class                         # =&amp;gt; Fixnum
1.days                          # =&amp;gt; 1 day
1.days.class                    # =&amp;gt; Fixnum
1.second                        # =&amp;gt; 1 second
1.second.class                  # =&amp;gt; Fixnum

# (1) の場合のみレシーバによって動作が変化。動作的には自然だと思う。
# (2), (3) の場合は 引数に応じた動作に。 Dateは演算の結果、型が変化する。
# 使う分には使いやすい。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いいたいことはソースコードにもかいた!
なかなか、黒魔術。&lt;/p&gt;

&lt;h2 id=&#34;以下-雑談:49561c36c85aa35434d5b6465140a727&#34;&gt;以下、雑談&lt;/h2&gt;

&lt;p&gt;なんでこんなことが気になったかというと、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;n = 100000                  # n にはなんらかの秒数がはいってると仮定
date = DateTime.new         # date には日付っぽいなにかが入る
date.to_date + (n.to_f / 1.days).to_i      # &amp;lt;- 何がやりたかったんだろう
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;的なコードをみつけたからです。日付単位で演算したかったのだと思いますが、カオスです。&lt;/p&gt;

&lt;p&gt;表示するための文字列を作る前準備だったので、以下で良い気がします。
もちろん状況によりますけども。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;n = 100000                  # n にはなんらかの秒数がはいってると仮定
date = DateTime.new         # date には日付っぽいなにかが入る。
date + n.second
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;せっかくなので:49561c36c85aa35434d5b6465140a727&#34;&gt;せっかくなので&lt;/h2&gt;

&lt;p&gt;せっかくなので Github と絡めておこう。&lt;/p&gt;

&lt;p&gt;サンプルコードを&lt;a href=&#34;https://gist.github.com/&#34;&gt;Gist&lt;/a&gt;にも置いてみました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/eiel/4728435&#34;&gt;https://gist.github.com/eiel/4728435&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;もしかすると、Githubでフォローしてくださった方には News Feedに 私が Gist に投稿したのが流れているかもしれません。&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;del&gt;だって、仕様ってコロコロ変わるし、サブアカでも作らないと自分で確認できないんだもの…&lt;/del&gt;&lt;/small&gt;&lt;/p&gt;

&lt;h2 id=&#34;もうちょっと掘り下げてみる:49561c36c85aa35434d5b6465140a727&#34;&gt;もうちょっと掘り下げてみる&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;months&lt;/code&gt;メソッドなんかは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/numeric/time.rb&#34;&gt;https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/numeric/time.rb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/integer/time.rb&#34;&gt;https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/integer/time.rb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;に定義されてます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Fixnum&lt;/code&gt; とか自称しながら、実体は &lt;code&gt;ActiveSupport::Duration&lt;/code&gt; でした。裏切られた気分だ。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Git がわからなくても Github を利用しよう</title>
          <link>https://blog.eiel.info/blog/2013/02/06/how-to-use-github/</link>
          <pubDate>Wed, 06 Feb 2013 13:36:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/02/06/how-to-use-github/</guid>
          <description>

&lt;p&gt;みなさん &lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt; を利用していますか？&lt;/p&gt;

&lt;p&gt;「Git がわからないから…」と、そんな理由で使わないのはもったいないです。&lt;/p&gt;

&lt;p&gt;Webや開発に携わる人間であれば、例えプログラムを書かなくても、Github へアクセスする機会は増えているのではないでしょうか。&lt;/p&gt;

&lt;p&gt;Webの人であれば jQueryのプラグインを探したり、サンプルコードが Github においてあったりすると思います。&lt;/p&gt;

&lt;p&gt;しかし、いきなり使いこなすのは難しいので、まずは以下のことをはじめてみることをおすすめします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;アカウントを作る&lt;/li&gt;
&lt;li&gt;知り合いや気になる人をフォローする&lt;/li&gt;
&lt;li&gt;自分が利用しているリポジトリや気になるリポジトリにスターを付ける&lt;/li&gt;
&lt;li&gt;News Feed を読む&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;日本人がやってるネタリポジトリの Issues やPull Requestsに絡む&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gitを利用しなければいけない機能はとりたててありません。&lt;small&gt;(Pull Requestには突っ込まないで)&lt;/small&gt;&lt;/p&gt;

&lt;h2 id=&#34;アカウントを作る:43d506de6b4a65e51ca9ab597ec3c938&#34;&gt;アカウントを作る&lt;/h2&gt;

&lt;p&gt;まず、アカウントがないと何もできません。作りましょう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/&#34;&gt;Githubのトップページ&lt;/a&gt;に &amp;ldquo;Sign up for free&amp;rdquo; というボタンから作成することができます。&lt;/p&gt;

&lt;h2 id=&#34;知り合いや気になる人をフォローする:43d506de6b4a65e51ca9ab597ec3c938&#34;&gt;知り合いや気になる人をフォローする&lt;/h2&gt;

&lt;p&gt;友達や気になる人をフォローしましょう。相手がフォロー返しをしてこなくても気にすることはないです。&lt;code&gt;News Feed を読む&lt;/code&gt; ための布石にすぎません。&lt;/p&gt;

&lt;p&gt;フォローすると News Feed にフォローした人の活動が表示されるようになります。これを見るのが目的なので、自分が興味のある活動をしている人がおすすめです。
あまり活動的な人をフォローするとフィードがどんどん流れてしまうので、初心者にはおすすめできません。&lt;/p&gt;

&lt;p&gt;フォローする相手がいない場合は、あまり活発でない リポジトリをウォッチするという手もあります。&lt;/p&gt;

&lt;p&gt;フォローするには &lt;code&gt;https//github.com/ユーザ名&lt;/code&gt; にアクセスして、画面右上のほうに Followというボタンがあるのでそれをクリックします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/follow.png&#34; alt=&#34;フォローする&#34;/&gt;&lt;/p&gt;

&lt;p&gt;例えば、私をフォローしたい場合は、&lt;a href=&#34;http://github.com/eiel&#34;&gt;http://github.com/eiel&lt;/a&gt; にアクセスします。&lt;/p&gt;

&lt;h2 id=&#34;自分が利用しているリポジトリや気になるリポジトリにスターを付ける:43d506de6b4a65e51ca9ab597ec3c938&#34;&gt;自分が利用しているリポジトリや気になるリポジトリにスターを付ける&lt;/h2&gt;

&lt;p&gt;スターというのは、&lt;code&gt;お気に入り&lt;/code&gt;、&lt;code&gt;ブックマーク&lt;/code&gt;、&lt;code&gt;いいね!&lt;/code&gt;のような機能です。ソーシャルブックマークの効果を感じていれば、説明は不要だと思います。&lt;/p&gt;

&lt;p&gt;スターをつけると、自分の活動に &lt;code&gt;このリポジトリにスターをつけました&lt;/code&gt; と流れるので、あなたをフォローしている人が目にすることになります。
そうすると、そのリポジトリを見にいく人が増えますので、そのリポジトリがより活発になる可能性が高くなります。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;応援したい!!&lt;/strong&gt; と思えば、すかさず押してしまっても良いでしょう。&lt;/p&gt;

&lt;h2 id=&#34;news-feed-を読む:43d506de6b4a65e51ca9ab597ec3c938&#34;&gt;News Feed を読む&lt;/h2&gt;

&lt;p&gt;ここが本記事の主旨です。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;News Feed を読みましょう。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;News Feed はログインした状態で、&lt;a href=&#34;https://github.com/&#34;&gt;Githubのトップ&lt;/a&gt;にアクセスすると閲覧できます。&lt;/p&gt;

&lt;p&gt;友人もフォローしたし、スターをつけることを学びました。
友人がスターを付けたことがわかるはずです。
そのときはどんなリポジトリなのか見にいきましょう。
トレンドや面白いものが見つかるかもしれません。&lt;/p&gt;

&lt;p&gt;News Feed は RSSリーダでも読むことができます。&lt;/p&gt;

&lt;p&gt;画面右上にリンクがありますので、簡単にできると思います。URLにアクセストークンを含むので、&lt;strong&gt;Web上の RSSリーダで閲覧する場合は自己責任でお願いします。&lt;/strong&gt;
自分の活動が流れるわけではないのであまり気にすることでもないかもしれません。&lt;/p&gt;

&lt;h2 id=&#34;日本人がやってるネタリポジトリの-issue-やpull-request-に絡む:43d506de6b4a65e51ca9ab597ec3c938&#34;&gt;&lt;strong&gt;日本人がやってるネタリポジトリの Issue やPull Request に絡む&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;上記の機能以外で挑戦してみて欲しいのは &lt;code&gt;Issue&lt;/code&gt; や &lt;code&gt;Pull Request&lt;/code&gt; という機能です。
Github の中で特に魅力的な機能です。&lt;/p&gt;

&lt;p&gt;Isuueはバグを報告するところです。質問するためにも利用されていますし、TODOリストにも使います。&lt;/p&gt;

&lt;p&gt;Pull Request は&lt;strong&gt;「ここを修正したのだけど、取り込んでくれませんか？」&lt;/strong&gt;と伝えるところです。
Issueに上がってるものを修正したり、追加機能を思いついたときに利用します。&lt;/p&gt;

&lt;p&gt;これらの機能を試すには、いきなり英語の開発プロジェクトに行くにはハードルが高いです。挑戦してみたいなら遊びでやってるようなものが絡みやすいです&lt;/p&gt;

&lt;p&gt;私が関わるものであれば&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hiroshimarb/hiroshimarb-gem&#34;&gt;Hiroshimarb-gem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eiel/StudySessions&#34;&gt;全国の勉強会を整理しよう&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などがあります。&lt;/p&gt;

&lt;h2 id=&#34;まとめとか:43d506de6b4a65e51ca9ab597ec3c938&#34;&gt;まとめとか&lt;/h2&gt;

&lt;p&gt;News Feed を見ているだけでも、いろんなことに挑戦したくなったり、もっと便利に使いたくなるようになります。
Git 自体の勉強はその時にはじめていけばよいと思います。&lt;/p&gt;

&lt;p&gt;Git のコマンドラインインターフェイスもどんどん丁寧になっており、&lt;small&gt;英語さえ読めば&lt;/small&gt;怖いこともありません。
GUIツールもどんどん便利になっていますが、痒いところに届きにくいですので、余裕がある方はコマンドラインからの利用から入門をおすすめします。&lt;/p&gt;

&lt;p&gt;Githubは開発者のSNSともいえる場所です。一歩進んだ開発者をめざすには必見のサイトではないでしょうか。&lt;/p&gt;

&lt;h2 id=&#34;関連:43d506de6b4a65e51ca9ab597ec3c938&#34;&gt;関連&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.eiel.info/blog/2013/02/17/github-pages/&#34;&gt;Github Pages について整理しておきます&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/02/06/how-to-use-github/&#34;&gt;Github の楽しみ方 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2013/11/21/github-notifications-is-not-spam/&#34;&gt;GitHub からの通知が迷惑メールになった - 見ないリポジトリは unwatch しよう&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=eiel-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=477416366X&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Rubyの拡張ライブラリをデバッグしてみた。</title>
          <link>https://blog.eiel.info/blog/2013/01/31/gdb-ruby-ext/</link>
          <pubDate>Thu, 31 Jan 2013 16:26:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/01/31/gdb-ruby-ext/</guid>
          <description>

&lt;p&gt;結論から言うと解決していないんだけど、学んだことをメモしておきます。&lt;/p&gt;

&lt;h2 id=&#34;あらまし:1334f042480a28f8c7ac15a706517c5c&#34;&gt;あらまし&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ruby-2.0.0-rc1 で &lt;a href=&#34;https://github.com/cldwalker/debugger&#34;&gt;debugger&lt;/a&gt; を動かしたかった。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ruby-2.0.0-rc1 だとコンパイルすらできない!&lt;/p&gt;

&lt;p&gt;結果: コンパイルはできるようになったしとりあえず、うごくけどすぐ落ちる。テスト通らない。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/debugger/tree/ruby-2.0/doc&#34;&gt;https://github.com/eiel/debugger/tree/ruby-2.0/doc&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;拡張モジュールをコンパイルする方法:1334f042480a28f8c7ac15a706517c5c&#34;&gt;拡張モジュールをコンパイルする方法&lt;/h2&gt;

&lt;p&gt;手順としては &lt;code&gt;rake compile&lt;/code&gt; するだけでした。&lt;/p&gt;

&lt;p&gt;手動でやりたい場合は
* Makefileを生成する
* make する&lt;/p&gt;

&lt;p&gt;Makefileするには &lt;code&gt;ruby extconf.rb&lt;/code&gt; とします。カレントディレクトリに Makefile ができるので make します。&lt;/p&gt;

&lt;p&gt;拡張モジュールは&lt;code&gt;ext&lt;/code&gt;ディレクトリにソースコードがあり、&lt;code&gt;rake compile&lt;/code&gt; すると &lt;code&gt;lib&lt;/code&gt;に共有ライブラリ(.so, .bundle, .dll)ができます。&lt;/p&gt;

&lt;h2 id=&#34;gem-にして-installする方法:1334f042480a28f8c7ac15a706517c5c&#34;&gt;gem にして installする方法&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;gem build *.gemspec&lt;/code&gt; して gemを作ってもいいけど、だいたい &lt;code&gt;rake gem&lt;/code&gt; で作成できます。
&lt;code&gt;pkg/&lt;/code&gt; にファイルが生成されるので、&lt;code&gt;gem intall pkg/*.gem&lt;/code&gt; でインストールします。&lt;/p&gt;

&lt;h2 id=&#34;やったこととか:1334f042480a28f8c7ac15a706517c5c&#34;&gt;やったこととか&lt;/h2&gt;

&lt;p&gt;make してエラーが出る部分を rubyのソースコードで &lt;code&gt;git log -S&lt;/code&gt; して変更内容を確認してひたすら直す。
APIとか拡張されてると思いますが、その辺はわからないので無理。&lt;/p&gt;

&lt;h2 id=&#34;gdb-を使ってデバッグする方法:1334f042480a28f8c7ac15a706517c5c&#34;&gt;gdb を使ってデバッグする方法&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ruby hoge.rb&lt;/code&gt;などでセグメンテーション違反などで落ちる場合は以下の方法でデバッグできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gdb rubyのバイナリを指定[~/.rbenv/versions/ruby-2.0.0-rc1/bin/ruby
gdb&amp;gt; run hoge.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;書いてて気づいたんだけど、lldb でデバッグするべきだった?&lt;/p&gt;

&lt;h2 id=&#34;おまけ:1334f042480a28f8c7ac15a706517c5c&#34;&gt;おまけ&lt;/h2&gt;

&lt;p&gt;ruby-2.0.0からだ clang を使うようになってるみたいで、エラーがすごくわかりやすかった。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>@soudai1025 がFizzBuzzのエントリで再帰についてかいてた。なんか違和感を感じた。</title>
          <link>https://blog.eiel.info/blog/2013/01/27/soudai-recursion/</link>
          <pubDate>Sun, 27 Jan 2013 01:05:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/01/27/soudai-recursion/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;http://twitter.com/soudai1025&#34;&gt;@soudai1025&lt;/a&gt; が書いた&lt;a href=&#34;http://soudai1025.blogspot.jp/2013/01/pythonfizzbuzz.html?spref=fb&#34;&gt;ブログ記事にPythonでFizzBuzzとかしてみた&lt;/a&gt;というエントリーがあって、まーいろいろ、&lt;a href=&#34;http://blog.eiel.info/blog/2013/01/26/soudai-fizzbuzz/&#34;&gt;あって突っ込みをいれました。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この中で再帰に関する記述があります。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;で最後はみんな大好き再帰。
折角なのでループ文を使わずに与えられたintまでの１からの和を出してみました。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def sum(num, answer = 0):
    answer = answer + num
    num -= 1
    if num == 0: return answer
    return sum(num, answer)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;「この再帰なんかおかしくね？」って直感的に思った。&lt;/p&gt;

&lt;p&gt;おかしいというのはなんか複雑すぎないだろうか？ということである。answerって引数なくても実装できるよね。引き継ぎたい値がひとつしかないから戻り値で対応できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def sum(num):
    if num == 1:
      return 1
    return num + sum(num-1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;うん。これだ。これが正しい。&lt;/p&gt;

&lt;p&gt;再帰を使う場合は、まず終了条件を考えます。この場合、num から 1へおりていくので、1で終了です。&lt;/p&gt;

&lt;p&gt;次にのこったそれ以外のときのことを考えます。num と n-1 の和を足せば求める値がもとめられることに気づくことができればあとはそのままかくだけです。
再帰を使うと今作成している関数が動いている前提で考えることができます。そのあたりに慣れるとさくさくかけます。&lt;/p&gt;

&lt;p&gt;再帰というのは スタック付きのループと見なせます。なのでループでできることはなんでも出きます。外のスコープの変数を引き継ぎたいときは、引数を増やせば伝搬できます。ただし、戻り値があるので、ひとつだけであれば伝搬可能です。この戻り値をリストにすることで複数の値を返すこともできます。&lt;/p&gt;

&lt;p&gt;ちなみに、普通の関数プログラマの場合、こういうときは reduce を使います。
再帰より読みやすいですからね。&lt;/p&gt;

&lt;p&gt;たぶん。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Cucumber の Capybara で 複数の同じ名前のリンクに対応するステップ</title>
          <link>https://blog.eiel.info/blog/2013/01/27/capybara-link-or-button/</link>
          <pubDate>Sun, 27 Jan 2013 00:12:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/01/27/capybara-link-or-button/</guid>
          <description>

&lt;p&gt;Cucumber のステップで&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;もし /^&amp;quot;(.+)&amp;quot;をクリック$/ do |name|
  click_on name
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というステップを書いていますが、&lt;code&gt;name&lt;/code&gt; に複数マッチしてしまうとエラーが発生しています。同じ名前にならないようにすればいいのですが、そうもいかない場合もあります。結局、以下の方法を用意しました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;もし /^(\d+)番目の&amp;quot;(.*?)&amp;quot;をクリック_$/ do |n, name|
  n = n.to_i - 1
  all(:link_or_button, name)[n].click
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;何番目のリンクか指定することで回避しました。&lt;/p&gt;

&lt;h2 id=&#34;もうちょっと詳しく:3c29b2d13f59a0711f26d17483c28d4a&#34;&gt;もうちょっと詳しく&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;click_button&lt;/code&gt;と同じことをやろうとすると &lt;code&gt;find(name)&lt;/code&gt; や &lt;code&gt;all(name)&lt;/code&gt; ではうまくいきません。調べてみると &lt;code&gt;XPath::HTML.link_or_button&lt;/code&gt; というメソッドを使用して、&lt;a href=&#34;https://github.com/jnicklas/capybara/blob/2.0.2/lib/capybara/selector.rb#L90-L93&#34;&gt;findに渡すXPathを生成してることがわかりました。&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;これをどうやって使うというと all の第一引数に使えばいいことがわかりました。&lt;/p&gt;

&lt;h2 id=&#34;さらに詳しく:3c29b2d13f59a0711f26d17483c28d4a&#34;&gt;さらに詳しく&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;page.class # =&amp;gt; Capybara::Session
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;click_onメソッドやallメソッドのレシーバである page オブジェクトは Capybara::Session でした。pry で調べました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jnicklas/capybara/blob/2.0.2/lib/capybara/session.rb&#34;&gt;Capybara::Session&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    NODE_METHODS = [
      :all, :first, :attach_file, :text, :check, :choose,
      :click_link_or_button, :click_button, :click_link, :field_labeled,
      :fill_in, :find, :find_button, :find_by_id, :find_field, :find_link,
      :has_content?, :has_text?, :has_css?, :has_no_content?, :has_no_text?,
      :has_no_css?, :has_no_xpath?, :resolve, :has_xpath?, :select, :uncheck,
      :has_link?, :has_no_link?, :has_button?, :has_no_button?, :has_field?,
      :has_no_field?, :has_checked_field?, :has_unchecked_field?,
      :has_no_table?, :has_table?, :unselect, :has_select?, :has_no_select?,
      :has_selector?, :has_no_selector?, :click_on, :has_no_checked_field?,
      :has_no_unchecked_field?, :query, :assert_selector, :assert_no_selector
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;NODE_METHODS.each do |method|
  define_method method do |*args, &amp;amp;block|
    @touched = true
    current_node.send(method, *args, &amp;amp;block)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jnicklas/capybara/blob/2.0.2/lib/capybara/session.rb#L338-L343&#34;&gt;https://github.com/jnicklas/capybara/blob/2.0.2/lib/capybara/session.rb#L338-L343&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これらの メソッドは動的に生成されるようです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def current_node
  scopes.last
end

def scopes
  @scopes ||= [document]
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jnicklas/capybara/blob/2.0.2/lib/capybara/session.rb#L351-L358&#34;&gt;https://github.com/jnicklas/capybara/blob/2.0.2/lib/capybara/session.rb#L351-L358&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;current_node は document という変数に格納されたオブジェクトのようです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def document
  @document ||= Capybara::Node::Document.new(self, driver)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jnicklas/capybara/blob/2.0.2/lib/capybara/session.rb#L334-L336&#34;&gt;https://github.com/jnicklas/capybara/blob/2.0.2/lib/capybara/session.rb#L334-L336&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;documentは Capybara::Node::Document クラスのインスタンスだとわかりました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Document &amp;lt; Base
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jnicklas/capybara/blob/2.0.2/lib/capybara/node/document.rb#L11&#34;&gt;https://github.com/jnicklas/capybara/blob/2.0.2/lib/capybara/node/document.rb#L11&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ここには all メソッドがなく Capbyra::Node::Base を継承しているようです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;include Capybara::Node::Finders
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jnicklas/capybara/blob/2.0.2/lib/capybara/node/base.rb#L27&#34;&gt;https://github.com/jnicklas/capybara/blob/2.0.2/lib/capybara/node/base.rb#L27&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この辺にありそうですね。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      def click_link_or_button(locator)
        find(:link_or_button, locator).click
      end
      alias_method :click_on, :click_link_or_button
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jnicklas/capybara/blob/2.0.2/lib/capybara/node/actions.rb#L12-L15&#34;&gt;https://github.com/jnicklas/capybara/blob/2.0.2/lib/capybara/node/actions.rb#L12-L15&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;cloick_on みつけました。このあたりを grep でみつけた時点で &lt;code&gt;all :link_or_button&lt;/code&gt; でいけそうなのはわかります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def all(*args)
  query = Capybara::Query.new(*args)
  elements = synchronize do
    base.find(query.xpath).map do |node|
      Capybara::Node::Element.new(session, node, self, query)
    end
  end
  Capybara::Result.new(elements, query)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jnicklas/capybara/blob/2.0.2/lib/capybara/node/finders.rb#L110-L118&#34;&gt;https://github.com/jnicklas/capybara/blob/2.0.2/lib/capybara/node/finders.rb#L110-L118&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;all みつけたー!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jnicklas/capybara/blob/2.0.2/lib/capybara/query.rb#L14-L16&#34;&gt;Capybara::Query.initialize&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第一引数がシンボルの時の処理がありました。&lt;/p&gt;

&lt;h2 id=&#34;ごめん力尽きた:3c29b2d13f59a0711f26d17483c28d4a&#34;&gt;ごめん力尽きた。&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jnicklas/capybara/blob/2.0.2/lib/capybara/selector.rb#L11-L13&#34;&gt;Capybara::Selector.add&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;生成したXpathをハッシュに保存しておく&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jnicklas/capybara/blob/2.0.2/lib/capybara/selector.rb#L7-L9&#34;&gt;Capybara::Selector.all&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;登録しておいたxpathを撮りだす。&lt;/p&gt;

&lt;p&gt;という感じです。実際にはpryの show-method つかって探してるのでこんなに大変じゃないんだからね!&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>@souda1025 に PythonでFizzBuzzとかしてみた に対抗しろって煽られたので。</title>
          <link>https://blog.eiel.info/blog/2013/01/26/soudai-fizzbuzz/</link>
          <pubDate>Sat, 26 Jan 2013 14:33:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/01/26/soudai-fizzbuzz/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://twitter.com/soudai1025&#34;&gt;@soudai1025&lt;/a&gt; が書いた&lt;a href=&#34;http://soudai1025.blogspot.jp/2013/01/pythonfizzbuzz.html?spref=fb&#34;&gt;ブログ記事にPythonでFizzBuzzとかしてみた&lt;/a&gt;というエントリーがあるのですが、Facebookでこういうコメントをみた。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;多分、ひむひむが対抗してくるはず。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;全力でお答えしましょう。&lt;/p&gt;

&lt;p&gt;とりあえず、普通 FizzBuzz かくならこうかくだろう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def fizzbuzz(number):
    if number % 15 == 0:  # number % 5 == 0 and number % 3 == 0
        return &amp;quot;FizzBuzz&amp;quot;
    elif number % 5 == 0:
        return &amp;quot;Buzz&amp;quot;
    elif number % 3 == 0:
        return &amp;quot;Fizz&amp;quot;
    else:
        return str(number)

if __name__ == &#39;__main__&#39;:
    number = int(raw_input(&amp;quot;Please enter an integer: &amp;quot;))
    print fizzbuzz(number)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;数値を入れると &lt;code&gt;数値の文字列&lt;/code&gt; か &amp;ldquo;Fizz&amp;rdquo; か &amp;ldquo;Buzz&amp;rdquo; か &amp;ldquo;FizzBuzz&amp;rdquo; を返す関数を用意するほうが柔軟性があり、わかりやすいです。&lt;/p&gt;

&lt;p&gt;さて、もとのコードを確認していきましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;int = int(raw_input(&amp;quot;Please enter an integer: &amp;quot;))

def do_fizz(int):
    if (int % 3) == 0:
        return 1
    return 0

def do_buzz(int):
    if (int % 5) == 0:
        return 2
    return 0

def do_answer(fizz, buzz):
    flag = fizz + buzz
    if flag == 0:
        print int #引数に居なくても外のintを参照出来る
    elif flag == 1:
        print &amp;quot;Fizz&amp;quot;
    elif flag == 2:
        print &amp;quot;Buzz&amp;quot;
    elif flag == 3:
        print &amp;quot;FizzBuzz&amp;quot;

do_answer(do_fizz(int), do_buzz(int))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さて、気になる点をあげていこう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;do_answer&lt;/code&gt; 関数が外のスコープにアクセスしている。&lt;/li&gt;
&lt;li&gt;よくわからないフラグ処理がされている。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;do_answer&lt;/code&gt; の引数が意味不明。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;関数が外のスコープにアクセスしている:aa533cc5bfd0e8e446ea5505e1815d9f&#34;&gt;関数が外のスコープにアクセスしている&lt;/h2&gt;

&lt;p&gt;関数が外のスコープにアクセスしてしまうとその関数だけみたときに他の部分を確認しないといけないのでよくない。&lt;/p&gt;

&lt;p&gt;それぐらいなら引数を追加しましょう。&lt;/p&gt;

&lt;h2 id=&#34;よくわからないフラグ処理がされている:aa533cc5bfd0e8e446ea5505e1815d9f&#34;&gt;よくわからないフラグ処理がされている&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;do_fizz&lt;/code&gt; と &lt;code&gt;do_buzz&lt;/code&gt; が関数名から何をするのかさっぱりわからない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;do_fizz&lt;/code&gt; は &lt;em&gt;3で割り切れる場合 1 を返し、それ以外の場合は 0 を返す関数である&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;do_buzz&lt;/code&gt; は &lt;em&gt;5で割り切れる場合 2 を返し、それ以外の場合は 0 を返す関数である&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ということはコードをよまなければわからない。ならば、関数の頭にコメントをかくか、そのような名前の関数にすべきだと思う。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;do_&lt;/code&gt; という接頭辞が着いている以上何かする関数だと想像するので、ここで &lt;code&gt;print&lt;/code&gt; されているのであれば、まだ良いと思うけど, iPhoneで閲覧していたらこの命名のせいで混乱しました。&lt;/p&gt;

&lt;h2 id=&#34;do-answer-の引数が意味不明:aa533cc5bfd0e8e446ea5505e1815d9f&#34;&gt;do_answer の引数が意味不明&lt;/h2&gt;

&lt;p&gt;fizz って何? buzz って何?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;do_answer(do_fizz(int), do_buzz(int))&lt;/code&gt; これをみてわけがわかる人がいたら教えて欲しい。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;do_fizz&lt;/code&gt; と &lt;code&gt;do_buzz&lt;/code&gt; の実行結果を使うのであれば、関数内で使うべきだろう。&lt;code&gt;int&lt;/code&gt;をdo_answer に渡さない設計にしているのに &lt;code&gt;do_fizz&lt;/code&gt; と &lt;code&gt;do_buzz&lt;/code&gt; に渡しているのに ここで int の文字がふたつ見える。 &lt;strong&gt;わけがわからないよ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;do_answer&lt;/code&gt; は &lt;code&gt;print&lt;/code&gt; するという点でまあ良いのじゃないかと思う。
ただ、doしないversionを用意しておけば&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for n in range(1,int):
   print answer(do_fizz(n), do_buzz(n))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とかきかえることができて、&lt;code&gt;int&lt;/code&gt;までの FizzBuzz が表示できてナイスだと思います。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:aa533cc5bfd0e8e446ea5505e1815d9f&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;「Haskell と Ruby で書いたらどうなるかを書け」という煽りな気がしたけど無視してみた。&lt;/p&gt;

&lt;p&gt;ついで、個人的感想。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;「Pythonって三項演算子どうやるんだろ？」って思ったんで調べて使ってみた。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;たぶん、&lt;code&gt;and&lt;/code&gt; &lt;code&gt;or&lt;/code&gt; で同様のことはできるけど、&lt;strong&gt;「3項演算子は読みにくいから使うな。」&lt;/strong&gt; ってことだと思う。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;phpの&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;$flag[] = (int % 3 == 0) ? 1 : 0;
$flag[] = (int % 5 == 0) ? 2 : 0;

$flag[&#39;fizz&#39;] = (int % 3 == 0) ? 1 :0;
$flag[&#39;buzz&#39;] = (int % 5 == 0) ? 2 :0;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;みたいにいきなりList（配列）を作る書き方がPythonでも出来ると思うんだけど知識不足。
公式チュートリアルやったらどっかで出てくるかな？ｗ&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;初期化してない変数に無理矢理突っ込むということのほうがおかしい。
かくなら&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;flag = []
flag.append(fizz)
flag.append(buzz)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となるのではないでしょうか。&lt;/p&gt;

&lt;p&gt;このように中途半端なコードを書いて誰かを煽ると添削とかしてもらえるらしいです。非常に勉強する際にショートカットになりますし、煽られるほうも勉強になります。どんどん真似していきましょう。&lt;/p&gt;

&lt;p&gt;まあ、せっかくなので Haskell でも書いておきました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Control.Monad

main = do
  putStr &amp;quot;please enter an integer:&amp;quot;
  number &amp;lt;- fmap read $ getLine
  putStrLn . fizzbuzz $ number
  -- forM_ [1..number] $ \n -&amp;gt;
  --       putStrLn . fizzbuzz $ n

fizzbuzz :: Int -&amp;gt; String
fizzbuzz n | n `mod` 15 == 0 = &amp;quot;FizzBuzz&amp;quot;
           | n `mod`  5 == 0 = &amp;quot;Buzz&amp;quot;
           | n `mod`  3 == 0 = &amp;quot;Fizz&amp;quot;
           | otherwise       = show n
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再帰についても書きたいですが、話がずれてしまうので、また別の機会に。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/soudai-FizzBuzz&#34;&gt;リポジトリはこちらに用意しておきました。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;トマホークおまちしています。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ActiveRecord の has_many で生成されるメソッドってActiveRecord::Relationに変換できる配列なんですね。</title>
          <link>https://blog.eiel.info/blog/2013/01/25/has-many-scope/</link>
          <pubDate>Fri, 25 Jan 2013 00:34:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/01/25/has-many-scope/</guid>
          <description>

&lt;p&gt;タイトルのとおりなんですが、&lt;code&gt;Article&lt;/code&gt;と&lt;code&gt;Comment&lt;/code&gt; とかあったりして、ちゃんと設定をしておくと &lt;code&gt;article.comments&lt;/code&gt; とやると &lt;code&gt;あるArticle&lt;/code&gt;に紐づいている&lt;code&gt;Comment&lt;/code&gt;がとってこれる機能です。&lt;/p&gt;

&lt;p&gt;まず、結論からいうと &lt;code&gt;article.comments.to_sql&lt;/code&gt; とか &lt;code&gt;article.comments.scoped&lt;/code&gt; とか &lt;code&gt;article.comments.joins&lt;/code&gt;とかできる!! ということです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;article.comments.create&lt;/code&gt; ってかける時点でうすうす思ってたんですが、これがわかっていると小回りがききます。返しているものが &lt;code&gt;ActiveRecord::Relation&lt;/code&gt;のようなものです。&lt;code&gt;class&lt;/code&gt;を確認すると &lt;code&gt;Array&lt;/code&gt;って言われちゃいますが。&lt;/p&gt;

&lt;h2 id=&#34;もうちょい深く:9d6d069ba1139f1de3e4b65b8595e060&#34;&gt;もうちょい深く&lt;/h2&gt;

&lt;p&gt;以下のクラスがあることを想定してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Article &amp;lt; ActiveRecord::Base
  has_many :comments
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;class Comment &amp;lt; ActiveRecord::Base
  belongs_to :artcile
  belongs_to :user
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;class User
  has_many :comment
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さきほど紹介した技を紹介すると User.first かつ Article.first な Commentを探す場合、以下のように書けます&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;a = Article.first
u = User.first
a.comments.merge(u.comments.scoped)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すると、こんな SQLができます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT &amp;quot;comments&amp;quot;.* FROM &amp;quot;comments&amp;quot;  WHERE &amp;quot;comments&amp;quot;.&amp;quot;article_id&amp;quot; = 1 AND &amp;quot;comments&amp;quot;.&amp;quot;user_id&amp;quot; = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;aとかuとかを引数な関数を用意するとウハウハな気がしてこないでしょうか。&lt;/p&gt;

&lt;p&gt;joinだってできます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;a = Article.first
a.comments.merge(Comment.joins(:user))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT &amp;quot;comments&amp;quot;.* FROM &amp;quot;comments&amp;quot; INNER JOIN &amp;quot;users&amp;quot; ON &amp;quot;users&amp;quot;.&amp;quot;id&amp;quot; = &amp;quot;comments&amp;quot;.&amp;quot;user_id&amp;quot; WHERE &amp;quot;comments&amp;quot;.&amp;quot;article_id&amp;quot; = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは has_many through でもできますね。&lt;/p&gt;

&lt;p&gt;このあたりを上手くつかっていけば ActiveRecordでも作りたいSQLがある程度つくれるんじゃないでしょうか。&lt;/p&gt;

&lt;p&gt;Rails4がくると scoped をかかなくてもよくなるような気がしますが、試していません。&lt;/p&gt;

&lt;p&gt;しかし、はじめの例ですが、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;a.comments.where(user_id: u)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;「ってかいても同じじゃね？」とか、言わないでください。なんとなく &lt;code&gt;user_id&lt;/code&gt; ってかきたくなくないですか？&lt;/p&gt;

&lt;h2 id=&#34;なんとなくおまけ:9d6d069ba1139f1de3e4b65b8595e060&#34;&gt;なんとなくおまけ&lt;/h2&gt;

&lt;p&gt;a.comments とかいた場合は Commentの Relationをつくっている。&lt;/p&gt;

&lt;p&gt;u.comments とかいても Commentの Relationをつくっている。&lt;/p&gt;

&lt;p&gt;と、メソッド名のほうのテーブルを意識してやると理解しやすいと思います。&lt;/p&gt;

&lt;p&gt;レシーバほうに対してのテーブルを意識すると息苦しくなります。&lt;code&gt;has_many&lt;/code&gt;をかく場合はそういう意識になるのでちょっと注意が必要です。&lt;/p&gt;

&lt;p&gt;ちょんと感覚的な話でした。&lt;/p&gt;

&lt;h2 id=&#34;サンプル用コード:9d6d069ba1139f1de3e4b65b8595e060&#34;&gt;サンプル用コード&lt;/h2&gt;

&lt;p&gt;動作確認のためのコードを用意しておきました。おすきにお使いください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/has_many-relation&#34;&gt;https://github.com/eiel/has_many-relation&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>読書メモ 関数プログラミング入門 Haskellで学ぶ原理と技法 1.5 定義</title>
          <link>https://blog.eiel.info/blog/2013/01/24/intro-functional-1-dot-5/</link>
          <pubDate>Thu, 24 Jan 2013 23:51:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/01/24/intro-functional-1-dot-5/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://www.amazon.co.jp/gp/product/427406896X/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=427406896X&amp;amp;linkCode=as2&amp;amp;tag=eiel-22&#34;&gt;関数プログラミング入門 Haskell で学ぶ原理と技法&lt;/a&gt; の読書メモです。&lt;/p&gt;

&lt;p&gt;本節は&lt;strong&gt;定義&lt;/strong&gt;についてですが、前節につづき&lt;strong&gt;関数&lt;/strong&gt;ともいえそうです。&lt;/p&gt;

&lt;p&gt;内容は
* ガード付等式
* 再帰定義
* 局所定義
です。&lt;/p&gt;

&lt;p&gt;ガード式の前に関数だけじゃなく、他の値も定義できるという話がでてきますが、それ以上でもそれ以下でもないです。一般的なプログラミング言語なら定数ともいえそうです。&lt;/p&gt;

&lt;p&gt;つづいて、ガード付等式です。&lt;code&gt;ガード 付等式&lt;/code&gt; か &lt;code&gt;ガード付 等式&lt;/code&gt;悩みましたがたぶん後者でしょう。
まだ、登場していませんが、パターンマッチよりも細かいところで分岐させるのによく使います。数学のノートみたいに見えてよいです。一応例をだしておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;compare x y
  | x &amp;gt; y  = LEFT
  | x == y = EQUAL
  | x &amp;lt; y  = RIGHT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;LEFT、EQUAL RIGHTの定義をしていませんが、比較して大きいほうを返す関数です。よみやすいです。このように3パターン以上に分岐する場合は &lt;code&gt;if&lt;/code&gt; を使用するよりもよみやすくなります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;if&lt;/code&gt;を使うと&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;compare x y = if x &amp;gt; y then LEFT else
                       if x == y then EQUAL else RIGHT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;みたいな感じでしょう。&lt;/p&gt;

&lt;h2 id=&#34;再帰定義:368c9568204ac0b705e48e5803b91b91&#34;&gt;再帰定義&lt;/h2&gt;

&lt;p&gt;あまり文章での説明がなかったです。関数の中で自分の名前が使用できます。実際に手を動かして簡約してみると、再帰というものが存在して良いことが確認できると思います。
ただし、&lt;strong&gt;終了条件&lt;/strong&gt;がなければ収束することなくどんどん大きくなります。&lt;/p&gt;

&lt;h2 id=&#34;局所定義:368c9568204ac0b705e48e5803b91b91&#34;&gt;局所定義&lt;/h2&gt;

&lt;p&gt;関数にローカルな定数や関数を定義できます。引数から値をとってきて別の関数に引数を適用しておいて使いますなどすると便利です。
一時変数のように使えますが、当然再代入はできません。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let&lt;/code&gt;が登場しませんでした。複雑さを回避したのでしょうか。&lt;/p&gt;

&lt;h2 id=&#34;練習問題:368c9568204ac0b705e48e5803b91b91&#34;&gt;練習問題&lt;/h2&gt;

&lt;p&gt;ひさしぶりに Haskellのコードをかかせてくれました。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:368c9568204ac0b705e48e5803b91b91&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;ガード付等式はここで登場で良いのかよくわからなかったですが、知っておくほうが便利です。それにしても、Haskellの表記は数学に近いようになってて楽しいですね。&lt;/p&gt;

&lt;h2 id=&#34;関連:368c9568204ac0b705e48e5803b91b91&#34;&gt;関連&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/Introduction-to-Functional-Programming-using-Haskell/blob/master/1/index.org&#34;&gt;メモ用のリポジトリ 1章&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/Introduction-to-Functional-Programming-using-Haskell/blob/master/1/1.5.hs&#34;&gt;1.5の練習問題&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>読書メモ 関数プログラミング入門 Haskellで学ぶ原理と技法 1.4 関数</title>
          <link>https://blog.eiel.info/blog/2013/01/22/intro-functional-1-dot-4/</link>
          <pubDate>Tue, 22 Jan 2013 23:17:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/01/22/intro-functional-1-dot-4/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://www.amazon.co.jp/gp/product/427406896X/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=427406896X&amp;amp;linkCode=as2&amp;amp;tag=eiel-22&#34;&gt;関数プログラミング入門 Haskell で学ぶ原理と技法&lt;/a&gt; の読書メモです。&lt;/p&gt;

&lt;p&gt;本節は &lt;strong&gt;関数&lt;/strong&gt; について。&lt;/p&gt;

&lt;p&gt;要点は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;外延性&lt;/li&gt;
&lt;li&gt;カリー化&lt;/li&gt;
&lt;li&gt;演算子と関数&lt;/li&gt;
&lt;li&gt;優先順位 結合順序&lt;/li&gt;
&lt;li&gt;関数合成&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;です&lt;/p&gt;

&lt;p&gt;まず関数は値として扱えますが、表示することはできません。引数を適用することで表示できる場合があります。
また、関数は 引数の値 を戻り値 の型に変換する(対応をつける)役目をもちます。関数の型を示すには -&amp;gt; 演算子を使い 型A を受取り 型B を返す場合 &lt;code&gt;A -&amp;gt; B&lt;/code&gt; とかきます。&lt;/p&gt;

&lt;p&gt;関数 と 関数に値を適用したものを混同しないように気をつけたほうがよいそうです。&lt;/p&gt;

&lt;h2 id=&#34;外延性:6fdffeb2d4f0779613cf55b32efa20e3&#34;&gt;外延性&lt;/h2&gt;

&lt;p&gt;関数が等しい場合は任意のxに対し以下が成立します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;f x = g x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この方法は関数に値を適用した結果が一致するので 適用的証明 というそうです。また ポイントワイズスタイル ともいうそうです。このように f や g はブラックボックスですが、引数と結果で確認できるので&lt;strong&gt;外延性の原理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;逆に定義から &lt;code&gt;f = g&lt;/code&gt; を示す場合はポイントフリースタイルというそうです。ただし、効率が違う場合があり、これは内包的性質というそうです。&lt;/p&gt;

&lt;h2 id=&#34;カリー化:6fdffeb2d4f0779613cf55b32efa20e3&#34;&gt;カリー化&lt;/h2&gt;

&lt;p&gt;単一の引数の関数の複数の引数に分解できます。こうすると関数に引数をひとつだけ適用すると新しい関数を作成することができます。結果が変わらないので括弧が減ったり、引数を変えるだけで様々な効果をもつ関数がつくれる利点があります。Arrow を使う場合は逆に アンカリー化をする場合もあります。&lt;/p&gt;

&lt;h2 id=&#34;演算子と関数:6fdffeb2d4f0779613cf55b32efa20e3&#34;&gt;演算子と関数&lt;/h2&gt;

&lt;p&gt;演算子も実質的には2引数の関数ですが中置することができます。Haskellでは 括弧で演算子を囲むことで通常の関数にもできますし、関数をバッククォートで囲むことで演算子のように利用できます。また、括弧で演算子を囲む場合は &lt;code&gt;(+1)&lt;/code&gt; のようにして あらかじめ引数を適用したりもできます。これをセクションというそうです。&lt;/p&gt;

&lt;h2 id=&#34;優先順位-結合順序:6fdffeb2d4f0779613cf55b32efa20e3&#34;&gt;優先順位 結合順序&lt;/h2&gt;

&lt;p&gt;これらのおかげで 括弧を省略することができます。
これらの把握しておかないとHaskellのコードを読む際によくわからなくなるのでしっかりと慣れておいたほうが良いです。&lt;/p&gt;

&lt;p&gt;関数は最優先で左結合です。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;f x y + z&lt;/code&gt; であれば &lt;code&gt;((f x) y) + z&lt;/code&gt; と等価です。&lt;/p&gt;

&lt;p&gt;右結合か左結合か は演算子によって違いますが、どちらでも同じ結果になるものもあります。これを結合性というそうです。+ や * は結合性があります。&lt;/p&gt;

&lt;h2 id=&#34;関数合成:6fdffeb2d4f0779613cf55b32efa20e3&#34;&gt;関数合成&lt;/h2&gt;

&lt;p&gt;関数合成は関数と関数を演算できます。結合性です。
ある関数の結果を別の関数の引数にできる場合に利用できます。
&lt;code&gt;f (g x)&lt;/code&gt; が正しい場合 &lt;code&gt;(f . g) x&lt;/code&gt; とできます。ドットは関数合成をする演算子です。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:6fdffeb2d4f0779613cf55b32efa20e3&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;練習問題は今回もHaskell のコードはあまりかきませんでした。&lt;/p&gt;

&lt;p&gt;優先順位や結合順序はいままでなんとなくでやってましたが、改めて整理できたのでかなり Haskell のコードがよみやすくなりました。早めに習得しておきたいですね。&lt;/p&gt;

&lt;h2 id=&#34;関連:6fdffeb2d4f0779613cf55b32efa20e3&#34;&gt;関連&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eiel/Introduction-to-Functional-Programming-using-Haskell/blob/master/1/index.org&#34;&gt;メモ用のリポジトリ 1章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eiel/Introduction-to-Functional-Programming-using-Haskell/blob/master/1/1.4.md&#34;&gt;1.4の練習問題&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Github pages が反映されない？と思ったらスパム扱いされてるかも</title>
          <link>https://blog.eiel.info/blog/2013/01/21/github-spam/</link>
          <pubDate>Mon, 21 Jan 2013 15:22:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/01/21/github-spam/</guid>
          <description>&lt;p&gt;ここ最近 github に push しても Github pages が反映されない現象に悩まされておりましたが、スパム判定されていたらしいです。&lt;a href=&#34;https://github.com/eiel&#34;&gt;私のgithubのprofileページ&lt;/a&gt;が私以外の人がみれなくてスパム判定されていることが発覚しました。同じようなことに悩まれることがあれば、運営に確認してみてはどうでしょうか。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Rails の rake notes というタスクをいまさらしった。</title>
          <link>https://blog.eiel.info/blog/2013/01/19/rake-note-on-rails/</link>
          <pubDate>Sat, 19 Jan 2013 11:35:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/01/19/rake-note-on-rails/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://guides.rubyonrails.org/command_line.html&#34;&gt;Rails Guide&lt;/a&gt; 読んでたら &lt;code&gt;notes&lt;/code&gt; というタスクがあるのを知りました。&lt;/p&gt;

&lt;p&gt;コードのコメントに &lt;code&gt;TODO&lt;/code&gt; とか &lt;code&gt;FIXME&lt;/code&gt;, &lt;code&gt;OPTIMIZE&lt;/code&gt; といったコメントをみつけて表示してくれます。
&lt;code&gt;grep すればいいや&lt;/code&gt;とか思いますが、それなりの便利そうです。jenkins なんかで回してレポートに出すのもよいかもしれません。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ roke notes
app/controllers/admin/users_controller.rb:
  * [ 20] [TODO] any other way to do this?
  * [132] [FIXME] high priority for next deploy
 
app/model/school.rb:
  * [ 13] [OPTIMIZE] refactor this code to make it faster
  * [ 17] [FIXME]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;notes:custom&lt;/code&gt; というタスクもあるようです。&lt;/p&gt;

&lt;h3 id=&#34;もう少しつっこんでみよう:368aee731fc0e5ef8e2833f004e27ed8&#34;&gt;もう少しつっこんでみよう&lt;/h3&gt;

&lt;p&gt;タスクの&lt;a href=&#34;https://github.com/rails/rails/blob/master/railties/lib/rails/tasks/annotations.rake&#34;&gt;ソースコード&lt;/a&gt;がここになります。
&lt;code&gt;notes:custom&lt;/code&gt; では 環境変数 ANNOTATION で表示するキーワードを決められるようです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;notes&lt;/code&gt;の場合は &amp;ldquo;OPTIMIZE&amp;rdquo;, &amp;ldquo;FIXME&amp;rdquo;, &amp;ldquo;TODO&amp;rdquo; の3つか使用されていますね。
あと 動的にタスクを生成しているようなので&lt;code&gt;notes:todo&lt;/code&gt; &lt;code&gt;optimize&lt;/code&gt; &lt;code&gt;fixme&lt;/code&gt; といったタスクも存在するようです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>読書メモ 関数プログラミング入門 Haskellで学ぶ原理と技法 1.3 値</title>
          <link>https://blog.eiel.info/blog/2013/01/15/intro-functional-1-dot-3/</link>
          <pubDate>Tue, 15 Jan 2013 01:17:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/01/15/intro-functional-1-dot-3/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://www.amazon.co.jp/gp/product/427406896X/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=427406896X&amp;amp;linkCode=as2&amp;amp;tag=eiel-22&#34;&gt;関数プログラミング入門 Haskell で学ぶ原理と技法&lt;/a&gt; の読書メモです。&lt;/p&gt;

&lt;p&gt;本節は &lt;strong&gt;値&lt;/strong&gt; について。&lt;/p&gt;

&lt;p&gt;値と式の関係。値と正格関数、非正格関数。がメインです。&lt;/p&gt;

&lt;p&gt;値は 式を用いて表現できます。値を表現する式はひとつだけではなく、複数存在し、評価機が出力する表現は &lt;strong&gt;標準表現&lt;/strong&gt; が利用されます。基本的には評価可能な式が表示されるということのようです。Rubyでいうと pメソッドの出力結果に近そうです。
また、値を表示しようとすると停止しない可能性が存在します。このような状態になる関数を正格関数と呼びます。具体的にシンプルに定義されてるのでわかりやすいです。正格でない関数は非正格なりますが、これは遅延評価でないと定義できないそうです。&lt;/p&gt;

&lt;p&gt;練習問題は正格と非正格について考える問題でした。&lt;/p&gt;

&lt;h2 id=&#34;関連:203e25fa29b2dcca1df36333d28ffc0a&#34;&gt;関連&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/Introduction-to-Functional-Programming-using-Haskell/blob/master/1/index.org&#34;&gt;メモ用のリポジトリ 1章&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/Introduction-to-Functional-Programming-using-Haskell/blob/master/1/1.3.md&#34;&gt;1.3の練習問題&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Gentoo Prefix 環境で git がビルドできないので bug報告してみた</title>
          <link>https://blog.eiel.info/blog/2013/01/14/write-patch-gentoo-prefix-of-git/</link>
          <pubDate>Mon, 14 Jan 2013 23:26:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/01/14/write-patch-gentoo-prefix-of-git/</guid>
          <description>

&lt;p&gt;結構前からわかっていたんだけども、&lt;a href=&#34;http://www.gentoo.org/proj/en/gentoo-alt/prefix/&#34;&gt;Gentoo Prefix&lt;/a&gt; on Mac OSX で USE=&amp;ldquo;subversion&amp;rdquo; していると gitのビルドに失敗していた。
なので、ビルドできるようにして、パッチを書いて &lt;a href=&#34;https://bugs.gentoo.org/&#34;&gt;Gentoo Bugzila&lt;/a&gt; へバグ報告してみた。&lt;/p&gt;

&lt;p&gt;Gentoo Prefix というのは Gentoo Linuxのパッケージ管理である portage を /以外のところにインストールしていろんな環境で利用できるようにしているものです。役割的には MacPorts や Homebrew と同じように Mac で Unixツールをインストールするのに利用しています。&lt;/p&gt;

&lt;h2 id=&#34;どんなエラーがでていたか:a09383aa04f644d1924730a9dad2aa4c&#34;&gt;どんなエラーがでていたか&lt;/h2&gt;

&lt;p&gt;USE=&amp;ldquo;subversion&amp;rdquo; emerge gitすると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    LINK svn-fe
Undefined symbols for architecture x86_64:
  &amp;quot;_libintl_ngettext&amp;quot;, referenced from:
      _show_date_relative in libgit.a(date.o)
  &amp;quot;_libintl_gettext&amp;quot;, referenced from:
      _show_date_relative in libgit.a(date.o)
      _warn_on_inaccessible in libgit.a(wrapper.o)
      _xgetpwuid_self in libgit.a(wrapper.o)
ld: symbol(s) not found for architecture x86_64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;svn-fe をビルドに失敗していました。&lt;/p&gt;

&lt;p&gt;いろいろ調べてみると OSX 上では -lintl をつければビルドできることがわかりました。git をビルドするための Makefile はかなり凝ったものが使われてるのですが、その判定が svn-fe の Makefile にないため -lintl が自動でついていませんでした。&lt;/p&gt;

&lt;h2 id=&#34;どんなパッチをかいたか:a09383aa04f644d1924730a9dad2aa4c&#34;&gt;どんなパッチをかいたか&lt;/h2&gt;

&lt;p&gt;CHOST で darwin がある場合 contrib/svn-fe/Makefile をかきかえるようなその場しのぎでかいてみました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;diff --git a/dev-vcs/git/git-1.8.1.ebuild b/dev-vcs/git/git-1.8.1.ebuild
index 1bfa55a..3338847 100644
--- a/dev-vcs/git/git-1.8.1.ebuild
+++ b/dev-vcs/git/git-1.8.1.ebuild
@@ -241,6 +241,12 @@ src_prepare() {
                -e &#39;/$(INSTALL)/s/ $(libexecdir)/ $(DESTDIR)$(libexecdir)/g&#39; \
                -e &#39;/$(INSTALL)/s/ $(man1dir)/ $(DESTDIR)$(man1dir)/g&#39;  \
                contrib/subtree/Makefile
+
+       if [[ $CHOST == *-darwin* ]]; then
+               sed -i \
+               -e &#39;s:EXTLIBS =:EXTLIBS = -lintl:&#39; \
+               contrib/svn-fe/Makefile
+       fi
 }
 
 git_emake() {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いろいろみていると &lt;code&gt;sed -i&lt;/code&gt; で改行を入れてから sed の命令をかいていくスタイルが多いのでそれに従いました。&lt;/p&gt;

&lt;h2 id=&#34;どこに投稿したか:a09383aa04f644d1924730a9dad2aa4c&#34;&gt;どこに投稿したか&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://bugs.gentoo.org/show_bug.cgi?id=452044#c0&#34;&gt;https://bugs.gentoo.org/show_bug.cgi?id=452044#c0&lt;/a&gt; に登録されています。
登録方法は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;アカウントを作成&lt;/li&gt;
&lt;li&gt;new をクリック&lt;/li&gt;
&lt;li&gt;Gentoo/Alt をクリック&lt;/li&gt;
&lt;li&gt;類似バグがないか検索&lt;/li&gt;
&lt;li&gt;component は Prefix Support を選択&lt;/li&gt;
&lt;li&gt;Opereting System は OS X を選択&lt;/li&gt;
&lt;li&gt;summaryとdescription を記述&lt;/li&gt;
&lt;li&gt;登録&lt;/li&gt;
&lt;li&gt;パッチを追加&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という感じでした。&lt;/p&gt;

&lt;p&gt;component には Mac OSX という項目がありますが、&lt;code&gt;DEAD. Do not use. See bug #214926.&lt;/code&gt;の表示され、*使用するな!*ということみたいなので Prefix Support を選択しました。&lt;/p&gt;

&lt;h2 id=&#34;他に学んだこと:a09383aa04f644d1924730a9dad2aa4c&#34;&gt;他に学んだこと&lt;/h2&gt;

&lt;h3 id=&#34;emereg-file名-で-emerge-するには:a09383aa04f644d1924730a9dad2aa4c&#34;&gt;emereg &lt;em&gt;file名&lt;/em&gt; で emerge するには&lt;/h3&gt;

&lt;p&gt;manifest が再計算されている必要があるようです。&lt;/p&gt;

&lt;p&gt;ebuild があるディレクトリで&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;repoman digest&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;または&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ebuild &lt;em&gt;file名&lt;/em&gt; digest&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;で再計算されます。&lt;/p&gt;

&lt;p&gt;また、ebuild ファイルは PORTDIR_OVERLAY を指定したディレクトリにいれておかないとダメみたいです。&lt;/p&gt;

&lt;h3 id=&#34;emergeの特定ステップのみ実行する:a09383aa04f644d1924730a9dad2aa4c&#34;&gt;emergeの特定ステップのみ実行する&lt;/h3&gt;

&lt;p&gt;書いたpatch は prepare というコンパイルをはじめる前の段階に処理を追加しています。
なので パッチの動作確認だけであれば、そこまでで十分です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ebuild &lt;em&gt;file名&lt;/em&gt; prepare&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とすれば、そこまで処理することができます。
また、prepareが成功しているともう一度実行することができないので、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ebuild &lt;em&gt;file名&lt;/em&gt; clean&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;をした上で実行しないと反映されませんでした。
また、 ebuild を書き換えると&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ebuild &lt;em&gt;file名&lt;/em&gt; digest&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の実行が必要になります。これらをまとめて実行するには&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ebuild &lt;em&gt;file名&lt;/em&gt; digest clean prepare&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とすればいいことがわかりました。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>読書メモ 関数プログラミング入門 Haskellで学ぶ原理と技法 1.2 評価</title>
          <link>https://blog.eiel.info/blog/2013/01/13/intro-functional-1-dot-2/</link>
          <pubDate>Sun, 13 Jan 2013 21:47:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/01/13/intro-functional-1-dot-2/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://www.amazon.co.jp/gp/product/427406896X/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=427406896X&amp;amp;linkCode=as2&amp;amp;tag=eiel-22&#34;&gt;関数プログラミング入門 Haskell で学ぶ原理と技法&lt;/a&gt; の読書メモです。&lt;/p&gt;

&lt;p&gt;本節は評価を中心に式の簡約化についての説明です。&lt;/p&gt;

&lt;p&gt;正規形という形を目指して式を簡略化していきますが、関数プログラミングにおいては、どのような手順で簡約しても最終結果が一致するのが特徴です。&lt;/p&gt;

&lt;p&gt;代入のような破壊的な操作が存在する世界では、順序が影響します。
そこが命令型のプログラミングと違うところでしょう。そのため並列処理させるたべ順序に影響しないため、関数プログラミングが評価されてる部分だと思います。&lt;/p&gt;

&lt;p&gt;話が脱線しましたが、簡約の手順には 1つだけでなく複数存在する可能性があります。そのためプログラミング言語によっては簡約の評価戦略が違うようです。
あと、簡約の手順が違う場合、停止しない場合が存在することもあります。&lt;/p&gt;

&lt;p&gt;練習問題は評価の順序、停止性について考えるような問題でした。&lt;/p&gt;

&lt;h2 id=&#34;関連:5809e91198f962082c9b9e2f02a14bd0&#34;&gt;関連&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/Introduction-to-Functional-Programming-using-Haskell/blob/master/1/index.org&#34;&gt;メモ用のリポジトリ 1章&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/Introduction-to-Functional-Programming-using-Haskell/blob/master/1/1.2.md&#34;&gt;1.2の練習問題&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>読書メモ 関数プログラミング入門 Haskellで学ぶ原理と技法 1.1 セッションとスクリプト</title>
          <link>https://blog.eiel.info/blog/2013/01/13/intro-functional-1-dot-1/</link>
          <pubDate>Sun, 13 Jan 2013 18:46:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/01/13/intro-functional-1-dot-1/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://www.amazon.co.jp/gp/product/427406896X/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=427406896X&amp;amp;linkCode=as2&amp;amp;tag=eiel-22&#34;&gt;関数プログラミング入門 Haskell で学ぶ原理と技法&lt;/a&gt; の読書メモです。&lt;/p&gt;

&lt;p&gt;本書は 2002年に出版された&lt;a href=&#34;http://www.amazon.co.jp/gp/product/0134843460/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=0134843460&amp;amp;linkCode=as2&amp;amp;tag=eiel-22&#34;&gt;Introduction to Functional Programming using Haskell&lt;/a&gt; の2版の翻訳です。
いまになって日本語に訳されたということはそれなりの名著なのかなー。ということで、Haskellネタを書く機会があまりなかったので、読書メモを書いていこうと思います。&lt;/p&gt;

&lt;p&gt;問題を解いてくのに最強の環境をつくろうぜ。と、意訳できる文章ではじまります。本節は Hugs を使用することを想定して セッション、スクリプトといった対話環境だからこそしっくりくる用語を中心に基本用語が解説されています。&lt;/p&gt;

&lt;p&gt;スクリプトによって定義を追加していき環境を構築した上で &lt;strong&gt;式を評価&lt;/strong&gt; するというのが主軸なのかなあ、と思います。環境/文脈は束縛の集りであるというのは非常にシンプルで実際の文脈の小ささは関数プログラミングの特徴と言えるのではないかな、と思いました。&lt;/p&gt;

&lt;p&gt;あとは、定義には関数の定義がかかれ、関数には 型シグネチャ をかけることぐらいかな。&lt;/p&gt;

&lt;p&gt;練習問題が関数定義の練習と束縛済みの関数を再利用するのが目的な感じでした。&lt;/p&gt;

&lt;h2 id=&#34;関連:b051e3dc2a6d3d92bfdd286396d33718&#34;&gt;関連&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/Introduction-to-Functional-Programming-using-Haskell/blob/master/1/index.org&#34;&gt;メモ用のリポジトリ 1章&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/Introduction-to-Functional-Programming-using-Haskell/blob/master/1/1.1.hs&#34;&gt;1.1の練習問題&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe src=&#34;http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=eiel-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=427406896X&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
</description>
        </item>
      
    
      
        <item>
          <title>今後のiOSアプリケーションのために Auto Layout を学んだ - 内容編</title>
          <link>https://blog.eiel.info/blog/2013/01/13/ios-autolayout-2/</link>
          <pubDate>Sun, 13 Jan 2013 01:17:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/01/13/ios-autolayout-2/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;blog/2013/01/13/ios-autolayout/&#34;&gt;今後のiOSアプリケーションのために Auto Layout を学んだ - 準備編&lt;/a&gt; につづき勉強した内容をまとめていきたいと思います。&lt;/p&gt;

&lt;p&gt;まずは Auto Layoutについて。概ね WWDC 2012 の session 202 のまとめだったり、使ってみた感じでのまとめです。仮説もいっぱい混ざってるので注意してください。&lt;/p&gt;

&lt;h2 id=&#34;auto-layout-は制約ベースのレイアウトシステム:97ae7d72a595466c2285f09917dc50a4&#34;&gt;Auto Layout は制約ベースのレイアウトシステム&lt;/h2&gt;

&lt;p&gt;Auto Layout は ふたつのViewの関係を設定していくことでレイアウトを構築します。
例えば &lt;em&gt;ある特定のViewは親のView左から 自分の左端を 20pt あける&lt;/em&gt; のような制約をつくります。これらの制約を追加していくことで期待するレイアウトを構築します。&lt;/p&gt;

&lt;p&gt;制約が無い場合はそれぞれデフォルトの振舞いがあります。
動きをみつつ上書きしていくような形になります。&lt;/p&gt;

&lt;p&gt;制約のでViewのサイズなのが自動的に決定していくのでコードで記述する場合は frame の設定が不要になる書き方ができます。&lt;/p&gt;

&lt;h2 id=&#34;auto-resizing-maskの機能を再現することもできる:97ae7d72a595466c2285f09917dc50a4&#34;&gt;Auto Resizing Maskの機能を再現することもできる&lt;/h2&gt;

&lt;p&gt;Auto Layout は 以前のレイアウトシステム(?)である Auto Resizing Mask の表現範囲より大きなもので、エミュレートすることができます。Auto Resizing Mask でできることはすべてできますし、コードから利用する場合は今までどおりの挙動をします。&lt;/p&gt;

&lt;p&gt;また、デフォルトでは Auto Resizing Mask をエミュレートしています。エミュレートさせたくない場合は translatesAutoresizingMaskIntoConstraints プロパティを NO に設定します。&lt;/p&gt;

&lt;h2 id=&#34;作成できる制約:97ae7d72a595466c2285f09917dc50a4&#34;&gt;作成できる制約&lt;/h2&gt;

&lt;p&gt;制約はふたつのviewに対して &lt;code&gt;item1.attribute1 = multiplier x item2.attribute2 + constant&lt;/code&gt; という式を満たすように attribute1 を設定するようです。(たぶん) 等号の部分は不等号を指定することができます。制約はNSLayoutConstraint クラスの &lt;code&gt;constraintWithItem:attribute: relatedBy: toItem: attribute: multiplier: constant:&lt;/code&gt;メソッドで作成することができます。 VisualFormatという言語を使用するともう少し簡単に制約を生成することもできます。&lt;/p&gt;

&lt;h3 id=&#34;visual-format-language:97ae7d72a595466c2285f09917dc50a4&#34;&gt;Visual Format Language&lt;/h3&gt;

&lt;p&gt;この言語は アスキーアート的な書き方で制約を生成することができます。&lt;/p&gt;

&lt;p&gt;例えば&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|-20-[theView(200)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;theView という名前のviewを
- 親Viewの左端から 20 右に離す
- theViewの width を 200
という制約を作成することができます。&lt;/p&gt;

&lt;p&gt;Visual Foramt を利用して制約を作成するには
NSLayoutConstraintクラスの &lt;code&gt;constraintsWithVisualFormat:options:metrics:views&lt;/code&gt; メソッドを使用します。 metrics: の引数には Visual Format内で使用したい変数の NSDictionaryを。viewsにはVisual Foram内で使用したいViewの NSDictinaryを渡します。&lt;/p&gt;

&lt;p&gt;先の例の 20 の部分を padding に変更したものであれば&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSString* format = @&amp;quot;|-pading-[theView(200)]&amp;quot;;

NSNumber* padding = @20;
NSDictionary* metrics = NSDictionaryOfVariableBindings(padding);

UIView* theView = [[UIView alloc] init];
NSDictionary* views = NSDictionaryOfVariableBindings(theView);

NSArray* constraints = [NSLayoutConstraint constraintsWithVisualFormat:format
                                                               options:0
                                                               metrics:metrics
                                                               views:views]];
[self.view addConstraints:constraints];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のような風になります。&lt;/p&gt;

&lt;p&gt;Visual Formatの表現力には限界があるので設定できない制約もあります。&lt;/p&gt;

&lt;h2 id=&#34;満たせない制約があった場合:97ae7d72a595466c2285f09917dc50a4&#34;&gt;満たせない制約があった場合&lt;/h2&gt;

&lt;p&gt;レイアウトする際に登録された制約する際に、満たせないものがでてくるとデバッグ出力として制約の一覧が出力され、非常にすばやく問題があることを検知できます。&lt;/p&gt;

&lt;h2 id=&#34;interfacebuilder-での-auto-layout:97ae7d72a595466c2285f09917dc50a4&#34;&gt;InterfaceBuilder での Auto Layout&lt;/h2&gt;

&lt;p&gt;InterfaceBuilderを利用して画面を作成していくと 磁石のように吸いつく場所におくと強制的に制約が生成されます。基本的にはその上に新な制約を付与していく形になります。この制約はInterfaceBuilder上で設定できますが、Outletにしてコード上で参照することもできます。&lt;/p&gt;

&lt;p&gt;なので、InterfaceBuilder上でもかなりのことができますが、すべてではありません。&lt;/p&gt;

&lt;p&gt;注意点としては
* Viewを移動すると制約が消えることがあります。というか、よく消えます。
* pin で制約を追加すると思わぬ制約がついていて削除していくことになる場合があります。
* Viewを移動したりサイズを変更したりが制約の影響を受けて変更できない場合があります。この場合は基準を変えたりするなど配置の仕方を工夫する必要があります。&lt;/p&gt;

&lt;h2 id=&#34;制約の優先順位:97ae7d72a595466c2285f09917dc50a4&#34;&gt;制約の優先順位&lt;/h2&gt;

&lt;p&gt;制約には priority が設定できますが、初期は高い値が設定されています。
評価する順序に影響があるのではないかと予測しています。
不等号などを含む制約を後回しにすると 制約がコンフリクトしない場合がでてくるので下げるだけで済むようになっているんじゃないかなぁ。と、ふと思いましたが定かではありません。&lt;/p&gt;

&lt;h2 id=&#34;勉強会中に作成したコードの一部:97ae7d72a595466c2285f09917dc50a4&#34;&gt;勉強会中に作成したコードの一部&lt;/h2&gt;

&lt;p&gt;VisualFormatを試すのに作成したプロジェクトを&lt;a href=&#34;https://github.com/eiel/AutoLayout-Visual-Format-Language-Sample&#34;&gt;github上に&lt;/a&gt;置いているので興味がある方はどうぞ。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:97ae7d72a595466c2285f09917dc50a4&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;最初はわけがわかりませんでしたが、使用してみると思っていたほど難しくありません。うまく使えば Universal アプリも作れなくもありません。大きく表現を変えたい場合は別々に画面を作成したほうがよいです。プログラムは書いたとおりに動いてくれますが、制約も書いたとおりにレイアウトしてくれることでしょう。&lt;/p&gt;

&lt;p&gt;図とか書きたかったですが、WWDCの動画などを参照してみてください。InterfaceBuilder上での作業はとても参考になります。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>今後のiOSアプリケーションのために Auto Layout を学んだ - 方法編</title>
          <link>https://blog.eiel.info/blog/2013/01/13/ios-autolayout/</link>
          <pubDate>Sun, 13 Jan 2013 00:50:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/01/13/ios-autolayout/</guid>
          <description>

&lt;p&gt;12月29日に &lt;a href=&#34;https://twitter.com/mako_wis&#34;&gt;@mako_wis&lt;/a&gt; と &lt;a href=&#34;https://twitter.com/NeXTSTEP2OSX&#34;&gt;@NeXtSTTEP2OSX&lt;/a&gt; の中の人の Auto Layoutの勉強会をした。
そこでのメモをここに記す。まずは勉強会のやり方について書いておきます。&lt;/p&gt;

&lt;h2 id=&#34;どんなやりかたで勉強したの:ae4e754285a0c60406fdcac1aa9f1779&#34;&gt;どんなやりかたで勉強したの？&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;参加者が 岡山 広島北部 広島西部と集まるのがめんどくさい

&lt;ul&gt;
&lt;li&gt;Skype と 画面共有を駆使した&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;事前に WWDC の動画をみてくることにした&lt;/li&gt;
&lt;li&gt;動画の内容を手を動かして挑戦する&lt;/li&gt;
&lt;li&gt;そこからやってみたいことをやってみる&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;気をつけた点:ae4e754285a0c60406fdcac1aa9f1779&#34;&gt;気をつけた点&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;操作する人を交代するようにした&lt;/li&gt;
&lt;li&gt;同じような内容のちょい難しいバージョンを交代してやることで理解の共有を図った&lt;/li&gt;
&lt;li&gt;操作する場合は、先に見てる側の意見を中心に作業するようにした&lt;/li&gt;
&lt;li&gt;自薦予習することだけはあらかじめ念をした&lt;/li&gt;
&lt;li&gt;前日に skype、 画面共有の動作確認をした&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;気になる点:ae4e754285a0c60406fdcac1aa9f1779&#34;&gt;気になる点&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;聞いてるだけの人はグダグダになりそう。&lt;/li&gt;
&lt;li&gt;わからないことで詰まるともくもくタイムになりそう&lt;/li&gt;
&lt;li&gt;みんながまとめを記事にしてない&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;画面共有の方法:ae4e754285a0c60406fdcac1aa9f1779&#34;&gt;画面共有の方法&lt;/h2&gt;

&lt;p&gt;画面共有には &lt;a href=&#34;http://www.mikogo.com/&#34;&gt;Mikogo&lt;/a&gt; というツールを使用した。&lt;/p&gt;

&lt;p&gt;フリーだと3人までは共有可能。人数を増やす場合、もっと良いツールがないか検討したい。&lt;/p&gt;

&lt;p&gt;あまり問題は起きなかったのですが、 MBP Retina の人が画面を共有できずにはまりました。外部ディスプレイをつけて、外部をメインディスプレイにすることで強制的に Retina モードから脱出するという無理矢理な方法で解決。(今回は関係ないけど, ユーストするときにも応用できました)&lt;/p&gt;

&lt;h2 id=&#34;まとめ:ae4e754285a0c60406fdcac1aa9f1779&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;オンラインで勉強会を行うと集まるコストを低減できてよいです。相手のPCを操作することが難しいので、ある程度PCの操作になれている人たちであれば、IT勉強会以外にも応用できるかもしれません。&lt;/p&gt;

&lt;p&gt;当日の最初に様々なトラブルが起きる可能性が高いので、前日に動作確認してグダグダになるのを防ぐことができました。&lt;/p&gt;

&lt;p&gt;参加者との画面の切り替えがオフラインより楽なので、ペアプロっぽいことを複数人で行うことができてよいです。&lt;/p&gt;

&lt;p&gt;また新な高い壁があるときにやりたいです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>UITabBarControllerのMoreに表示される edit を消したいなー。</title>
          <link>https://blog.eiel.info/blog/2013/01/09/remove-uinavigation-edit-button/</link>
          <pubDate>Wed, 09 Jan 2013 22:30:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2013/01/09/remove-uinavigation-edit-button/</guid>
          <description>&lt;p&gt;&lt;strong&gt;「UITabBarControllerのMoreに表示される edit を消したいなー。」&lt;/strong&gt;と思いながら、なんてググればいいんだろーと思いつつも、ヘッダファイルをみていたら customizableViewControllers ってプロパティがあった。
迷わずに nil に設定した。うまくいった。&lt;/p&gt;

&lt;p&gt;もし、UITabBarControllerを継承してるクラスがあるなら -viewDidLoad で処理してしまうのが早いです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;self.customizableViewControllers = nil;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ない場合、用意しましょう。といってもいいんですが、タブ内の UIViewController の viedDidLoadで&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;self.tabBarController.customizableViewControllers = nil;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でも、いけました。
&lt;strong&gt;「継承してるコントローラあるのにわざわざ試したんだからねっ!」&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ちなみに、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;このプロパティは nil じゃない場合 &amp;quot;Edit&amp;quot; で表示されるコントローラをカスタマイズできてデフォルトはすべてのコントローラだよ。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;的なことが書かれていました。なので空の配列を渡してもOKです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Devise で email 変更する。</title>
          <link>https://blog.eiel.info/blog/2012/12/30/modify-email-on-devise/</link>
          <pubDate>Sun, 30 Dec 2012 14:41:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/12/30/modify-email-on-devise/</guid>
          <description>&lt;p&gt;Railsの plugin で 認証を行なう &lt;a href=&#34;https://github.com/plataformatec/devise&#34;&gt;devise&lt;/a&gt; という gem があります。
このユーザ認証で &lt;code&gt;実際にユーザにメールを送信して、登録を完了する&lt;/code&gt;という機能を提供するのに  confirmable という機能があります。&lt;/p&gt;

&lt;p&gt;このConfirmableという機能を使用していると管理者が ユーザのメールアドレスを変更してあげる必要がある場合、代えるときもメールがユーザに送信されます。これが便利なときもあったりテスト時にこまったりすることがあります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;devise :confirmable&lt;/code&gt; した モデルには &lt;code&gt;skip_confirmation!&lt;/code&gt; &lt;code&gt;skip_reconfirmation!&lt;/code&gt; というメソッドが追加されてるので、これらを呼び出すことで回避することができます。&lt;/p&gt;

&lt;p&gt;ちなみに、これらのメソッドの中身をみると&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def skip_confirmation!
  self.confirmed_at = Time.now.utc
end

def skip_reconfirmation!
  @bypass_postpone = true
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となってます。&lt;/p&gt;

&lt;p&gt;confirmed_at に値がはいっていれば有効で、@bypass_postpone が true で メールの送信が回避できそうですね。このあたりの実装はversionによって変更される恐れがあるので直接利用するには注意が必要です。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Rubyの 1.8 スタイルの Hash を 1.9 に書き換える</title>
          <link>https://blog.eiel.info/blog/2012/12/30/1-dot-8-style-hash-to-1-dot-9-style/</link>
          <pubDate>Sun, 30 Dec 2012 14:30:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/12/30/1-dot-8-style-hash-to-1-dot-9-style/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;https://github.com/HeeL/syntax_fix&#34;&gt;syntax_fix&lt;/a&gt; を使うと一瞬でした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defun query-replace-ruby-18-to-19-stayle-hash (&amp;amp;optional delimited start end)
  &amp;quot;Rubyの 1.8 スタイルの Hash を 1.9 から導入されたスタイルへ確認しながら変更する ネストした hashには対応していない&amp;quot;
  (interactive)
  (query-replace-regexp &amp;quot;:\\([^ ]+\\) =&amp;gt; \\([^ ]+\\)&amp;quot; &amp;quot;\\1: \\2&amp;quot; delimited start end))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という正規表現を指定しただけの Emacs Lisp も書いたけどみなかったことにしてください。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ActiveRecordで関連レコードの自動保存</title>
          <link>https://blog.eiel.info/blog/2012/12/30/activerecord-association/</link>
          <pubDate>Sun, 30 Dec 2012 13:50:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/12/30/activerecord-association/</guid>
          <description>&lt;p&gt;ActiveRecordで has_one なんかで関連づけしている場合、関連モデルを保存しわすれる。
そもそも、関連してることをドメインロジック上からは隠蔽したい。そんなときは &lt;code&gt;autosave&lt;/code&gt; オプションが使えます。&lt;/p&gt;

&lt;p&gt;関連するモデルが Information の場合、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;has_one :information, autosave: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となります。
informationで親のモデル IDを validate presence かけてたらはまったことも一応メモしておきます。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>zeus test で スペックを実行すると 2度実行されてしまう</title>
          <link>https://blog.eiel.info/blog/2012/12/27/zeus-test-twice/</link>
          <pubDate>Thu, 27 Dec 2012 18:05:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/12/27/zeus-test-twice/</guid>
          <description>

&lt;p&gt;&lt;code&gt;zeus test&lt;/code&gt; で spec を走らせるとなぜかスペックが2度実行されるようになっていた。
&lt;code&gt;spec/spec_helper.rb&lt;/code&gt; 内の &lt;code&gt;require &#39;rspec/autorun&#39;&lt;/code&gt; を削除すると治るようです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;spork&lt;/code&gt; で実行してみたり、 &lt;code&gt;rake spec&lt;/code&gt; したりもしてみたけど、消したから起きている問題は今のところないです。&lt;/p&gt;

&lt;h3 id=&#34;追記:f0c737f26f30e893e307678172ab107f&#34;&gt;追記&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;zeus rake spec&lt;/code&gt; したときに DB がリセットされてなくて上手く動いてないことがわかった。全件まわしたい場合は &lt;code&gt;rake spec&lt;/code&gt; を使用してたので気がつかなかった。&lt;/p&gt;

&lt;h3 id=&#34;参考:f0c737f26f30e893e307678172ab107f&#34;&gt;参考&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/burke/zeus/issues/180&#34;&gt;https://github.com/burke/zeus/issues/180&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Macで M-x gdbするとうまく動かない…</title>
          <link>https://blog.eiel.info/blog/2012/12/27/gdb-mi-on-mac-osx/</link>
          <pubDate>Thu, 27 Dec 2012 00:59:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/12/27/gdb-mi-on-mac-osx/</guid>
          <description>&lt;p&gt;まず要点から。&lt;/p&gt;

&lt;p&gt;新しめの emacs でMac上で &lt;code&gt;M-x gdb&lt;/code&gt; がうまくうごきません。
&lt;code&gt;M-x gud-gdb&lt;/code&gt; は動くことがわかりました。
&lt;code&gt;gud-gdb&lt;/code&gt;を使う場合は&lt;code&gt;gdb --fullname command&lt;/code&gt;で動かすと良いです。&lt;/p&gt;

&lt;p&gt;原因ですが、Macの gdb が古い模様。最近の Emacsに添付されてる gdb は gdb/mi インターフェイス(よくわかってない)でやりとりするようで、一応うごくけどわけのわからぬ動作をするみたいです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://users.snap.net.nz/~nickrob/#GDBMI&#34;&gt;gdbmi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Gentoo-Prefix をつかって gdb いれてみたものの run ができませんでした。ツールチェーンまわりはよくわからないのでなんとも言えません。&lt;/p&gt;

&lt;p&gt;gud-gdb ですが、これは gdb よりも機能が弱いものの模様です。古いeamcsがこれと同等のもので動いてるのかもしれませんが、調べていません。gdbに比べたら便利な機能は減るかもしれませんが、十分使えそうです。&lt;/p&gt;

&lt;p&gt;LLDB/MI みたいなものがあれば良いのでしょうが、よくわかりません。&lt;/p&gt;

&lt;p&gt;このあたりはMac使ってて不便なところですね。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Gitのソースコードでも読もうかな。準備編 - デバッガ</title>
          <link>https://blog.eiel.info/blog/2012/12/22/ready-to-read-source-git/</link>
          <pubDate>Sat, 22 Dec 2012 11:06:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/12/22/ready-to-read-source-git/</guid>
          <description>&lt;p&gt;ソースコードよみたいなー。よみたいなーってことで、環境を整えていきたいと思います。&lt;a href=&#34;http://hira-consulting.com/wiki/index.php?2005_6_23%A5%AB%A1%BC%A5%CD%A5%EB%BA%C2%C3%CC%B2%F1%AD%A1&#34;&gt;ひらメソッド&lt;/a&gt;にも挑戦したい。&lt;/p&gt;

&lt;p&gt;静的によむのも良いのですが、答え合わせができないと遠まわりです。デバッガを使って答え合わせできると効率がよいです。なので、ソースコードをDLして、動作確認するところまで試してみましょう。&lt;/p&gt;

&lt;p&gt;Gitのソースコードは &lt;a href=&#34;https://github.com/git/git&#34;&gt;https://github.com/git/git&lt;/a&gt; とかにあります。&lt;/p&gt;

&lt;p&gt;cloneしてみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone git://github.com/gitster/git.git
$ cd git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;別にどのバージョンにしてもいいのですが、自分が使っているバージョンでコードリーディングしていきたいと思います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git --version
git version 1.8.0.2
$ git checkout v1.8.0.2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで v1.8.0.2 のソースコードになっています。デバッグ情報をもった状態でビルドしてみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make -d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-d&lt;/code&gt; をつけることでOKです。&lt;/p&gt;

&lt;p&gt;しばらく待つとバイナリが生成されますので、&lt;code&gt;gdb&lt;/code&gt; をつかってみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ gdb git
(gdb)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで &lt;code&gt;gdb&lt;/code&gt; が起動できます。プロンプトに (gdb)と表示されます。
この状態で &lt;code&gt;r&lt;/code&gt; を入力すると実行ができます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(gdb) r
usage: git [--version] [--exec-path[=&amp;lt;path&amp;gt;]] [--html-path] [--man-path] [--info-path]
           [-p|--paginate|--no-pager] [--no-replace-objects] [--bare]
           [--git-dir=&amp;lt;path&amp;gt;] [--work-tree=&amp;lt;path&amp;gt;] [--namespace=&amp;lt;name&amp;gt;]
           [-c name=value] [--help]
           &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;]

The most commonly used git commands are:
   add        Add file contents to the index
   bisect     Find by binary search the change that introduced a bug
   branch     List, create, or delete branches
   checkout   Checkout a branch or paths to the working tree
   clone      Clone a repository into a new directory
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   fetch      Download objects and refs from another repository
   grep       Print lines matching a pattern
   init       Create an empty git repository or reinitialize an existing one
   log        Show commit logs
   merge      Join two or more development histories together
   mv         Move or rename a file, a directory, or a symlink
   pull       Fetch from and merge with another repository or a local branch
   push       Update remote refs along with associated objects
   rebase     Forward-port local commits to the updated upstream head
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index
   show       Show various types of objects
   status     Show the working tree status
   tag        Create, list, delete or verify a tag object signed with GPG

See &#39;git help &amp;lt;command&amp;gt;&#39; for more information on a specific command.

Program exited with code 01.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ブレークポイントを利用して停止させてみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(gdb) b main
(gdb) r
Breakpoint 1, main (argc=1, argv=0x7fff5fbff1a8) at git.c:535
535             startup_info = &amp;amp;git_startup_info;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;main 関数で止まるようにしてみました。
そのあと実行すると &lt;code&gt;git.c&lt;/code&gt; の 535行目で停止していることがわかります。&lt;/p&gt;

&lt;p&gt;一行づつ実行していくには &lt;code&gt;n&lt;/code&gt; を使います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(gdb) n
537             cmd = git_extract_argv0_path(argv[0]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ひたすら &lt;code&gt;n&lt;/code&gt; を入力していくとプログラムが1行づつ動作していくことがわかります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;p&lt;/code&gt; を使うと 変数の中身が見れます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(gdb) p argv[0]
$1 = 0x7fff5fbff390 &amp;quot;/Users/eiel/src/git/git&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とっても簡単ですね。上手いこと利用してソースコードを読んでいきましょう。&lt;/p&gt;

&lt;p&gt;終了するには &lt;code&gt;q&lt;/code&gt; を使います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(gdb) q
The program is running.  Exit anyway? (y or n) y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;gdbのもっと詳しい使い方はぐぐってみましょう。
&lt;code&gt;emacs&lt;/code&gt; などと連携して使うともっと便利になると思います。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>read_attributeの存在を知らなかった、死にたい - rails</title>
          <link>https://blog.eiel.info/blog/2012/12/17/read-attribute-activerecord/</link>
          <pubDate>Mon, 17 Dec 2012 16:57:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/12/17/read-attribute-activerecord/</guid>
          <description>

&lt;p&gt;Railsの ActiveRecordで レコードの属性にアクセスする際は動的に生成されたメソッドを使いますが、そのようなメソッドを上書きしている場合、値に直接アクセスする必要があります。このような属性情報は &lt;code&gt;@attributes&lt;/code&gt; に保存されています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/lib/active_record/attribute_methods.rb&lt;/code&gt;に定義されてる attributes メソッドを経由してアクセスしていましたが、なんとなく &lt;code&gt;@attributes&lt;/code&gt; へ直接アクセスするだけかとおもってたのですが、違ったようです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def attributes
  attrs = {}
  attribute_names.each { |name| attrs[name] = read_attribute(name) }
  attrs
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という定義になってました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;attribute_names&lt;/code&gt; は文字列で属性の一覧を返すので &lt;code&gt;@attributes&lt;/code&gt;は 普通のHashでキーが文字列です。
もし &lt;code&gt;email&lt;/code&gt; というの属性にアクセスしたい場合は &lt;code&gt;attributes[&amp;quot;email&amp;quot;]&lt;/code&gt; になります。 &lt;code&gt;attributes[:email]&lt;/code&gt; ではアクセスすることができません。&lt;/p&gt;

&lt;p&gt;しかし、 read_attributeは シンボルでも文字列でも使用することができて、
&lt;code&gt;read_attribute :email&lt;/code&gt; でも &lt;code&gt;read_attribute &amp;quot;email&amp;quot;&lt;/code&gt; のどちらでも良いみたいです。&lt;/p&gt;

&lt;p&gt;ちなみにエイリアスがあって &lt;code&gt;[]&lt;/code&gt; メソッドになります。なので &lt;code&gt;self[:email]&lt;/code&gt; などでアクセスできます。pubilcメソッドです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;read_attribute&lt;/code&gt; があるということはも &lt;code&gt;write_attribute&lt;/code&gt; もあります。&lt;/p&gt;

&lt;h3 id=&#34;ついでにもう少し深追い:7ee3a5e37df409bb91993c108309b1ff&#34;&gt;ついでにもう少し深追い&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;read_attribute&lt;/code&gt;の実装もついでにおってみると&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def read_attribute(attr_name)
  self.class.type_cast_attribute(attr_name, @attributes, @attributes_cache)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となってました。クラスメソッドを経由するようです
こいつも中身を追うと&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def type_cast_attribute(attr_name, attributes, cache = {}) #:nodoc:
  return unless attr_name
  attr_name = attr_name.to_s

  if generated_external_attribute_methods.method_defined?(attr_name)
    if attributes.has_key?(attr_name) || attr_name == &#39;id&#39;
      generated_external_attribute_methods.send(attr_name, attributes[attr_name], attributes, cache, attr_name)
    end
  elsif !attribute_methods_generated?
    # If we haven&#39;t generated the caster methods yet, do that and
    # then try again
    define_attribute_methods
    type_cast_attribute(attr_name, attributes, cache)
  else
    # If we get here, the attribute has no associated DB column, so
    # just return it verbatim.
    attributes[attr_name]
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;渡された名前がすぐに文字列に変換されてます。&lt;/p&gt;

&lt;p&gt;そしてまず 属性にアクセスするためのメソッドがあるかどうか確認するようです。ある場合はそちらに処理を渡すようです。attributesにまわってくるオブジェクトがHashじゃないモデルオブジェクトの場合の処理っぽいです。
また、まだ未定義なだけな場合は定義してからアクセスするようです。
それ以外のただのhashの場合は直接アクセスしにいくようです。&lt;/p&gt;

&lt;p&gt;ここでの attributes はActireRecordの attributes メソッドではなくただのHashです。一瞬、無限ループしてるように思えたので一応書いておきます。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ViewSourceMap が地味に役に立つ</title>
          <link>https://blog.eiel.info/blog/2012/12/13/view-source-map/</link>
          <pubDate>Thu, 13 Dec 2012 14:35:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/12/13/view-source-map/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;http://r7kamura.hatenablog.com/entry/2012/12/04/141911&#34;&gt;ViewSourceMap&lt;/a&gt;というのが地味に役に立ちそうなので導入してみた。&lt;/p&gt;

&lt;p&gt;部分テンプレートを render して出力された前後にどの view をレンダーしたのかHTMLのコメントを挿入してくれる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- BEGIN app/views/users/_form.html.haml --&amp;gt;
  &amp;lt;form /&amp;gt;
&amp;lt;!-- END app/views/users/_form.html.haml --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ついでに、partial以外のレイアウトとかメインのビューとかもついでに出力してみるのもありかなと思ったりもするけど、その辺は明確だし、時間ができたら fork してみよう&lt;/p&gt;

&lt;p&gt;ソースコードも短いしRails の plugin 的なものを作ってみたいときにも参考になりそうでした。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/r7kamura/view_source_map&#34;&gt;https://github.com/r7kamura/view_source_map&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ruby 2.0.0-preview2 をいれて rails起動してみた</title>
          <link>https://blog.eiel.info/blog/2012/12/10/ruby-2-dot-0-0-preview2/</link>
          <pubDate>Mon, 10 Dec 2012 13:49:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/12/10/ruby-2-dot-0-0-preview2/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-core/50443&#34;&gt;ruby 2.0.0-preview2&lt;/a&gt; が出てるのでビルドして rails を起動してみた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ uname -v
Darwin Kernel Version 12.2.1: Thu Oct 18 16:32:48 PDT 2012; root:xnu-2050.20.9~2/RELEASE_X86_64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2012/11/25/rbenv-ruby-2-dot-0-0-inclued-openssl/&#34;&gt;preview1のとき&lt;/a&gt;と同様にopenSSLがついてこないので、OpenSSLを一緒にビルドするようにrbenvを修正しました。[&lt;a href=&#34;https://github.com/eiel/ruby-build/tree/2.0.0-preview2-with_openssl&#34;&gt;https://github.com/eiel/ruby-build/tree/2.0.0-preview2-with_openssl&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bundle instal&lt;/code&gt;の実行で&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;~/.rbenv/versions/2.0.0-preview2/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:45:in `require&amp;rsquo;: cannot load such file &amp;ndash; rubygems/format (LoadError)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;と出てしまいますが rubygemsのライブラリ構成が変わっててbundlerが動かないだけみたいなので、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ gem install bundler --version &amp;quot;&amp;gt;= 1.3.0.pre2&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;として 1.3 系の gem をいれました。&lt;/p&gt;

&lt;p&gt;あとは普通に rails が起動できました。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>raptureXML でXMLのparse</title>
          <link>https://blog.eiel.info/blog/2012/12/06/rapturexml/</link>
          <pubDate>Thu, 06 Dec 2012 14:33:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/12/06/rapturexml/</guid>
          <description>&lt;p&gt;XMLのパースしなきゃいけなくて、libxmlで処理するのめんどくさいなー。ということで、&lt;a href=&#34;http://ios.eiel.info/CocoaPods&#34;&gt;CocoaPod&lt;/a&gt;を探った結果、&lt;a href=&#34;https://github.com/ZaBlanc/RaptureXML&#34;&gt;RaptureXML&lt;/a&gt;を試してみることにしました。&lt;/p&gt;

&lt;p&gt;URLから直接XMLを取得するイニシャライザがついていて、とても簡単に利用することができました。&lt;/p&gt;

&lt;p&gt;CocoaPodsを使わない場合は libz と libxml2 をリンクしてやるようにして、RXMLElement.hとRXMLElement.mをプロジェクトに追加するだけで使えます。&lt;/p&gt;

&lt;p&gt;だいたい以下のように利用してます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;NSURL* url = [NSURL URLWithString:@&amp;quot;http://eiel.info/hoge.xml&amp;quot;];
RXMLElement* root = [RXMLElement elementFromURL:url];
NSMutableArray* schedule = [NSMutableArray array];
[root iterate:@&amp;quot;item&amp;quot; usingBlock: ^(RXMLElement *item) {
    [schedule addObject:[[ALScheduleItem alloc] initWithRXMLElement:item]];
}];
i_schedule = [NSArray arrayWithArray:schedule];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RXMLElementオブジェクトを配列に格納しておいて利用しようとしたら、失敗したのでモデルオブジェクトを用意してやりました。&lt;/p&gt;

&lt;p&gt;値を取り出すには&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[element child:@&amp;quot;day&amp;quot;].text;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とやって取り出せます。DOMのインターフェイスになってますね。XPathも利用できるようです。
ソースコードも500行程度でコンパクトでした。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>MacでWMAやWMVの再生c</title>
          <link>https://blog.eiel.info/blog/2012/11/28/wma-wmv-on-mac/</link>
          <pubDate>Wed, 28 Nov 2012 12:11:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/11/28/wma-wmv-on-mac/</guid>
          <description>

&lt;p&gt;Macで WMA や WMV といったWindows Media ファイルを再生するには &lt;a href=&#34;http://www.telestream.net/flip4mac/overview.htm&#34;&gt;Flip4Mac&lt;/a&gt;というツールを利用するのが定番みたいなのですが、再生中に 「This is a demonstration of Flip4Mac」という音声が定期的に流れるようです。とりあえず、聞いてる分には問題ないのですが、サウンドレコーダで録音したい音声を編集したいだけなので、ちょっと困りものです。 $24 払えば出なくなるみたいですが、それだけのために $24 は高すぎやしないだろうか。&lt;/p&gt;

&lt;p&gt;WMAは圧縮率も高く非常に優れた形式ですが、最終的な利用形式としては今回採用しませんし、サウンドレコーダの形式がそうだったに過ぎないので、&lt;a href=&#34;http://www.nch.com.au/switch/index.html&#34;&gt;Switch&lt;/a&gt; というフリーツールで別の形式に変換させていただくことにしました。&lt;/p&gt;

&lt;h2 id=&#34;参考文献:e29e4a8a0ec13908f5ab47576716e0c8&#34;&gt;参考文献&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://discussionsjapan.apple.com/thread/10091117?start=0&amp;amp;tstart=0&#34;&gt;Apple サポートコミュニティ WMAファイルとMP3ファイルを一緒にして音楽CD作成はできますか&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>もっと楽ができた。bundle init で作成したプロジェクトの rake task</title>
          <link>https://blog.eiel.info/blog/2012/11/27/bundle-rake-task/</link>
          <pubDate>Tue, 27 Nov 2012 00:23:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/11/27/bundle-rake-task/</guid>
          <description>&lt;p&gt;以前 &lt;a href=&#34;https://blog.eiel.info/blog/2012/09/02/hiroshimarb-gem/&#34;&gt;勢いでhiroshimarbというgemを作った。反省する気なんてあんまりない。&lt;/a&gt;という記事で gem の リリースをする方法を書いたのですが、&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;bundle gem で作られた rake タスクも見てあげると良いかもしれません（rake releaseだと push しつつ tag も切ってくれたりする）。(via @sugamasao)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/sugamasao/status/268286597110312960&#34;&gt;https://twitter.com/sugamasao/status/268286597110312960&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;というコメントを頂いてました。
なので、調べました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rake -T
rake build    # Build hiroshimarb-0.1.4.gem into the pkg directory
rake install  # Build and install hiroshimarb-0.1.4.gem into system gems
rake release  # Create tag v0.1.4 and build and push hiroshimarb-0.1.4.gem to Rubygems
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;rake release&lt;/code&gt; で git でタグをつくりつつ、rubygems.org に uploadしてくれました。
生成したgemは &lt;code&gt;pkg&lt;/code&gt; ディレクトリ内に保存されます。対した作業ではないですが、バージョンを入力する手間が省けて素敵ですね。&lt;/p&gt;

&lt;p&gt;taskの中身は Rakefileが&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat Rakefile                                                              (gi#!/usr/bin/env rake
require &amp;quot;bundler/gem_tasks&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ということで &lt;a href=&#34;https://github.com/carlhuda/bundler/blob/master/lib/bundler/gem_tasks.rb&#34;&gt;gem_task.rb&lt;/a&gt; をみてみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;bundler/gem_helper&#39;
Bundler::GemHelper.install_tasks
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/carlhuda/bundler/blob/master/lib/bundler/gem_helper.rb#L13-L15&#34;&gt;Bundler::GemHelper.install_tasks&lt;/a&gt;が呼ばれてます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def install_tasks(opts = {})
  new(opts[:dir], opts[:name]).install
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;install_tasksはインスタンスを生成して installすることがわかります。&lt;/p&gt;

&lt;p&gt;つづいて インスタンスを生成するので、initilaizeです。
&lt;a href=&#34;https://github.com/carlhuda/bundler/blob/master/lib/bundler/gem_helper.rb#L26-L33&#34;&gt;Bundle::GemHelper#initialize&lt;/a&gt;では gemspecを読み込んでいるようです。なんとなくしかみてません。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def initialize(base = nil, name = nil)
  Bundler.ui = UI::Shell.new
  @base = (base ||= Dir.pwd)
  gemspecs = name ? [File.join(base, &amp;quot;#{name}.gemspec&amp;quot;)] : Dir[File.join(base, *}.gemspec&amp;quot;)]
  raise &amp;quot;Unable to determine name from existing gemspec. Use :name =&amp;gt; &#39;gemname&#39; in #install_tasks to manually set it.&amp;quot; unless gemspecs.size == 1
  @spec_path = gemspecs.first
  @gemspec = Bundler.load_gemspec(@spec_path)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そして install で rake タスクの生成をしています。
&lt;a href=&#34;https://github.com/carlhuda/bundler/blob/master/lib/bundler/gem_helper.rb#L35-L52&#34;&gt;Bundle::GemHelper#install&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def install
  desc &amp;quot;Build #{name}-#{version}.gem into the pkg directory.&amp;quot;
  task &#39;build&#39; do
    build_gem
  end

  desc &amp;quot;Build and install #{name}-#{version}.gem into system gems.&amp;quot;
  task &#39;install&#39; do
    install_gem
  end

  desc &amp;quot;Create tag #{version_tag} and build and push #{name}-#{version}.gem to Rubygems&amp;quot;
  task &#39;release&#39; do
    release_gem
  end

  GemHelper.instance = self
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そしてついに gem の生成。
&lt;a href=&#34;https://github.com/carlhuda/bundler/blob/master/lib/bundler/gem_helper.rb#L54-L63&#34;&gt;Bnudle::GemHelper#build_gem&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def build_gem
  file_name = nil
  sh(&amp;quot;gem build -V &#39;#{spec_path}&#39;&amp;quot;) { |out, code|
    file_name = File.basename(built_gem_path)
    FileUtils.mkdir_p(File.join(base, &#39;pkg&#39;))
    FileUtils.mv(built_gem_path, &#39;pkg&#39;)
    Bundler.ui.confirm &amp;quot;#{name} #{version} built to pkg/#{file_name}.&amp;quot;
  }
  File.join(base, &#39;pkg&#39;, file_name)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pkgディレクトリに生成している様子が見えます。&lt;/p&gt;

&lt;p&gt;つづいて &lt;code&gt;install_gem&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/carlhuda/bundler/blob/master/lib/bundler/gem_helper.rb#L65-L70&#34;&gt;Bundle::GemHelper#install_gem&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def install_gem
  built_gem_path = build_gem
  out, _ = sh_with_code(&amp;quot;gem install &#39;#{built_gem_path}&#39;&amp;quot;)
  raise &amp;quot;Couldn&#39;t install gem, run `gem install #{built_gem_path}&#39; for more detailed output&amp;quot; unless out[/Successfully installed/]
  Bundler.ui.confirm &amp;quot;#{name} (#{version}) installed.&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;build_gem&lt;/code&gt; を呼びだして、生成した上で insntall するだけのようです。&lt;/p&gt;

&lt;p&gt;最後に &lt;code&gt;release_gem&lt;/code&gt;
&lt;a href=&#34;https://github.com/carlhuda/bundler/blob/master/lib/bundler/gem_helper.rb#L72-L77&#34;&gt;Bundle::GemHelper#release_gem&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def release_gem
  guard_clean
  built_gem_path = build_gem
  tag_version { git_push } unless already_tagged?
  rubygem_push(built_gem_path)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;guard_clean&lt;/code&gt;というのは変更があるかどうかを &lt;code&gt;git diff&lt;/code&gt; を利用して確認してるようです。変更があれば例外が飛ぶようです。
そのあと &lt;code&gt;build_gem&lt;/code&gt;で gemを生成し、
tag を打った上で &lt;code&gt;git push&lt;/code&gt;し、
rubygems に pushしてくれるようです。&lt;/p&gt;

&lt;p&gt;おー。便利ですね。&lt;/p&gt;

&lt;p&gt;なんとなくソースコードを追う手順も一緒に書いてみました。参考になれば幸いです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Mac で rbenv 使って ruby-2.0.0-preview1 インストールすると OpenSSLがうごかないのでなんとかしてみた</title>
          <link>https://blog.eiel.info/blog/2012/11/25/rbenv-ruby-2-dot-0-0-inclued-openssl/</link>
          <pubDate>Sun, 25 Nov 2012 12:08:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/11/25/rbenv-ruby-2-dot-0-0-inclued-openssl/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;blog/2012/11/07/ruby2/&#34;&gt;以前書いたruby-2.0.0をビルドしてみた on Rbenv&lt;/a&gt;の方法で build できるのですが Mac OSX でやると OpenSSLのバージョンが古いようで、 &lt;code&gt;bundle install&lt;/code&gt; などが失敗してしまいます。&lt;/p&gt;

&lt;p&gt;なので OpenSSLを一緒にインストールするようにパッチを書いてみました。
&lt;a href=&#34;https://github.com/eiel/ruby-build&#34;&gt;github&lt;/a&gt;にupしてます。&lt;/p&gt;

&lt;p&gt;上記の記事と同じ状況であれば以下の操作でインストールできます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd ~/.rbenv/plungin/ruby-build
$ git remote add eiel git@github.com:eiel/ruby-build.git
$ git remote update
$ git checkout eiel/master -b eiel
$ rbenv install 2.0.0-preview1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;patchの内容ですが &lt;code&gt;share/ruby-build/&lt;/code&gt; にビルド時のルールを定義するファイルがあるのでそこに OpenSSL を追加しました。でもそのままだと失敗したので、&lt;code&gt;configure&lt;/code&gt; のoptionを追加したり make のオプションを潰したりしてます。&lt;/p&gt;

&lt;p&gt;homebrewを使った場合の情報はおちてるんですが Gentoo Prefix を使う身としては使わずになんとかしたかった。&lt;/p&gt;

&lt;h3 id=&#34;参考文献:e85d9c8131138866f640506d8f841157&#34;&gt;参考文献&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.takuyan.com/blog/2012/11/21/rbenv-install-2-0-0-preview1-and-openssl/&#34;&gt;http://blog.takuyan.com/blog/2012/11/21/rbenv-install-2-0-0-preview1-and-openssl/&lt;/a&gt;
&lt;a href=&#34;https://github.com/mxcl/homebrew/blob/master/Library/Formula/openssl.rb&#34;&gt;https://github.com/mxcl/homebrew/blob/master/Library/Formula/openssl.rb&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>部分一致 - Bash</title>
          <link>https://blog.eiel.info/blog/2012/11/25/match-partial-bash/</link>
          <pubDate>Sun, 25 Nov 2012 11:23:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/11/25/match-partial-bash/</guid>
          <description>&lt;p&gt;シェルスクリプトで部分一致を確認したい場合どうするんだろーっと思って考えた結果 grep の終了ステータスで確認すればいいんじゃないかということで。以下のように書いた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;search_term=&amp;quot;openssl&amp;quot;
target=&amp;quot;openssl-1.0.0&amp;quot;

if echo $target | grep &amp;quot;$search_Term&amp;quot; &amp;gt; /dev/null; then
  echo &amp;quot;goro&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;せっかくなので簡単に解説&lt;/p&gt;

&lt;p&gt;shellの if は終了ステータスに応じて分岐します。
終了ステータスは $? に代入されています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;echo $target | grep &amp;quot;$search_Term&amp;quot; &amp;gt; /dev/null; echo $?&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;とすればどんなステータスを返すのか確認できます。
grep は match しなければ 終了ステータス 1 を返すので 確認したい文字を流し込んでチェックして、余計な内容を表示しないように /dev/nullにリダイレクトしてます。&lt;/p&gt;

&lt;p&gt;もっと良い方法があれば教えていただきたい。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>TagHelperっていうのがあるんだけど、周りの人が使ってない - Rails</title>
          <link>https://blog.eiel.info/blog/2012/11/22/rails-tag-helper/</link>
          <pubDate>Thu, 22 Nov 2012 10:35:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/11/22/rails-tag-helper/</guid>
          <description>&lt;p&gt;Railsのhelperに &lt;a href=&#34;http://rubydoc.info/gems/actionpack/3.2.8/ActionView/Helpers/TagHelper&#34;&gt;TagHelper&lt;/a&gt; っていうのが &lt;code&gt;text_area_tag&lt;/code&gt; のようなフォームを作成するような Helper がありますが、その内部で使用するようなメソッドが定義されています。&lt;/p&gt;

&lt;p&gt;主に &lt;code&gt;tag&lt;/code&gt;, &lt;code&gt;content_tag&lt;/code&gt; になるのですが、自分でHTMLのタグを生成するようなヘルパーを生成したときこれを使うと便利です。&lt;/p&gt;

&lt;p&gt;例えば &lt;code&gt;hoge&lt;/code&gt;的なものを表現するタグを生成するhoge_tagという抽象化をしたいときにざっくりな実装をすると以下のようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def hoge_tag(content)
  %Q{&amp;lt;div class=&amp;quot;hoge&amp;quot;&amp;gt;#{content}&amp;lt;/div&amp;gt;}.html_safe
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;hoge_tag &amp;quot;hogehoge&amp;quot; # =&amp;gt; &amp;quot;&amp;lt;div class=\&amp;quot;hoge goro\&amp;quot;&amp;gt;hogehoge&amp;lt;/div&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;しかし、つかっていくと個別に class属性を追加したくなる場合が多々ありますし、content の escape などもしないといけないです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def hoge_tag(content, *classes)
  classes = [&amp;quot;hoge&amp;quot;] + classes
  class_string = classes.join(&amp;quot; &amp;quot;)
  %Q{&amp;lt;div class=&amp;quot;#{class_string}&amp;quot;&amp;gt;#{content}&amp;lt;/div&amp;gt;}.html_safe
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;hoge_tag &amp;quot;hogehoge&amp;quot;, &amp;quot;goro&amp;quot; # =&amp;gt; &amp;quot;&amp;lt;div class=\&amp;quot;hoge goro\&amp;quot;&amp;gt;hogehoge&amp;lt;/div&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もちろん、class属性だけじゃなくていろいろ指定したくなります。
&lt;code&gt;text_area_tag&lt;/code&gt; なんかと同じようにoptionsで受けるようにしたい。こうなっとときに 「&lt;strong&gt;ソースを読もう!!&lt;/strong&gt;」 という発想が出るようになると良いと思います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def hoge_tag(content, options = nil)
  classes = options[:class]
  classes = [classes] unless Array === classes
  options[:class] = [&amp;quot;hoge&amp;quot;] + classes
  content_tag :hoge, content, options
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;hoge_tag &amp;quot;hogehoge&amp;quot;, class: &amp;quot;goro&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;content_tag はブロックを受けとったり, escapeの可否などの指定もできます。
ブロックをうけとるようなものはテンプレートエンジン内ではなかなかあばれてくれます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;%= content_tag :hoge do %&amp;gt;
  &amp;quot;hogehoge&amp;quot;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;といった書き方ができます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt;,&lt;code&gt;&amp;lt;img /&amp;gt;&lt;/code&gt;のような内部にコンテントを持たないタグを生成する場合は &lt;code&gt;tag&lt;/code&gt;というメソッドを使うと良いです。&lt;/p&gt;

&lt;p&gt;Viewを書きはじめる前に &lt;a href=&#34;http://rubydoc.info/gems/actionpack/3.2.8/ActionView/Helpers&#34;&gt;Helperの一覧&lt;/a&gt;をみておくのも良いと思います。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>HTMLを印刷時 表の途中で改ページを防ぐ</title>
          <link>https://blog.eiel.info/blog/2012/11/22/table-page-break/</link>
          <pubDate>Thu, 22 Nov 2012 09:49:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/11/22/table-page-break/</guid>
          <description>&lt;p&gt;印刷用のページってどうやって作るのがいいんだろう? PDF? HTMLでもいいの？
ってことで HTML でかきはじめてました。&lt;/p&gt;

&lt;p&gt;キャプションと表をひとくくりにしたかったのですが、そのままだと表の途中で改ページされてしまうのは具合が悪くてなんとしたい。
ひとつの表はページを跨いで欲しくない。&lt;/p&gt;

&lt;p&gt;CSSで改ページを制御するには &lt;code&gt;page-break-inside&lt;/code&gt; を &lt;code&gt;avoid&lt;/code&gt; にしてやればよいらしいです。
なので以下のようなHTMLを用意して、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;block&amp;quot;&amp;gt;
  &amp;lt;h1&amp;gt;表の説明&amp;lt;/h1&amp;gt;
  &amp;lt;table&amp;gt;
    &amp;lt;tr&amp;gt;
      ...
    &amp;lt;/tr&amp;gt;
  &amp;lt;/table&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CSSを以下のように用意すると期待したとおりになりました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.block {
   page-break-inside: avoid;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
      
    
      
        <item>
          <title>git push 時に発生する update hookを起動するワンナイナー</title>
          <link>https://blog.eiel.info/blog/2012/11/20/git-hooks-triger/</link>
          <pubDate>Tue, 20 Nov 2012 15:41:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/11/20/git-hooks-triger/</guid>
          <description>&lt;p&gt;git の hooks の update hook の動作確認するのに使ってたワンナイナー。
update というのは リモートリポジトリに push したときに リモートで起動するスクリプト。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git commit --amend --no-edit; git push --force
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;git commit --amend&lt;/code&gt; を使用してコミットの日付を変更しておけば新しい commit として認識してくれるので、&amp;ndash;force オプションで無理矢理 push してやる。
コミットが新しくなるので hook が起動してくれます。
&lt;code&gt;git push&lt;/code&gt; の部分は適宜好みに合わせて。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>認証必須環境におけるJenkinsのスクリプトトリガーによるビルドの実行</title>
          <link>https://blog.eiel.info/blog/2012/11/19/jenkins-build-for-trigger-script/</link>
          <pubDate>Mon, 19 Nov 2012 18:18:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/11/19/jenkins-build-for-trigger-script/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://jenkins-ci.org/&#34;&gt;Jenkins&lt;/a&gt;は便利に使わせていただいているのですが、git push をhookして&lt;code&gt;ビルドの開始&lt;/code&gt;をできるようにしていないまま運用していて、重い腰をあげてやっと設定することにしました。&lt;/p&gt;

&lt;p&gt;公開しているサーバやイントラにあるサーバであれば&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://YOURHOST/jenkins/job/PROJECTNAME/build&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;ヘ wget してしまえば良いので簡単です。インターネット上に置いているとそうもいかないので、認証を必須にします。&lt;/p&gt;

&lt;p&gt;認証を必須にしている場合は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ユーザID (USER)&lt;/li&gt;
&lt;li&gt;API Token (APITOKEN)&lt;/li&gt;
&lt;li&gt;Project Token (PROJECTTOKEN)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;が必要になります。&lt;/p&gt;

&lt;p&gt;API Tokenと Project の Tokenが別のものだと気がつかずに無駄にはまりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ wget --auth-no-challenge --http-user=USER --http-password=APITOKEN &#39;http://jenkins.yourcompany.com/job/your_job/build?token=PROJECTTOKEN&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすることで上手くいきました。&lt;/p&gt;

&lt;p&gt;最終的には&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ wget -q --auth-no-challenge --http-user=USER --http-password=APITOKEN &#39;http://jenkins.yourcompany.com/job/your_job/build?token=PROJECTTOKEN&#39; -O - &amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で回してます。&lt;/p&gt;

&lt;p&gt;USER はユーザのIDをそのまま使えばよいです。
APITOKEN はユーザの設定画面にあります。
PROJECTTOKEN はプロジェクトの設定画面で自分で設定します。&lt;/p&gt;

&lt;h1 id=&#34;参考文献:debc6d162eacc4a63bc2d34bf514a529&#34;&gt;参考文献&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/Authenticating+scripted+clients&#34;&gt;https://wiki.jenkins-ci.org/display/JENKINS/Authenticating+scripted+clients&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ActiveSupport::Concern - Railsのソースとか読みはじめた 2</title>
          <link>https://blog.eiel.info/blog/2012/11/18/activesupport-concern2/</link>
          <pubDate>Sun, 18 Nov 2012 23:42:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/11/18/activesupport-concern2/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;https://blog.eiel.info/blog//2012/11/14/activesupport-concern/&#34;&gt;ActiveSupport::Concern - Railsのソースとか読みはじめた&lt;/a&gt;の続きになるのですが、&lt;/p&gt;

&lt;p&gt;@netwillnet さんに。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ActiveSupport::Concernはモジュールが少しだけ書きやすくなるというメリットよりも、複数のモジュール同士に依存関係があったときにモジュール内でその依存関係をうまく解消させられるところに真価があるのでは&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/netwillnet/status/270150759335723008&#34;&gt;https://twitter.com/netwillnet/status/270150759335723008&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;と素敵な突っ込みを頂いたので、rdocとソースコードと睨めっこしてきました。&lt;/p&gt;

&lt;p&gt;睨めっこした結果の結論を書きたいと思います。&lt;/p&gt;

&lt;p&gt;というわけで&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A -&amp;gt; B -&amp;gt; C
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という依存性があるモジュールを考えます。A には B が必要で。 B には C が必要という意味です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module C
  def c
    &amp;quot;c&amp;quot;
  end
end

module B
  include C

  def b
    &amp;quot;b&amp;quot; + c
  end
end

class A
  include B

  def a
    &amp;quot;a&amp;quot; + b
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;A.new.a&lt;/code&gt; と実行すると &lt;code&gt;&amp;quot;abc&amp;quot;&lt;/code&gt; と出力されます。
これと同じことをクラスメソッドで実現しようとしてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module C2
  def c
    &amp;quot;c&amp;quot;
  end
end

module B2
  def b
    &amp;quot;b&amp;quot; + c
  end
end

class A2
  extend C2 # ここにかきたくない
  extend B2

  class &amp;lt;&amp;lt; self
    def a
      &amp;quot;a&amp;quot; + b
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;extend C2&lt;/code&gt; を &lt;code&gt;module B2&lt;/code&gt; の中で書きたいのですが、 A2に書かなければ動作させることができません。(がんばればできるけど、がんばりたくない)&lt;/p&gt;

&lt;p&gt;こういうときに &lt;code&gt;ActiveSupport::Concern&lt;/code&gt; を利用すると下記のように書けました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module C3
  extend ActiveSupport::Concern

  module ClassMethods
    def c
      &amp;quot;c&amp;quot;
    end
  end
end

module B3
  extend ActiveSupport::Concern
  include C3 # ここにかける

  module ClassMethods
    def b
      &amp;quot;b&amp;quot; + c
    end
  end
end

class A3
  include B3

  class &amp;lt;&amp;lt; self
    def a
      &amp;quot;a&amp;quot; + b
    end
  end
end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;include C3&lt;/code&gt;を &lt;code&gt;module B3&lt;/code&gt;の内側でかくことができました。&lt;/p&gt;

&lt;p&gt;Concernという名前は依存性の悩みから解消されるということなんでしょうか？まだよくわからないです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Rails 3.2.9 で default_scopeに設定してる条件が属性の初期値になるらしい</title>
          <link>https://blog.eiel.info/blog/2012/11/16/rails-329-default-scope/</link>
          <pubDate>Fri, 16 Nov 2012 15:05:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/11/16/rails-329-default-scope/</guid>
          <description>&lt;p&gt;あるプロジェクトでrails 3.2.9 にアップデートしたら テストが失敗しまくる。そのひとつに ActiveRecordの default_scope を使ってる部分に問題があるとわかった。&lt;/p&gt;

&lt;p&gt;どんなエラーかと言いますと。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;NoMethodError: undefined method `to_i&#39; for [1, 2, 3]:Array
from activerecord-3.2.9/lib/active_record/connection_adapters/column.rb:178:in `value_to_integer&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;[1, 2, 3]&lt;/code&gt; とか即値すぎて &lt;em&gt;わけがわからないよ&lt;/em&gt; という感じだったんですが、いろいろ調べると&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ActiveRecord::Base
   default_scope proc { where(state_id: [1, 2, 3]]) }
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というコードがあったときに&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.new
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すると発生することがわかりました。&lt;/p&gt;

&lt;p&gt;仕方ないので、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ActiveRecord::Base
   scope :valid, proc { where(state_id: [1, 2, 3]]) }
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;として、ひたすら置換しまくりでした。
僕はdefault_scope使わない派なのであまり気にしない方向で。&lt;/p&gt;

&lt;p&gt;ちなみに&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ActiveRecord::Base
   default_scope proc { where(state_id: 1,name: &amp;quot;hoge&amp;quot;) }
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としておくと&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;User.new
=&amp;gt; #&amp;lt;User id: nil, name: &amp;quot;hoge&amp;quot;, state_id: 1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となるようです。
scopeから初期値を生成する機能がもともとあったみたいで(知らなかった)それが&lt;code&gt;default_scope&lt;/code&gt;のものがデフォルトになったようです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Capybaraでtitleタグの内容が取得できなくなってしまった。</title>
          <link>https://blog.eiel.info/blog/2012/11/16/capybara-title/</link>
          <pubDate>Fri, 16 Nov 2012 11:07:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/11/16/capybara-title/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;https://github.com/jnicklas/capybara&#34;&gt;Capybara&lt;/a&gt;を2.0にしたら動かなくなった &lt;a href=&#34;http://cukes.info/&#34;&gt;Cucumber&lt;/a&gt; の step がありました。titleタグ のtextをとる部分。visible でない要素のtextは取得できなくなったんでしょうか。
コードを追う余裕がなかったので、Nokogiriで対処した。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;target = find(&amp;quot;title&amp;quot;).text
expect(target).to eq(title)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;target = Nokogiri::HTML.parse(page.source).css(&amp;quot;title&amp;quot;).text
expect(target).to eq(title)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;に書き換えました。&lt;/p&gt;

&lt;p&gt;ちょっと無理矢理。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://cukes.info/&#34;&gt;Cucumber&lt;/a&gt;についてやりとりする仲間がいないので、titleタグのテキストの中身なんて確認しなくていいよ!とか、そういうい話ができないのが寂しいですね。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ActiveSupport::Concern - Railsのソースとか読みはじめた</title>
          <link>https://blog.eiel.info/blog/2012/11/14/activesupport-concern/</link>
          <pubDate>Wed, 14 Nov 2012 11:59:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/11/14/activesupport-concern/</guid>
          <description>&lt;p&gt;Railsのソースをちょろちょろ読むようにしている。読んで学んだことをメモしておきたい。だいたい読んだ当時の最新リリースを参考にします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/rails/rails/blob/v3.2.9/activesupport/lib/active_support/concern.rb&#34;&gt;ActiveSupport::Concern&lt;/a&gt; を読みました。&lt;/p&gt;

&lt;p&gt;このモジュールはモジュールの定義を手助けします。
クラスメソッドの定義場所をルール決めして &lt;code&gt;include&lt;/code&gt; するだけで済むようにしたり、クラスのコンテキストで実行したい処理を書く場所を用意してくれます。&lt;/p&gt;

&lt;p&gt;具体的にいきます。
以下のコードがあったとします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ConcernSample

  attr_accessor :hoge

  def self.mogu
    &amp;quot;mogu&amp;quot;
  end

  def goro
    &amp;quot;goro&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを以下のようにするだけで同じ機能を提供できるようにしたいと思います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ConcernSample
  include Sample
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;処理を Sample モジュールにまとめたいということです。
これができると&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ConcernSample
  include Sample
end

class ConcernSample2
  include Sample
end

class ConcernSample3
  include Sample
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と、似たような機能をもつクラスを量産できます。
クラスに機能を追加するのが簡単になるという視点を持つとよいでしょう。&lt;/p&gt;

&lt;p&gt;さて、Sample はどのように書くかということです。
ここで &lt;code&gt;ActiveSupport::Concern&lt;/code&gt; を利用します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;active_support&#39;

module Sample

  extend ActiveSupport::Concern

  included do
    attr_accessor :hoge
  end

  module ClassMethods
    def mogu
      &amp;quot;mogu&amp;quot;
    end
  end

  def goro
    &amp;quot;goro&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じになります。
クラスメソッドの定義の仕方を少し代えて横に並べてみると、非常に変化が少なくて済むのがわかると思います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/concern.png&#34; alt=&#34;参考&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ActiveSupport::Concern&lt;/code&gt; を利用せずに実装するとこんな感じになります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;module Sample
  def self.included(base)
    base.extend ClassMethods
    base.class_exec do
      attr_accessor :hoge
    end
  end

  module ClassMethods
    def mogu
      &amp;quot;mogu&amp;quot;
    end
  end

  def goro
    &amp;quot;goro&amp;quot;
  end
end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;def self.included&lt;/code&gt; がなくなり、モジュールの特異メソッドの利用がなくなるのと、&lt;code&gt;base.extend&lt;/code&gt; が不要になるところが若干便利になります。よく rails のコード内で出てくるので知っておきたいですね。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/NeXTSTEP2OSX&#34;&gt;@NeXTSTEP2OSさん&lt;/a&gt; から質問があって&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;サブクラスじゃダメなの？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;と、質問されました。&lt;/p&gt;

&lt;p&gt;親クラスにも重複するコードをまとめることができますが、&lt;strong&gt;機能を追加する&lt;/strong&gt;という視点で考えた場合、module の場合はいくつも &lt;code&gt;include&lt;/code&gt; することができます。継承を利用した場合は、親クラスはひとつしか持つことができないため不便です。また、継承は&lt;code&gt;is-a&lt;/code&gt;の関係ではないところでは使うべきでないとされています。この &lt;code&gt;Concern&lt;/code&gt; が利用されている部分は &lt;code&gt;is-a&lt;/code&gt;の関係を持たない部分でコードの重複を避けるためやメソッドが多すぎるクラスでメソッドを分類するために利用されているようです。&lt;/p&gt;

&lt;p&gt;利用例としてはたくさんのメソッドが定義されている &lt;a href=&#34;https://github.com/rails/rails/blob/v3.2.9/activerecord/lib/active_record/base.rb#L685-715&#34;&gt;ActiveRecord::Base&lt;/a&gt; クラスで &lt;code&gt;include&lt;/code&gt; されてるモジュールなどがあります。
&lt;a href=&#34;https://github.com/rails/rails/blob/v3.2.9/activerecord/lib/active_record/persistence.rb#L6&#34;&gt;ActiveRecrod::Persistence&lt;/a&gt;などをみてみると利用されています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Concern&lt;/code&gt;というクラスの名前の由来がよくわからない。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2012/11/18/activesupport-concern2/&#34;&gt;つづき&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>debugger-ruby_core_source に Ruby 1.9.3-p327 のヘッダ追加してみた</title>
          <link>https://blog.eiel.info/blog/2012/11/10/debugger-ruby-core-source-on-1-dot-9-3-p327/</link>
          <pubDate>Sat, 10 Nov 2012 16:58:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/11/10/debugger-ruby-core-source-on-1-dot-9-3-p327/</guid>
          <description>

&lt;p&gt;2012/11/17 追記&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.1.5がリリースされて基本的に以下の作業は不要です。
以下の記事は興味がある方だけどうぞ。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;昨日になりますが、 &lt;a href=&#34;http://www.ruby-lang.org/ja/news/2012/11/09/ruby-1-9-3-p327-is-released/&#34;&gt;Ruby 1.9.3-p327&lt;/a&gt; のリリースがありました。早速インストールして開発環境で試してみてます。
前回のリリースのときもそうだったのですが、rbenv と ruby-build を使用していると、 &lt;code&gt;debugger-linecache&lt;/code&gt; のインストールにこけてしまいます。この子をインストールするには ruby の ヘッダが必要になります。(他の環境でもなるかもしれませんけども)
この gem は &lt;code&gt;debbuger&lt;/code&gt; を利用している場合必要になります。&lt;/p&gt;

&lt;p&gt;そのヘッダを提供する &lt;a href=&#34;https://rubygems.org/gems/debugger-ruby_core_source&#34;&gt;debbuger-ruby_core_source&lt;/a&gt; というgemがあるので、この子を git clone で取得してごにょごにょすればごまかせます。&lt;/p&gt;

&lt;p&gt;前回はごにょごにょしたものがすでにあったので &lt;code&gt;git clone&lt;/code&gt; して &lt;code&gt;gem build&lt;/code&gt; &lt;code&gt;gem install&lt;/code&gt; のコンボで済んだのですが、自分でやってみました。&lt;a href=&#34;https://github.com/cldwalker/debugger-ruby_core_source/pull/7&#34;&gt;Pull Request&lt;/a&gt; も出してるのでそのうち gem が更新されるのでそんなに気にする必要はないかもしれません。&lt;/p&gt;

&lt;h3 id=&#34;すぐにインストールしたい人向け:93c49dc8ad9c55313cc87c70bc8d24ee&#34;&gt;すぐにインストールしたい人向け&lt;/h3&gt;

&lt;p&gt;とにかく、動かしたい人で &lt;code&gt;debugger-ruby_core_source.gem&lt;/code&gt; が欲しい人むけ&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git@github.com:eiel/debugger-ruby_core_source.git
$ gem build debugger-ruby_core_source.gemspec
$ gem instll debugger-ruby_core_source-1.1.5.gem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとは bundle install などやりなおしましょう。&lt;/p&gt;

&lt;h3 id=&#34;どうやって更新するか知りたい人向け:93c49dc8ad9c55313cc87c70bc8d24ee&#34;&gt;どうやって更新するか知りたい人向け&lt;/h3&gt;

&lt;p&gt;READMEみればわかるのですが簡単に更新できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem install archive-tar-minitar
$ rake add_source VERSION=1.9.3-p327
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;add_source という rake task が用意されてるので簡単です。
この実行には &lt;code&gt;archive-tar-minitar&lt;/code&gt; が必要になります。
bundler に対応されてないので直接いれました。
ネットワークみてみると対応されてるのがありましたが取り込まれてないようです。
あとは commit を作ればOKです。
最近の gem は gem を生成する際に git ls-tree の情報が使用されるので commit しないとハマります。&lt;/p&gt;

&lt;p&gt;では happy programming !&lt;/p&gt;

&lt;p&gt;おまけ&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/cldwalker/debugger-ruby_core_source/commit/f68d267844f8d385498a8a80c1590ba77141bd5a&#34;&gt;crediteにアカウント名が残りました。ヤホーイ。&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>コード補完に便りにし過ぎてはいけない。</title>
          <link>https://blog.eiel.info/blog/2012/11/08/not-code-completion/</link>
          <pubDate>Thu, 08 Nov 2012 11:02:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/11/08/not-code-completion/</guid>
          <description>&lt;p&gt;ふと思っただけなのですが、コード補完に便りにし過ぎるのはダメなんではないだろうか。しかし、まず前提条件を付けたい。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;コード補完はしまくれ!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;コード補完などの補完機能を利用していない人はいますぐ使いましょう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Emacs なら M-/&lt;/li&gt;
&lt;li&gt;vim なら C-p, C-n&lt;/li&gt;
&lt;li&gt;Sublime Text 2 なら C-Space&lt;/li&gt;
&lt;li&gt;TextMate 2 なら ESC&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などなどでデフォルトでもある程度できます。メソッド補完などをしたくなればカスタマイズしていきましょう。&lt;/p&gt;

&lt;p&gt;コード補完はとても便利なのですが便りすぎるといくつかの問題が出てきます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;つづりがわからなくて補完がないと文章やコードが書けない。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;補完のおかげで生産性は上がり、効率も上がるのですが、地力が落ちてしまいます。どちらかというと地力を高めつつも生産性を上げるほうが最終的な作業効率も伸びてくるはずです。&lt;/p&gt;

&lt;p&gt;楽をするというのは、&lt;strong&gt;&amp;ldquo;日々の作業は楽をする。しかし、脳の力もついでに鍛える。&amp;rdquo;&lt;/strong&gt;というのを大事にしたい。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>cucumber で表示した画面がXMLを出力しているか確認する</title>
          <link>https://blog.eiel.info/blog/2012/11/07/cucumber-xml/</link>
          <pubDate>Wed, 07 Nov 2012 15:27:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/11/07/cucumber-xml/</guid>
          <description>&lt;p&gt;rspec でマッチャーがあればよいのですが、とりあえず心当たりがなかったので、適当にごまかしました。良いgemがあれば紹介して欲しいです。&lt;/p&gt;

&lt;p&gt;page.source が サーバからの出力を返してくださるので、これを Nokogiri で parse させてエラーがないかどうかで確認しました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ならば /XMLを出力する/ do
  errros = Nokogiri::XML(page.source).errors
  expect(errors).to be_empty
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;どうせなら下記のように書きたいですね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ならば /XMLを出力する/ do
  should render_xml
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;マッチャーを書いてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec::Matchers.define :render_xml do
  match do |actual|
    Nokogiri::XML(actual.source).errors.empty?
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ほとんどそのままです。matcher つくるのは難しくないので気軽に作りたいです。&lt;/p&gt;

&lt;p&gt;少しだけ解説。
y
cucumberの中では subject を省略した場合は page になります。なので、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;ならば /XMLを出力する/ do
  page.should render_xml
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と書いたのと等しいです。なので、acutual には page オブジェクトがバインドされていますので、そこから source を取り出してチェックします。page オブジェクトには html というメソッドが存在しますが、ブラウザが解釈したあとのDOMをdumpしたような感じになってるので期待通りの動きをしませんでした。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ruby-2.0.0をビルドしてみた on rbenv</title>
          <link>https://blog.eiel.info/blog/2012/11/07/ruby2/</link>
          <pubDate>Wed, 07 Nov 2012 00:48:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/11/07/ruby2/</guid>
          <description>&lt;p&gt;Ruby 2.0.0 preview1 の話題をちらほら見かけますし、 heroku さんが対応したらしいので遊びのプロジェクトで使おうと思いまして、buildしてみました。&lt;/p&gt;

&lt;p&gt;私は &lt;code&gt;rbenv&lt;/code&gt; を &lt;code&gt;git clone&lt;/code&gt; でインストールしていて、ruby-buildも &lt;code&gt;git clone&lt;/code&gt; しています。
この場合以下の操作でビルドできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ~/.rbenv
$ git pull
$ cd ~/.rbenv/plugins/ruby-build
$ git pull
$ rbenv install 2.0.0-preview1
$ rbenv global 2.0.0-preview1
$ ruby -v
ruby 2.0.0dev (2012-11-01 trunk 37411) [x86_64-darwin12.2.0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;git だと更新も楽チンですね。rails プロジェクトでも試してみたり、新機能を試してみたりしたいと思います。&lt;/p&gt;

&lt;p&gt;新機能については 下記のサイトとかにちょろちょろあるみたいです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://el.jibun.atmarkit.co.jp/rails/2012/11/ruby-20-8256.html&#34;&gt;http://el.jibun.atmarkit.co.jp/rails/2012/11/ruby-20-8256.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/a_matsuda/ruby-2-dot-0-on-rails&#34;&gt;https://speakerdeck.com/a_matsuda/ruby-2-dot-0-on-rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;自分で試したら記事にしたいと思います。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Railsによる開発にはzeusが新たな定番になりそう。</title>
          <link>https://blog.eiel.info/blog/2012/10/13/zeus/</link>
          <pubDate>Sat, 13 Oct 2012 11:52:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/10/13/zeus/</guid>
          <description>&lt;p&gt;&lt;code&gt;rails c&lt;/code&gt; や &lt;code&gt;rake spec&lt;/code&gt; ってすごく時間がかかる。それをできるだけ早くするプロダクトはいままでにもいろいろありました。&lt;code&gt;rails-sh&lt;/code&gt;とか&lt;code&gt;spork&lt;/code&gt;とか。&lt;/p&gt;

&lt;p&gt;そんな中&lt;a href=&#34;https://github.com/burke/zeus&#34;&gt;zeus&lt;/a&gt;というのが最近登場したみたいです。&lt;code&gt;gem install zeusu&lt;/code&gt; でインストール。&lt;code&gt;Gemfile&lt;/code&gt;に書いてもいいそうですが、かかなくて良いようです。&lt;/p&gt;

&lt;p&gt;あとは RAILS_ROOTで &lt;code&gt;zeus init&lt;/code&gt; して &lt;code&gt;zeus start&lt;/code&gt; しておけば、あとは別の端末で &lt;code&gt;zeus c&lt;/code&gt; や &lt;code&gt;zeusu s&lt;/code&gt;として使うだけです。ファイルを変更すると認識して再読込します。&lt;code&gt;zeus init&lt;/code&gt;した際に&lt;code&gt;zeus.json&lt;/code&gt;が生成されます。
変更箇所に応じて必要なところからforkしなおすような挙動をしているように見えます(よくわかっていません)&lt;/p&gt;

&lt;p&gt;cucumberやrspecも認識して &lt;code&gt;zeusu cucumber&lt;/code&gt; や &lt;code&gt;zeusu spec&lt;/code&gt; というものも用意してくれます。&lt;/p&gt;

&lt;p&gt;まだ使い込んでいませんが、イノベーションを感じるのでしばらく使ってみようと思います。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Mac でPostgreSQL</title>
          <link>https://blog.eiel.info/blog/2012/10/04/postgres/</link>
          <pubDate>Thu, 04 Oct 2012 22:20:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/10/04/postgres/</guid>
          <description>&lt;p&gt;railsアプリの一部を heroku にもっていこうとおもったので、「開発環境もPostgreSQLにすべきよね」と、思ったので 最初は Gentoo Prefix でインストールしたのですが起動方法がわからず。時間をかけたくなかったので、&lt;a href=&#34;http://www.postgresql.org/download/macosx/&#34;&gt;One Click Installer&lt;/a&gt;を使用したら Mac が起動できなくなりました。&lt;/p&gt;

&lt;p&gt;というわけで、困っていたら&lt;a href=&#34;http://postgresapp.com/&#34;&gt;Postgres.app&lt;/a&gt;というのがありました。9.1.3ですが heroku が提供してるものなので、herokuにデプロイする目的には最適なような気がしております。&lt;/p&gt;

&lt;p&gt;はい、それだけです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>travisを利用してみる</title>
          <link>https://blog.eiel.info/blog/2012/09/21/travis/</link>
          <pubDate>Fri, 21 Sep 2012 17:51:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/09/21/travis/</guid>
          <description>

&lt;p&gt;githubで公開してるリポジトリを継続的インテグレーションを行えるサービスとして &lt;a href=&#34;http://travis-ci.org/&#34;&gt;travis&lt;/a&gt; というのがあるので、&lt;a href=&#34;http://travis-ci.org/&#34;&gt;hiroshimarb-gem&lt;/a&gt;で利用してみることにした&lt;/p&gt;

&lt;p&gt;githubのアカウントがあればログインができるのでアカウントの作成は手軽でした。&lt;/p&gt;

&lt;h2 id=&#34;リポジトリの指定:c56930a3760ec07c4fc95b46ac55be17&#34;&gt;リポジトリの指定&lt;/h2&gt;

&lt;p&gt;リポジトリを指定するにはプロフィールからいけばよいです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.eiel.info/images/travis-profile.png&#34; alt=&#34;ここ&#34; /&gt;&lt;/p&gt;

&lt;p&gt;いろいろでるので利用するリポジトリをONにすればよいみたいです。&lt;/p&gt;

&lt;h2 id=&#34;travisの設定:c56930a3760ec07c4fc95b46ac55be17&#34;&gt;travisの設定&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;.travis.yml&lt;/code&gt;用意する必要があります。&lt;/p&gt;

&lt;h2 id=&#34;参考文献:c56930a3760ec07c4fc95b46ac55be17&#34;&gt;参考文献&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://about.travis-ci.org/docs/user/getting-started/&#34;&gt;Travis CI Getting started&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>CentOSにJenkinsを入れてみた</title>
          <link>https://blog.eiel.info/blog/2012/09/04/jenkins-on-centos/</link>
          <pubDate>Tue, 04 Sep 2012 22:25:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/09/04/jenkins-on-centos/</guid>
          <description>&lt;p&gt;ちょっと前に(だいぶ前?)にCentOSに &lt;a href=&#34;http://jenkins-ci.org/&#34;&gt;Jenkins&lt;/a&gt; をインストールしてみた。その方法のメモ。&lt;/p&gt;

&lt;p&gt;Jenkinsは継続的インテグレーションを行うためのツールで、
ビルドやテストの自動実行を行い、カバレッジなどの統計データを生成したりするツールです。大規模なプロジェクトになってくるとローカル環境ですべてのテストを実行するのが難しくなってきたりすると便利です。&lt;/p&gt;

&lt;p&gt;具体的なインストール方法ですが&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo yum install java-1.6.0-openjdk
sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo
sudo rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key
sudo yum install jenkins
sudo cp -p /etc/sysconfig/jenkins /etc/sysconfig/jenkins.orig
sudo /sbin/chkconfig jenkins on
sudo /etc/init.d/jenkins start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;といった感じです。JREを何使えばよいのか迷いましたが openJDKにしてみました。
あとは デフォルトーでは ポート &lt;code&gt;8080&lt;/code&gt; で動作するので、 &lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt; へアクセスしたりすればよいです。
&lt;code&gt;/etc/sysconfig/jenkins&lt;/code&gt; をいじりたい場合(ポートを変えたいなど)に備えてコピーもしてあります。&lt;/p&gt;

&lt;p&gt;Jenkinsに関連するデータは &lt;code&gt;/var/lib/jenkins/&lt;/code&gt; に配置されます。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>勢いでhiroshimarbというgemを作った。反省する気なんてあんまりない。</title>
          <link>https://blog.eiel.info/blog/2012/09/02/hiroshimarb-gem/</link>
          <pubDate>Sun, 02 Sep 2012 00:20:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/09/02/hiroshimarb-gem/</guid>
          <description>

&lt;h1 id=&#34;あらまし:cc64a211e92ad66ad65df1b7ee5c3235&#34;&gt;あらまし&lt;/h1&gt;

&lt;p&gt;広島Ruby勉強会で Hiroshima.rbでなにか gem を作りたいですよね。という話を前からちょくちょくしてたので、勢いで作成してみた。実際は反省している。&lt;/p&gt;

&lt;p&gt;gemを公開するといっても、何か機能がないと寂しいので、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hiroshimarb open
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすることで、&lt;a href=&#34;http://hiroshimarb.github.com/&#34;&gt;Hiroshima.rbのウェブサイト&lt;/a&gt; を表示するようにしてみました。&lt;/p&gt;

&lt;p&gt;インストール方法は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem install hiroshimarb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://github.com/hiroshimarb/hiroshimarb-gem&#34;&gt;リポジトリはgithub&lt;/a&gt;にあります。&lt;/p&gt;

&lt;h1 id=&#34;gemの作成方法:cc64a211e92ad66ad65df1b7ee5c3235&#34;&gt;gemの作成方法&lt;/h1&gt;

&lt;p&gt;せっかくなので gem の作成方法というか 本gemを作るにあたって作業内容を書いておきます。&lt;/p&gt;

&lt;h2 id=&#34;プログラムの作成:cc64a211e92ad66ad65df1b7ee5c3235&#34;&gt;プログラムの作成&lt;/h2&gt;

&lt;p&gt;まずはプログラムをかくためにプロジェクトの雛形を作ります。
gemを作りやすい構成になっていると都合がよいです。
&lt;a href=&#34;http://gembundler.com/&#34;&gt;Bundler&lt;/a&gt;の機能を使うと良い感じの雛形がつくれます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ bundle gem hiroshimarb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そうするると &lt;code&gt;hiroshimarb&lt;/code&gt; ディレクトリができますので、&lt;code&gt;README&lt;/code&gt;や &lt;code&gt;hirosihmarb.gemspec&lt;/code&gt; をかきかえます。gemspecの情報をもとにgemが作成されます。summaryやhomepage、 descriptionを書きかえたりしましょう。もちろん &lt;code&gt;hiroshimarb&lt;/code&gt; の部分は自分の都合の良い名前にします。&lt;/p&gt;

&lt;p&gt;あとは適当にプログラムを作成します。
binディレクトリにコマンドを作っておけばコマンドとしてインストールされます。&lt;/p&gt;

&lt;h2 id=&#34;ローカルでためす:cc64a211e92ad66ad65df1b7ee5c3235&#34;&gt;ローカルでためす。&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;*.gemspec&lt;/code&gt;をもとにgem を作成するには&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem build hiroshimarb.gemspec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とします。そうすると &lt;code&gt;hiroshimarb-0.0.1.gem&lt;/code&gt;のようなファイルが作成されます。
あとは&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem install ./hiroshimarb-*.gem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすればインストールできます。&lt;/p&gt;

&lt;h2 id=&#34;rubygems-orgで公開する:cc64a211e92ad66ad65df1b7ee5c3235&#34;&gt;rubygems.orgで公開する。&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ gem install hiroshimarb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、インストール可能にするために &lt;a href=&#34;http://rubygems.org&#34;&gt;rubygems.org&lt;/a&gt;にgemを登録します。&lt;/p&gt;

&lt;p&gt;まずは、sign upをしてアカウントを作成します。作成がおわったら&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem push ./hiroshimarb.*.gem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で送信することできます。
メールアドレスとパスワードを入力して終了です。&lt;/p&gt;

&lt;p&gt;gem をつくるのは簡単です。ぜひぜひ挑戦してみましょう。&lt;/p&gt;

&lt;h2 id=&#34;追記:cc64a211e92ad66ad65df1b7ee5c3235&#34;&gt;追記&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.eiel.info/blog/2012/09/02/hiroshimarb-gem/&#34;&gt;もっと楽ができるらしいです。&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>database.ymlが.gitignoreに入っている環境でのcapistranoを使ったデプロイ</title>
          <link>https://blog.eiel.info/blog/2012/08/31/capistrano-and-database-dot-yml/</link>
          <pubDate>Fri, 31 Aug 2012 11:15:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/08/31/capistrano-and-database-dot-yml/</guid>
          <description>

&lt;p&gt;[2012-09-20日追記] 以下の記事の内容ですが、gemが用意されてました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/amfranz/capistrano_database_yml&#34;&gt;https://github.com/amfranz/capistrano_database_yml&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Railsプロジェクトで、ひとりで開発している場合は除いて、&lt;code&gt;.gitignore&lt;/code&gt;に&lt;code&gt;config/database.yml&lt;/code&gt;を追加することがよくよくあります。この場合、&lt;code&gt;config/database.yml&lt;/code&gt;をどこかのタイミングで作ってやらなければなりません。この対処法は&lt;a href=&#34;http://www.simonecarletti.com/blog/2009/06/capistrano-and-database-yml/&#34;&gt;この記事&lt;/a&gt;で説明されてます。&lt;/p&gt;

&lt;h2 id=&#34;概略:9415db707fd2c7b112b3a5ad42f3ce87&#34;&gt;概略&lt;/h2&gt;

&lt;p&gt;英語だったりするので簡単に説明をかいておきます。
前述の記事の作業を行うと&lt;code&gt;cap&lt;/code&gt;コマンドにふたつのタスクが追加されます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;cap db:setup&lt;/li&gt;
&lt;li&gt;cap db:symlink&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;db:setup&lt;/code&gt;は&lt;code&gt;shared_path&lt;/code&gt;に&lt;code&gt;config/database.yml&lt;/code&gt;に生成してくれます。すでにあると上書きされるので注意が必要です。
&lt;code&gt;db:symlink&lt;/code&gt;は &lt;code&gt;db:setup&lt;/code&gt;で生成した&lt;code&gt;config/database.yml&lt;/code&gt;へsymlinkを貼ります。なので、&lt;code&gt;#{shared_path}/config/database.yml&lt;/code&gt;手で編集しておけば良いということになります。&lt;/p&gt;

&lt;h2 id=&#34;試したときに困ったことなど:9415db707fd2c7b112b3a5ad42f3ce87&#34;&gt;試したときに困ったことなど&lt;/h2&gt;

&lt;p&gt;記載されているコードをコピーして、&lt;code&gt;capistrano_database.rb&lt;/code&gt;を作成するのですが、このファイルをどこに作成すべきなのか記述されていないので、&lt;code&gt;lib&lt;/code&gt;上に作成しました。
&lt;code&gt;lib&lt;/code&gt;は&lt;code&gt;LOAD_PATH&lt;/code&gt;が通ってないのに気付かなくて迷惑をかけました。
&lt;code&gt;config/deploy.rb&lt;/code&gt;に &lt;code&gt;require &amp;quot;capistrano_database&amp;quot;&lt;/code&gt;とするところを&lt;code&gt;require &amp;quot;./lib/capistrano_database&amp;quot;&lt;/code&gt;として回避しました。
ところが、cucumberの実行時のオプションに&lt;code&gt;--require lib&lt;/code&gt;をつけているせいだと思いますが、cucumberの実行時に読み込まれてしまい不具合がでてしまったので、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Capistrano::Configuration.instance.load do
  ....
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;の部分を&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;if instance = Capistrano::Configuration.instance
  instance.load do
    ...
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように変更して回避しました。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>「私はRSpecでテストをこんな感じで書いてる」に少し便乗してみる</title>
          <link>https://blog.eiel.info/blog/2012/08/21/compose-rspec/</link>
          <pubDate>Tue, 21 Aug 2012 19:51:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/08/21/compose-rspec/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/sinsoku/20120820/1345470914&#34;&gt;私はRSpecでテストをこんな感じで書いてる&lt;/a&gt;という良エントリがあったので少し便乗してみます。&lt;/p&gt;

&lt;p&gt;まずは上記の記事を。&lt;/p&gt;

&lt;p&gt;最終的なrspecについてですが、私の場合は以下のような感じにしてます。
といっても、前回もかいたように試行錯誤の毎日です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# -*- coding: utf-8 -*-
require_relative &#39;user&#39;

describe User do
  describe &amp;quot;#admin?&amp;quot; do
    subject { user.admin? }
    let(:user) { User.new(role: role) }

    context &amp;quot;管理者の場合&amp;quot; do
      let(:role) { &#39;admin&#39; }

      it { should be_true }
    end

    context &amp;quot;一般ユーザの場合&amp;quot; do
      let(:role) { nil }

      it { should_not be_true }
    end
  end

  describe &amp;quot;#runnable_system?&amp;quot; do
    subject { user.runnable_system? }
    let(:user) { User.new(name: name) }

    context &amp;quot;管理者がリンディさんの場合&amp;quot; do
      let(:name) { &#39;Lindi&#39; }

      before do
        user.stub!(admin?: true)
      end

      it { should be_true }
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;diffもつけておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@@ -3,30 +3,34 @@
 
 describe User do
   describe &amp;quot;#admin?&amp;quot; do
+    subject { user.admin? }
+    let(:user) { User.new(role: role) }
+
     context &amp;quot;管理者の場合&amp;quot; do
-      before { @admin_user = User.new(role: &#39;admin&#39;) }
+      let(:role) { &#39;admin&#39; }
 
-      subject { @admin_user }
-      it { should be_admin }
+      it { should be_true }
     end
 
     context &amp;quot;一般ユーザの場合&amp;quot; do
-      before { @user = User.new(role: nil) }
+      let(:role) { nil }
 
-      subject { @user }
-      it { should_not be_admin }
+      it { should_not be_true }
     end
   end
 
   describe &amp;quot;#runnable_system?&amp;quot; do
+    subject { user.runnable_system? }
+    let(:user) { User.new(name: name) }
+
     context &amp;quot;管理者がリンディさんの場合&amp;quot; do
+      let(:name) { &#39;Lindi&#39; }
+
       before do
-        @lindi = User.new(name: &#39;Lindi&#39;)
-        @lindi.stub!(admin?: true)
+        user.stub!(admin?: true)
       end
 
-      subject { @lindi }
-      it { should be_runnable_system }
+      it { should be_true }
     end
   end
 end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とりあえず、便乗しやすいように 用意したuser.rbもつけておきます&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User
  def initialize(attributes)
    @attributes = attributes
  end

  def admin?
    @attributes[:role] == &#39;admin&#39;
  end

  def runnable_system?
    self.admin? and @attributes[:name] == &#39;Lindi&#39;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;rspecの実行結果。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;User
  #admin?
    管理者の場合
      should be true
    一般ユーザの場合
      should not be true
  #runnable_system?
    管理者がリンディさんの場合
      should be true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;違いとしては&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;subject&lt;/code&gt; はできるだけ &lt;code&gt;describe &#39;メソッド名&#39;&lt;/code&gt; の直後にかく&lt;/li&gt;
&lt;li&gt;context によって変化する部分は &lt;code&gt;let&lt;/code&gt; で明確にする&lt;/li&gt;
&lt;li&gt;インスタンス変数は使わず&lt;code&gt;let&lt;/code&gt;でなんとかする&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;let&lt;/code&gt;や&lt;code&gt;subject&lt;/code&gt;はネストが深い位置であれば上書きします。
&lt;code&gt;let&lt;/code&gt;を使用した場合は呼ばれない場合、処理されないので少し注意が必要です。&lt;/p&gt;

&lt;h2 id=&#34;subject-はできるだけ-describe-メソッド名-の直後にかく:cee89d4b0b8fabe59aa5cf16d4c13709&#34;&gt;&lt;code&gt;subject&lt;/code&gt; はできるだけ &lt;code&gt;describe &#39;メソッド名&#39;&lt;/code&gt; の直後にかく&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;describe &#39;メソッド名&lt;/code&gt;`内のブロックではテストするブロックが基本的に変化しないのでこの位置に極力かきたいです。
また subjectなので上から読んだときに先に明確にしたいという意図です。&lt;/p&gt;

&lt;h2 id=&#34;context-によって変化する部分は-let-で明確にする:cee89d4b0b8fabe59aa5cf16d4c13709&#34;&gt;context によって変化する部分は &lt;code&gt;let&lt;/code&gt; で明確にする&lt;/h2&gt;

&lt;p&gt;contextの直前だけ切り出してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;context &amp;quot;管理者の場合&amp;quot; do
  let(:role) { &#39;admin&#39; }

context &amp;quot;一般ユーザの場合&amp;quot; do
  let(:role) { nil }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;roleの部分が変化しますよー。ってのがシンプルになります。&lt;/p&gt;

&lt;h2 id=&#34;インスタンス変数は使わず-let-でなんとかする:cee89d4b0b8fabe59aa5cf16d4c13709&#34;&gt;インスタンス変数は使わず&lt;code&gt;let&lt;/code&gt;でなんとかする&lt;/h2&gt;

&lt;p&gt;利点は自分でも整理できてません。とりあえず、今はそういう風にしてる程度です。&lt;/p&gt;

&lt;h2 id=&#34;個人的になやんでること:cee89d4b0b8fabe59aa5cf16d4c13709&#34;&gt;個人的になやんでること&lt;/h2&gt;

&lt;p&gt;日本語でcontextをかくとき 語尾に &lt;code&gt;の場合&lt;/code&gt; とか &lt;code&gt;のとき&lt;/code&gt; とかくことになるのですが、なんかこれがめんどくさいし。英語の場合は大抵先頭に &lt;code&gt;when&lt;/code&gt; ってかかれているようです。いっそここだけ英語にしようかなーとか悩んでます。&lt;/p&gt;

&lt;h1 id=&#34;個人的に追加したいリンク:cee89d4b0b8fabe59aa5cf16d4c13709&#34;&gt;個人的に追加したいリンク&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://www.relishapp.com/rspec&#34;&gt;https://www.relishapp.com/rspec&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;公式サイトからもリンクがありますが、
ここには cucumberによって生成されるHTMLがあります。
Rdocより説明が詳しい部分がいろいろあります。&lt;/p&gt;

&lt;h1 id=&#34;最近のrspecの日本語の話題すくなくね:cee89d4b0b8fabe59aa5cf16d4c13709&#34;&gt;最近のrspecの日本語の話題すくなくね？&lt;/h1&gt;

&lt;p&gt;ということでみんないろいろ情報交換したいです。&lt;/p&gt;

&lt;h1 id=&#34;ひとりごと:cee89d4b0b8fabe59aa5cf16d4c13709&#34;&gt;ひとりごと&lt;/h1&gt;

&lt;p&gt;あー、トラックバックとばす、良い方法ないかなー。&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-jp.amazon.co.jp/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;nou=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=666666&amp;t=eiel-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4798121932&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Railsでコントローラのスペックを試行錯誤中</title>
          <link>https://blog.eiel.info/blog/2012/08/09/rspec-for-rails-controller/</link>
          <pubDate>Thu, 09 Aug 2012 23:42:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/08/09/rspec-for-rails-controller/</guid>
          <description>

&lt;p&gt;Rspec書いてますか？最近なかなか荒れ気味ですが、僕はなんだかんだで嫌いじゃないです。
コントローラのテストは何をすべきかなかなか難しいです。&lt;/p&gt;

&lt;p&gt;こんな感じでどうかなーというのを一応紹介しておきます。&lt;/p&gt;

&lt;h1 id=&#34;何をテストするか:12a8138a16f445e446aa7b1b9f6da6be&#34;&gt;何をテストするか&lt;/h1&gt;

&lt;p&gt;基本的には rspec を走られせるとこのコントローラが何をするのかわかるようにすることです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;どのアクションがどのHTTPメソッドを受けるのか&lt;/li&gt;
&lt;li&gt;どんな変数をビューに渡すのか&lt;/li&gt;
&lt;li&gt;リダイレクトするのか、しないのか&lt;/li&gt;
&lt;li&gt;どんなflashが設定されるのか&lt;/li&gt;
&lt;li&gt;前提とする状況はなにか&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といったあたりがわかるようにしています。&lt;/p&gt;

&lt;h2 id=&#34;どのアクションがどのhttpメソッドを受けるのか:12a8138a16f445e446aa7b1b9f6da6be&#34;&gt;どのアクションがどのHTTPメソッドを受けるのか&lt;/h2&gt;

&lt;p&gt;これは単純にdescribeにかくだけですが、コード上ではlet式を利用して request という変数にバインドしてちょっとだけ目立つようにしています。&lt;/p&gt;

&lt;h2 id=&#34;どんな変数をビューに渡すのか:12a8138a16f445e446aa7b1b9f6da6be&#34;&gt;どんな変数をビューに渡すのか&lt;/h2&gt;

&lt;p&gt;ビューに渡す値はインスタンス変数に入れますが、どの変数にどんな型の値が入るのかテストしています。
ビューを先にかくことが多いのでその際にpendingにして追加していくとコントローラかくときにビューの確認をする必要がありません。
あと、before_filterのようなものを利用しているの、その中で勝手にバインドするものがあるのでこれを明確にしてやったりします。&lt;/p&gt;

&lt;h2 id=&#34;リダイレクトするのか-しないのか:12a8138a16f445e446aa7b1b9f6da6be&#34;&gt;リダイレクトするのか、しないのか&lt;/h2&gt;

&lt;p&gt;対応するビューがあるのかないのか、うまくいくのどこの画面にいくのかが明確になるのでかいておきます。&lt;/p&gt;

&lt;h2 id=&#34;どんなflashが設定されるのか:12a8138a16f445e446aa7b1b9f6da6be&#34;&gt;どんなflashが設定されるのか&lt;/h2&gt;

&lt;p&gt;これは変数の場合とだいたい一緒です。ビューではなく cucumber でのテストとの橋渡しな感じもあります。私はcucumberでは成功したらこの値が出てるのか確認してます。&lt;/p&gt;

&lt;h2 id=&#34;前提とする状況はなにか:12a8138a16f445e446aa7b1b9f6da6be&#34;&gt;前提とする状況はなにか&lt;/h2&gt;

&lt;p&gt;ログインしている場合なのか、とかです。contextのブロックが増えるだけです。&lt;/p&gt;

&lt;h1 id=&#34;それらを踏まえて上での雛形:12a8138a16f445e446aa7b1b9f6da6be&#34;&gt;それらを踏まえて上での雛形&lt;/h1&gt;

&lt;p&gt;コメントは解説のために。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;describe HogeController do
  subject { request }

  describe &amp;quot;GET &#39;index&#39;&amp;quot; do
    let(:request) { get :index, params }
    let(:params) { { hoge: &amp;quot;mogumogu&amp;quot;} }

    context &amp;quot;ログインしている時&amp;quot; do
      include_context &amp;quot;ログイン&amp;quot;

      # リダイレクトなどしない場合
      it { should be_success }

      context &amp;quot;リクエストした時&amp;quot; do
        # これをやらないとこの先のブロックが1行な it でかけない
        before(:each) { request }

        # ビューへ渡す変数のの確認
        describe &amp;quot;@hoge&amp;quot; do
          subject { assigns :hoge }
          it { should be_kind_of(Hoge) }
        end

        # flashの確認
        describe &amp;quot;flash[:notice]&amp;quot; do
          subject { flash[:notice] }
          it { should eq(&amp;quot;hoge&amp;quot;) }
        end
      end
    end

    context &amp;quot;ログインしていない時&amp;quot; do
      # リダイレクトする場合
      it { should redirecto_to(&amp;quot;/hoge&amp;quot;) }
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;といった感じに書いてます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;describe &amp;quot;@hoge&amp;quot; do
 subject { assigns :hoge }
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と、かくのはめんどくさいので&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;describe_assigns :hoge do
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と、かけるようにしてたりするのですが、それはまた別の話。&lt;/p&gt;

&lt;p&gt;個人的にどうにかしたいのば be_success マッチャー。失敗した場合に falseとでちゃうだけなので、statusコードなどを出すとデバッグも楽になりそうです。&lt;/p&gt;

&lt;p&gt;あとは be_kind_of も結構微妙な出力をするので悩み中。リストの時もなんとかしたいです。&lt;/p&gt;

&lt;p&gt;あとは単体テストのようで、対応するビューがなかったりすると動かなかったりするのはなんとかしたいです。(なんとかなってた気がするんだけどなぁ。)&lt;/p&gt;

&lt;p&gt;Railsのテストについて話し合う人が周りにいないので、誰かお話ししましょう。ヘルプミー。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Pryでエイリアスを作成する</title>
          <link>https://blog.eiel.info/blog/2012/08/04/alias-on-pry/</link>
          <pubDate>Sat, 04 Aug 2012 22:03:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/08/04/alias-on-pry/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;http://pryrepl.org&#34;&gt;pry&lt;/a&gt;便利ですね。
&lt;code&gt;edit-method&lt;/code&gt;をよくつかいます。
ファイル開くためだけに使うときもあります。&lt;/p&gt;

&lt;p&gt;だんだん、&lt;code&gt;edit-method&lt;/code&gt;ってかくのがめんどくさくなってきたので、&lt;code&gt;em&lt;/code&gt; あたりで利用したくなってきたので、やりかたを調べました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Pry.config.commands.alias_command &amp;quot;em&amp;quot;, &amp;quot;edit-method&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じらしいです。第1引数が作成するエイリアス。第2引数が元のコマンドです。&lt;/p&gt;

&lt;p&gt;pryの起動時の読み込みファイルは&lt;code&gt;~/.pryrc&lt;/code&gt;なので、そこにかいてやればOKです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ActiveRecordで今のスコープをそのまま返したい</title>
          <link>https://blog.eiel.info/blog/2012/08/01/active-recode-scoped/</link>
          <pubDate>Wed, 01 Aug 2012 11:37:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/08/01/active-recode-scoped/</guid>
          <description>&lt;p&gt;あるオプションパラメータがあるかどうかで、条件が変わるような処理を書いてると、オプションがない場合、ActiveRecord::Relationが欲しくなるような場面があります。&lt;/p&gt;

&lt;p&gt;例えば&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;@articles = Article
@articles = @articles.where(valid: true) if params[:valid]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;みたいな感じになっちゃって&lt;code&gt;@articles = Article&lt;/code&gt;って何?な状態になります。&lt;/p&gt;

&lt;p&gt;メソッド化しようとするとさらに困るのですが、scopedを使うと以下のように書けるようです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;@articels = Article.scoped
@articles = @articles.where(valid: true) if params[:valid]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なんか異臭がしなくなりましたね。&lt;/p&gt;

&lt;p&gt;だから、どうした？って思う方もいるかもしれませんがメソッド化すると、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def self.valid(is_valid = nil)
  scoped.where(valid: true) if is_valid
  scoped
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となります。&lt;code&gt;scoped&lt;/code&gt;なしで書かこうとするとちょっと困ります。&lt;/p&gt;

&lt;p&gt;そんだけ。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>AngularJSで遊んだときのメモ</title>
          <link>https://blog.eiel.info/blog/2012/07/26/angularjs-abc/</link>
          <pubDate>Thu, 26 Jul 2012 15:58:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/07/26/angularjs-abc/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://hwebsys.eshima.info/&#34;&gt;広島ウェブシステム開発勉強会&lt;/a&gt;で、&lt;a href=&#34;http://angularjs.org/&#34;&gt;AngularJS&lt;/a&gt;で遊んだのでそのメモ。&lt;/p&gt;

&lt;h2 id=&#34;angularjsってなんぞ:f2315f44927736f1aa49cb0fc5ccb712&#34;&gt;AngularJSってなんぞ&lt;/h2&gt;

&lt;p&gt;Googleとコミュニティによって開発されているWebアプリケーション作成のためのフレームワークらしいです。Googleという名がでてくるように、保守性の高そうな設計がしてある印象を受けました。非常に使いやすかったです。
DOM操作が必要にならない工夫もしてある印象。&lt;/p&gt;

&lt;p&gt;特徴としては、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;規約をもちいた、ViewとModelの自動化と knockoutJSのようにモデルの変更を検知して自動的に画面が更新される&lt;/li&gt;
&lt;li&gt;mix-inのようにコントローラへ機能を追加でき、引数からオブジェクトをうけとることで、スコープの制限をしていること&lt;/li&gt;
&lt;li&gt;htmlに埋め込まれる式は Javascriptではなく、AngularJSのDSLでシェルのパイプのような流れるようなコードが記述できる&lt;/li&gt;
&lt;li&gt;コンポーネント化しやすい構造&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なのかなぁ。印象ですが。スコープをうまく設計してあると思いました。&lt;/p&gt;

&lt;h2 id=&#34;angular:f2315f44927736f1aa49cb0fc5ccb712&#34;&gt;Angular&lt;/h2&gt;

&lt;p&gt;日本語の意味は角度っぽいです。由来が全然検討がつきません。&lt;/p&gt;

&lt;h2 id=&#34;チュートリアルをひととおりやってみました:f2315f44927736f1aa49cb0fc5ccb712&#34;&gt;チュートリアルをひととおりやってみました。&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.angularjs.org/tutorial/&#34;&gt;http://docs.angularjs.org/tutorial/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;github で公開されてるサンプルコードを追っていきます。
node.js は必須ではないです。Mac では pkg が用意されていて簡単にインストールできるのでいれてしまったほうが楽だと思います。&lt;/p&gt;

&lt;p&gt;以下、 各章のメモです。
step ごとの diff をみながらすすめぬのがよさそうです。
見ている step を checkout して&lt;code&gt;git show&lt;/code&gt; などなど。&lt;/p&gt;

&lt;h3 id=&#34;step0-bootstrap:f2315f44927736f1aa49cb0fc5ccb712&#34;&gt;step0 bootstrap&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ git checkout -f step-0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;して&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ scripts/web-server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でサーバが起動する
&lt;a href=&#34;http://localhost:8000/app/index.html&#34;&gt;http://localhost:8000/app/index.html&lt;/a&gt;
にアクセスすると Nothing here yet! と表示される。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ng-app 命令&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html ng-app&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Angular Application のルート要素を指定する&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;二重の波括弧内に式がかける&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;{{&#39;hoge&#39;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;かける式は Angular Expression であって JavaScriptではないらしい
ng-appの指定したモジュールを DOMContentLoaded イベント時に自動で読込む&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;手動でよみたい場合は&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;
angular.element(document).ready(function() {
   angular.bootstrap(document);
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;他の人がはまったポイント:f2315f44927736f1aa49cb0fc5ccb712&#34;&gt;他の人がはまったポイント&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Javaばっかりしてるせいで localhost:8000を localhost:8080 でアクセスしていた。&lt;/li&gt;
&lt;li&gt;script/web-server.jsを プロジェクトルートで起動せず、index.htmlにアクセスできなかった&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;step1-static-template:f2315f44927736f1aa49cb0fc5ccb712&#34;&gt;step1 static Template&lt;/h3&gt;

&lt;p&gt;HTMLが普通にかけるねってことだった&lt;/p&gt;

&lt;h3 id=&#34;step2-angular-template:f2315f44927736f1aa49cb0fc5ccb712&#34;&gt;step2 Angular Template&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;直接埋め込んでいたデータをcontroller.jsに移動。&lt;/li&gt;
&lt;li&gt;コントローラはなにもしないけど、変数の割り当てをする。&lt;/li&gt;
&lt;li&gt;ちゃんとコントローラごとにバインディングされてる(すごくいい!)&lt;/li&gt;
&lt;li&gt;jasmineのサンプルもあってすごくいい&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;step3-filterrepeat:f2315f44927736f1aa49cb0fc5ccb712&#34;&gt;step3 FilterRepeat&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;inputタグでng-model属性を指定すると変数に代入されとりだせる&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;two-way-data-binding:f2315f44927736f1aa49cb0fc5ccb712&#34;&gt;Two-way Data Binding&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;orderByを使用するとモデルの並び変えができる&lt;/li&gt;
&lt;li&gt;プロパティ名を指定するだけ&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;xhrs-dependency-injection:f2315f44927736f1aa49cb0fc5ccb712&#34;&gt;XHRs &amp;amp; Dependency Injection&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;$httpを使ってhttpアクセスができる&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JSONを取得する場合は $http.json というのがある
&lt;a href=&#34;http://docs.angularjs.org/api/ng.$http#jsonp&#34;&gt;http://docs.angularjs.org/api/ng.$http#jsonp&lt;/a&gt;
callbackには JSON_CALLBACKを指定すること&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;$が先頭につくオブジェクトは特殊なオブジェクトっぽい。Rootオブジェクトにあるオブジェクトを共有してる感じ&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;それを渡すかどうかは別に宣言するみたいだけど、ある程度暗黙になってる？&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;templating-links-images:f2315f44927736f1aa49cb0fc5ccb712&#34;&gt;Templating Links &amp;amp; Images&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ng-srcを利用すると画像のURLから表示できる&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;routing-multiple-views:f2315f44927736f1aa49cb0fc5ccb712&#34;&gt;Routing &amp;amp; Multiple Views&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;複雑になってきたので分離しようという章&lt;/li&gt;
&lt;li&gt;詳細ページも用意する作業をします。&lt;/li&gt;
&lt;li&gt;$routeProbiderにルーティングを設定

&lt;ul&gt;
&lt;li&gt;URLに対しコントローラとテンプレートの関係を定義する&lt;/li&gt;
&lt;li&gt;ng-app属性にmodule名を指定することで読込むモジュールを指定できる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;more-templating:f2315f44927736f1aa49cb0fc5ccb712&#34;&gt;More Templating&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;$routeParamsにルーティングによって代入される値が保持される railsでいうと paramsになります。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;filterの作成方法:f2315f44927736f1aa49cb0fc5ccb712&#34;&gt;Filterの作成方法&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;自前のフィルターを作成する方法&lt;/li&gt;
&lt;li&gt;モジュールを作成して filter関数を使用して定義することになる&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;event-handlers:f2315f44927736f1aa49cb0fc5ccb712&#34;&gt;Event Handlers&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;クリックされたときの処理を追加&lt;/li&gt;
&lt;li&gt;コントローラにメソッド追加して ng-click属性で呼び出し。オリジナルのプロパティを使うことでラッピングできてる。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;rest-and-custom-serviwe:f2315f44927736f1aa49cb0fc5ccb712&#34;&gt;REST and Custom Serviwe&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;angular-resource.jsを読込むとRESTfulなAPIにアクセスできる&lt;/li&gt;
&lt;li&gt;$resourceを使って Resourceを定義していく。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;まとめ:f2315f44927736f1aa49cb0fc5ccb712&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;仕組みのなんだかわかりやすく、そこが見えていれば、AngularJS使ってるコードはよみやすそうでした。
HTMLをデザイナーが読めるかどうかが要めになりそうです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Ruyb on Railsにて render を before_filterとかafter_filterで読んだら酷い目にあった</title>
          <link>https://blog.eiel.info/blog/2012/07/12/render-on-filter-ror/</link>
          <pubDate>Thu, 12 Jul 2012 15:22:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/07/12/render-on-filter-ror/</guid>
          <description>&lt;p&gt;コントローラ内デいろんなところで同じrenderを書いてたのでリファクタリングしようと思った。&lt;/p&gt;

&lt;p&gt;そんなわけで &lt;code&gt;after_filter&lt;/code&gt; を利用して render を呼んでみましたが、actionの処理がすでに終了してるようで、 &lt;strong&gt;renderは一度呼んでるよ!&lt;/strong&gt; って怒られました。&lt;/p&gt;

&lt;p&gt;仕方なく &lt;code&gt;before_filter&lt;/code&gt; で呼んだら、action内に入る前にレンダリングしてしまって、&lt;strong&gt;@hogehoge がnilやねーんって怒らました。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;とりあえず、あきらめることにしました。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>nginxの最新版を Debian squeezeで</title>
          <link>https://blog.eiel.info/blog/2012/07/11/nginx-on-debian/</link>
          <pubDate>Wed, 11 Jul 2012 14:19:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/07/11/nginx-on-debian/</guid>
          <description>&lt;p&gt;nginxはいままでソースからビルドしてたんですが、公式でパッケージ配布されてるのでいい加減aptでインストールできるようにしました。特に特殊なこともしてなかったですし。&lt;/p&gt;

&lt;p&gt;gpgのキーが必要なので登録します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget http://nginx.org/keys/nginx_signing.key
sudo apt-key add nginx_signing.key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sources.listにsourceを追加します。&lt;/p&gt;

&lt;p&gt;``` bash /etc/apt/sources.list.d/nginx.list
deb &lt;a href=&#34;http://nginx.org/packages/debian/&#34;&gt;http://nginx.org/packages/debian/&lt;/a&gt; squeeze nginx
deb-src &lt;a href=&#34;http://nginx.org/packages/debian/&#34;&gt;http://nginx.org/packages/debian/&lt;/a&gt; squeeze nginx&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
`/etc/apt/sources.list.d/`で設定する場合ファイル名の接尾語が.listである必要があります。


あとはupdateしてsafe-upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$ sudo aptitude update
$ sudo aptitude safe-upgrade&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
/etc/nginx/conf.d/に設定を移動して

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$ sudo /etc/init.d/nginx configtest&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
でOKがでれば

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$ sudo /etc/init.d/nginx start
```&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ruby-debugからpryを起動する</title>
          <link>https://blog.eiel.info/blog/2012/07/05/debugger-on-pry/</link>
          <pubDate>Thu, 05 Jul 2012 14:44:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/07/05/debugger-on-pry/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;https://github.com/pry/pry&#34;&gt;Pry&lt;/a&gt;便利です。&lt;/p&gt;

&lt;p&gt;スクリプト上で debugger をかいておくとそこでデバッガ(rdb)を起動できますが、&lt;code&gt;debugger-pry&lt;/code&gt;をインストールしておくと&lt;code&gt;pry&lt;/code&gt;コマンドが追加されて&lt;code&gt;pry&lt;/code&gt;を起動できます。
Gemfileに書く場合は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &amp;quot;debugger-pry&amp;quot;, :require =&amp;gt; &amp;quot;debugger/pry&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最近のRailsのGemfile&lt;/p&gt;

&lt;p&gt;{% gist 3051612 %}&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Rspecマッチャー rspec-html-matchersを試してみてる</title>
          <link>https://blog.eiel.info/blog/2012/06/22/rspec-html-matchers/</link>
          <pubDate>Fri, 22 Jun 2012 18:04:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/06/22/rspec-html-matchers/</guid>
          <description>&lt;p&gt;Ruby on Railsで ViewやHelperの Specを書く際に利用するマッチャーに良いのがないか探してます。現在のRspecはcontainぐらいしかないので、細かくチェックしたい場合は若干使いづらいです。というわけで、&lt;a href=&#34;https://github.com/kucaahbe/rspec-html-matchers&#34;&gt;rspec-html-matchers&lt;/a&gt;を試しています。&lt;/p&gt;

&lt;p&gt;以前は &lt;a href=&#34;https://github.com/dcuddeback/rspec-tag_matchers&#34;&gt;rspec-tag_matchers&lt;/a&gt; を使用していたのですが、出力がちょっとイマイチでした。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;www.ruby-toolbox.com&#34;&gt;Ruby Tools&lt;/a&gt;でざらざらと探した結果、&lt;a href=&#34;https://github.com/kucaahbe/rspec-html-matchers&#34;&gt;rspec-html-matchers&lt;/a&gt;を試してみることにしました。&lt;/p&gt;

&lt;p&gt;Form用のマッチャーがいろいろあったり、内部に存在するタグをチェックしたりできるのが嬉しいですね。capybaraの&lt;code&gt;have_css&lt;/code&gt;はsubject側で find(selector)しておく必要があるので、ややめんどくさいです。&lt;/p&gt;

&lt;p&gt;いまのところの不満点は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hashで渡していくのがちょっと格好悪い&lt;/li&gt;
&lt;li&gt;正規表現での属性チェックができなかった&lt;/li&gt;
&lt;li&gt;暗黙的なsubjectを使用する場合、ブロックがあると不具合がでる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3番目なんですが、have_tag マッチャーにブロックを渡し場合 shouldメソッドのレシーバをかかないと、ブロック内へと処理が流れないようです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;subject { render }
it do
  should have_tag(&amp;quot;a&amp;quot;) do
    # このブロック処理が走らない
    with_tag(&amp;quot;b&amp;quot;)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように書いてしまうと &lt;code&gt;with_tag(&amp;quot;b&amp;quot;)&lt;/code&gt; の部分が動作しません。3行目を明示的に &lt;code&gt;subject.should&lt;/code&gt;とすると動いてくれました。rspecの問題なのか、rspec-html-matchersの問題なのか切りわけが難しいのでとりあえず、我慢することにしました。
ブロックを渡さない場合は大丈夫です。&lt;/p&gt;

&lt;p&gt;他は良好に使えています。
View Specの良い例が欲しいです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Xcodeのテンプレート</title>
          <link>https://blog.eiel.info/blog/2012/06/18/xcode-template/</link>
          <pubDate>Mon, 18 Jun 2012 18:03:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/06/18/xcode-template/</guid>
          <description>&lt;p&gt;Xcodeが genarate する templateですが、
いつもかきかえる部分があるのでなんとかしたいなーっておもっててしらべたら&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://akisute.com/2009/06/xcode.html&#34;&gt;http://akisute.com/2009/06/xcode.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;にかかれているんですが、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というディレクトリはすでにありません。&lt;/p&gt;

&lt;p&gt;現在は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あたりにあるようです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>iOS24h Vol.1でCocoaPodsの紹介をした</title>
          <link>https://blog.eiel.info/blog/2012/06/17/ios24h-vol1/</link>
          <pubDate>Sun, 17 Jun 2012 18:01:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/06/17/ios24h-vol1/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;http://ios24h.net/&#34;&gt;iOS24h&lt;/a&gt;という ustream番組で午前3時にCocoaPodsについてしゃべりました。&lt;/p&gt;

&lt;p&gt;CocoaPodsはObjective-C用のBunlderみたいなものです。&lt;/p&gt;

&lt;p&gt;スライドを下記にあります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/iOS24h-vol1&#34;&gt;http://eiel.github.com/iOS24h-vol1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;impress.jsを使用してみたけどたいへん時間をつかったので次も使うか悩む…。
気合をいれて臨んだ割に人がいなかったかなー。&lt;/p&gt;

&lt;p&gt;その他の資料は&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eiel/iOS24h-vol1&#34;&gt;https://github.com/eiel/iOS24h-vol1&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>gitx --all</title>
          <link>https://blog.eiel.info/blog/2012/06/13/gitx-all/</link>
          <pubDate>Wed, 13 Jun 2012 18:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/06/13/gitx-all/</guid>
          <description>

&lt;p&gt;skypeでgitの説明していたときに &lt;code&gt;gitxa&lt;/code&gt; って何？と問われた。単なる&lt;code&gt;gitx --all&lt;/code&gt; のエイリアスです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alias gitxa=&amp;quot;gitx -all&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;gitx:c32972e1436eedac8aff6c4ae59310c2&#34;&gt;Gitx&lt;/h1&gt;

&lt;p&gt;Mac用のgitクライアントツールに&lt;a href=&#34;http://gitx.frim.nl/&#34;&gt;Gitx&lt;/a&gt;というものがあるのですが、コミットの機能なども備えていますが、私は&lt;code&gt;gitk&lt;/code&gt;コマンドの代替として利用しています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://media.tumblr.com/tumblr_m5jh47eL8d1qk2e7q.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ただし、Gitxをインストールしただけでは &lt;code&gt;gitx&lt;/code&gt; コマンドは使用できません。Gitxのメニュー内のEnabble Terminal Usaeg&amp;hellip; をクリックすることで利用できるようになります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://media.tumblr.com/tumblr_m5jhgcOZxD1qk2e7q.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gitx&lt;/code&gt;を引数になにもなしで、呼びだした場合、checkout している branchを表示します。&lt;code&gt;--all&lt;/code&gt;を使用すると&lt;code&gt;all branches&lt;/code&gt;を選択した状態になります。
他にもときどき便利なのは &lt;code&gt;gitx ブランチ名&lt;/code&gt; や &lt;code&gt;gitx -- ファイル名&lt;/code&gt; などがあります。gitkを使う場合はさらにいろいろできます。詳細は &lt;code&gt;man gitk&lt;/code&gt; にて。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>funtooメモ grubの設定</title>
          <link>https://blog.eiel.info/blog/2012/06/09/funtoo-memo-grub/</link>
          <pubDate>Sat, 09 Jun 2012 17:59:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/06/09/funtoo-memo-grub/</guid>
          <description>&lt;p&gt;funtooのメモ&lt;/p&gt;

&lt;p&gt;grubの設定は &lt;code&gt;/etc/boot.conf&lt;/code&gt; を雛形に作成される。
変更後は&lt;code&gt;boot-update&lt;/code&gt;で &lt;code&gt;/boot/grub.cfg&lt;/code&gt; を生成してくれます。&lt;/p&gt;

&lt;p&gt;新しいkernelを &lt;code&gt;/boot&lt;/code&gt; に配置したときも自動的に生成された印象があるんだけど、あれはどうなってんだろう。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>プログラムミングにおけるモナドと圏論との対応。</title>
          <link>https://blog.eiel.info/blog/2012/06/07/monad-memo/</link>
          <pubDate>Thu, 07 Jun 2012 17:57:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/06/07/monad-memo/</guid>
          <description>&lt;p&gt;説明するわけではないです。メモです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Kleisli圏&lt;/code&gt; をキーワードに調べると気になるということがわかったのでメモしておきます。&lt;/p&gt;

&lt;p&gt;その中で気になったもの&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tnomura9.exblog.jp/12138525/&#34;&gt;tnomuraのブログのブログ - モナドのKleisli圏&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://takeichi.ipl-lab.org/~hamana/local/monad2.pdf&#34;&gt;関数型プログラマのためのモナド理論&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/m-hiyama/20060821/1156120185&#34;&gt;はじめての圏論 その第1歩&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;単にHaskellをするのに圏論の理解は不要です。使うだけなら馴れるだけで十分だと思います。モナドの表現力がどのようなところまであるのか、そのあたりを知りたいのです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>magit-brame-modeの表示がみやすかった件</title>
          <link>https://blog.eiel.info/blog/2012/05/30/magit-blame-mode/</link>
          <pubDate>Wed, 30 May 2012 17:55:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/05/30/magit-blame-mode/</guid>
          <description>&lt;p&gt;共同作業ないし、自分が書いたコードでも&lt;strong&gt;ここ変更したのいつだっけ&lt;/strong&gt;ってことあると&lt;code&gt;git blame&lt;/code&gt;を利用するんですが、emacs の magit についてる magit-brame-mode がみやすくて感動しました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git blame&lt;/code&gt;がどのようなことをしてくれるのかは github でも特定のファイルを選択したときにもみることができます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://media.tumblr.com/tumblr_m4th98QljM1qk2e7q.jpg&#34; alt=&#34;github blame&#34; /&gt;&lt;/p&gt;

&lt;p&gt;押すとこんな感じ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://media.tumblr.com/tumblr_m4thgjx4eq1qk2e7q.jpg&#34; alt=&#34;github de blame&#34; /&gt;&lt;/p&gt;

&lt;p&gt;すっきりみやすい。&lt;/p&gt;

&lt;p&gt;端末で &lt;code&gt;$ git blame conf/50-ruby.el&lt;/code&gt; するとこんな感じ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://media.tumblr.com/tumblr_m4thlzshOW1qk2e7q.jpg&#34; alt=&#34;端末&#34; /&gt;&lt;/p&gt;

&lt;p&gt;文字ばっかり。&lt;/p&gt;

&lt;p&gt;git-emacsの &lt;code&gt;M-x git-blame-mode&lt;/code&gt; だとこんな感じ&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://media.tumblr.com/tumblr_m4throQoHf1qk2e7q.jpg&#34; alt=&#34;git-emacs&#34; /&gt;&lt;/p&gt;

&lt;p&gt;カラフル。細かい情報はミニバファにでます。そのまま編集できるのはナイスなのかもしれない。(重いですけど&lt;/p&gt;

&lt;p&gt;magitの &lt;code&gt;M-x magit-blame-mode&lt;/code&gt; だとこんな感じ&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://media.tumblr.com/tumblr_m4thwdwoK61qk2e7q.jpg&#34; alt=&#34;magit&#34; /&gt;&lt;/p&gt;

&lt;p&gt;あれ、なんかみやすさが伝わない…。
80列におさまるのは嬉しいですね。&lt;/p&gt;

&lt;p&gt;ゆっくりみる分には github が一番いんじゃないかということいわれてしまいそうです。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>iOSでFacebookAPIへのアクセス</title>
          <link>https://blog.eiel.info/blog/2012/05/11/ios-for-facebook/</link>
          <pubDate>Fri, 11 May 2012 17:30:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/05/11/ios-for-facebook/</guid>
          <description>&lt;p&gt;最小限のサンプルを作成してみました。&lt;/p&gt;

&lt;p&gt;FacebookのSDKいたれりつくせりでそれなりに簡単。
&lt;a href=&#34;https://github.com/eiel/iOS-FacebookAPISapmle&#34;&gt;https://github.com/eiel/iOS-FacebookAPISapmle&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>redmine-1.4系に更新してruby1.9で動かそうとしてはまったこと</title>
          <link>https://blog.eiel.info/blog/2012/05/10/redmine1-dot-4-on-ruby1-dot-9/</link>
          <pubDate>Thu, 10 May 2012 17:00:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/05/10/redmine1-dot-4-on-ruby1-dot-9/</guid>
          <description>&lt;p&gt;mysqlがよめないっていわれた。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;cannot load such file &amp;ndash; mysql (MissingSourceFile)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;bundle installすると mysql2がはいるのであたりまえなんだけど、なんでかなー。
と考えた結果 &lt;code&gt;config/database.yml&lt;/code&gt;でadapterを&lt;code&gt;mysql&lt;/code&gt;にしてるからだ！と気づいて&lt;code&gt;mysql2&lt;/code&gt;にかきかえました。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>gmailで未読メールの探し方</title>
          <link>https://blog.eiel.info/blog/2012/05/02/unread-gmail/</link>
          <pubDate>Wed, 02 May 2012 16:58:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/05/02/unread-gmail/</guid>
          <description>&lt;p&gt;gmailで未読メールをさがすには、検索ボックスで、&lt;/p&gt;

&lt;p&gt;&lt;code&gt;is:unread&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;と入力すれば未読メールだけを検索できます。
ラベルにずっと未読マークの(1)がついてて邪魔だなーっておもってたんですが、消すことができました。
検索ボックスの仕様ももうちょっと把握したいですね。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Helmをインストールしてみた</title>
          <link>https://blog.eiel.info/blog/2012/04/04/install-helm/</link>
          <pubDate>Wed, 04 Apr 2012 11:25:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/04/04/install-helm/</guid>
          <description>&lt;p&gt;anythingのフォークである&lt;a href=&#34;https://github.com/emacs-helm/helm&#34;&gt;helm&lt;/a&gt;を試してみた。
試した環境は GNU Emacs 24.0.94.1 (x86_64-apple-darwin11.3.0, NS apple-appkit-1138.32) of 2012-03-25&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;具合がわるくなってしまう設定&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;(set-file-name-coding-system &#39;utf-8-hfs)
(setq local-coding-system &#39;utf-8-hfs)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;utf-8-hfsを設定してるとhelmのロードがおわらなくなった。何かを収集中に無限ループに落ちいる模様。anythingにできて、helmにできないことはまだまだたくさんあるので、しばらくanythingと共存させてみます。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>MacでInput Methodを作成するときの注意点。</title>
          <link>https://blog.eiel.info/blog/2012/03/23/input-method-for-macosx/</link>
          <pubDate>Fri, 23 Mar 2012 11:22:00 &#43;0900</pubDate>
          <author>Tomohiko Himura</author>
          <guid>https://blog.eiel.info/blog/2012/03/23/input-method-for-macosx/</guid>
          <description>&lt;ul&gt;
&lt;li&gt;Bundle IDが inputmethod を含んでいなければ言語とテキストの環境設定に表示されない。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    

  </channel>
</rss>
